{
    "docs": [
        {
            "location": "/", 
            "text": "Getting started with Branch\n\n\nMobile Linking and Attribution Platform\n\n\nBranch offers hosted, branded short links packed with 3 key value props:\n\n\n\n\nBest in class deep linking that supports all major standards (Universal Links, Android App Links, URI schemes and more) that are fully customizable with every configuration you might want.\n\n\nCross platform attribution (desktop web, mobile web \n app) of custom events back to the original source for complete insight into the performance of your campaigns.\n\n\nSeamless integrations into your existing workflow, from integrations into email providers, ad networks or data analytics solutions.", 
            "title": "Getting started"
        }, 
        {
            "location": "/#getting-started-with-branch", 
            "text": "", 
            "title": "Getting started with Branch"
        }, 
        {
            "location": "/#mobile-linking-and-attribution-platform", 
            "text": "Branch offers hosted, branded short links packed with 3 key value props:   Best in class deep linking that supports all major standards (Universal Links, Android App Links, URI schemes and more) that are fully customizable with every configuration you might want.  Cross platform attribution (desktop web, mobile web   app) of custom events back to the original source for complete insight into the performance of your campaigns.  Seamless integrations into your existing workflow, from integrations into email providers, ad networks or data analytics solutions.", 
            "title": "Mobile Linking and Attribution Platform"
        }, 
        {
            "location": "/pages/dashboard/integrate/", 
            "text": "Basic integration\n\n\n\n\n\n\nUnderstand the Branch Key\n\n\n\n\nGo to \nAccount settings\n on the Branch Dashboard\n\n\nBranch Keys\n allow you to interact with your Branch SDKs and create deep links\n\n\nThese keys are unique to your Branch app\n\n\n\n\nNever expose your \nBranch Secret\n as it can be maliciously used\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure default behavior\n\n\n\n\n\n\nSet the default behavior for your deep links on \nLink Settings\n\n\n\n\n\n\nThese values are typically overridden by \nCustom link behavior\n for each deep link\n\n\n\n\n\n\niOS\n\n\n\n\n\n\nUse these settings to control the default behavior of your deep links on iOS\n\n\n\n\n\n\n\n\nThe Apple App Prefix is found within the \nApple Developer Portal\n for your app\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nUse these settings to control the default behavior of your deep links on Android\n\n\n\n\n\n\nPlay Store is for published apps, if your app cannot be located or is a local/dev build, please use the Custom URL option\n\n\n\n\n\n\n\n\nGenerate a SHA256 Cert Fingerprint\n\n\n\n\nNavigate to your \nkeystore file\n (used to build the debug and production version of your APK file before it gets deployed)\n\n\n\n\nRun \nkeytool -list -v -keystore my-release-key.keystore\n to generate a fingerprint\n\n\n\n\n\n\nExample fingerprint \nAA:C9:D9:A5:E9:76:3E:51:1B:FB:35:00:06:9B:56:AC:FB:A6:28:CE:F3:D6:65:38:18:E3:9C:63:94:FB:D2:C1\n to add to your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDesktop\n\n\n\n\n\n\nUse these settings to control the default behavior of your deep links on Desktop browsers\n\n\n\n\n\n\n\n\n\n\n\n\nFallback\n\n\n\n\n\n\nUse these settings to control the default behavior of your deep links on any other platform\n\n\n\n\n\n\n\n\n\n\n\n\nLink domain\n\n\n\n\nChoose a \nlink domain\n which will be used for all your links\n\n\nThe \nlink domain\n is the website which hosts your deep links\n\n\n\n\nThe \nlink domain\n is not a deep link\n\n\n\n\nDeep links have an \nalias\n behind them to uniquely identify the link data inside them\n\n\ne.g. \nhttps://example.app.link/VZsTctoINF\n\n\ne.g. \nhttps://example.app.link/custom-alias\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSocial media\n\n\n\n\nSet the default image preview for your deep links when shared on social media\n\n\n\n\nThese values are typically overridden by \nCustom link behavior\n which differentiate your deep links between one another\n\n\n\n\n\n\n\n\n\n\n\n\nSave\n\n\n\n\n\n\nMake sure you commit any changes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnable a Deepview\n\n\n\n\nGo to \nDeepview Previews\n on the Branch Dashboard\n\n\nToggle \nEnabled\n for \nbranch_default\n for \niOS\n and \nAndroid\n\n\nThis will make your deep links perform optimally on all \nSupported platforms\n\n\n\n\nAdditional details about \nDeepviews\n\n\n\n\n\n\n\n\n\n\n\n\nAdvance integration\n\n\n\n\n\n\nConfigure user\n\n\n\n\nGo to \nAccount settings\n on the Branch Dashboard\n\n\nHandle your Branch user account with email, password, and user id\n\n\nConnect your Github account to your Branch dashboard for easier sign in\n\n\n\n\n\n\n\n\nConfigure billing\n\n\n\n\nGo to \nAccount settings\n on the Branch Dashboard\n\n\nSet your billing information for Branch premium features\n\n\n\n\n\n\n\n\nConfigure team\n\n\n\n\nGo to \nAccount settings\n on the Branch Dashboard\n\n\nAdd and update team members to your Branch dashboard\n\n\nAdmin\n = full access\n\n\nReports\n = read reports only\n\n\n\n\n\n\n\n\n\n\n\n\nChange advanced settings\n\n\n\n\nGo to \nLink Settings\n on the Branch Dashboard\n\n\nSet \nMatch type\n to either \nunique\n or \nnormal\n (default)\n\n\nRecommended \nNormal\n. Selecting \nUnique\n means that Branch will only make a deep link through install match if there is a single, unique outstanding footprint. For example, if you and your twin both have iPhone 5s with the same OS/version, etc and click different links for the same app, then open the app up at the same time, we won\u2019t deep link when Unique is selected. You probably don\u2019t want this as it\u2019s mostly for very special circumstances.\n\n\n\n\n\n\nSet \nDuration\n to seconds\n\n\nDuration is how long a \nclick\n will live in our system before it is consumed by either an app \nopen\n or system delete. Modifying this value will change how long we wait to fingerprint a user. If a user is fingerprinted within the set duration, then deep link data will flow into the app. The default the expiration is 2 hours (7200 seconds).\n\n\n\n\n\n\nSet \nUTM tags\n\n\n\n\nRecommend \ndisabled\n. If you enable this, Branch will automatically set channel, feature, campaign, tags and $keywords based on UTM params. This only applies to dynamically created links, not links generated through the Dashboard, API or SDKs.\n\n\n\n\n\n\n\n\nUTM parameter\n\n\nBranch parameter\n\n\n\n\n\n\n\n\n\n\nutm_source\n\n\nChannel\n\n\n\n\n\n\nutm_medium\n\n\nFeature\n\n\n\n\n\n\nutm_campaign\n\n\nCampaign\n\n\n\n\n\n\nutm_content\n\n\nTags\n\n\n\n\n\n\nutm_term\n\n\nKeywords (not visible on Dashboard)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnable Facebook App Invites\n\n\n\n\nGo to \nLink Settings\n on the Branch Dashboard\n\n\nAdd your Facebook credentials to allow us to link your Facebook dashboard to the Branch dashboard\n\n\nThis configuration allows us to send and receive attribution data from Facebook\n\n\n\n\n\n\n\n\nChange link domain\n\n\n\n\n\n\nGo to \nLink Settings\n on the Branch Dashboard\n\n\n\n\n\n\nUse app.link domain\n\n\n\n\nUnderstand \nDomain change warning\n\n\nMake changes to \nLink settings\n or contact support\n\n\n\n\n\n\n\n\nUse custom subdomain\n\n\n\n\nUnderstand \nDomain change warning\n\n\nUnderstand \nCustom domain warning\n\n\nUnderstand \nCustom domain debugging\n\n\nChange your link domain to your custom subdomain on \nLink settings\n\n\nUpdate your \nCNAME\n record on your custom subdomain\n\n\nCNAME\n = \ncustom.bnc.lt\n\n\n\n\n\n\nClick \nConfirm\n on \nLink settings\n\n\nIf you are configuring the domain through AWS's Route 53, make sure you are editing the nameservers under the \nRegistered Domains\n tab, and not the \nHosted zones\n section\n\n\n\n\n\n\n\n\nUse custom root domain\n\n\n\n\nUnderstand \nDomain change warning\n\n\nUnderstand \nCustom domain warning\n\n\nUnderstand \nCustom domain debugging\n\n\nChange your link domain to your custom root domain on \nLink settings\n\n\nUpdate your \nNS\n records on your custom root domain\n\n\nThese values are unique per app, below is an example\n\n\nns-1371.awsdns-43.org\n\n\nns-1695.awsdns-19.co.uk\n\n\nns-991.awsdns-59.net\n\n\nns-428.awsdns-53.com\n\n\n\n\n\n\n\n\n\n\nClick \nConfirm\n on \nLink settings\n\n\nIf you are configuring the domain through AWS's Route 53, make sure you are editing the nameservers under the \nRegistered Domains\n tab, and not the \nHosted zones\n section\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nDomain change warning\n\n\n\n\nUsed for \nChange link domain\n\n\nFrom \napp.link\n to \napp.link\n\n\nYour old \napp.link\n deep links will fail\n\n\nYour old \napp.link\n deep links will navigate to a File Not Found website and not open your app.\n\n\nYour new \napp.link\n deep links will open your app after your \nupdate your code\n to append the new link domain\n\n\nIf your old \napp.link\n are active, it is recommend to switch to a \ncustom link domain instead\n\n\n\n\n\n\nFrom \napp.link\n to \ncustom link domain\n\n\nYour old \napp.link\n deep links will still work\n\n\nYour new \ncustom link domain\n deep links will open your app after your \nupdate your code\n to append the new link domain\n\n\n\n\n\n\nFrom \ncustom link domain\n to \ncustom link domain\n\n\nYour old \ncustom link domain\n deep links will fail\n\n\nYour new \ncustom link domain\n deep links will open your app after your \nupdate your code\n to append the new link domain\n\n\n\n\n\n\nFrom legacy \nbnc.lt\n to \ncustom link domain\n\n\nBoth your \nbnc.lt\n and \ncustom link domain\n deep links will work\n\n\nYour new \ncustom link domain\n deep links will open your app after your \nupdate your code\n to append the new link domain\n\n\n\n\n\n\n\n\n\n\n\n\nCustom domain warning\n\n\n\n\nUsed for \nChange link domain\n\n\nThe \nNS\n or \nCNAME\n records of your \ncustom link domain\n will need to point to Branch if you want to use your own domain for your deep links\n\n\nWhenever you change your \nNS\n or \nCNAME\n records of a domain, you are making Branch the authoritative registrar for your domain. This will grant Branch control of your domain and you will lose all access to that \ncustom root domain\n or \ncustom subdomain\n. The web page will become blank, and the control of the domain will change to Branch\n\n\nBranch will use your domain to route all deep linked traffic. Branch will also host your AASA file and SSL certificates\n\n\nIf you have content on your \ncustom root domain\n (e.g. \nhttps://example.com/\n), Branch recommends using an unused \ncustom subdomain\n instead (e.g. \nhttps://link.example.com/\n)\n\n\nOnce the domain is setup, newly created links will also have a 4 character prefix, i.e. \n/A1DE/\n. We use this code to identify the app. \n\n\n\n\n\n\n\n\nCustom domain debugging\n\n\n\n\nUsed for \nChange link domain\n\n\nYou can test your domain record changes with \ndig ns \ndomain\n or \ndig cname \ndomain\n\n\nWe recommend that you choose one domain or subdomain to use with Branch and stick with it, as switching can cause significant problems with your existing links\n\n\nIf you are configuring the domain through AWS's Route 53, make sure you are editing the nameservers under the \nRegistered Domains\n tab, and not the \nHosted zones\n section\n\n\nYou cannot use your main website domain for hosting Branch links\n\n\nDo not include \nwww\n when adding your custom link domain\n\n\nIf you have CAA records set for your domain, add letsencrypt.org to the list", 
            "title": "Configure your dashboard"
        }, 
        {
            "location": "/pages/dashboard/integrate/#basic-integration", 
            "text": "", 
            "title": "Basic integration"
        }, 
        {
            "location": "/pages/dashboard/integrate/#understand-the-branch-key", 
            "text": "Go to  Account settings  on the Branch Dashboard  Branch Keys  allow you to interact with your Branch SDKs and create deep links  These keys are unique to your Branch app   Never expose your  Branch Secret  as it can be maliciously used", 
            "title": "Understand the Branch Key"
        }, 
        {
            "location": "/pages/dashboard/integrate/#configure-default-behavior", 
            "text": "Set the default behavior for your deep links on  Link Settings    These values are typically overridden by  Custom link behavior  for each deep link", 
            "title": "Configure default behavior"
        }, 
        {
            "location": "/pages/dashboard/integrate/#ios", 
            "text": "Use these settings to control the default behavior of your deep links on iOS     The Apple App Prefix is found within the  Apple Developer Portal  for your app", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/dashboard/integrate/#android", 
            "text": "Use these settings to control the default behavior of your deep links on Android    Play Store is for published apps, if your app cannot be located or is a local/dev build, please use the Custom URL option     Generate a SHA256 Cert Fingerprint   Navigate to your  keystore file  (used to build the debug and production version of your APK file before it gets deployed)   Run  keytool -list -v -keystore my-release-key.keystore  to generate a fingerprint    Example fingerprint  AA:C9:D9:A5:E9:76:3E:51:1B:FB:35:00:06:9B:56:AC:FB:A6:28:CE:F3:D6:65:38:18:E3:9C:63:94:FB:D2:C1  to add to your  Branch Dashboard", 
            "title": "Android"
        }, 
        {
            "location": "/pages/dashboard/integrate/#desktop", 
            "text": "Use these settings to control the default behavior of your deep links on Desktop browsers", 
            "title": "Desktop"
        }, 
        {
            "location": "/pages/dashboard/integrate/#fallback", 
            "text": "Use these settings to control the default behavior of your deep links on any other platform", 
            "title": "Fallback"
        }, 
        {
            "location": "/pages/dashboard/integrate/#link-domain", 
            "text": "Choose a  link domain  which will be used for all your links  The  link domain  is the website which hosts your deep links   The  link domain  is not a deep link   Deep links have an  alias  behind them to uniquely identify the link data inside them  e.g.  https://example.app.link/VZsTctoINF  e.g.  https://example.app.link/custom-alias", 
            "title": "Link domain"
        }, 
        {
            "location": "/pages/dashboard/integrate/#social-media", 
            "text": "Set the default image preview for your deep links when shared on social media   These values are typically overridden by  Custom link behavior  which differentiate your deep links between one another", 
            "title": "Social media"
        }, 
        {
            "location": "/pages/dashboard/integrate/#save", 
            "text": "Make sure you commit any changes", 
            "title": "Save"
        }, 
        {
            "location": "/pages/dashboard/integrate/#enable-a-deepview", 
            "text": "Go to  Deepview Previews  on the Branch Dashboard  Toggle  Enabled  for  branch_default  for  iOS  and  Android  This will make your deep links perform optimally on all  Supported platforms   Additional details about  Deepviews", 
            "title": "Enable a Deepview"
        }, 
        {
            "location": "/pages/dashboard/integrate/#advance-integration", 
            "text": "", 
            "title": "Advance integration"
        }, 
        {
            "location": "/pages/dashboard/integrate/#configure-user", 
            "text": "Go to  Account settings  on the Branch Dashboard  Handle your Branch user account with email, password, and user id  Connect your Github account to your Branch dashboard for easier sign in", 
            "title": "Configure user"
        }, 
        {
            "location": "/pages/dashboard/integrate/#configure-billing", 
            "text": "Go to  Account settings  on the Branch Dashboard  Set your billing information for Branch premium features", 
            "title": "Configure billing"
        }, 
        {
            "location": "/pages/dashboard/integrate/#configure-team", 
            "text": "Go to  Account settings  on the Branch Dashboard  Add and update team members to your Branch dashboard  Admin  = full access  Reports  = read reports only", 
            "title": "Configure team"
        }, 
        {
            "location": "/pages/dashboard/integrate/#change-advanced-settings", 
            "text": "Go to  Link Settings  on the Branch Dashboard  Set  Match type  to either  unique  or  normal  (default)  Recommended  Normal . Selecting  Unique  means that Branch will only make a deep link through install match if there is a single, unique outstanding footprint. For example, if you and your twin both have iPhone 5s with the same OS/version, etc and click different links for the same app, then open the app up at the same time, we won\u2019t deep link when Unique is selected. You probably don\u2019t want this as it\u2019s mostly for very special circumstances.    Set  Duration  to seconds  Duration is how long a  click  will live in our system before it is consumed by either an app  open  or system delete. Modifying this value will change how long we wait to fingerprint a user. If a user is fingerprinted within the set duration, then deep link data will flow into the app. The default the expiration is 2 hours (7200 seconds).    Set  UTM tags   Recommend  disabled . If you enable this, Branch will automatically set channel, feature, campaign, tags and $keywords based on UTM params. This only applies to dynamically created links, not links generated through the Dashboard, API or SDKs.     UTM parameter  Branch parameter      utm_source  Channel    utm_medium  Feature    utm_campaign  Campaign    utm_content  Tags    utm_term  Keywords (not visible on Dashboard)", 
            "title": "Change advanced settings"
        }, 
        {
            "location": "/pages/dashboard/integrate/#enable-facebook-app-invites", 
            "text": "Go to  Link Settings  on the Branch Dashboard  Add your Facebook credentials to allow us to link your Facebook dashboard to the Branch dashboard  This configuration allows us to send and receive attribution data from Facebook", 
            "title": "Enable Facebook App Invites"
        }, 
        {
            "location": "/pages/dashboard/integrate/#change-link-domain", 
            "text": "Go to  Link Settings  on the Branch Dashboard", 
            "title": "Change link domain"
        }, 
        {
            "location": "/pages/dashboard/integrate/#use-applink-domain", 
            "text": "Understand  Domain change warning  Make changes to  Link settings  or contact support", 
            "title": "Use app.link domain"
        }, 
        {
            "location": "/pages/dashboard/integrate/#use-custom-subdomain", 
            "text": "Understand  Domain change warning  Understand  Custom domain warning  Understand  Custom domain debugging  Change your link domain to your custom subdomain on  Link settings  Update your  CNAME  record on your custom subdomain  CNAME  =  custom.bnc.lt    Click  Confirm  on  Link settings  If you are configuring the domain through AWS's Route 53, make sure you are editing the nameservers under the  Registered Domains  tab, and not the  Hosted zones  section", 
            "title": "Use custom subdomain"
        }, 
        {
            "location": "/pages/dashboard/integrate/#use-custom-root-domain", 
            "text": "Understand  Domain change warning  Understand  Custom domain warning  Understand  Custom domain debugging  Change your link domain to your custom root domain on  Link settings  Update your  NS  records on your custom root domain  These values are unique per app, below is an example  ns-1371.awsdns-43.org  ns-1695.awsdns-19.co.uk  ns-991.awsdns-59.net  ns-428.awsdns-53.com      Click  Confirm  on  Link settings  If you are configuring the domain through AWS's Route 53, make sure you are editing the nameservers under the  Registered Domains  tab, and not the  Hosted zones  section", 
            "title": "Use custom root domain"
        }, 
        {
            "location": "/pages/dashboard/integrate/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/dashboard/integrate/#domain-change-warning", 
            "text": "Used for  Change link domain  From  app.link  to  app.link  Your old  app.link  deep links will fail  Your old  app.link  deep links will navigate to a File Not Found website and not open your app.  Your new  app.link  deep links will open your app after your  update your code  to append the new link domain  If your old  app.link  are active, it is recommend to switch to a  custom link domain instead    From  app.link  to  custom link domain  Your old  app.link  deep links will still work  Your new  custom link domain  deep links will open your app after your  update your code  to append the new link domain    From  custom link domain  to  custom link domain  Your old  custom link domain  deep links will fail  Your new  custom link domain  deep links will open your app after your  update your code  to append the new link domain    From legacy  bnc.lt  to  custom link domain  Both your  bnc.lt  and  custom link domain  deep links will work  Your new  custom link domain  deep links will open your app after your  update your code  to append the new link domain", 
            "title": "Domain change warning"
        }, 
        {
            "location": "/pages/dashboard/integrate/#custom-domain-warning", 
            "text": "Used for  Change link domain  The  NS  or  CNAME  records of your  custom link domain  will need to point to Branch if you want to use your own domain for your deep links  Whenever you change your  NS  or  CNAME  records of a domain, you are making Branch the authoritative registrar for your domain. This will grant Branch control of your domain and you will lose all access to that  custom root domain  or  custom subdomain . The web page will become blank, and the control of the domain will change to Branch  Branch will use your domain to route all deep linked traffic. Branch will also host your AASA file and SSL certificates  If you have content on your  custom root domain  (e.g.  https://example.com/ ), Branch recommends using an unused  custom subdomain  instead (e.g.  https://link.example.com/ )  Once the domain is setup, newly created links will also have a 4 character prefix, i.e.  /A1DE/ . We use this code to identify the app.", 
            "title": "Custom domain warning"
        }, 
        {
            "location": "/pages/dashboard/integrate/#custom-domain-debugging", 
            "text": "Used for  Change link domain  You can test your domain record changes with  dig ns  domain  or  dig cname  domain  We recommend that you choose one domain or subdomain to use with Branch and stick with it, as switching can cause significant problems with your existing links  If you are configuring the domain through AWS's Route 53, make sure you are editing the nameservers under the  Registered Domains  tab, and not the  Hosted zones  section  You cannot use your main website domain for hosting Branch links  Do not include  www  when adding your custom link domain  If you have CAA records set for your domain, add letsencrypt.org to the list", 
            "title": "Custom domain debugging"
        }, 
        {
            "location": "/pages/apps/ios/", 
            "text": "Integrate Branch\n\n\n\n\nInconsistent Universal links behavior on iOS 11.2\n\n\nAfter updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set \nforced uri redirect mode\n on your Branch links to open the app with URI schemes. View details of the issue on the \nApple Bug report\n.\n\n\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete the \nBasic integration\n within \nConfigure your dashboard\n\n\n\n\n\n\nMake sure \nI have an iOS app\n is enabled\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure bundle identifier\n\n\n\n\n\n\nMake sure Bundle Id matches your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure associated domains\n\n\n\n\nAdd your link domains from your \nBranch Dashboard\n\n\n-alternate\n is needed for Universal Linking with the \nWeb SDK\n inside your Website\n\n\ntest-\n is needed if you need use a \ntest key\n\n\n\n\nIf you use a \ncustom link domain\n, you will need to include your old link domain, your \n-alternate\n link domain, and your new link domain\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure entitlements\n\n\n\n\n\n\nConfirm entitlements are within target\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure info.pList\n\n\n\n\n\n\nAdd \nBranch Dashboard\n values\n\n\n\n\nAdd \nbranch_app_domain\n with your live key domain\n\n\nAdd \nbranch_key\n with your current Branch key\n\n\nAdd your URI scheme as \nURL Types\n -\n \nItem 0\n -\n \nURL Schemes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfirm app prefix\n\n\n\n\n\n\nFrom your \nApple Developer Account\n\n\n\n\n\n\n\n\n\n\n\n\nInstall Branch\n\n\n\n\n\n\nOption 1: \nCocoaPods\n\n\nplatform :ios, \n8.0\n\n\ntarget \nAPP_NAME\n \ndo\n\n  \n# if swift\n\n  use_frameworks!\n\n\n  pod \nBranch\n\n\nend\n\n\n\n\npod install \n pod update\n\n\n\n\n\n\n\n\nOption 2: \nCarthage\n\n\ngithub \nBranchMetrics/ios-branch-deep-linking\n\n\n\n\n\n\n\n\n\nOption 3: Manually install the \nsource code\n with dependencies\n\n\n\n\nDrag and drop \nBranch.framework\n into \nEmbedded Binaries\n (select \nCopy items if needed\n)\n\n\nImport \nAdSupport\n, \nSafariServices\n, \nMobileCoreServices\n, \nCoreSpotlight\n, and \niAd\n into \nLinked Frameworks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nSwift 3\n\n\nimport\n \nUIKit\n\n\nimport\n \nBranch\n\n\n\n\n@UIApplicationMain\n\n\nclass\n \nAppDelegate\n:\n \nUIResponder\n,\n \nUIApplicationDelegate\n \n{\n\n\n\nvar\n \nwindow\n:\n \nUIWindow\n?\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidFinishLaunchingWithOptions\n \nlaunchOptions\n:\n \n[\nUIApplicationLaunchOptionsKey\n:\n \nAny\n]?)\n \n-\n \nBool\n \n{\n\n\n  \n// for debug and development only\n\n\n  \nBranch\n.\ngetInstance\n().\nsetDebug\n()\n\n\n  \n// listener for Branch Deep Link data\n\n\n  \nBranch\n.\ngetInstance\n().\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n)\n \n{\n \n(\nparams\n,\n \nerror\n)\n \nin\n\n\n    \n// do stuff with deep link data (nav to page, display content, etc)\n\n\n    \nprint\n(\nparams\n \nas\n?\n \n[\nString\n:\n \nAnyObject\n]\n \n??\n \n{})\n\n\n  \n}\n\n\n  \nreturn\n \ntrue\n\n\n}\n\n\n\nfunc\n \napplication\n(\n_\n \napp\n:\n \nUIApplication\n,\n \nopen\n \nurl\n:\n \nURL\n,\n \noptions\n:\n \n[\nUIApplicationOpenURLOptionsKey\n \n:\n \nAny\n]\n \n=\n \n[:])\n \n-\n \nBool\n \n{\n\n\n  \n// handler for URI Schemes (depreciated in iOS 9.2+, but still used by some apps)\n\n\n  \nBranch\n.\ngetInstance\n().\napplication\n(\napp\n,\n \nopen\n:\n \nurl\n,\n \noptions\n:\n \noptions\n)\n\n\n  \nreturn\n \ntrue\n\n\n}\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ncontinue\n \nuserActivity\n:\n \nNSUserActivity\n,\n \nrestorationHandler\n:\n \n@\nescaping\n \n([\nAny\n]?)\n \n-\n \nVoid\n)\n \n-\n \nBool\n \n{\n\n\n  \n// handler for Universal Links\n\n\n  \nBranch\n.\ngetInstance\n().\ncontinue\n(\nuserActivity\n)\n\n\n  \nreturn\n \ntrue\n\n\n}\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidReceiveRemoteNotification\n \nuserInfo\n:\n \n[\nAnyHashable\n \n:\n \nAny\n],\n \nfetchCompletionHandler\n \ncompletionHandler\n:\n \n@\nescaping\n \n(\nUIBackgroundFetchResult\n)\n \n-\n \nVoid\n)\n \n{\n\n\n  \n// handler for Push Notifications\n\n\n  \nBranch\n.\ngetInstance\n().\nhandlePushNotification\n(\nuserInfo\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n#import \nAppDelegate.h\n\n\n#import \nBranch/Branch.h\n\n\n\n\n@interface\n \nAppDelegate\n \n()\n\n\n\n@end\n\n\n\n@implementation\n \nAppDelegate\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidFinishLaunchingWithOptions:\n(\nNSDictionary\n \n*\n)\nlaunchOptions\n \n{\n\n\n  \n// for debug and development only\n\n\n  \n[[\nBranch\n \ngetInstance\n]\n \nsetDebug\n];\n\n\n  \n// listener for Branch Deep Link data\n\n\n  \n[[\nBranch\n \ngetInstance\n]\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\n \n_Nonnull\n \nparams\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n\n    \n// do stuff with deep link data (nav to page, display content, etc)\n\n\n    \nNSLog\n(\n@\n%@\n,\n \nparams\n);\n\n\n  \n}];\n\n\n  \nreturn\n \nYES\n;\n\n\n}\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napp\n \nopenURL:\n(\nNSURL\n \n*\n)\nurl\n \noptions:\n(\nNSDictionary\nUIApplicationOpenURLOptionsKey\n,\nid\n \n*\n)\noptions\n \n{\n\n\n  \n// handler for URI Schemes (depreciated in iOS 9.2+, but still used by some apps)\n\n\n  \n[[\nBranch\n \ngetInstance\n]\n \napplication\n:\napp\n \nopenURL\n:\nurl\n \noptions\n:\noptions\n];\n\n\n  \nreturn\n \nYES\n;\n\n\n}\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ncontinueUserActivity:\n(\nNSUserActivity\n \n*\n)\nuserActivity\n \nrestorationHandler:\n(\nvoid\n \n(\n^\n)(\nNSArray\n \n*\n \n_Nullable\n))\nrestorationHandler\n \n{\n\n\n  \n// handler for Universal Links\n\n\n  \n[[\nBranch\n \ngetInstance\n]\n \ncontinueUserActivity\n:\nuserActivity\n];\n\n\n  \nreturn\n \nYES\n;\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidReceiveRemoteNotification:\n(\nNSDictionary\n \n*\n)\nuserInfo\n \n{\n\n\n  \n// handler for Push Notifications\n\n\n  \n[[\nBranch\n \ngetInstance\n]\n \nhandlePushNotification\n:\nuserInfo\n];\n\n\n}\n\n\n\n@end\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\nDelete your app from the device\n\n\nCompile and test on a device\n\n\nPaste deep link in \nApple Notes\n\n\nLong press on the deep link (not 3D Touch)\n\n\nClick \nOpen in \"APP_NAME\"\n to open your app (\nexample\n)\n\n\n\n\n\n\nTesting deferred deep linking\n\n\nDeferred deep linking is simply deep linking into an app that is not yet installed. Once the app is installed, the context is preserved and the user's first app-open will have the deep link data from the original Branch link. To test this, uninstall the app from your device, click the Branch link, and manually launch the app from Xcode. You should be routed to the correct content within your app.\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share\n\n\n\n\n\n\nUses \nUniversal Object properties\n\n\n\n\n\n\nSwift 3\n\n\n// required: canonicalIdentifier or title\n\n\n// recommended: title, contentDescription, imageUrl for social media cards\n\n\nlet\n \nbuo\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \ncontent/123\n)\n\n\nbuo\n.\ncanonicalUrl\n \n=\n \nhttps://example.com/content/123\n\n\nbuo\n.\ntitle\n \n=\n \nContent 123 Title\n\n\nbuo\n.\ncontentDescription\n \n=\n \nContent 123 Description \n\\(\nDate\n())\n\n\nbuo\n.\nimageUrl\n \n=\n \nhttp://lorempixel.com/400/400/\n\n\nbuo\n.\nkeywords\n \n=\n \n[\nawesome\n,\n \nthings\n]\n\n\n\n// index on Apple Spotlight\n\n\nbuo\n.\nlocallyIndex\n \n=\n \ntrue\n\n\n\n// index on Google, Branch, etc\n\n\nbuo\n.\npubliclyIndex\n \n=\n \ntrue\n\n\n\n// additional object details\n\n\nbuo\n.\ncontentMetadata\n.\ncontentSchema\n \n=\n \n.\ncommerceRestaurant\n\n\nbuo\n.\ncontentMetadata\n.\nquantity\n \n=\n \n12\n\n\nbuo\n.\ncontentMetadata\n.\nprice\n \n=\n \n33.44\n\n\nbuo\n.\ncontentMetadata\n.\ncurrency\n \n=\n \n.\nUSD\n\n\nbuo\n.\ncontentMetadata\n.\nsku\n \n=\n \n123\n\n\nbuo\n.\ncontentMetadata\n.\nproductName\n \n=\n \ngrapes\n\n\nbuo\n.\ncontentMetadata\n.\nproductBrand\n \n=\n \nwelch\n\n\nbuo\n.\ncontentMetadata\n.\nproductCategory\n \n=\n \nBNCProductCategory\n.\nfoodBeverageTobacco\n\n\nbuo\n.\ncontentMetadata\n.\nproductVariant\n \n=\n \nbulk\n\n\nbuo\n.\ncontentMetadata\n.\ncondition\n \n=\n \n.\ngood\n\n\nbuo\n.\ncontentMetadata\n.\nratingAverage\n \n=\n \n4.5\n\n\nbuo\n.\ncontentMetadata\n.\nratingCount\n \n=\n \n78\n\n\nbuo\n.\ncontentMetadata\n.\nratingMax\n \n=\n \n5\n\n\nbuo\n.\ncontentMetadata\n.\naddressStreet\n \n=\n \n123 Over Here\n\n\nbuo\n.\ncontentMetadata\n.\naddressCity\n \n=\n \nAustin\n\n\nbuo\n.\ncontentMetadata\n.\naddressRegion\n \n=\n \nTexas\n\n\nbuo\n.\ncontentMetadata\n.\naddressCountry\n \n=\n \nUSA\n\n\nbuo\n.\ncontentMetadata\n.\naddressPostalCode\n \n=\n \n76035\n\n\nbuo\n.\ncontentMetadata\n.\nlatitude\n \n=\n \n30.267153\n\n\nbuo\n.\ncontentMetadata\n.\nlongitude\n \n=\n \n-\n97.743061\n\n\n\n// custom key-value pairs\n\n\nbuo\n.\ncontentMetadata\n.\nimageCaptions\n \n=\n \n[\nawesome\n,\n \nthings\n]\n\n\nbuo\n.\ncontentMetadata\n.\ncustomMetadata\n \n=\n \n[\ncustom\n:\n \n123\n]\n\n\nbuo\n.\ncontentMetadata\n.\ncustomMetadata\n \n=\n \n[\nanything\n:\n \neverything\n]\n\n\n\n// user actions with the object\n\n\nbuo\n.\nuserCompletedAction\n(\nBranchStandardEvent\n.\naddToCart\n.\nrawValue\n)\n\n\nbuo\n.\nuserCompletedAction\n(\nViewed\n)\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// only canonical identifier is required\n\n\nBranchUniversalObject\n \n*\nbuo\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\ncontent/123\n];\n\n\nbuo\n.\ntitle\n \n=\n \n@\nContent 123 Title\n;\n\n\nbuo\n.\ncontentDescription\n \n=\n \n@\nContent 123 Description\n;\n\n\nbuo\n.\nimageUrl\n \n=\n \n@\nhttps://lorempixel.com/400/400\n;\n\n\nbuo\n.\nprice\n \n=\n \n12.12\n;\n\n\nbuo\n.\ncurrency\n \n=\n \n@\nUSD\n;\n\n\nbuo\n.\ncontentIndexMode\n \n=\n \nContentIndexModePublic\n;\n\n\nbuo\n.\nautomaticallyListOnSpotlight\n \n=\n \nYES\n;\n\n\n[\nbuo\n \naddMetadataKey\n:\n@\ncustom\n \nvalue\n:[[\nNSUUID\n \nUUID\n]\n \nUUIDString\n]];\n\n\n[\nbuo\n \naddMetadataKey\n:\n@\nanything\n \nvalue\n:\n@\neverything\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate link reference\n\n\n\n\n\n\nGenerates the analytical properties for the deep link\n\n\n\n\n\n\nUsed for \nCreate deep link\n and \nShare deep link\n\n\n\n\n\n\nUses \nConfigure link data\n and custom data\n\n\n\n\n\n\nSwift 3\n\n\nlet\n \nlp\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlp\n.\nchannel\n \n=\n \nfacebook\n\n\nlp\n.\nfeature\n \n=\n \nsharing\n\n\nlp\n.\ncampaign\n \n=\n \ncontent 123 launch\n\n\nlp\n.\nstage\n \n=\n \nnew user\n\n\nlp\n.\ntags\n \n=\n \n[\none\n,\n \ntwo\n,\n \nthree\n]\n\n\n\nlp\n.\naddControlParam\n(\n$desktop_url\n,\n \nwithValue\n:\n \nhttp://example.com/desktop\n)\n\n\nlp\n.\naddControlParam\n(\n$ios_url\n,\n \nwithValue\n:\n \nhttp://example.com/ios\n)\n\n\nlp\n.\naddControlParam\n(\n$ipad_url\n,\n \nwithValue\n:\n \nhttp://example.com/ios\n)\n\n\nlp\n.\naddControlParam\n(\n$android_url\n,\n \nwithValue\n:\n \nhttp://example.com/android\n)\n\n\nlp\n.\naddControlParam\n(\n$match_duration\n,\n \nwithValue\n:\n \n2000\n)\n\n\n\nlp\n.\naddControlParam\n(\ncustom_data\n,\n \nwithValue\n:\n \nyes\n)\n\n\nlp\n.\naddControlParam\n(\nlook_at\n,\n \nwithValue\n:\n \nthis\n)\n\n\nlp\n.\naddControlParam\n(\nnav_to\n,\n \nwithValue\n:\n \nover here\n)\n\n\nlp\n.\naddControlParam\n(\nrandom\n,\n \nwithValue\n:\n \nUUID\n.\ninit\n().\nuuidString\n)\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\nBranchLinkProperties\n \n*\nlp\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlp\n.\nfeature\n \n=\n \n@\nfacebook\n;\n\n\nlp\n.\nchannel\n \n=\n \n@\nsharing\n;\n\n\nlp\n.\ncampaign\n \n=\n \n@\ncontent 123 launch\n;\n\n\nlp\n.\nstage\n \n=\n \n@\nnew user\n;\n\n\nlp\n.\ntags\n \n=\n \n@[\n@\none\n,\n \n@\ntwo\n,\n \n@\nthree\n]\n;\n\n\n\n[\nlp\n \naddControlParam\n:\n@\n$desktop_url\n \nwithValue\n:\n \n@\nhttp://example.com/desktop\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$ios_url\n \nwithValue\n:\n \n@\nhttp://example.com/ios\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$ipad_url\n \nwithValue\n:\n \n@\nhttp://example.com/ios\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$android_url\n \nwithValue\n:\n \n@\nhttp://example.com/android\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$match_duration\n \nwithValue\n:\n \n@\n2000\n];\n\n\n\n[\nlp\n \naddControlParam\n:\n@\ncustom_data\n \nwithValue\n:\n \n@\nyes\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\nlook_at\n \nwithValue\n:\n \n@\nthis\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\nnav_to\n \nwithValue\n:\n \n@\nover here\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\nrandom\n \nwithValue\n:\n \n[[\nNSUUID\n \nUUID\n]\n \nUUIDString\n]];\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nGenerates a deep link within your app\n\n\n\n\n\n\nNeeds a \nCreate content reference\n\n\n\n\n\n\nNeeds a \nCreate link reference\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\nbuo\n.\ngetShortUrl\n(\nwith\n:\n \nlp\n)\n \n{\n \n(\nurl\n,\n \nerror\n)\n \nin\n\n  \nprint\n(\nurl\n \n??\n \n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n[\nbuo\n \ngetShortUrlWithLinkProperties\n:\nlp\n \nandCallback\n:\n^\n(\nNSString\n*\n \nurl\n,\n \nNSError\n*\n \nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nNSLog\n(\n@\n@\n,\n \nurl\n);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nNeeds a \nCreate content reference\n\n\n\n\n\n\nNeeds a \nCreate link reference\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nSwift 3\n\n\nlet\n \nmessage\n \n=\n \nCheck out this link\n\n\nbuo\n.\nshowShareSheet\n(\nwith\n:\n \nlp\n,\n \nandShareText\n:\n \nmessage\n,\n \nfrom\n:\n \nself\n)\n \n{\n \n(\nactivityType\n,\n \ncompleted\n)\n \nin\n\n  \nprint\n(\nactivityType\n \n??\n \n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[\nbuo\n \nshowShareSheetWithLinkProperties\n:\nlp\n \nandShareText\n:\n@\nSuper amazing thing I want to share!\n \nfromViewController\n:\nself\n \ncompletion\n:\n^\n(\nNSString\n*\n \nactivityType\n,\n \nBOOL\n \ncompleted\n)\n \n{\n\n    \nNSLog\n(\n@\nfinished presenting\n);\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nReturns \ndeep link properties\n\n\n\n\n\n\nSwift 3\n\n\n// listener (within AppDelegate didFinishLaunchingWithOptions)\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n)\n \n{\n \nparams\n,\n \nerror\n \nin\n\n  \nprint\n(\nparams\n \nas\n?\n \n[\nString\n:\n \nAnyObject\n]\n \n??\n \n{})\n\n\n}\n\n\n\n// latest\n\n\nlet\n \nsessionParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetLatestReferringParams\n()\n\n\n\n// first\n\n\nlet\n \ninstallParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetFirstReferringParams\n()\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n\n                        \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\n \n_Nullable\n \nparams\n,\n\n                                                     \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \n//Referring params\n\n        \nNSLog\n(\n@\nReferring link params %@\n,\nparams\n);\n\n    \n}\n\n\n}];\n\n\n\n// latest\n\n\nNSDictionary\n \n*\nsessionParams\n \n=\n \n[[\nBranch\n \ngetInstance\n]\n \ngetLatestReferringParams\n];\n\n\n\n// first\n\n\nNSDictionary\n \n*\ninstallParams\n \n=\n  \n[[\nBranch\n \ngetInstance\n]\n \ngetFirstReferringParams\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nHandled within \nBranch.initSession()\n\n\n\n\n\n\nSwift 3\n\n\n// within AppDelegate application.didFinishLaunchingWithOptions\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n)\n \n{\n \nparams\n \n,\n \nerror\n \nin\n\n  \n// Option 1: read deep link data\n\n  \nguard\n \nlet\n \ndata\n \n=\n \nparams\n \nas\n?\n \n[\nString\n:\n \nAnyObject\n]\n \nelse\n \n{\n \nreturn\n \n}\n\n\n  \n// Option 2: save deep link data to global model\n\n  \nSomeCustomClass\n.\nsharedInstance\n.\nbranchData\n \n=\n \ndata\n\n\n  \n// Option 3: display data\n\n  \nlet\n \nalert\n \n=\n \nUIAlertController\n(\ntitle\n:\n \nDeep link data\n,\n \nmessage\n:\n \n\\(\ndata\n)\n,\n \npreferredStyle\n:\n \n.\nalert\n)\n\n  \nalert\n.\naddAction\n(\nUIAlertAction\n(\ntitle\n:\n \nOkay\n,\n \nstyle\n:\n \n.\ndefault\n,\n \nhandler\n:\n \nnil\n))\n\n  \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\nalert\n,\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n\n  \n// Option 4: navigate to view controller\n\n  \nguard\n \nlet\n \noptions\n \n=\n \ndata\n[\nnav_to\n]\n \nas\n?\n \nString\n \nelse\n \n{\n \nreturn\n \n}\n\n  \nswitch\n \noptions\n \n{\n\n      \ncase\n \nlanding_page\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n      \ncase\n \ntutorial\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n      \ncase\n \ncontent\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n      \ndefault\n:\n \nbreak\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n// within AppDelegate application.didFinishLaunchingWithOptions\n\n\n[[\nBranch\n \ngetInstance\n]\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\n \n_Nonnull\n \nparams\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n  \n// Option 1: read deep link data\n\n  \nNSLog\n(\n@\n%@\n,\n \nparams\n);\n\n\n  \n// Option 2: save deep link data to global model\n\n  \nNSUserDefaults\n \n*\ndefaults\n \n=\n \n[\nNSUserDefaults\n \nstandardUserDefaults\n];\n\n  \n[\ndefaults\n \nsetObject\n:\nparams\n.\ndescription\n \nforKey\n:\n@\nBranchData\n];\n\n  \n[\ndefaults\n \nsynchronize\n];\n\n\n  \n// Option 3: display data\n\n  \nUIAlertController\n \n*\n \nalert\n \n=\n \n[\nUIAlertController\n \nalertControllerWithTitle\n:\n@\nTitle\n \nmessage\n:\nparams\n.\ndescription\n \npreferredStyle\n:\nUIAlertControllerStyleAlert\n];\n\n  \nUIAlertAction\n \n*\nbutton\n \n=\n \n[\nUIAlertAction\n \nactionWithTitle\n:\n@\nDeep Link Data\n \nstyle\n:\nUIAlertActionStyleDefault\n \nhandler\n:\nnil\n];\n\n  \n[\nalert\n \naddAction\n:\nbutton\n];\n\n  \n[\nself\n.\nwindow\n.\nrootViewController\n \npresentViewController\n:\nalert\n \nanimated\n:\nYES\n \ncompletion\n:\nnil\n];\n\n\n  \n// Option 4: navigate to view controller\n\n  \nif\n \n([\nparams\n \nobjectForKey\n:\n@\nnavHere\n])\n \n{\n\n    \nViewController\n \n*\nanotherViewController\n \n=\n \n[[\nViewController\n \nalloc\n]\n \ninitWithNibName\n:\n@\nanotherViewController\n \nbundle\n:\nnil\n];\n\n    \n[\nself\n.\nwindow\n.\nrootViewController\n \npresentViewController\n:\nanotherViewController\n \nanimated\n:\nYES\n \ncompletion\n:\nnil\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay\n\n\n\n\n\n\nList content on \niOS Spotlight\n\n\n\n\n\n\nNeeds a \nCreate content reference\n\n\n\n\n\n\nSwift 3\n\n\nbuo\n.\nautomaticallyListOnSpotlight\n \n=\n \ntrue\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\nbuo\n.\nautomaticallyListOnSpotlight\n \n=\n \nYES\n;\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nCreate content reference\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\nbuo\n.\nregisterView\n()\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n[\nbuo\n \nuserCompletedAction\n:\nBNCRegisterViewEvent\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\n// login\n\n\nBranch\n.\ngetInstance\n().\nsetIdentity\n(\nyour_user_id\n)\n\n\n\n// logout\n\n\nBranch\n.\ngetInstance\n().\nlogout\n()\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// login\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetIdentity\n:\n@\nyour_user_id\n];\n\n\n\n// logout\n\n\n[[\nBranch\n \ngetInstance\n]\n \nlogout\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\n// option 1\n\n\nlet\n \naction\n \n=\n \nsignup\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\naction\n)\n\n\n\n// option 2\n\n\nlet\n \nmetadata\n:\n \n[\nString\n:\n \nAny\n]\n \n=\n \n[\n\n  \ncustom_dictionary\n:\n \n123\n,\n\n  \nanything\n:\n \neverything\n\n\n]\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\naction\n,\n \nwithState\n:\n \nmetadata\n)\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// option 1\n\n\nNSString\n \n*\naction\n \n=\n \n@\nsignup\n;\n\n\n[[\nBranch\n \ngetInstance\n]\n \nuserCompletedAction\n:\naction\n];\n\n\n\n// option 2\n\n\nNSDictionary\n \n*\nmetadata\n \n=\n \n@{\n@\ncustom_dictionary\n:\n@123\n,\n \n@\nanything\n:\n \n@\neverything\n}\n;\n\n\n[[\nBranch\n \ngetInstance\n]\n \nuserCompletedAction\n:\naction\n \nwithState\n:\nmetadata\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nRegisters a custom commerce event\n\n\n\n\n\n\nUses \nTrack commerce properties\n for \nCurrency\n and \nCategory\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\n// only revenue is required\n\n\nlet\n \ncommerceEvent\n \n=\n \nBNCCommerceEvent\n.\ninit\n()\n\n\ncommerceEvent\n.\naffiliation\n \n=\n \naffiliation\n\n\ncommerceEvent\n.\ncoupon\n \n=\n \ncoupon\n\n\ncommerceEvent\n.\ncurrency\n \n=\n \nUSD\n\n\ncommerceEvent\n.\ntransactionID\n \n=\n \ntransactionID\n\n\ncommerceEvent\n.\nshipping\n \n=\n \n11.22\n\n\ncommerceEvent\n.\nrevenue\n \n=\n \n99.99\n\n\ncommerceEvent\n.\ntax\n \n=\n \n4.42\n\n\n\n// optional\n\n\nlet\n \nproduct1\n \n=\n \nBNCProduct\n.\ninit\n()\n\n\nproduct1\n.\nsku\n \n=\n \nsku1\n\n\nproduct1\n.\nname\n \n=\n \nname1\n\n\nproduct1\n.\nprice\n \n=\n \n11.11\n\n\nproduct1\n.\nquantity\n \n=\n \n1\n\n\nproduct1\n.\nbrand\n \n=\n \nbrand1\n\n\nproduct1\n.\ncategory\n \n=\n \ncategory1\n\n\nproduct1\n.\nvariant\n \n=\n \nvariant1\n\n\n\n// optional\n\n\nlet\n \nproduct2\n \n=\n \nBNCProduct\n.\ninit\n()\n\n\nproduct2\n.\nsku\n \n=\n \nsku2\n\n\nproduct2\n.\nname\n \n=\n \nname2\n\n\nproduct2\n.\nprice\n \n=\n \n22.22\n\n\nproduct2\n.\nquantity\n \n=\n \n2\n\n\nproduct2\n.\nbrand\n \n=\n \nbrand2\n\n\nproduct2\n.\ncategory\n \n=\n \ncategory2\n\n\nproduct2\n.\nvariant\n \n=\n \nvariant2\n\n\n\ncommerceEvent\n.\nproducts\n \n=\n \n[\nproduct1\n,\n \nproduct2\n]\n\n\n\n// optional\n\n\nlet\n \nmetadata\n:\n \n[\nString\n:\n \nAny\n]\n \n=\n \n[\n\n  \ncustom_dictionary\n:\n \n123\n,\n\n  \nanything\n:\n \neverything\n\n\n]\n\n\n\nBranch\n.\ngetInstance\n().\nsend\n(\ncommerceEvent\n,\n \nmetadata\n:\n \nmetadata\n,\n \nwithCompletion\n:\n \n{\n \n(\nresponse\n,\n \nerror\n)\n \nin\n\n  \nprint\n(\nresponse\n \n??\n \n{})\n\n\n})\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n \n// only revenue is required\n\n\nBNCCommerceEvent\n \n*\ncommerceEvent\n \n=\n \n[\nBNCCommerceEvent\n \nnew\n];\n\n\ncommerceEvent\n.\naffiliation\n \n=\n \n@\naffiliation\n;\n\n\ncommerceEvent\n.\ncoupon\n \n=\n \n@\ncoupon\n;\n\n\ncommerceEvent\n.\ncurrency\n \n=\n \n@\nUSD\n;\n\n\ncommerceEvent\n.\ntransactionID\n \n=\n \n@\ntransactionID\n;\n\n\ncommerceEvent\n.\nshipping\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n11.22\n];\n\n\ncommerceEvent\n.\nrevenue\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n99.99\n];\n\n\ncommerceEvent\n.\ntax\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n4.2\n];;\n\n\n\n// optional\n\n\nBNCProduct\n \n*\nproduct1\n \n=\n \n[\nBNCProduct\n \nnew\n];\n\n\nproduct1\n.\nsku\n \n=\n \n@\nsku1\n;\n\n\nproduct1\n.\nname\n \n=\n \n@\nname1\n;\n\n\nproduct1\n.\nprice\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n11.11\n];\n\n\nproduct1\n.\nquantity\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n1.0\n];\n\n\nproduct1\n.\nbrand\n \n=\n \n@\nbrand1\n;\n\n\nproduct1\n.\ncategory\n \n=\n \n@\ncategory1\n;\n\n\nproduct1\n.\nvariant\n \n=\n \n@\nvariant1\n;\n\n\n\n// optional\n\n\nBNCProduct\n \n*\nproduct2\n \n=\n \n[\nBNCProduct\n \nnew\n];\n\n\nproduct2\n.\nsku\n \n=\n \n@\nsku2\n;\n\n\nproduct2\n.\nname\n \n=\n \n@\nname2\n;\n\n\nproduct2\n.\nprice\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n22.22\n];\n\n\nproduct2\n.\nquantity\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n2.0\n];\n\n\nproduct2\n.\nbrand\n \n=\n \n@\nbrand2\n;\n\n\nproduct2\n.\ncategory\n \n=\n \n@\ncategory2\n;\n\n\nproduct2\n.\nvariant\n \n=\n \n@\nvariant2\n;\n\n\n\ncommerceEvent\n.\nproducts\n \n=\n \n@[\nproduct1\n,\n \nproduct2\n]\n;\n\n\n\n// optional\n\n\nNSDictionary\n \n*\nmetadata\n \n=\n \n@{\n@\ncustom_dictionary\n:\n@123\n,\n\n                       \n@\nanything\n:\n \n@\neverything\n}\n;\n\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsendCommerceEvent\n:\ncommerceEvent\n \nmetadata\n:\nmetadata\n\n                     \nwithCompletion\n:\n^\n(\nNSDictionary\n \n*\nresponse\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n    \nNSLog\n(\n@\n%@\n,\nresponse\n);\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral points are obtained from referral rules on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits\n\n\n\n\nReferral guide\n\n\n\n\n\n\n\n\nRedeem credits\n\n\n\n\n\n\nSwift 3\n\n\n// option 1 (default bucket)\n\n\nlet\n \namount\n \n=\n \n5\n\n\nBranch\n.\ngetInstance\n().\nredeemRewards\n(\namount\n)\n\n\n\n// option 2\n\n\nlet\n \nbucket\n \n=\n \nsignup\n\n\nBranch\n.\ngetInstance\n().\nredeemRewards\n(\namount\n,\n \nforBucket\n:\n \nbucket\n)\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n// option 1 (default bucket)\n\n\nNSInteger\n \namount\n \n=\n \n5\n;\n\n\n[[\nBranch\n \ngetInstance\n]\n \nredeemRewards\n:\namount\n];\n\n\n\n// option 2\n\n\nNSString\n \n*\nbucket\n \n=\n \n@\nsignup\n;\n\n\n[[\nBranch\n \ngetInstance\n]\n \nredeemRewards\n:\namount\n \nforBucket\n:\nbucket\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoad credits\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\nloadRewards\n \n{\n \n(\nchanged\n,\n \nerror\n)\n \nin\n\n  \n// option 1 (defualt bucket)\n\n  \nlet\n \ncredits\n \n=\n \nBranch\n.\ngetInstance\n().\ngetCredits\n()\n\n\n  \n// option 2\n\n  \nlet\n \nbucket\n \n=\n \nsignup\n\n  \nlet\n \ncredits\n \n=\n \nBranch\n.\ngetInstance\n().\ngetCreditsForBucket\n(\nbucket\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nloadRewardsWithCallback\n:\n^\n(\nBOOL\n \nchanged\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n    \nif\n \n(\nchanged\n)\n \n{\n\n    \n// option 1 (defualt bucket)\n\n    \nNSInteger\n \ncredits\n \n=\n \n[[\nBranch\n \ngetInstance\n]\n \ngetCredits\n];\n\n\n    \n// option 2\n\n    \nNSString\n \n*\nbucket\n \n=\n \n@\nsignup\n;\n\n    \nNSInteger\n \ncredit\n \n=\n \n[[\nBranch\n \ngetInstance\n]\n \ngetCreditsForBucket\n:\nbucket\n];\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoad history\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\ngetCreditHistory\n \n{\n \n(\ncreditHistory\n,\n \nerror\n)\n \nin\n\n   \nprint\n(\ncreditHistory\n \n??\n \n{})\n\n \n}\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \ngetCreditHistoryWithCallback\n:\n^\n(\nNSArray\n \n*\n \n_Nullable\n \ncreditHistory\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n    \nNSLog\n(\n@\n%@\n,\ncreditHistory\n);\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle push notifications\n\n\n\n\n\n\nAllows you to track Branch deep links in your push notifications\n\n\n\n\n\n\nInclude the Branch push notification handler in \nInitialize Branch\n\n\n\n\n\n\nAdd a Branch deep link in your push notification  \npayload\n\n\n{\n\n  \naps\n:\n \n{\n\n    \nalert\n:\n \nPush notification with a Branch deep link\n,\n\n    \nbadge\n:\n \n1\n\n  \n},\n\n\n  \nbranch\n:\n \nhttps://example.app.link/u3fzDwyyjF\n\n\n}\n\n\n\n\n\n\n\nReplace \nhttps://example.app.link/u3fzDwyyjF\n with your deep link\n\n\n\n\n\n\n\n\nRead deep link data from \ninitSession\n \nInitialize Branch\n\n\n\n\n\n\n\n\n\n\nHandle links in your own app\n\n\n\n\n\n\nAllows you to deep link into your own from your app itself\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\nhandleDeepLink\n(\nwithNewSession\n:\n \nURL\n(\nstring\n:\n \nhttps://example.app.link/u3fzDwyyjF\n))\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nhandleDeepLinkWithNewSession\n:[\nNSURL\n \nURLWithString\n:\n@\nhttps://example.app.link/u3fzDwyyjF\n]];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nHandling a new deep link in your app will clear the current session data and a new referred \"open\" will be attributed.\n\n\n\n\n\n\n\n\nTrack Apple Search Ads\n\n\n\n\n\n\nAllows Branch to track Apple Search Ads deep linking analytics\n\n\n\n\n\n\nAnalytics from Apple's API have been slow which will make our analytics lower. Additionally, Apple's API does not send us all the data of an ad every time which will make ads tracked by us to show a generic campaign sometimes.\n\n\n\n\n\n\nAdd before \ninitSession\n \nInitialize Branch\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\ndelayInitToCheckForSearchAds\n()\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \ndelayInitToCheckForSearchAds\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest with fake campaign params (do not test in production)\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\nsetAppleSearchAdsDebugMode\n()\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetAppleSearchAdsDebugMode\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnable 100% matching\n\n\n\n\n\n\nUse the \nSFSafariViewController\n to increase the attribution matching success\n\n\n\n\n\n\nThe 100% match is a bit of a misnomer, as it is only 100% match from when a user clicks from the Safari browser. According to our analysis, clicking through Safari happens about 50-75% of the time depending on the use case. For example, clicking from Facebook, Gmail or Chrome won\u2019t trigger a 100% match here. However, it\u2019s still beneficial to the matching accuracy, so we recommend employing it.\n\n\n\n\n\n\nWhen using a custom domain, add a \nbranch_app_domain\n string key in your Info.plist with your custom domain\nto enable 100% matching.\n\n\n\n\n\n\nBy default, cookie-based matching is enabled on iOS 9 and 10 if the \nSafariServices.framework\n\nis included in an app's dependencies, and the app uses an app.link subdomain or sets the \nbranch_app_domain\n\nin the Info.plist. It can be disabled with a call to the SDK.\n\n\n\n\n\n\nAdd before \ninitSession\n \nInitialize Branch\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\ndisableCookieBasedMatching\n()\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \ndisableCookieBasedMatching\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nSubmitting to the App Store\n\n\n\n\nNeed to select \napp uses IDFA or GAID\n when publishing your app (for better deep link matching)\n\n\n\n\n\n\n\n\nApp not opening\n\n\n\n\n\n\nDouble check \nIntegrate Branch\n\n\n\n\n\n\nInvestigate if the device disabled universal links (\nRe-enable universal linking\n)\n\n\n\n\n\n\nInvestigate if it is a link related issue (\nDeep links do not open app\n)\n\n\n\n\n\n\nUse \nUniversal links validator\n\n\n\n\n\n\nUse \nAASA validator\n\n\n\n\n\n\nUse \nTest deep link\n\n\n\n\n\n\n\n\n\n\nApp not passing data\n\n\n\n\n\n\nSee if issue is related to \nApp not opening\n\n\n\n\n\n\nInvestigate Branch console logs (\nEnable logging\n)\n\n\n\n\n\n\n\n\n\n\nSimulate an install\n\n\n\n\n\n\nDelete your app\n\n\n\n\n\n\niPhone Device -\n Settings -\n Privacy -\n Advertising -\n Reset Advertising Identifier -\n Reset Identifier\n\n\n\n\n\n\nAdd \nBranch.setDebug(true)\n before \ninitSession\n (\nInitialize Branch Features\n)\n\n\n\n\n\n\nClick on a deep link to navigate to your \n$fallback_url\n because your app is not installed\n\n\n\n\n\n\nInstall your app\n\n\n\n\n\n\nOpen your app\n\n\n\n\n\n\nRead from \nparams\n within \ninitSession\n for \n+is_first_session = true\n\n\n\n\n\n\n\n\n\n\nDeep links are long\n\n\n\n\n\n\nHappens whenever the app cannot make a connection to the Branch servers\n\n\n\n\n\n\nThe long deep links will still open the app and pass data\n\n\n\n\n\n\n\n\n\n\nSample apps\n\n\n\n\n\n\nSwift testbed\n\n\n\n\n\n\nObjective C testbed\n\n\n\n\n\n\n\n\n\n\nTrack content properties\n\n\n\n\n\n\nUsed for \nTrack content\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nBNCRegisterViewEvent\n\n\nUser viewed the object\n\n\n\n\n\n\nBNCAddToWishlistEvent\n\n\nUser added the object to their wishlist\n\n\n\n\n\n\nBNCAddToCartEvent\n\n\nUser added object to cart\n\n\n\n\n\n\nBNCPurchaseInitiatedEvent\n\n\nUser started to check out\n\n\n\n\n\n\nBNCPurchasedEvent\n\n\nUser purchased the item\n\n\n\n\n\n\nBNCShareInitiatedEvent\n\n\nUser started to share the object\n\n\n\n\n\n\nBNCShareCompletedEvent\n\n\nUser completed a share\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnable logging\n\n\n\n\n\n\nUse the Branch test key instead of the live key\n\n\n\n\n\n\nAdd before \ninitSession\n \nInitialize Branch\n\n\n\n\n\n\nRemove before releasing to production\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\nsetDebug\n()\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetDebug\n];\n\n\n\n\n\n\n\n\n\nMake sure \nOS_ACTIVITY_MODE\n is not disabled (\nlink\n)\n\n\n\n\n\n\n\n\n\n\nUse test key\n\n\n\n\n\n\nUse the Branch \ntest key\n instead of the \nlive key\n\n\n\n\n\n\nAdd before \ninitSession\n \nInitialize Branch\n\n\n\n\n\n\nUpdate \nbranch_key\n in your \nInfo.plist\n to a dictionary (\nexample\n)\n\n\n\n\n\n\nThe \ntest key\n of your app must match the \ntest key\n of your deep link\n\n\n\n\n\n\nRemove before releasing to production\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\nsetUseTestBranchKey\n(\ntrue\n)\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[\nBranch\n \nsetUseTestBranchKey\n:\nYES\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nRe-enable universal linking\n\n\n\n\n\n\nApple allows users to disable universal linking on a per app per device level on iOS 9 and iOS 10 (fixed in iOS 11)\n\n\n\n\n\n\nUse \nTest deep link\n to re-enable universal linking on the device\n\n\n\n\n\n\n\n\n\n\nDeep link routing with a Branch ViewController\n\n\n\n\n\n\nAdd before \ninitSession\n \nInitialize Branch\n\n\n\n\n\n\nRecommend to \nNavigate to content\n instead\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\nregisterDeepLinkController\n(\nViewController\n(),\n \nforKey\n:\n \nmy-key\n,\n \nwithPresentation\n:\n \n.\noptionShow\n)\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nregisterDeepLinkController\n:\ncustomViewController\n \nforKey\n:\n@\nmy-key\nwithPresentation\n:\nBNCViewControllerOptionShow\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nDetermine if deep link is from Branch without network\n\n\n\n\nUse for Universal Linking if you want to get the \ntrue/false\n response from \nBranch.getInstance().continue(userActivity)\n within \ncontinueUserActivity\n without a Branch network call\n\n\nUse only if you have a custom link domain\n\n\n\n\nAdd \nbranch_universal_link_domains\n to your \ninfo.plist\n with an array of your link domain from your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nShare to email options\n\n\n\n\n\n\nChange the way your deep links behave when shared to email\n\n\n\n\n\n\nNeeds a \nShare deep link\n\n\n\n\n\n\nSwift 3\n\n\nlp\n.\naddControlParam\n(\n$email_subject\n,\n \nwithValue\n:\n \nTherapists hate him.\n)\n\n\nlp\n.\naddControlParam\n(\n$email_html_header\n,\n \nwithValue\n:\n \nstyle\nyour awesome CSS\n/style\n\\n\nOr Dear Friend,\n)\n\n\nlp\n.\naddControlParam\n(\n$email_html_footer\n,\n \nwithValue\n:\n \nThanks!\n)\n\n\nlp\n.\naddControlParam\n(\n$email_html_link_text\n,\n \nwithValue\n:\n \nTap here\n)\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[\nlp\n \naddControlParam\n:\n@\n$email_subject\n \nwithValue\n:\n@\nThis one weird trick.\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$email_html_header\n \nwithValue\n:\n@\nstyle\nyour awesome CSS\n/style\n\\n\nOr Dear Friend,\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$email_html_footer\n \nwithValue\n:\n@\nThanks!\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$email_html_link_text\n \nwithValue\n:\n@\nTap here\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare message dynamically\n\n\n\n\n\n\nChange the message you share based on the source the users chooses\n\n\n\n\n\n\nNeeds a \nShare deep link\n\n\n\n\n\n\nSwift 3\n\n\n// import delegate\n\n\nclass\n \nViewController\n:\n \nUITableViewController\n,\n \nBranchShareLinkDelegate\n\n\n\nfunc\n \nbranchShareLinkWillShare\n(\n_\n \nshareLink\n:\n \nBranchShareLink\n)\n \n{\n\n  \n// choose shareSheet.activityType\n\n  \nshareLink\n.\nshareText\n \n=\n \n\\(\nshareLink\n.\nlinkProperties\n.\nchannel\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n// import delegate\n\n\n@interface\n \nViewController\n \n()\n \nBranchShareLinkDelegate\n\n\n\n-\n \n(\nvoid\n)\n \nbranchShareLinkWillShare\n:(\nBranchShareLink\n*\n)\nshareLink\n \n{\n\n  \n// choose shareSheet.activityType\n\n  \nshareLink\n.\nshareText\n \n=\n \n[\nNSString\n \nstringWithFormat\n:\n@\n@%\n,\n \nshareLink\n.\nlinkProperties\n.\nchannel\n];\n\n\n}", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/apps/ios/#integrate-branch", 
            "text": "Inconsistent Universal links behavior on iOS 11.2  After updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set  forced uri redirect mode  on your Branch links to open the app with URI schemes. View details of the issue on the  Apple Bug report .", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/ios/#configure-branch", 
            "text": "Complete the  Basic integration  within  Configure your dashboard    Make sure  I have an iOS app  is enabled", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/ios/#configure-bundle-identifier", 
            "text": "Make sure Bundle Id matches your  Branch Dashboard", 
            "title": "Configure bundle identifier"
        }, 
        {
            "location": "/pages/apps/ios/#configure-associated-domains", 
            "text": "Add your link domains from your  Branch Dashboard  -alternate  is needed for Universal Linking with the  Web SDK  inside your Website  test-  is needed if you need use a  test key   If you use a  custom link domain , you will need to include your old link domain, your  -alternate  link domain, and your new link domain", 
            "title": "Configure associated domains"
        }, 
        {
            "location": "/pages/apps/ios/#configure-entitlements", 
            "text": "Confirm entitlements are within target", 
            "title": "Configure entitlements"
        }, 
        {
            "location": "/pages/apps/ios/#configure-infoplist", 
            "text": "Add  Branch Dashboard  values   Add  branch_app_domain  with your live key domain  Add  branch_key  with your current Branch key  Add your URI scheme as  URL Types  -   Item 0  -   URL Schemes", 
            "title": "Configure info.pList"
        }, 
        {
            "location": "/pages/apps/ios/#confirm-app-prefix", 
            "text": "From your  Apple Developer Account", 
            "title": "Confirm app prefix"
        }, 
        {
            "location": "/pages/apps/ios/#install-branch", 
            "text": "Option 1:  CocoaPods  platform :ios,  8.0 \n\ntarget  APP_NAME   do \n   # if swift \n  use_frameworks!   pod  Branch  end  pod install   pod update    Option 2:  Carthage  github  BranchMetrics/ios-branch-deep-linking     Option 3: Manually install the  source code  with dependencies   Drag and drop  Branch.framework  into  Embedded Binaries  (select  Copy items if needed )  Import  AdSupport ,  SafariServices ,  MobileCoreServices ,  CoreSpotlight , and  iAd  into  Linked Frameworks", 
            "title": "Install Branch"
        }, 
        {
            "location": "/pages/apps/ios/#initialize-branch", 
            "text": "Swift 3  import   UIKit  import   Branch   @UIApplicationMain  class   AppDelegate :   UIResponder ,   UIApplicationDelegate   {  var   window :   UIWindow ?  func   application ( _   application :   UIApplication ,   didFinishLaunchingWithOptions   launchOptions :   [ UIApplicationLaunchOptionsKey :   Any ]?)   -   Bool   {     // for debug and development only     Branch . getInstance (). setDebug ()     // listener for Branch Deep Link data     Branch . getInstance (). initSession ( launchOptions :   launchOptions )   {   ( params ,   error )   in       // do stuff with deep link data (nav to page, display content, etc)       print ( params   as ?   [ String :   AnyObject ]   ??   {})     }     return   true  }  func   application ( _   app :   UIApplication ,   open   url :   URL ,   options :   [ UIApplicationOpenURLOptionsKey   :   Any ]   =   [:])   -   Bool   {     // handler for URI Schemes (depreciated in iOS 9.2+, but still used by some apps)     Branch . getInstance (). application ( app ,   open :   url ,   options :   options )     return   true  }  func   application ( _   application :   UIApplication ,   continue   userActivity :   NSUserActivity ,   restorationHandler :   @ escaping   ([ Any ]?)   -   Void )   -   Bool   {     // handler for Universal Links     Branch . getInstance (). continue ( userActivity )     return   true  }  func   application ( _   application :   UIApplication ,   didReceiveRemoteNotification   userInfo :   [ AnyHashable   :   Any ],   fetchCompletionHandler   completionHandler :   @ escaping   ( UIBackgroundFetchResult )   -   Void )   {     // handler for Push Notifications     Branch . getInstance (). handlePushNotification ( userInfo )  }     Objective-C  #import  AppDelegate.h  #import  Branch/Branch.h   @interface   AppDelegate   ()  @end  @implementation   AppDelegate  -   ( BOOL ) application: ( UIApplication   * ) application   didFinishLaunchingWithOptions: ( NSDictionary   * ) launchOptions   {     // for debug and development only     [[ Branch   getInstance ]   setDebug ];     // listener for Branch Deep Link data     [[ Branch   getInstance ]   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   *   _Nonnull   params ,   NSError   *   _Nullable   error )   {       // do stuff with deep link data (nav to page, display content, etc)       NSLog ( @ %@ ,   params );     }];     return   YES ;  }  -   ( BOOL ) application: ( UIApplication   * ) app   openURL: ( NSURL   * ) url   options: ( NSDictionary UIApplicationOpenURLOptionsKey , id   * ) options   {     // handler for URI Schemes (depreciated in iOS 9.2+, but still used by some apps)     [[ Branch   getInstance ]   application : app   openURL : url   options : options ];     return   YES ;  }  -   ( BOOL ) application: ( UIApplication   * ) application   continueUserActivity: ( NSUserActivity   * ) userActivity   restorationHandler: ( void   ( ^ )( NSArray   *   _Nullable )) restorationHandler   {     // handler for Universal Links     [[ Branch   getInstance ]   continueUserActivity : userActivity ];     return   YES ;  }  -   ( void ) application: ( UIApplication   * ) application   didReceiveRemoteNotification: ( NSDictionary   * ) userInfo   {     // handler for Push Notifications     [[ Branch   getInstance ]   handlePushNotification : userInfo ];  }  @end", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/ios/#test-deep-link", 
            "text": "Create a deep link from the  Branch Dashboard  Delete your app from the device  Compile and test on a device  Paste deep link in  Apple Notes  Long press on the deep link (not 3D Touch)  Click  Open in \"APP_NAME\"  to open your app ( example )    Testing deferred deep linking  Deferred deep linking is simply deep linking into an app that is not yet installed. Once the app is installed, the context is preserved and the user's first app-open will have the deep link data from the original Branch link. To test this, uninstall the app from your device, click the Branch link, and manually launch the app from Xcode. You should be routed to the correct content within your app.", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/ios/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/ios/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share    Uses  Universal Object properties    Swift 3  // required: canonicalIdentifier or title  // recommended: title, contentDescription, imageUrl for social media cards  let   buo   =   BranchUniversalObject ( canonicalIdentifier :   content/123 )  buo . canonicalUrl   =   https://example.com/content/123  buo . title   =   Content 123 Title  buo . contentDescription   =   Content 123 Description  \\( Date ())  buo . imageUrl   =   http://lorempixel.com/400/400/  buo . keywords   =   [ awesome ,   things ]  // index on Apple Spotlight  buo . locallyIndex   =   true  // index on Google, Branch, etc  buo . publiclyIndex   =   true  // additional object details  buo . contentMetadata . contentSchema   =   . commerceRestaurant  buo . contentMetadata . quantity   =   12  buo . contentMetadata . price   =   33.44  buo . contentMetadata . currency   =   . USD  buo . contentMetadata . sku   =   123  buo . contentMetadata . productName   =   grapes  buo . contentMetadata . productBrand   =   welch  buo . contentMetadata . productCategory   =   BNCProductCategory . foodBeverageTobacco  buo . contentMetadata . productVariant   =   bulk  buo . contentMetadata . condition   =   . good  buo . contentMetadata . ratingAverage   =   4.5  buo . contentMetadata . ratingCount   =   78  buo . contentMetadata . ratingMax   =   5  buo . contentMetadata . addressStreet   =   123 Over Here  buo . contentMetadata . addressCity   =   Austin  buo . contentMetadata . addressRegion   =   Texas  buo . contentMetadata . addressCountry   =   USA  buo . contentMetadata . addressPostalCode   =   76035  buo . contentMetadata . latitude   =   30.267153  buo . contentMetadata . longitude   =   - 97.743061  // custom key-value pairs  buo . contentMetadata . imageCaptions   =   [ awesome ,   things ]  buo . contentMetadata . customMetadata   =   [ custom :   123 ]  buo . contentMetadata . customMetadata   =   [ anything :   everything ]  // user actions with the object  buo . userCompletedAction ( BranchStandardEvent . addToCart . rawValue )  buo . userCompletedAction ( Viewed )     Objective-C  // only canonical identifier is required  BranchUniversalObject   * buo   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ content/123 ];  buo . title   =   @ Content 123 Title ;  buo . contentDescription   =   @ Content 123 Description ;  buo . imageUrl   =   @ https://lorempixel.com/400/400 ;  buo . price   =   12.12 ;  buo . currency   =   @ USD ;  buo . contentIndexMode   =   ContentIndexModePublic ;  buo . automaticallyListOnSpotlight   =   YES ;  [ buo   addMetadataKey : @ custom   value :[[ NSUUID   UUID ]   UUIDString ]];  [ buo   addMetadataKey : @ anything   value : @ everything ];", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/ios/#create-link-reference", 
            "text": "Generates the analytical properties for the deep link    Used for  Create deep link  and  Share deep link    Uses  Configure link data  and custom data    Swift 3  let   lp :   BranchLinkProperties   =   BranchLinkProperties ()  lp . channel   =   facebook  lp . feature   =   sharing  lp . campaign   =   content 123 launch  lp . stage   =   new user  lp . tags   =   [ one ,   two ,   three ]  lp . addControlParam ( $desktop_url ,   withValue :   http://example.com/desktop )  lp . addControlParam ( $ios_url ,   withValue :   http://example.com/ios )  lp . addControlParam ( $ipad_url ,   withValue :   http://example.com/ios )  lp . addControlParam ( $android_url ,   withValue :   http://example.com/android )  lp . addControlParam ( $match_duration ,   withValue :   2000 )  lp . addControlParam ( custom_data ,   withValue :   yes )  lp . addControlParam ( look_at ,   withValue :   this )  lp . addControlParam ( nav_to ,   withValue :   over here )  lp . addControlParam ( random ,   withValue :   UUID . init (). uuidString )     Objective-C  BranchLinkProperties   * lp   =   [[ BranchLinkProperties   alloc ]   init ];  lp . feature   =   @ facebook ;  lp . channel   =   @ sharing ;  lp . campaign   =   @ content 123 launch ;  lp . stage   =   @ new user ;  lp . tags   =   @[ @ one ,   @ two ,   @ three ] ;  [ lp   addControlParam : @ $desktop_url   withValue :   @ http://example.com/desktop ];  [ lp   addControlParam : @ $ios_url   withValue :   @ http://example.com/ios ];  [ lp   addControlParam : @ $ipad_url   withValue :   @ http://example.com/ios ];  [ lp   addControlParam : @ $android_url   withValue :   @ http://example.com/android ];  [ lp   addControlParam : @ $match_duration   withValue :   @ 2000 ];  [ lp   addControlParam : @ custom_data   withValue :   @ yes ];  [ lp   addControlParam : @ look_at   withValue :   @ this ];  [ lp   addControlParam : @ nav_to   withValue :   @ over here ];  [ lp   addControlParam : @ random   withValue :   [[ NSUUID   UUID ]   UUIDString ]];", 
            "title": "Create link reference"
        }, 
        {
            "location": "/pages/apps/ios/#create-deep-link", 
            "text": "Generates a deep link within your app    Needs a  Create content reference    Needs a  Create link reference    Validate with the  Branch Dashboard    Swift 3  buo . getShortUrl ( with :   lp )   {   ( url ,   error )   in \n   print ( url   ??   )  }     Objective-C  [ buo   getShortUrlWithLinkProperties : lp   andCallback : ^ ( NSString *   url ,   NSError *   error )   { \n     if   ( ! error )   { \n         NSLog ( @ @ ,   url ); \n     }  }];", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/ios/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Needs a  Create content reference    Needs a  Create link reference    Uses  Deep Link Properties    Swift 3  let   message   =   Check out this link  buo . showShareSheet ( with :   lp ,   andShareText :   message ,   from :   self )   {   ( activityType ,   completed )   in \n   print ( activityType   ??   )  }     Objective C  [ buo   showShareSheetWithLinkProperties : lp   andShareText : @ Super amazing thing I want to share!   fromViewController : self   completion : ^ ( NSString *   activityType ,   BOOL   completed )   { \n     NSLog ( @ finished presenting );  }];", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/ios/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Returns  deep link properties    Swift 3  // listener (within AppDelegate didFinishLaunchingWithOptions)  Branch . getInstance (). initSession ( launchOptions :   launchOptions )   {   params ,   error   in \n   print ( params   as ?   [ String :   AnyObject ]   ??   {})  }  // latest  let   sessionParams   =   Branch . getInstance (). getLatestReferringParams ()  // first  let   installParams   =   Branch . getInstance (). getFirstReferringParams ()     Objective C  [[ Branch   getInstance ]   initSessionWithLaunchOptions : launchOptions \n                         andRegisterDeepLinkHandler : ^ ( NSDictionary   *   _Nullable   params , \n                                                      NSError   *   _Nullable   error )   { \n     if   ( ! error )   { \n         //Referring params \n         NSLog ( @ Referring link params %@ , params ); \n     }  }];  // latest  NSDictionary   * sessionParams   =   [[ Branch   getInstance ]   getLatestReferringParams ];  // first  NSDictionary   * installParams   =    [[ Branch   getInstance ]   getFirstReferringParams ];", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/ios/#navigate-to-content", 
            "text": "Handled within  Branch.initSession()    Swift 3  // within AppDelegate application.didFinishLaunchingWithOptions  Branch . getInstance (). initSession ( launchOptions :   launchOptions )   {   params   ,   error   in \n   // Option 1: read deep link data \n   guard   let   data   =   params   as ?   [ String :   AnyObject ]   else   {   return   } \n\n   // Option 2: save deep link data to global model \n   SomeCustomClass . sharedInstance . branchData   =   data \n\n   // Option 3: display data \n   let   alert   =   UIAlertController ( title :   Deep link data ,   message :   \\( data ) ,   preferredStyle :   . alert ) \n   alert . addAction ( UIAlertAction ( title :   Okay ,   style :   . default ,   handler :   nil )) \n   self . window ?. rootViewController ?. present ( alert ,   animated :   true ,   completion :   nil ) \n\n   // Option 4: navigate to view controller \n   guard   let   options   =   data [ nav_to ]   as ?   String   else   {   return   } \n   switch   options   { \n       case   landing_page :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n       case   tutorial :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n       case   content :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n       default :   break \n   }  }     Objective C  // within AppDelegate application.didFinishLaunchingWithOptions  [[ Branch   getInstance ]   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   *   _Nonnull   params ,   NSError   *   _Nullable   error )   { \n   // Option 1: read deep link data \n   NSLog ( @ %@ ,   params ); \n\n   // Option 2: save deep link data to global model \n   NSUserDefaults   * defaults   =   [ NSUserDefaults   standardUserDefaults ]; \n   [ defaults   setObject : params . description   forKey : @ BranchData ]; \n   [ defaults   synchronize ]; \n\n   // Option 3: display data \n   UIAlertController   *   alert   =   [ UIAlertController   alertControllerWithTitle : @ Title   message : params . description   preferredStyle : UIAlertControllerStyleAlert ]; \n   UIAlertAction   * button   =   [ UIAlertAction   actionWithTitle : @ Deep Link Data   style : UIAlertActionStyleDefault   handler : nil ]; \n   [ alert   addAction : button ]; \n   [ self . window . rootViewController   presentViewController : alert   animated : YES   completion : nil ]; \n\n   // Option 4: navigate to view controller \n   if   ([ params   objectForKey : @ navHere ])   { \n     ViewController   * anotherViewController   =   [[ ViewController   alloc ]   initWithNibName : @ anotherViewController   bundle : nil ]; \n     [ self . window . rootViewController   presentViewController : anotherViewController   animated : YES   completion : nil ]; \n   }  }];", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/ios/#display", 
            "text": "List content on  iOS Spotlight    Needs a  Create content reference    Swift 3  buo . automaticallyListOnSpotlight   =   true     Objective-C  buo . automaticallyListOnSpotlight   =   YES ;", 
            "title": "Display"
        }, 
        {
            "location": "/pages/apps/ios/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Create content reference    Validate with the  Branch Dashboard    Swift 3  buo . registerView ()     Objective-C  [ buo   userCompletedAction : BNCRegisterViewEvent ];", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/ios/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    Validate with the  Branch Dashboard    Swift 3  // login  Branch . getInstance (). setIdentity ( your_user_id )  // logout  Branch . getInstance (). logout ()     Objective-C  // login  [[ Branch   getInstance ]   setIdentity : @ your_user_id ];  // logout  [[ Branch   getInstance ]   logout ];", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/ios/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard    Swift 3  // option 1  let   action   =   signup  Branch . getInstance (). userCompletedAction ( action )  // option 2  let   metadata :   [ String :   Any ]   =   [ \n   custom_dictionary :   123 , \n   anything :   everything  ]  Branch . getInstance (). userCompletedAction ( action ,   withState :   metadata )     Objective-C  // option 1  NSString   * action   =   @ signup ;  [[ Branch   getInstance ]   userCompletedAction : action ];  // option 2  NSDictionary   * metadata   =   @{ @ custom_dictionary : @123 ,   @ anything :   @ everything } ;  [[ Branch   getInstance ]   userCompletedAction : action   withState : metadata ];", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/ios/#track-commerce", 
            "text": "Registers a custom commerce event    Uses  Track commerce properties  for  Currency  and  Category    Validate with the  Branch Dashboard    Swift 3  // only revenue is required  let   commerceEvent   =   BNCCommerceEvent . init ()  commerceEvent . affiliation   =   affiliation  commerceEvent . coupon   =   coupon  commerceEvent . currency   =   USD  commerceEvent . transactionID   =   transactionID  commerceEvent . shipping   =   11.22  commerceEvent . revenue   =   99.99  commerceEvent . tax   =   4.42  // optional  let   product1   =   BNCProduct . init ()  product1 . sku   =   sku1  product1 . name   =   name1  product1 . price   =   11.11  product1 . quantity   =   1  product1 . brand   =   brand1  product1 . category   =   category1  product1 . variant   =   variant1  // optional  let   product2   =   BNCProduct . init ()  product2 . sku   =   sku2  product2 . name   =   name2  product2 . price   =   22.22  product2 . quantity   =   2  product2 . brand   =   brand2  product2 . category   =   category2  product2 . variant   =   variant2  commerceEvent . products   =   [ product1 ,   product2 ]  // optional  let   metadata :   [ String :   Any ]   =   [ \n   custom_dictionary :   123 , \n   anything :   everything  ]  Branch . getInstance (). send ( commerceEvent ,   metadata :   metadata ,   withCompletion :   {   ( response ,   error )   in \n   print ( response   ??   {})  })     Objective C    // only revenue is required  BNCCommerceEvent   * commerceEvent   =   [ BNCCommerceEvent   new ];  commerceEvent . affiliation   =   @ affiliation ;  commerceEvent . coupon   =   @ coupon ;  commerceEvent . currency   =   @ USD ;  commerceEvent . transactionID   =   @ transactionID ;  commerceEvent . shipping   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 11.22 ];  commerceEvent . revenue   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 99.99 ];  commerceEvent . tax   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 4.2 ];;  // optional  BNCProduct   * product1   =   [ BNCProduct   new ];  product1 . sku   =   @ sku1 ;  product1 . name   =   @ name1 ;  product1 . price   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 11.11 ];  product1 . quantity   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 1.0 ];  product1 . brand   =   @ brand1 ;  product1 . category   =   @ category1 ;  product1 . variant   =   @ variant1 ;  // optional  BNCProduct   * product2   =   [ BNCProduct   new ];  product2 . sku   =   @ sku2 ;  product2 . name   =   @ name2 ;  product2 . price   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 22.22 ];  product2 . quantity   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 2.0 ];  product2 . brand   =   @ brand2 ;  product2 . category   =   @ category2 ;  product2 . variant   =   @ variant2 ;  commerceEvent . products   =   @[ product1 ,   product2 ] ;  // optional  NSDictionary   * metadata   =   @{ @ custom_dictionary : @123 , \n                        @ anything :   @ everything } ;  [[ Branch   getInstance ]   sendCommerceEvent : commerceEvent   metadata : metadata \n                      withCompletion : ^ ( NSDictionary   * response ,   NSError   * error )   { \n     NSLog ( @ %@ , response );  }];", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/ios/#handle-referrals", 
            "text": "Referral points are obtained from referral rules on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits   Referral guide     Redeem credits    Swift 3  // option 1 (default bucket)  let   amount   =   5  Branch . getInstance (). redeemRewards ( amount )  // option 2  let   bucket   =   signup  Branch . getInstance (). redeemRewards ( amount ,   forBucket :   bucket )     Objective C  // option 1 (default bucket)  NSInteger   amount   =   5 ;  [[ Branch   getInstance ]   redeemRewards : amount ];  // option 2  NSString   * bucket   =   @ signup ;  [[ Branch   getInstance ]   redeemRewards : amount   forBucket : bucket ];       Load credits    Swift 3  Branch . getInstance (). loadRewards   {   ( changed ,   error )   in \n   // option 1 (defualt bucket) \n   let   credits   =   Branch . getInstance (). getCredits () \n\n   // option 2 \n   let   bucket   =   signup \n   let   credits   =   Branch . getInstance (). getCreditsForBucket ( bucket )  }     Objective C  [[ Branch   getInstance ]   loadRewardsWithCallback : ^ ( BOOL   changed ,   NSError   *   _Nullable   error )   { \n     if   ( changed )   { \n     // option 1 (defualt bucket) \n     NSInteger   credits   =   [[ Branch   getInstance ]   getCredits ]; \n\n     // option 2 \n     NSString   * bucket   =   @ signup ; \n     NSInteger   credit   =   [[ Branch   getInstance ]   getCreditsForBucket : bucket ]; \n     }  }];       Load history    Swift 3  Branch . getInstance (). getCreditHistory   {   ( creditHistory ,   error )   in \n    print ( creditHistory   ??   {}) \n  }     Objective C  [[ Branch   getInstance ]   getCreditHistoryWithCallback : ^ ( NSArray   *   _Nullable   creditHistory ,   NSError   *   _Nullable   error )   { \n     NSLog ( @ %@ , creditHistory );  }];", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/ios/#handle-push-notifications", 
            "text": "Allows you to track Branch deep links in your push notifications    Include the Branch push notification handler in  Initialize Branch    Add a Branch deep link in your push notification   payload  { \n   aps :   { \n     alert :   Push notification with a Branch deep link , \n     badge :   1 \n   },     branch :   https://example.app.link/u3fzDwyyjF  }    Replace  https://example.app.link/u3fzDwyyjF  with your deep link     Read deep link data from  initSession   Initialize Branch", 
            "title": "Handle push notifications"
        }, 
        {
            "location": "/pages/apps/ios/#handle-links-in-your-own-app", 
            "text": "Allows you to deep link into your own from your app itself    Swift 3  Branch . getInstance (). handleDeepLink ( withNewSession :   URL ( string :   https://example.app.link/u3fzDwyyjF ))     Objective C  [[ Branch   getInstance ]   handleDeepLinkWithNewSession :[ NSURL   URLWithString : @ https://example.app.link/u3fzDwyyjF ]];        Warning  Handling a new deep link in your app will clear the current session data and a new referred \"open\" will be attributed.", 
            "title": "Handle links in your own app"
        }, 
        {
            "location": "/pages/apps/ios/#track-apple-search-ads", 
            "text": "Allows Branch to track Apple Search Ads deep linking analytics    Analytics from Apple's API have been slow which will make our analytics lower. Additionally, Apple's API does not send us all the data of an ad every time which will make ads tracked by us to show a generic campaign sometimes.    Add before  initSession   Initialize Branch    Swift 3  Branch . getInstance (). delayInitToCheckForSearchAds ()     Objective C  [[ Branch   getInstance ]   delayInitToCheckForSearchAds ];       Test with fake campaign params (do not test in production)    Swift 3  Branch . getInstance (). setAppleSearchAdsDebugMode ()     Objective C  [[ Branch   getInstance ]   setAppleSearchAdsDebugMode ];", 
            "title": "Track Apple Search Ads"
        }, 
        {
            "location": "/pages/apps/ios/#enable-100-matching", 
            "text": "Use the  SFSafariViewController  to increase the attribution matching success    The 100% match is a bit of a misnomer, as it is only 100% match from when a user clicks from the Safari browser. According to our analysis, clicking through Safari happens about 50-75% of the time depending on the use case. For example, clicking from Facebook, Gmail or Chrome won\u2019t trigger a 100% match here. However, it\u2019s still beneficial to the matching accuracy, so we recommend employing it.    When using a custom domain, add a  branch_app_domain  string key in your Info.plist with your custom domain\nto enable 100% matching.    By default, cookie-based matching is enabled on iOS 9 and 10 if the  SafariServices.framework \nis included in an app's dependencies, and the app uses an app.link subdomain or sets the  branch_app_domain \nin the Info.plist. It can be disabled with a call to the SDK.    Add before  initSession   Initialize Branch    Swift 3  Branch . getInstance (). disableCookieBasedMatching ()     Objective C  [[ Branch   getInstance ]   disableCookieBasedMatching ];", 
            "title": "Enable 100% matching"
        }, 
        {
            "location": "/pages/apps/ios/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/ios/#submitting-to-the-app-store", 
            "text": "Need to select  app uses IDFA or GAID  when publishing your app (for better deep link matching)", 
            "title": "Submitting to the App Store"
        }, 
        {
            "location": "/pages/apps/ios/#app-not-opening", 
            "text": "Double check  Integrate Branch    Investigate if the device disabled universal links ( Re-enable universal linking )    Investigate if it is a link related issue ( Deep links do not open app )    Use  Universal links validator    Use  AASA validator    Use  Test deep link", 
            "title": "App not opening"
        }, 
        {
            "location": "/pages/apps/ios/#app-not-passing-data", 
            "text": "See if issue is related to  App not opening    Investigate Branch console logs ( Enable logging )", 
            "title": "App not passing data"
        }, 
        {
            "location": "/pages/apps/ios/#simulate-an-install", 
            "text": "Delete your app    iPhone Device -  Settings -  Privacy -  Advertising -  Reset Advertising Identifier -  Reset Identifier    Add  Branch.setDebug(true)  before  initSession  ( Initialize Branch Features )    Click on a deep link to navigate to your  $fallback_url  because your app is not installed    Install your app    Open your app    Read from  params  within  initSession  for  +is_first_session = true", 
            "title": "Simulate an install"
        }, 
        {
            "location": "/pages/apps/ios/#deep-links-are-long", 
            "text": "Happens whenever the app cannot make a connection to the Branch servers    The long deep links will still open the app and pass data", 
            "title": "Deep links are long"
        }, 
        {
            "location": "/pages/apps/ios/#sample-apps", 
            "text": "Swift testbed    Objective C testbed", 
            "title": "Sample apps"
        }, 
        {
            "location": "/pages/apps/ios/#track-content-properties", 
            "text": "Used for  Track content     Key  Value      BNCRegisterViewEvent  User viewed the object    BNCAddToWishlistEvent  User added the object to their wishlist    BNCAddToCartEvent  User added object to cart    BNCPurchaseInitiatedEvent  User started to check out    BNCPurchasedEvent  User purchased the item    BNCShareInitiatedEvent  User started to share the object    BNCShareCompletedEvent  User completed a share", 
            "title": "Track content properties"
        }, 
        {
            "location": "/pages/apps/ios/#enable-logging", 
            "text": "Use the Branch test key instead of the live key    Add before  initSession   Initialize Branch    Remove before releasing to production    Swift 3  Branch . getInstance (). setDebug ()     Objective C  [[ Branch   getInstance ]   setDebug ];     Make sure  OS_ACTIVITY_MODE  is not disabled ( link )", 
            "title": "Enable logging"
        }, 
        {
            "location": "/pages/apps/ios/#use-test-key", 
            "text": "Use the Branch  test key  instead of the  live key    Add before  initSession   Initialize Branch    Update  branch_key  in your  Info.plist  to a dictionary ( example )    The  test key  of your app must match the  test key  of your deep link    Remove before releasing to production    Swift 3  Branch . setUseTestBranchKey ( true )     Objective C  [ Branch   setUseTestBranchKey : YES ];", 
            "title": "Use test key"
        }, 
        {
            "location": "/pages/apps/ios/#re-enable-universal-linking", 
            "text": "Apple allows users to disable universal linking on a per app per device level on iOS 9 and iOS 10 (fixed in iOS 11)    Use  Test deep link  to re-enable universal linking on the device", 
            "title": "Re-enable universal linking"
        }, 
        {
            "location": "/pages/apps/ios/#deep-link-routing-with-a-branch-viewcontroller", 
            "text": "Add before  initSession   Initialize Branch    Recommend to  Navigate to content  instead    Swift 3  Branch . getInstance (). registerDeepLinkController ( ViewController (),   forKey :   my-key ,   withPresentation :   . optionShow )     Objective C  [[ Branch   getInstance ]   registerDeepLinkController : customViewController   forKey : @ my-key withPresentation : BNCViewControllerOptionShow ];", 
            "title": "Deep link routing with a Branch ViewController"
        }, 
        {
            "location": "/pages/apps/ios/#determine-if-deep-link-is-from-branch-without-network", 
            "text": "Use for Universal Linking if you want to get the  true/false  response from  Branch.getInstance().continue(userActivity)  within  continueUserActivity  without a Branch network call  Use only if you have a custom link domain   Add  branch_universal_link_domains  to your  info.plist  with an array of your link domain from your  Branch Dashboard", 
            "title": "Determine if deep link is from Branch without network"
        }, 
        {
            "location": "/pages/apps/ios/#share-to-email-options", 
            "text": "Change the way your deep links behave when shared to email    Needs a  Share deep link    Swift 3  lp . addControlParam ( $email_subject ,   withValue :   Therapists hate him. )  lp . addControlParam ( $email_html_header ,   withValue :   style your awesome CSS /style \\n Or Dear Friend, )  lp . addControlParam ( $email_html_footer ,   withValue :   Thanks! )  lp . addControlParam ( $email_html_link_text ,   withValue :   Tap here )     Objective C  [ lp   addControlParam : @ $email_subject   withValue : @ This one weird trick. ];  [ lp   addControlParam : @ $email_html_header   withValue : @ style your awesome CSS /style \\n Or Dear Friend, ];  [ lp   addControlParam : @ $email_html_footer   withValue : @ Thanks! ];  [ lp   addControlParam : @ $email_html_link_text   withValue : @ Tap here ];", 
            "title": "Share to email options"
        }, 
        {
            "location": "/pages/apps/ios/#share-message-dynamically", 
            "text": "Change the message you share based on the source the users chooses    Needs a  Share deep link    Swift 3  // import delegate  class   ViewController :   UITableViewController ,   BranchShareLinkDelegate  func   branchShareLinkWillShare ( _   shareLink :   BranchShareLink )   { \n   // choose shareSheet.activityType \n   shareLink . shareText   =   \\( shareLink . linkProperties . channel )  }     Objective C  // import delegate  @interface   ViewController   ()   BranchShareLinkDelegate  -   ( void )   branchShareLinkWillShare :( BranchShareLink * ) shareLink   { \n   // choose shareSheet.activityType \n   shareLink . shareText   =   [ NSString   stringWithFormat : @ @% ,   shareLink . linkProperties . channel ];  }", 
            "title": "Share message dynamically"
        }, 
        {
            "location": "/pages/apps/android/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete the \nBasic integration\n within \nConfigure your dashboard\n\n\n\n\n\n\nMake sure \nAlways try to open app\n and \nI have an Android App\n are both enabled\n\n\n\n\n\n\n\n\n\n\n\n\nInstall Branch\n\n\n\n\n\n\nImport the Branch SDK to your \nbuild.gradle\n\n\napply\n \nplugin\n:\n \ncom\n.\nandroid\n.\napplication\n\n\n\nandroid\n \n{\n\n    \ncompileSdkVersion\n \n25\n\n    \nbuildToolsVersion\n \n25.0.2\n\n    \ndefaultConfig\n \n{\n\n        \napplicationId\n \ncom.eneff.branch.example.android\n\n        \nminSdkVersion\n \n15\n\n        \ntargetSdkVersion\n \n25\n\n        \nversionCode\n \n1\n\n        \nversionName\n \n1.0\n\n        \ntestInstrumentationRunner\n \nandroid.support.test.runner.AndroidJUnitRunner\n\n    \n}\n\n    \nbuildTypes\n \n{\n\n        \nrelease\n \n{\n\n            \nminifyEnabled\n \nfalse\n\n            \nproguardFiles\n \ngetDefaultProguardFile\n(\nproguard\n-\nandroid\n.\ntxt\n),\n \nproguard\n-\nrules\n.\npro\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\ndependencies\n \n{\n\n    \ncompile\n \nfileTree\n(\ndir\n:\n \nlibs\n,\n \ninclude\n:\n \n[\n*.\njar\n])\n\n    \nandroidTestCompile\n(\ncom\n.\nandroid\n.\nsupport\n.\ntest\n.\nespresso\n:\nespresso\n-\ncore\n:\n2.2.2\n,\n \n{\n\n        \nexclude\n \ngroup\n:\n \ncom\n.\nandroid\n.\nsupport\n,\n \nmodule\n:\n \nsupport\n-\nannotations\n\n    \n})\n\n    \ncompile\n \ncom\n.\nandroid\n.\nsupport\n:\nappcompat\n-\nv7\n:\n25.2.0\n\n    \ncompile\n \ncom\n.\nandroid\n.\nsupport\n:\ndesign\n:\n25.2.0\n\n\n\n    \n// required\n\n\n    \ncompile\n \nio\n.\nbranch\n.\nsdk\n.\nandroid\n:\nlibrary\n:\n2.\n+\n\n\n\n\n    \n// optional\n\n\n    \ncompile\n \ncom\n.\nandroid\n.\nsupport\n:\ncustomtabs\n:\n23.3.0\n \n// Chrome Tab matching\n\n\n    \ncompile\n \ncom\n.\ngoogle\n.\nandroid\n.\ngms\n:\nplay\n-\nservices\n-\nads\n:\n9\n+\n \n// GAID matching\n\n\n    \ncompile\n \ncom\n.\ngoogle\n.\nandroid\n.\ngms\n:\nplay\n-\nservices\n-\nappindexing\n:\n9.\n+\n \n// App indexing\n\n\n\n    \ntestCompile\n \njunit\n:\njunit\n:\n4.12\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\nAdd Branch to your \nAndroidManifest.xml\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nmanifest\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \npackage=\ncom.eneff.branch.example.android\n\n\n    \nuses-permission\n \nandroid:name=\nandroid.permission.INTERNET\n \n/\n\n\n    \napplication\n\n        \nandroid:allowBackup=\ntrue\n\n\n        \nandroid:name=\ncom.eneff.branch.example.android.CustomApplicationClass\n\n\n        \nandroid:icon=\n@mipmap/ic_launcher\n\n        \nandroid:label=\n@string/app_name\n\n        \nandroid:supportsRtl=\ntrue\n\n        \nandroid:theme=\n@style/AppTheme\n\n\n        \nactivity\n\n            \nandroid:name=\n.MainActivity\n\n\n            \nandroid:launchMode=\nsingleTask\n\n\n            \nandroid:label=\n@string/app_name\n\n            \nandroid:theme=\n@style/AppTheme.NoActionBar\n\n\n            \nintent-filter\n\n                \naction\n \nandroid:name=\nandroid.intent.action.MAIN\n \n/\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.LAUNCHER\n \n/\n\n            \n/intent-filter\n\n\n\n            \n!-- Branch URI Scheme --\n\n\n            \nintent-filter\n\n\n                \ndata\n \nandroid:scheme=\nandroidexample\n \n/\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n            \n/intent-filter\n\n\n\n\n            \n!-- Branch App Links (optional) --\n\n\n            \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n                \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nexample.app.link\n \n/\n\n\n                \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nexample-alternate.app.link\n \n/\n\n\n            \n/intent-filter\n\n        \n/activity\n\n\n\n        \n!-- Branch init --\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey\n \nandroid:value=\nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Sw\n \n/\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey.test\n \nandroid:value=\nkey_test_hlxrWC5Zx16DkYmWu4AHiimdqugRYMr\n \n/\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.TestMode\n \nandroid:value=\nfalse\n \n/\n\n\n\n\n        \n!-- Branch install referrer tracking (optional) --\n\n\n        \nreceiver\n \nandroid:name=\nio.branch.referral.InstallListener\n \nandroid:exported=\ntrue\n\n\n            \nintent-filter\n\n\n                \naction\n \nandroid:name=\ncom.android.vending.INSTALL_REFERRER\n \n/\n\n\n            \n/intent-filter\n\n\n        \n/receiver\n\n\n\n    \n/application\n\n\n\n/manifest\n\n\n\n\n\n\n\n\n\nReplace the following with values from your \nBranch Dashboard\n\n\n\n\nandroidexample\n\n\nexample.app.link\n\n\nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Sw\n\n\nkey_test_hlxrWC5Zx16DkYmWu4AHiimdqugRYMr\n\n\n\n\n\n\n\n\n\n\nSingle Task launch mode required\n\n\nIf there is no singleTask Activity instance in the system yet, a new one would be created and simply placed on top of the stack in the same Task. If you are using the Single Task mode as is, it should not restart your entire app. The Single Task mode instantiates the Main/Splash Activity only if it does not exist in the Activity Stack. If the Activity exists in the background, every subsequent intent to the Activity just brings it to the foreground. You can read more about Single Task mode \nhere\n.\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nAdd Branch to your \nMainActivity.java\n\n\n\n\n\n\nJava\n\n\npackage\n \ncom.eneff.branch.example.android\n;\n\n\n\nimport\n \nandroid.content.Intent\n;\n\n\nimport\n \nandroid.os.Bundle\n;\n\n\nimport\n \nandroid.support.design.widget.FloatingActionButton\n;\n\n\nimport\n \nandroid.support.design.widget.Snackbar\n;\n\n\nimport\n \nandroid.support.v7.app.AppCompatActivity\n;\n\n\nimport\n \nandroid.support.v7.widget.Toolbar\n;\n\n\nimport\n \nandroid.util.Log\n;\n\n\nimport\n \nandroid.view.View\n;\n\n\nimport\n \nandroid.view.Menu\n;\n\n\nimport\n \nandroid.view.MenuItem\n;\n\n\n\nimport\n \norg.json.JSONObject\n;\n\n\n\n\nimport\n \nio.branch.referral.Branch\n;\n\n\nimport\n \nio.branch.referral.BranchError\n;\n\n\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nAppCompatActivity\n \n{\n\n\n    \n@Override\n\n    \nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n        \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n        \nsetContentView\n(\nR\n.\nlayout\n.\nactivity_main\n);\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonStart\n()\n \n{\n\n        \nsuper\n.\nonStart\n();\n\n\n\n        \n// Branch init\n\n\n        \nBranch\n.\ngetInstance\n().\ninitSession\n(\nnew\n \nBranch\n.\nBranchReferralInitListener\n()\n \n{\n\n\n            \n@Override\n\n\n            \npublic\n \nvoid\n \nonInitFinished\n(\nJSONObject\n \nreferringParams\n,\n \nBranchError\n \nerror\n)\n \n{\n\n\n                \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n\n                    \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n());\n\n\n                \n}\n \nelse\n \n{\n\n\n                    \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nerror\n.\ngetMessage\n());\n\n\n                \n}\n\n\n            \n}\n\n\n        \n},\n \nthis\n.\ngetIntent\n().\ngetData\n(),\n \nthis\n);\n\n\n    \n}\n\n\n\n    \n@Override\n\n\n    \npublic\n \nvoid\n \nonNewIntent\n(\nIntent\n \nintent\n)\n \n{\n\n\n        \nthis\n.\nsetIntent\n(\nintent\n);\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\npackage\n \ncom.eneff.branch.example.android\n\n\n\nimport\n \nandroid.content.Intent\n\n\nimport\n \nandroid.os.Bundle\n\n\nimport\n \nandroid.support.design.widget.FloatingActionButton\n\n\nimport\n \nandroid.support.design.widget.Snackbar\n\n\nimport\n \nandroid.support.v7.app.AppCompatActivity\n\n\nimport\n \nandroid.support.v7.widget.Toolbar\n\n\nimport\n \nandroid.util.Log\n\n\nimport\n \nandroid.view.View\n\n\nimport\n \nandroid.view.Menu\n\n\nimport\n \nandroid.view.MenuItem\n\n\n\nimport\n \norg.json.JSONObject\n\n\n\n\nimport\n \nio.branch.referral.Branch\n\n\nimport\n \nio.branch.referral.BranchError\n\n\n\n\nclass\n \nMainActivity\n \n:\n \nAppCompatActivity\n()\n \n{\n\n\n    \noverride\n \nfun\n \nonCreate\n(\nsavedInstanceState\n:\n \nBundle\n?)\n \n{\n\n        \nsuper\n.\nonCreate\n(\nsavedInstanceState\n)\n\n        \nsetContentView\n(\nR\n.\nlayout\n.\nactivity_main\n)\n\n    \n}\n\n\n    \noverride\n \nfun\n \nonStart\n()\n \n{\n\n        \nsuper\n.\nonStart\n()\n\n\n\n        \n// Branch init\n\n\n        \nBranch\n.\ngetInstance\n().\ninitSession\n(\nobject\n \n:\n \nBranchReferralInitListener\n \n{\n\n\n            \noverride\n \nfun\n \nonInitFinished\n(\nreferringParams\n:\n \nJSONObject\n,\n \nerror\n:\n \nBranchError\n?)\n \n{\n\n\n                \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n\n                    \nLog\n.\ne\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n)\n\n\n                \n}\n \nelse\n \n{\n\n\n                    \nLog\n.\ne\n(\nBRANCH SDK\n,\n \nerror\n.\nmessage\n)\n\n\n                \n}\n\n\n            \n}\n\n\n        \n},\n \nthis\n.\nintent\n.\ndata\n,\n \nthis\n)\n\n\n    \n}\n\n\n\n    \npublic\n \noverride\n \nfun\n \nonNewIntent\n(\nintent\n:\n \nIntent\n)\n \n{\n\n\n        \nthis\n.\nintent\n \n=\n \nintent\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nOnly initialize Branch in the Launcher activity\n\n\nThe app will open through the Launcher activity, where Branch will initialize and retrieve the deep link data from the link click.\n\n\n\n\n\n\nAlways intialize Branch in \nonStart()\n\n\nInitializing Branch in other Android lifecyle methods, like \nonResume()\n, will lead to unintended behavior. \nonStart()\n is what makes the activity visible to the user, as the app prepares for the activity to enter the foreground and become interactive. Learn more \nhere\n.\n\n\n\n\n\n\n\n\nLoad Branch\n\n\n\n\n\n\nAdd Branch to your \nCustomApplicationClass.java\n\n\n\n\n\n\nJava\n\n\npackage\n \ncom.eneff.branch.example.android\n;\n\n\n\nimport\n \nandroid.app.Application\n;\n\n\nimport\n \nio.branch.referral.Branch\n;\n\n\n\n\npublic\n \nclass\n \nCustomApplicationClass\n \nextends\n \nApplication\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonCreate\n()\n \n{\n\n        \nsuper\n.\nonCreate\n();\n\n\n\n        \n// Branch logging for debugging\n\n\n        \nBranch\n.\nenableLogging\n();\n\n\n\n\n        \n// Branch object initialization\n\n\n        \nBranch\n.\ngetAutoInstance\n(\nthis\n);\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\npackage\n \ncom.eneff.branch.example.android\n\n\n\nimport\n \nandroid.app.Application\n\n\nimport\n \nio.branch.referral.Branch\n\n\n\n\nclass\n \nCustomApplicationClass\n \n:\n \nApplication\n()\n \n{\n\n    \noverride\n \nfun\n \nonCreate\n()\n \n{\n\n        \nsuper\n.\nonCreate\n()\n\n\n\n        \n// Branch logging for debugging\n\n\n        \nBranch\n.\nenableLogging\n()\n\n\n\n\n        \n// Branch object initialization\n\n\n        \nBranch\n.\ngetAutoInstance\n(\nthis\n)\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link\n\n\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app to your device\n\n\n\n\n\n\nPaste deep link in \nGoogle Hangouts\n\n\n\n\n\n\nClick on the deep link to open your app\n\n\n\n\n\n\n\n\nTesting deferred deep linking\n\n\nDeferred deep linking is simply deep linking into an app that is not yet installed. Once the app is installed, the context is preserved and the user's first app-open will have the deep link data from the original Branch link. To test this, uninstall the app from your device, click the Branch link, and manually launch the app from Android Studio. You should be routed to the correct content within your app.\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share (content or user)\n\n\n\n\n\n\nUses the \nUniversal Object Properties\n\n\n\n\n\n\nJava\n\n\nBranchUniversalObject\n \nbuo\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n    \n.\nsetCanonicalIdentifier\n(\ncontent/12345\n)\n\n    \n.\nsetTitle\n(\nMy Content Title\n)\n\n    \n.\nsetContentDescription\n(\nMy Content Description\n)\n\n    \n.\nsetContentImageUrl\n(\nhttps://lorempixel.com/400/400\n)\n\n    \n.\nsetContentIndexingMode\n(\nBranchUniversalObject\n.\nCONTENT_INDEX_MODE\n.\nPUBLIC\n)\n\n    \n.\nsetLocalIndexingMode\n(\nBranchUniversalObject\n.\nCONTENT_INDEX_MODE\n.\nPUBLIC\n)\n\n    \n.\nsetContentMetadata\n(\nnew\n \nContentMetadata\n().\naddCustomMetadata\n(\nkey1\n,\n \nvalue1\n));\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nval\n \nbuo\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n    \n.\nsetCanonicalIdentifier\n(\ncontent/12345\n)\n\n    \n.\nsetTitle\n(\nMy Content Title\n)\n\n    \n.\nsetContentDescription\n(\nMy Content Description\n)\n\n    \n.\nsetContentImageUrl\n(\nhttps://lorempixel.com/400/400\n)\n\n    \n.\nsetContentIndexingMode\n(\nBranchUniversalObject\n.\nCONTENT_INDEX_MODE\n.\nPUBLIC\n)\n\n    \n.\nsetLocalIndexingMode\n(\nBranchUniversalObject\n.\nCONTENT_INDEX_MODE\n.\nPUBLIC\n)\n\n    \n.\nsetContentMetadata\n(\nContentMetadata\n().\naddCustomMetadata\n(\nkey1\n,\n \nvalue1\n))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nCreates a deep link URL with encapsulated data\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nJava\n\n\nLinkProperties\n \nlp\n \n=\n \nnew\n \nLinkProperties\n()\n\n    \n.\nsetChannel\n(\nfacebook\n)\n\n    \n.\nsetFeature\n(\nsharing\n)\n\n    \n.\nsetCampaign\n(\ncontent 123 launch\n)\n\n    \n.\nsetStage\n(\nnew user\n)\n\n    \n.\naddControlParameter\n(\n$desktop_url\n,\n \nhttp://example.com/home\n)\n\n    \n.\naddControlParameter\n(\ncustom\n,\n \ndata\n)\n\n    \n.\naddControlParameter\n(\ncustom_random\n,\n \nLong\n.\ntoString\n(\nCalendar\n.\ngetInstance\n().\ngetTimeInMillis\n()));\n\n\n\nbuo\n.\ngenerateShortUrl\n(\nthis\n,\n \nlp\n,\n \nnew\n \nBranch\n.\nBranchLinkCreateListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonLinkCreate\n(\nString\n \nurl\n,\n \nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \ngot my Branch link to share: \n \n+\n \nurl\n);\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nval\n \nlp\n \n=\n \nnew\n \nLinkProperties\n()\n\n    \n.\nsetChannel\n(\nfacebook\n)\n\n    \n.\nsetFeature\n(\nsharing\n)\n\n    \n.\nsetCampaign\n(\ncontent 123 launch\n)\n\n    \n.\nsetStage\n(\nnew user\n)\n\n    \n.\naddControlParameter\n(\n$desktop_url\n,\n \nhttp://example.com/home\n)\n\n    \n.\naddControlParameter\n(\ncustom\n,\n \ndata\n)\n\n    \n.\naddControlParameter\n(\ncustom_random\n,\n \nLong\n.\ntoString\n(\nCalendar\n.\ngetInstance\n().\ngetTimeInMillis\n()))\n\n\n\nbuo\n.\ngenerateShortUrl\n(\nthis\n,\n \nlp\n,\n \nBranchLinkCreateListener\n \n{\n \nurl\n,\n \nerror\n \n-\n\n    \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n        \nLog\n.\ni\n(\nBRANCH SDK\n,\n \ngot my Branch link to share: \n \n+\n \nurl\n)\n\n    \n}\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nJava\n\n\nLinkProperties\n \nlp\n \n=\n \nnew\n \nLinkProperties\n()\n\n    \n.\nsetChannel\n(\nfacebook\n)\n\n    \n.\nsetFeature\n(\nsharing\n)\n\n    \n.\nsetCampaign\n(\ncontent 123 launch\n)\n\n    \n.\nsetStage\n(\nnew user\n)\n\n    \n.\naddControlParameter\n(\n$desktop_url\n,\n \nhttp://example.com/home\n)\n\n    \n.\naddControlParameter\n(\ncustom\n,\n \ndata\n)\n\n    \n.\naddControlParameter\n(\ncustom_random\n,\n \nLong\n.\ntoString\n(\nCalendar\n.\ngetInstance\n().\ngetTimeInMillis\n()));\n\n\n\nShareSheetStyle\n \nss\n \n=\n \nnew\n \nShareSheetStyle\n(\nMainActivity\n.\nthis\n,\n \nCheck this out!\n,\n \nThis stuff is awesome: \n)\n\n    \n.\nsetCopyUrlStyle\n(\nContextCompat\n.\ngetDrawable\n(\nthis\n,\n \nandroid\n.\nR\n.\ndrawable\n.\nic_menu_send\n),\n \nCopy\n,\n \nAdded to clipboard\n)\n\n    \n.\nsetMoreOptionStyle\n(\nContextCompat\n.\ngetDrawable\n(\nthis\n,\n \nandroid\n.\nR\n.\ndrawable\n.\nic_menu_search\n),\n \nShow more\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nFACEBOOK\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nEMAIL\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nMESSAGE\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nHANGOUT\n)\n\n    \n.\nsetAsFullWidthStyle\n(\ntrue\n)\n\n    \n.\nsetSharingTitle\n(\nShare With\n);\n\n\n\nbuo\n.\nshowShareSheet\n(\nthis\n,\n \nlp\n,\n  \nss\n,\n  \nnew\n \nBranch\n.\nBranchLinkShareListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonShareLinkDialogLaunched\n()\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonShareLinkDialogDismissed\n()\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonLinkShareResponse\n(\nString\n \nsharedLink\n,\n \nString\n \nsharedChannel\n,\n \nBranchError\n \nerror\n)\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonChannelSelected\n(\nString\n \nchannelName\n)\n \n{\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nvar\n \nlp\n \n=\n \nnew\n \nLinkProperties\n()\n\n    \n.\nsetChannel\n(\nfacebook\n)\n\n    \n.\nsetFeature\n(\nsharing\n)\n\n    \n.\nsetCampaign\n(\ncontent 123 launch\n)\n\n    \n.\nsetStage\n(\nnew user\n)\n\n    \n.\naddControlParameter\n(\n$desktop_url\n,\n \nhttp://example.com/home\n)\n\n    \n.\naddControlParameter\n(\ncustom\n,\n \ndata\n)\n\n    \n.\naddControlParameter\n(\ncustom_random\n,\n \nLong\n.\ntoString\n(\nCalendar\n.\ngetInstance\n().\ngetTimeInMillis\n()))\n\n\n\nvar\n \nss\n \n=\n \nnew\n \nShareSheetStyle\n(\nthis\n@MainActivity\n,\n \nCheck this out!\n,\n \nThis stuff is awesome: \n)\n\n    \n.\nsetCopyUrlStyle\n(\nresources\n.\ngetDrawable\n(\nthis\n,\n \nandroid\n.\nR\n.\ndrawable\n.\nic_menu_send\n),\n \nCopy\n,\n \nAdded to clipboard\n)\n\n    \n.\nsetMoreOptionStyle\n(\nresources\n.\ngetDrawable\n(\nthis\n,\n \nandroid\n.\nR\n.\ndrawable\n.\nic_menu_search\n),\n \nShow more\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nFACEBOOK\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nEMAIL\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nMESSAGE\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nHANGOUT\n)\n\n    \n.\nsetAsFullWidthStyle\n(\ntrue\n)\n\n    \n.\nsetSharingTitle\n(\nShare With\n)\n\n\n\nbuo\n.\nshowShareSheet\n(\nthis\n,\n \nlp\n,\n \nss\n,\n \nobject\n \n:\n \nBranch\n.\nBranchLinkShareListener\n \n{\n\n    \noverride\n \nfun\n \nonShareLinkDialogLaunched\n()\n \n{}\n\n    \noverride\n \nfun\n \nonShareLinkDialogDismissed\n()\n \n{}\n\n    \noverride\n \nfun\n \nonLinkShareResponse\n(\nsharedLink\n:\n \nString\n,\n \nsharedChannel\n:\n \nString\n,\n \nerror\n:\n \nBranchError\n)\n \n{}\n\n    \noverride\n \nfun\n \nonChannelSelected\n(\nchannelName\n:\n \nString\n)\n \n{}\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nReturns \ndeep link properties\n\n\n\n\n\n\nJava\n\n\n// listener (within Main Activity\ns onStart)\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nnew\n \nBranch\n.\nBranchReferralInitListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonInitFinished\n(\nJSONObject\n \nreferringParams\n,\n \nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n());\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nerror\n.\ngetMessage\n());\n\n        \n}\n\n    \n}\n\n\n},\n \nthis\n.\ngetIntent\n().\ngetData\n(),\n \nthis\n);\n\n\n\n// latest\n\n\nJSONObject\n \nsessionParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetLatestReferringParams\n();\n\n\n\n// first\n\n\nJSONObject\n \ninstallParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetFirstReferringParams\n();\n\n\n\n\n\n\n\n\n\nKotlin\n\n\n// listener (within Main Activity\ns onStart)\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nobject\n \n:\n \nBranchReferralInitListener\n \n{\n\n    \noverride\n \nfun\n \nonInitFinished\n(\nreferringParams\n:\n \nJSONObject\n,\n \nerror\n:\n \nBranchError\n?)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \nLog\n.\ne\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n)\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ne\n(\nBRANCH SDK\n,\n \nerror\n.\nmessage\n)\n\n        \n}\n\n    \n}\n\n\n},\n \nthis\n.\nintent\n.\ndata\n,\n \nthis\n)\n\n\n\n// latest\n\n\nval\n \nsessionParams\n \n=\n \nBranch\n.\ngetInstance\n().\nlatestReferringParams\n\n\n\n// first\n\n\nval\n \ninstallParams\n \n=\n \nBranch\n.\ngetInstance\n().\nfirstReferringParams\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nDo stuff with the Branch deep link data\n\n\n\n\n\n\nJava\n\n\n// listener (within Main Activity\ns onStart)\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nnew\n \nBranch\n.\nBranchReferralInitListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonInitFinished\n(\nJSONObject\n \nreferringParams\n,\n \nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \n// option 1: log data\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n());\n\n\n            \n// option 2: save data to be used later\n\n            \nSharedPreferences\n \npreferences\n \n=\n \n.\ngetSharedPreferences\n(\nMyPreferences\n,\n \nContext\n.\nMODE_PRIVATE\n);\n\n            \nSharedPreferences\n.\nEditor\n \neditor\n \n=\n \npreferences\n.\nedit\n();\n\n            \neditor\n.\nputString\n(\nbranchData\n,\n \nreferringParams\n.\ntoString\n(\n2\n));\n\n            \neditor\n.\ncommit\n();\n\n\n            \n// option 3: navigate to page\n\n            \nIntent\n \nintent\n \n=\n \nnew\n \nIntent\n(\nMainActivity\n.\nthis\n,\n \nOtherActivity\n.\nclass\n);\n\n            \nintent\n.\nputExtra\n(\nbranchData\n,\n \nreferringParams\n.\ntoString\n(\n2\n));\n\n            \nstartActivity\n(\nintent\n);\n\n\n            \n// option 4: display data\n\n            \nToast\n.\nmakeText\n(\nthis\n,\n \nreferringParams\n.\ntoString\n(\n2\n),\n \nToast\n.\nLENGTH_LONG\n).\nshow\n();\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nerror\n.\ngetMessage\n());\n\n        \n}\n\n    \n}\n\n\n},\n \nthis\n.\ngetIntent\n().\ngetData\n(),\n \nthis\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\n// listener (within Main Activity\ns onStart)\n\n\nBranch\n.\ngetInstance\n().\ninitSession\n(\nobject\n \n:\n \nBranchReferralInitListener\n \n{\n\n    \noverride\n \nfun\n \nonInitFinished\n(\nreferringParams\n:\n \nJSONObject\n,\n \nerror\n:\n \nBranchError\n?)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \n// option 1: log data\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n())\n\n\n            \n// option 2: save data to be used later\n\n            \nval\n \npreferences\n \n=\n  \ngetSharedPreferences\n(\nMyPreferences\n,\n \nContext\n.\nMODE_PRIVATE\n)\n\n            \nval\n \neditor\n \n=\n \npreferences\n.\nedit\n()\n\n            \neditor\n.\nputString\n(\nbranchData\n,\n \nreferringParams\n.\ntoString\n(\n2\n))\n\n            \neditor\n.\ncommit\n()\n\n\n            \n// option 3: navigate to page\n\n            \nval\n \nintent\n \n=\n \nIntent\n(\nthis\n,\n \nMainActivity2\n::\nclass\n.\njava\n)\n\n            \nintent\n.\nputExtra\n(\nbranchData\n,\n \nreferringParams\n.\ntoString\n(\n2\n))\n\n            \nstartActivity\n(\nintent\n)\n\n\n            \n// option 4: display data\n\n            \nToast\n.\nmakeText\n(\nthis\n,\n \nreferringParams\n.\ntoString\n(\n2\n),\n \nToast\n.\nLENGTH_SHORT\n).\nshow\n()\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ne\n(\nBRANCH SDK\n,\n \nerror\n.\nmessage\n)\n\n        \n}\n\n    \n}\n\n\n},\n \nthis\n.\nintent\n.\ndata\n,\n \nthis\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nList content on \nGoogle Search\n with \nApp Indexing\n\n\n\n\n\n\nEnable App Indexing on the \nBranch Dashboard\n\n\n\n\n\n\nValidate with the \nApp indexing validator\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nNeeds \nbuild.gradle\n library\n\n\ncompile\n \ncom\n.\ngoogle\n.\nandroid\n.\ngms\n:\nplay\n-\nservices\n-\nappindexing\n:\n9.\n+\n\n\n\n\n\n\n\n\n\nJava\n\n\nbuo\n.\nlistOnGoogleSearch\n(\nthis\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nbuo\n.\nlistOnGoogleSearch\n(\nthis\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nTrack content properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nJava\n\n\nbuo\n.\nuserCompletedAction\n(\nBranchEvent\n.\nVIEW\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nbuo\n.\nuserCompletedAction\n(\nBranchEvent\n.\nVIEW\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\n127\n character max for user id\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nJava\n\n\n// login\n\n\nBranch\n.\ngetInstance\n().\nsetIdentity\n(\nyour_user_id\n);\n\n\n\n// logout\n\n\nBranch\n.\ngetInstance\n().\nlogout\n();\n\n\n\n\n\n\n\n\n\nKotlin\n\n\n// login\n\n\nBranch\n.\ngetInstance\n().\nsetIdentity\n(\nyour_user_id\n)\n\n\n\n// logout\n\n\nBranch\n.\ngetInstance\n().\nlogout\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\n63\n character max for event name\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nJava\n\n\n// option 1:\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\nyour_custom_event\n);\n\n\n\n// option 2: with metadata\n\n\nJSONObject\n \nmetadata\n \n=\n \nnew\n \nJSONObject\n();\n\n\ntry\n \n{\n\n    \nmetadata\n.\nput\n(\nkey\n,\n \nvalue\n);\n\n\n}\n \ncatch\n \n(\n \nJSONException\n \ne\n \n)\n \n{\n\n\n}\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\nyour_custom_event\n,\n \nmetadata\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\n// option 1:\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\nyour_custom_event\n)\n\n\n\n// option 2: with metadata\n\n\nval\n \nmetadata\n \n=\n \nJSONObject\n()\n\n\nmetadata\n.\nput\n(\nkey\n,\n \nvalue\n)\n\n\nBranch\n.\ngetInstance\n().\nuserCompletedAction\n(\nyour_custom_event\n,\n \nmetadata\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nRegisters a custom commerce event\n\n\n\n\n\n\nUses \nCommerce properties\n for \nCurrency\n \n\n\n\n\n\n\nUses \nCommerce properties\n for \nCategory\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nEnsure to add \nrevenue\n field to track purchase. All other fields are optional\n\n\n\n\n\n\nJava\n\n\n//Add details about each product associated with the purchase (optional)\n\n\nProduct\n \nproduct1\n \n=\n \nnew\n \nProduct\n();\n\n\nproduct1\n.\nsetSku\n(\nu123\n);\n\n\nproduct1\n.\nsetName\n(\ncactus\n);\n\n\nproduct1\n.\nsetPrice\n(\n45.00\n);\n\n\nproduct1\n.\nsetQuantity\n(\n2\n);\n\n\nproduct1\n.\nsetBrand\n(\nbrand1\n);\n\n\nproduct1\n.\nsetCategory\n(\nProductCategory\n.\nELECTRONICS\n);\n\n\nproduct1\n.\nsetVariant\n(\nvariant1\n);\n\n\n\nProduct\n \nproduct2\n \n=\n \nnew\n \nProduct\n();\n\n\nproduct2\n.\nsetSku\n(\nu456\n);\n\n\nproduct2\n.\nsetName\n(\ngrass\n);\n\n\nproduct2\n.\nsetPrice\n(\n9.00\n);\n\n\nproduct2\n.\nsetQuantity\n(\n1\n);\n\n\nproduct2\n.\nsetBrand\n(\nbrand2\n);\n\n\nproduct2\n.\nsetCategory\n(\nProductCategory\n.\nCAMERA_AND_OPTICS\n);\n\n\nproduct2\n.\nsetVariant\n(\nvariant2\n);\n\n\n\n\n//Create a list of products associated with the particular purchase (optional)\n\n\nList\nProduct\n \nproductList\n \n=\n \nnew\n \nArrayList\nProduct\n();\n\n\nproductList\n.\nadd\n(\nproduct1\n);\n\n\nproductList\n.\nadd\n(\nproduct2\n);\n\n\n\n//Create the commerce event (only revenue is required)\n\n\nCommerceEvent\n \ncommerceEvent\n \n=\n \nnew\n \nCommerceEvent\n();\n\n\ncommerceEvent\n.\nsetRevenue\n(\n50.29\n);\n\n\ncommerceEvent\n.\nsetCurrencyType\n(\nCurrencyType\n.\nUSD\n);\n\n\ncommerceEvent\n.\nsetTransactionID\n(\nTRANS-1111\n);\n\n\ncommerceEvent\n.\nsetShipping\n(\n4.50\n);\n\n\ncommerceEvent\n.\nsetTax\n(\n110.90\n);\n\n\ncommerceEvent\n.\nsetAffiliation\n(\nAFF-ID-101\n);\n\n\ncommerceEvent\n.\nsetProducts\n(\nproductList\n);\n\n\n\n\n//Add metadata (optional)\n\n\nJSONObject\n \nmetadata\n \n=\n \nnew\n \nJSONObject\n();\n\n\n\ntry\n \n{\n\n    \nmetadata\n.\nput\n(\ncustom_dictionary\n,\n \n123\n);\n\n    \nmetadata\n.\nput\n(\ntestVar\n,\n \nabc\n);\n\n\n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n    \ne\n.\nprintStackTrace\n();\n\n\n}\n\n\n\n\n//Fire the commerce event\n\n\nBranch\n.\ngetInstance\n().\nsendCommerceEvent\n(\ncommerceEvent\n,\n \nmetadata\n,\n \nnull\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\n//Add details about each product associated with the purchase (optional)\n\n\nval\n \nproduct1\n \n=\n \nProduct\n()\n\n\nproduct1\n.\nsku\n \n=\n \nu123\n\n\nproduct1\n.\nname\n \n=\n \ncactus\n\n\nproduct1\n.\nprice\n \n=\n \n45.00\n\n\nproduct1\n.\nquantity\n \n=\n \n2\n\n\nproduct1\n.\nbrand\n \n=\n \nbrand1\n\n\nproduct1\n.\ncategory\n \n=\n \nProductCategory\n.\nELECTRONICS\n\n\nproduct1\n.\nvariant\n \n=\n \nvariant1\n\n\n\nval\n \nproduct2\n \n=\n \nProduct\n()\n\n\nproduct2\n.\nsku\n \n=\n \nu456\n\n\nproduct2\n.\nname\n \n=\n \ngrass\n\n\nproduct2\n.\nprice\n \n=\n \n9.00\n\n\nproduct2\n.\nquantity\n \n=\n \n1\n\n\nproduct2\n.\nbrand\n \n=\n \nbrand2\n\n\nproduct2\n.\ncategory\n \n=\n \nProductCategory\n.\nCAMERA_AND_OPTICS\n\n\nproduct2\n.\nvariant\n \n=\n \nvariant2\n\n\n\n\n//Create a list of products associated with the particular purchase (optional)\n\n\nval\n \nproductList\n \n=\n \nArrayList\nProduct\n()\n\n\nproductList\n.\nadd\n(\nproduct1\n)\n\n\nproductList\n.\nadd\n(\nproduct2\n)\n\n\n\n\n//Create the commerce event (only revenue is required)\n\n\nval\n \ncommerceEvent\n \n=\n \nCommerceEvent\n()\n\n\ncommerceEvent\n.\nrevenue\n \n=\n \n50.29\n\n\ncommerceEvent\n.\ncurrencyType\n \n=\n \nCurrencyType\n.\nUSD\n\n\ncommerceEvent\n.\ntransactionID\n \n=\n \nTRANS-1111\n\n\ncommerceEvent\n.\nshipping\n \n=\n \n4.50\n\n\ncommerceEvent\n.\ntax\n \n=\n \n110.90\n\n\ncommerceEvent\n.\naffiliation\n \n=\n \nAFF-ID-101\n\n\ncommerceEvent\n.\nsetProducts\n(\nproductList\n)\n\n\n\n\n//Add metadata (optional)\n\n\nval\n \nmetadata\n \n=\n \nJSONObject\n()\n\n\n\ntry\n \n{\n\n    \nmetadata\n.\nput\n(\ncustom_dictionary\n,\n \n123\n)\n\n    \nmetadata\n.\nput\n(\ntestVar\n,\n \nabc\n)\n\n\n}\n \ncatch\n \n(\ne\n:\n \nException\n)\n \n{\n\n    \ne\n.\nprintStackTrace\n()\n\n\n}\n\n\n\n\n//Fire the commerce event\n\n\nBranch\n.\ngetInstance\n().\nsendCommerceEvent\n(\ncommerceEvent\n,\n \nmetadata\n,\n \nnull\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral points are obtained from referral rules on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits\n\n\n\n\nReferral guide\n\n\n\n\n\n\n\n\nRedeem credits\n\n\n\n\n\n\nJava\n\n\nBranch\n.\ngetInstance\n().\nredeemRewards\n(\n5\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nBranch\n.\ngetInstance\n().\nredeemRewards\n(\n5\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoad credits\n\n\n\n\n\n\nJava\n\n\nBranch\n.\ngetInstance\n().\nloadRewards\n(\nnew\n \nBranchReferralStateChangedListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonStateChanged\n(\nboolean\n \nchanged\n,\n \nBranch\n.\nBranchError\n \nerror\n)\n \n{\n\n        \nint\n \ncredits\n \n=\n \nbranch\n.\ngetCredits\n();\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nBranch\n.\ngetInstance\n().\nloadRewards\n \n{\n \nchanged\n,\n \nerror\n \n-\n\n    \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n        \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nbranch load rewards failed. Caused by -\n \n+\n \nerror\n.\nmessage\n)\n\n    \n}\n \nelse\n \n{\n\n        \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nchanged = \n \n+\n \nchanged\n)\n\n        \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nrewards = \n \n+\n \nbranch\n.\ncredits\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoad history\n\n\n\n\n\n\nJava\n\n\nBranch\n.\ngetInstance\n().\ngetCreditHistory\n(\nnew\n \nBranchListResponseListener\n()\n \n{\n\n    \npublic\n \nvoid\n \nonReceivingResponse\n(\nJSONArray\n \nlist\n,\n \nBranch\n.\nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nbranch load rewards failed. Caused by -\n \n+\n \nerror\n.\nmessage\n)\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nlist\n);\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nBranch\n.\ngetInstance\n().\ngetCreditHistory\n \n{\n \nhistory\n,\n \nerror\n \n-\n\n    \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n        \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nbranch load credit history failed. Caused by -\n \n+\n \nerror\n.\nmessage\n)\n\n    \n}\n \nelse\n \n{\n\n        \nif\n \n(\nhistory\n.\nlength\n()\n \n \n0\n)\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nhistory\n.\ntoString\n(\n2\n))\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nno history found\n)\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle push notification\n\n\n\n\n\n\nDeep link to content from GCM push notifications just by adding a Branch link to your result intent\n\n\n\n\n\n\nJava\n\n\nIntent\n \nresultIntent\n \n=\n \nnew\n \nIntent\n(\nthis\n,\n \nTargetClass\n.\nclass\n);\n\n\nintent\n.\nputExtra\n(\nbranch\n,\nhttp://xxxx.app.link/testlink\n);\n\n\nPendingIntent\n \nresultPendingIntent\n \n=\n  \nPendingIntent\n.\ngetActivity\n(\nthis\n,\n \n0\n,\n \nresultIntent\n,\n \nPendingIntent\n.\nFLAG_UPDATE_CURRENT\n);\n\n\nintent\n.\nputExtra\n(\nbranch_force_new_session\n,\ntrue\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nval\n \nresultIntent\n \n=\n \nIntent\n(\nthis\n,\n \nTargetClass\n::\nclass\n.\njava\n)\n\n\nintent\n.\nputExtra\n(\nbranch\n,\n \nhttp://xxxx.app.link/testlink\n)\n\n\nval\n \nresultPendingIntent\n \n=\n \nPendingIntent\n.\ngetActivity\n(\nthis\n,\n \n0\n,\n \nresultIntent\n,\n \nPendingIntent\n.\nFLAG_UPDATE_CURRENT\n)\n\n\nintent\n.\nputExtra\n(\nbranch_force_new_session\n,\n \ntrue\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle links in your own app\n\n\n\n\n\n\nAllows you to deep link into your own app from your app itself by launching a Chrome intent\n\n\n\n\n\n\nJava\n\n\nIntent\n \nintent\n \n=\n \nnew\n \nIntent\n(\nthis\n,\n \nActivityToLaunch\n.\nclass\n);\n\n\nintent\n.\nputExtra\n(\nbranch\n,\nhttp://xxxx.app.link/testlink\n);\n\n\nintent\n.\nputExtra\n(\nbranch_force_new_session\n,\ntrue\n);\n\n\nstartActivity\n(\nintent\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nval\n \nintent\n \n=\n \nIntent\n(\nthis\n,\n \nActivityToLaunch\n::\nclass\n.\njava\n)\n\n\nintent\n.\nputExtra\n(\nbranch\n,\n \nhttp://xxxx.app.link/testlink\n)\n\n\nintent\n.\nputExtra\n(\nbranch_force_new_session\n,\n \ntrue\n)\n\n\nstartActivity\n(\nintent\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\nHandling a new deep link in your app will clear the current session data and a new referred \"open\" will be attributed.\n\n\n\n\n\n\n\n\nEnable 100% matching\n\n\n\n\n\n\nUses \nChrome Tabs\n to increase attribute matching success\n\n\n\n\n\n\nAdd \ncompile 'com.android.support:customtabs:23.3.0'\n to your \nbuild.gradle\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nSample testing apps\n\n\n\n\n\n\nBranchsters\n\n\n\n\n\n\nTestbed\n\n\n\n\n\n\n\n\n\n\nSimulate an install\n\n\n\n\n\n\nNeed to bypass the device's hardware_id\n\n\n\n\n\n\nSet \ntrue\n in your \nAndroidManifest.xml\n\n\nmeta-data\n \nandroid:name=\nio.branch.sdk.TestMode\n \nandroid:value=\ntrue\n \n/\n\n\n\n        - \n[or]\n add \nBranch.enableTestMode();\n before your \nBranch.getInstance().initSession()\n\n\n\n\n\n\nDo not use \nTestMode\n in production or in the Google Play Store\n\n\n\n\n\n\n\n\n\n\nUninstall your app from the device\n\n\n\n\n\n\nClick on any Branch deep link (will navigate to the fallback URL since the app is not installed)\n\n\n\n\n\n\nReinstall your app\n\n\n\n\n\n\nRead deep link data from \nBranch.getInstance().initSession()\n for \n+is_first_session=true\n\n\n\n\n\n\n\n\n\n\nTrack content properties\n\n\n\n\n\n\nUsed for \nTrack content\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nBNCRegisterViewEvent\n\n\nUser viewed the object\n\n\n\n\n\n\nBNCAddToWishlistEvent\n\n\nUser added the object to their wishlist\n\n\n\n\n\n\nBNCAddToCartEvent\n\n\nUser added object to cart\n\n\n\n\n\n\nBNCPurchaseInitiatedEvent\n\n\nUser started to check out\n\n\n\n\n\n\nBNCPurchasedEvent\n\n\nUser purchased the item\n\n\n\n\n\n\nBNCShareInitiatedEvent\n\n\nUser started to share the object\n\n\n\n\n\n\nBNCShareCompletedEvent\n\n\nUser completed a share\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing bnc.lt or a custom link domain\n\n\n\n\n\n\nbnc.lt link domain\n\n\nactivity\n \nandroid:name=\ncom.yourapp.your_activity\n\n    \n!-- App Link your activity to Branch links--\n\n    \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n        \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nbnc.lt\n \nandroid:pathPrefix=\n/LVeu\n \n/\n\n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nbnc.lt\n \nandroid:pathPrefix=\n/eVeu\n \n/\n\n    \n/intent-filter\n\n\n/activity\n\n\n\n\n\n\n\n\n\ncustom link domain\n\n\nactivity\n \nandroid:name=\ncom.yourapp.your_activity\n\n    \n!-- App Link your activity to Branch links--\n\n    \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n        \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nyour.app.com\n \nandroid:pathPrefix=\n/LVeu\n \n/\n\n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nyour.app.com\n \nandroid:pathPrefix=\n/eVeu\n \n/\n\n    \n/intent-filter\n\n\n/activity\n\n\n\n\n\n\n\n\n\nChange the following values to match your \nBranch Dashboard\n\n\n\n\n/LVeu\n (live)\n\n\n/eVeu\n (test)\n\n\nyour.app.com\n\n\n\n\n\n\n\n\n\n\n\n\nBranch with Fabric Answers\n\n\n\n\n\n\nIf you do not want to import \nanswers-shim\n\n\ncompile (\nio.branch.sdk.android:library:2.+\n) {\n  exclude module: \nanswers-shim\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nDeep link routing\n\n\n\n\n\n\nLoads a specific URI Scheme path, for example\n\n\n\n\n$deeplink_path=\"content/123\"\n\n\n$android_deeplink_path=\"content/123\"\n\n\n\n\n\n\n\n\nRecommend to use \nNavigate to content\n instead\n\n\nmeta-data\n \nandroid:name=\nio.branch.sdk.auto_link_path\n \nandroid:value=\ncontent/123/, another/path/, another/path/*\n \n/\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeep link routing in app\n\n\n\n\n\n\nUsed for \nWebView\n and \nChromeTab\n within the app to render HTML normally\n\n\n\n\n\n\nBranch links within the \nWebView\n will route internally within your app, while other contents will continue to route externally\n\n\n\n\n\n\nLaunch Branch deep links with \nWeb View\n\n\n\n\n\n\nJava\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n    \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n    \nsetContentView\n(\nR\n.\nlayout\n.\nactivity_main\n);\n\n    \nWebView\n \nwebView\n \n=\n \n(\nWebView\n)\n \nfindViewById\n(\nR\n.\nid\n.\nwebView\n);\n\n    \nwebView\n.\nsetWebViewClient\n(\nnew\n \nBranchWebViewController\n(\nYOUR_DOMAIN\n,\n \nMainActivity\n.\nclass\n));\n \n//YOUR_DOMAIN example: appname.app.link\n\n    \nwebView\n.\nloadUrl\n(\nURL_TO_LOAD\n);\n\n\n}\n\n\n\npublic\n \nclass\n \nBranchWebViewController\n \nextends\n \nWebViewClient\n \n{\n\n\n    \nprivate\n \nString\n \nmyDomain_\n;\n\n    \nprivate\n \nClass\n \nactivityToLaunch_\n;\n\n\n    \nBranchWebViewController\n(\n@NonNull\n \nString\n \nmyDomain\n,\n \nClass\n \nactivityToLaunch\n)\n \n{\n\n        \nmyDomain_\n \n=\n \nmyDomain\n;\n\n        \nactivityToLaunch_\n \n=\n \nactivityToLaunch\n;\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nboolean\n \nshouldOverrideUrlLoading\n(\nWebView\n \nview\n,\n \nWebResourceRequest\n \nrequest\n)\n \n{\n\n        \nString\n \nurl\n \n=\n \nrequest\n.\ngetUrl\n().\ntoString\n();\n\n\n        \nif\n \n(\nurl\n.\ncontains\n(\nmyDomain_\n))\n \n{\n\n            \nIntent\n \ni\n \n=\n \nnew\n \nIntent\n(\nview\n.\ngetContext\n(),\n \nactivityToLaunch_\n);\n\n            \ni\n.\nputExtra\n(\nbranch\n,\n \nurl\n);\n\n            \ni\n.\nputExtra\n(\nbranch_force_new_session\n,\n \ntrue\n);\n\n            \nstartActivity\n(\ni\n);\n\n            \n//finish(); if launching same activity\n\n        \n}\n \nelse\n \n{\n\n            \nview\n.\nloadUrl\n(\nurl\n);\n\n        \n}\n\n\n        \nreturn\n \ntrue\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\noverride\n \nfun\n \nonCreate\n(\nsavedInstanceState\n:\n \nBundle\n?)\n \n{\n\n    \nsuper\n.\nonCreate\n(\nsavedInstanceState\n)\n\n    \nsetContentView\n(\nR\n.\nlayout\n.\nactivity_main\n)\n\n    \nval\n \nwebView\n \n=\n \nfindViewById\n(\nR\n.\nid\n.\nwebView\n)\n \nas\n \nWebView\n\n    \nwebView\n!!.\nwebViewClient\n \n=\n \nBranchWebViewController\n(\nappname.app.link\n,\n \nMainActivity2\n::\nclass\n.\njava\n)\n\n    \nwebView\n!!.\nloadUrl\n(\nURL_TO_LOAD\n)\n\n\n}\n\n\n\ninner\n \nclass\n \nBranchWebViewController\n \ninternal\n \nconstructor\n(\nprivate\n \nval\n \nmyDomain_\n:\n \nString\n,\n \nprivate\n \nval\n \nactivityToLaunch_\n:\n \nClass\n*\n)\n \n:\n \nWebViewClient\n()\n \n{\n\n\n    \noverride\n \nfun\n \nonLoadResource\n(\nview\n:\n \nWebView\n,\n \nurl\n:\n \nString\n)\n \n{\n\n        \nsuper\n.\nonLoadResource\n(\nview\n,\n \nurl\n)\n\n    \n}\n\n\n    \noverride\n \nfun\n \nshouldOverrideUrlLoading\n(\nview\n:\n \nWebView\n,\n \nrequest\n:\n \nWebResourceRequest\n):\n \nBoolean\n \n{\n\n        \nval\n \nurl\n \n=\n \nrequest\n.\nurl\n.\ntoString\n()\n\n\n        \nif\n \n(\nurl\n.\ncontains\n(\nmyDomain_\n))\n \n{\n\n            \nval\n \ni\n \n=\n \nIntent\n(\nview\n.\ncontext\n,\n \nactivityToLaunch_\n)\n\n            \ni\n.\nputExtra\n(\nbranch\n,\n \nurl\n)\n\n            \ni\n.\nputExtra\n(\nbranch_force_new_session\n,\n \ntrue\n)\n\n      \n//finish(); if launching same activity\n\n            \nstartActivity\n(\ni\n)\n\n        \n}\n \nelse\n \n{\n\n            \nview\n.\nloadUrl\n(\nurl\n)\n\n        \n}\n\n\n        \nreturn\n \ntrue\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nLaunch Branch deep links with \nChrome Tabs\n\n\n\n\n\n\nJava\n\n\nCustomTabsIntent\n.\nBuilder\n \nbuilder\n \n=\n \nnew\n \nCustomTabsIntent\n.\nBuilder\n();\n\n\nCustomTabsIntent\n \ncustomTabsIntent\n \n=\n \nbuilder\n.\nbuild\n();\n\n\ncustomTabsIntent\n.\nintent\n.\nputExtra\n(\nbranch\n,\n \nBRANCH_LINK_TO_LOAD\n);\n\n\ncustomTabsIntent\n.\nintent\n.\nputExtra\n(\nbranch_force_new_session\n,\n \ntrue\n);\n\n\ncustomTabsIntent\n.\nlaunchUrl\n(\nMainActivity\n.\nthis\n,\n \nUri\n.\nparse\n(\nBRANCH_LINK_TO_LOAD\n));\n\n\n//finish(); if launching same activity\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nval\n \nbuilder\n \n=\n \nCustomTabsIntent\n.\nBuilder\n()\n\n\nval\n \ncustomTabsIntent\n \n=\n \nbuilder\n.\nbuild\n()\n\n\ncustomTabsIntent\n.\nintent\n.\nputExtra\n(\nbranch\n,\n \nBRANCH_LINK_TO_LOAD\n)\n\n\ncustomTabsIntent\n.\nintent\n.\nputExtra\n(\nbranch_force_new_session\n,\n \ntrue\n)\n\n\ncustomTabsIntent\n.\nlaunchUrl\n(\nthis\n@MainActivity2\n,\n \nUri\n.\nparse\n(\nBRANCH_LINK_TO_LOAD\n))\n\n\n//finish() if launching same activity\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeep link activity finishes\n\n\n\n\n\n\nBe notified when the deep link Activity finishes\n\n\nmeta-data\n \nandroid:name=\nio.branch.sdk.auto_link_request_code\n \nandroid:value=\n@integer/AutoDeeplinkRequestCode\n \n/\n\n\n\n\n\n\n\n\n\nJava\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonActivityResult\n(\nint\n \nrequestCode\n,\n \nint\n \nresultCode\n,\n \nIntent\n \ndata\n)\n \n{\n\n    \nsuper\n.\nonActivityResult\n(\nrequestCode\n,\n \nresultCode\n,\n \ndata\n);\n\n\n    \n// Checking if the previous activity is launched on branch Auto deep link.\n\n    \nif\n(\nrequestCode\n \n==\n \ngetResources\n().\ngetInteger\n(\nR\n.\ninteger\n.\nAutoDeeplinkRequestCode\n)){\n\n        \n//Decide here where  to navigate  when an auto deep linked activity finishes.\n\n        \n//For e.g. Go to HomeActivity or a  SignUp Activity.\n\n        \nIntent\n \ni\n \n=\n \nnew\n \nIntent\n(\ngetApplicationContext\n(),\n \nCreditHistoryActivity\n.\nclass\n);\n\n        \nstartActivity\n(\ni\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\noverride\n \nfun\n \nonActivityResult\n(\nrequestCode\n:\n \nInt\n,\n \nresultCode\n:\n \nInt\n,\n \ndata\n:\n \nIntent\n?)\n \n{\n\n    \nsuper\n.\nonActivityResult\n(\nrequestCode\n,\n \nresultCode\n,\n \ndata\n)\n\n\n    \n// Checking if the previous activity is launched on branch Auto deep link.\n\n    \nif\n \n(\nrequestCode\n \n===\n \nresources\n.\ngetInteger\n(\nR\n.\ninteger\n.\nAutoDeeplinkRequestCode\n))\n \n{\n\n        \n//Decide here where  to navigate  when an auto deep linked activity finishes.\n\n        \n//For e.g. Go to HomeActivity or a  SignUp Activity.\n\n        \nval\n \ni\n \n=\n \nIntent\n(\napplicationContext\n,\n \nCreditHistoryActivity\n::\nclass\n.\njava\n)\n\n        \nstartActivity\n(\ni\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nPre Android 15 support\n\n\n\n\n\n\nUse \nBranch SDK 1.14.5\n\n\n\n\n\n\nAdd to \nonStart()\n and \nonStop()\n\n\n\n\n\n\nJava\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonStart\n()\n \n{\n\n    \nsuper\n.\nonStart\n();\n\n    \nBranch\n.\ngetInstance\n(\ngetApplicationContext\n()).\ninitSession\n();\n\n\n}\n\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonStop\n()\n \n{\n\n    \nsuper\n.\nonStop\n();\n\n    \nbranch\n.\ncloseSession\n();\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\noverride\n \nfun\n \nonStart\n()\n \n{\n\n    \nsuper\n.\nonStart\n()\n\n    \nBranch\n.\ngetInstance\n().\ninitSession\n()\n\n\n}\n\n\n\noverride\n \nfun\n \nonStop\n()\n \n{\n\n    \nsuper\n.\nonStop\n()\n\n    \nBranch\n.\ngetInstance\n().\ncloseSession\n()\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the default application class\n\n\n\n\n\n\nIf your app does not have an application class\n\n\napplication\n \nandroid:name=\nio.branch.referral.BranchApp\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom install referrer class\n\n\n\n\n\n\nGoogle only allows one \nBroadcastReceiver\n per application\n\n\n\n\n\n\nAdd to your \nAndroidManifest.xml\n\n\nreceiver\n \nandroid:name=\ncom.BRANCH SDK.CustomInstallListener\n \nandroid:exported=\ntrue\n\n  \nintent-filter\n\n    \naction\n \nandroid:name=\ncom.android.vending.INSTALL_REFERRER\n \n/\n\n  \n/intent-filter\n\n\n/receiver\n\n\n\n\n\n\n\n\n\nCreate an instance of \nio.branch.referral.InstallListener\n in \nonReceive()\n\n\n\n\n\n\nJava\n\n\nInstallListener\n \nlistener\n \n=\n \nnew\n \nInstallListener\n();\n\n\nlistener\n.\nonReceive\n(\ncontext\n,\n \nintent\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nval\n \nlistener\n \n=\n \nInstallListener\n()\n\n\nlistener\n.\nonReceive\n(\ncontext\n,\n \nintent\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nGenerate signing certificate\n\n\n\n\n\n\nUsed for Android \nApp Link\n deep linking\n\n\n\n\n\n\nNavigate to your keystore file\n\n\n\n\n\n\nRun \nkeytool -list -v -keystore my-release-key.keystore\n\n\n\n\n\n\nWill generate a value like \nAA:C9:D9:A5:E9:76:3E:51:1B:FB:35:00:06:9B:56:AC:FB:A6:28:CE:F3:D6:65:38:18:E3:9C:63:94:FB:D2:C1\n\n\n\n\n\n\nCopy this value to your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\nMatching through the install listener\n\n\n\n\n\n\nEnable the ability to pass \nlink_click_id\n from Google Play to Branch\n\n\n\n\n\n\nThis will increase attribution and deferred deep linking accuracy\n\n\n\n\n\n\nBranch default is \n1.5\n seconds to wait for Google Play analytics\n\n\n\n\n\n\nYou can optimize the performance based on needs (e.g. \n0\n, \n5\n, \n10\n)\n\n\n\n\n\n\nAdd to your application class before \ngetAutoInstance\n (\nLoad Branch\n)\n\n\n\n\n\n\nJava\n\n\nBranch\n.\nsetPlayStoreReferrerCheckTimeout\n(\n5\n);\n\n\n\n\n\n\n\n\n\nKotlin\n\n\nBranch\n.\nsetPlayStoreReferrerCheckTimeout\n(\n5\n)\n\n\n\n\n\n\n\n\n\nTest\n\n\nadb shell am broadcast -a com.android.vending.INSTALL_REFERRER -n io.branch.androidexampledemo/io.branch.referral.InstallListener --es \nreferrer\n \nlink_click_id=123\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnable multidexing\n\n\n\n\n\n\nAdding additional dependencies may overrun the dex limit and lead to \nNoClassDefFoundError\n or \nClassNotFoundException\n\n\n\n\n\n\nAdd to your \nbuild.gradle\n\n\ndefaultConfig\n \n{\n\n    \nmultiDexEnabled\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\n\nAdd to your \nApplication class\n and make sure it extends \nMultiDexApplication\n\n\n\n\n\n\nJava\n\n\n@Override\n\n\nprotected\n \nvoid\n \nattachBaseContext\n(\nContext\n \nbase\n)\n \n{\n\n    \nsuper\n.\nattachBaseContext\n(\nbase\n);\n\n    \nMultiDex\n.\ninstall\n(\nthis\n);\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\noverride\n \nfun\n \nattachBaseContext\n(\nbase\n:\n \nContext\n?)\n \n{\n\n    \nsuper\n.\nattachBaseContext\n(\nbase\n)\n\n    \nMultiDex\n.\ninstall\n(\nthis\n)\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nInvalidClassException, ClassLoadingError or VerificationError\n\n\n\n\nOften caused by a \nProguard\n bug. Try the latest Proguard version or disable Proguard optimization by setting \n-dontoptimize\n\n\n\n\n\n\n\n\nProguard warning or errors with answers-shim module\n\n\n\n\nOften caused when you exclude the \nanswers-shim\n. Try adding \n-dontwarn com.crashlytics.android.answers.shim.**\n to your \nProguard\n file\n\n\n\n\n\n\n\n\nProguard warning or errors with AppIndexing module\n\n\n\n\nThe Branch SDK has an optional dependency on Firebase app indexing classes to provide new Firebase content listing\n    features. This may cause a proguard warning depending on your proguard settings. Please add the following to your\n    proguard file to solve this issue \n-dontwarn com.google.firebase.appindexing.**\n.\n\n\n\n\n\n\n\n\nUnable to open this link error\n\n\n\n\nHappens whenever URI Scheme redirection fails.\n\n\nMake sure you do not have \n$deeplink_path\n or you have a \n$deeplink_path\n which your \nAndroidManifest.xml\n can accept", 
            "title": "Android"
        }, 
        {
            "location": "/pages/apps/android/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/android/#configure-branch", 
            "text": "Complete the  Basic integration  within  Configure your dashboard    Make sure  Always try to open app  and  I have an Android App  are both enabled", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/android/#install-branch", 
            "text": "Import the Branch SDK to your  build.gradle  apply   plugin :   com . android . application  android   { \n     compileSdkVersion   25 \n     buildToolsVersion   25.0.2 \n     defaultConfig   { \n         applicationId   com.eneff.branch.example.android \n         minSdkVersion   15 \n         targetSdkVersion   25 \n         versionCode   1 \n         versionName   1.0 \n         testInstrumentationRunner   android.support.test.runner.AndroidJUnitRunner \n     } \n     buildTypes   { \n         release   { \n             minifyEnabled   false \n             proguardFiles   getDefaultProguardFile ( proguard - android . txt ),   proguard - rules . pro \n         } \n     }  }  dependencies   { \n     compile   fileTree ( dir :   libs ,   include :   [ *. jar ]) \n     androidTestCompile ( com . android . support . test . espresso : espresso - core : 2.2.2 ,   { \n         exclude   group :   com . android . support ,   module :   support - annotations \n     }) \n     compile   com . android . support : appcompat - v7 : 25.2.0 \n     compile   com . android . support : design : 25.2.0       // required       compile   io . branch . sdk . android : library : 2. +        // optional       compile   com . android . support : customtabs : 23.3.0   // Chrome Tab matching       compile   com . google . android . gms : play - services - ads : 9 +   // GAID matching       compile   com . google . android . gms : play - services - appindexing : 9. +   // App indexing  \n     testCompile   junit : junit : 4.12  }", 
            "title": "Install Branch"
        }, 
        {
            "location": "/pages/apps/android/#configure-app", 
            "text": "Add Branch to your  AndroidManifest.xml  ?xml version= 1.0  encoding= utf-8 ?  manifest   xmlns:android= http://schemas.android.com/apk/res/android \n     package= com.eneff.branch.example.android \n\n     uses-permission   android:name= android.permission.INTERNET   / \n\n     application \n         android:allowBackup= true           android:name= com.eneff.branch.example.android.CustomApplicationClass           android:icon= @mipmap/ic_launcher \n         android:label= @string/app_name \n         android:supportsRtl= true \n         android:theme= @style/AppTheme \n\n         activity \n             android:name= .MainActivity               android:launchMode= singleTask               android:label= @string/app_name \n             android:theme= @style/AppTheme.NoActionBar \n\n             intent-filter \n                 action   android:name= android.intent.action.MAIN   / \n                 category   android:name= android.intent.category.LAUNCHER   / \n             /intent-filter               !-- Branch URI Scheme --               intent-filter                   data   android:scheme= androidexample   /                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /               /intent-filter                !-- Branch App Links (optional) --               intent-filter   android:autoVerify= true                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /                   data   android:scheme= https   android:host= example.app.link   /                   data   android:scheme= https   android:host= example-alternate.app.link   /               /intent-filter \n         /activity           !-- Branch init --           meta-data   android:name= io.branch.sdk.BranchKey   android:value= key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Sw   /           meta-data   android:name= io.branch.sdk.BranchKey.test   android:value= key_test_hlxrWC5Zx16DkYmWu4AHiimdqugRYMr   /           meta-data   android:name= io.branch.sdk.TestMode   android:value= false   /            !-- Branch install referrer tracking (optional) --           receiver   android:name= io.branch.referral.InstallListener   android:exported= true               intent-filter                   action   android:name= com.android.vending.INSTALL_REFERRER   /               /intent-filter           /receiver  \n     /application  /manifest     Replace the following with values from your  Branch Dashboard   androidexample  example.app.link  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Sw  key_test_hlxrWC5Zx16DkYmWu4AHiimdqugRYMr      Single Task launch mode required  If there is no singleTask Activity instance in the system yet, a new one would be created and simply placed on top of the stack in the same Task. If you are using the Single Task mode as is, it should not restart your entire app. The Single Task mode instantiates the Main/Splash Activity only if it does not exist in the Activity Stack. If the Activity exists in the background, every subsequent intent to the Activity just brings it to the foreground. You can read more about Single Task mode  here .", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/android/#initialize-branch", 
            "text": "Add Branch to your  MainActivity.java    Java  package   com.eneff.branch.example.android ;  import   android.content.Intent ;  import   android.os.Bundle ;  import   android.support.design.widget.FloatingActionButton ;  import   android.support.design.widget.Snackbar ;  import   android.support.v7.app.AppCompatActivity ;  import   android.support.v7.widget.Toolbar ;  import   android.util.Log ;  import   android.view.View ;  import   android.view.Menu ;  import   android.view.MenuItem ;  import   org.json.JSONObject ;   import   io.branch.referral.Branch ;  import   io.branch.referral.BranchError ;   public   class   MainActivity   extends   AppCompatActivity   { \n\n     @Override \n     protected   void   onCreate ( Bundle   savedInstanceState )   { \n         super . onCreate ( savedInstanceState ); \n         setContentView ( R . layout . activity_main ); \n     } \n\n     @Override \n     public   void   onStart ()   { \n         super . onStart ();           // Branch init           Branch . getInstance (). initSession ( new   Branch . BranchReferralInitListener ()   {               @Override               public   void   onInitFinished ( JSONObject   referringParams ,   BranchError   error )   {                   if   ( error   ==   null )   {                       Log . i ( BRANCH SDK ,   referringParams . toString ());                   }   else   {                       Log . i ( BRANCH SDK ,   error . getMessage ());                   }               }           },   this . getIntent (). getData (),   this );       }       @Override       public   void   onNewIntent ( Intent   intent )   {           this . setIntent ( intent );       }  }     Kotlin  package   com.eneff.branch.example.android  import   android.content.Intent  import   android.os.Bundle  import   android.support.design.widget.FloatingActionButton  import   android.support.design.widget.Snackbar  import   android.support.v7.app.AppCompatActivity  import   android.support.v7.widget.Toolbar  import   android.util.Log  import   android.view.View  import   android.view.Menu  import   android.view.MenuItem  import   org.json.JSONObject   import   io.branch.referral.Branch  import   io.branch.referral.BranchError   class   MainActivity   :   AppCompatActivity ()   { \n\n     override   fun   onCreate ( savedInstanceState :   Bundle ?)   { \n         super . onCreate ( savedInstanceState ) \n         setContentView ( R . layout . activity_main ) \n     } \n\n     override   fun   onStart ()   { \n         super . onStart ()           // Branch init           Branch . getInstance (). initSession ( object   :   BranchReferralInitListener   {               override   fun   onInitFinished ( referringParams :   JSONObject ,   error :   BranchError ?)   {                   if   ( error   ==   null )   {                       Log . e ( BRANCH SDK ,   referringParams . toString )                   }   else   {                       Log . e ( BRANCH SDK ,   error . message )                   }               }           },   this . intent . data ,   this )       }       public   override   fun   onNewIntent ( intent :   Intent )   {           this . intent   =   intent       }  }      Only initialize Branch in the Launcher activity  The app will open through the Launcher activity, where Branch will initialize and retrieve the deep link data from the link click.    Always intialize Branch in  onStart()  Initializing Branch in other Android lifecyle methods, like  onResume() , will lead to unintended behavior.  onStart()  is what makes the activity visible to the user, as the app prepares for the activity to enter the foreground and become interactive. Learn more  here .", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/android/#load-branch", 
            "text": "Add Branch to your  CustomApplicationClass.java    Java  package   com.eneff.branch.example.android ;  import   android.app.Application ;  import   io.branch.referral.Branch ;   public   class   CustomApplicationClass   extends   Application   { \n     @Override \n     public   void   onCreate ()   { \n         super . onCreate ();           // Branch logging for debugging           Branch . enableLogging ();            // Branch object initialization           Branch . getAutoInstance ( this );       }  }     Kotlin  package   com.eneff.branch.example.android  import   android.app.Application  import   io.branch.referral.Branch   class   CustomApplicationClass   :   Application ()   { \n     override   fun   onCreate ()   { \n         super . onCreate ()           // Branch logging for debugging           Branch . enableLogging ()            // Branch object initialization           Branch . getAutoInstance ( this )       }  }", 
            "title": "Load Branch"
        }, 
        {
            "location": "/pages/apps/android/#test-deep-link", 
            "text": "Create a deep link from the  Branch Dashboard    Delete your app from the device    Compile your app to your device    Paste deep link in  Google Hangouts    Click on the deep link to open your app     Testing deferred deep linking  Deferred deep linking is simply deep linking into an app that is not yet installed. Once the app is installed, the context is preserved and the user's first app-open will have the deep link data from the original Branch link. To test this, uninstall the app from your device, click the Branch link, and manually launch the app from Android Studio. You should be routed to the correct content within your app.", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/android/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/android/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share (content or user)    Uses the  Universal Object Properties    Java  BranchUniversalObject   buo   =   new   BranchUniversalObject () \n     . setCanonicalIdentifier ( content/12345 ) \n     . setTitle ( My Content Title ) \n     . setContentDescription ( My Content Description ) \n     . setContentImageUrl ( https://lorempixel.com/400/400 ) \n     . setContentIndexingMode ( BranchUniversalObject . CONTENT_INDEX_MODE . PUBLIC ) \n     . setLocalIndexingMode ( BranchUniversalObject . CONTENT_INDEX_MODE . PUBLIC ) \n     . setContentMetadata ( new   ContentMetadata (). addCustomMetadata ( key1 ,   value1 ));     Kotlin  val   buo   =   new   BranchUniversalObject () \n     . setCanonicalIdentifier ( content/12345 ) \n     . setTitle ( My Content Title ) \n     . setContentDescription ( My Content Description ) \n     . setContentImageUrl ( https://lorempixel.com/400/400 ) \n     . setContentIndexingMode ( BranchUniversalObject . CONTENT_INDEX_MODE . PUBLIC ) \n     . setLocalIndexingMode ( BranchUniversalObject . CONTENT_INDEX_MODE . PUBLIC ) \n     . setContentMetadata ( ContentMetadata (). addCustomMetadata ( key1 ,   value1 ))", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/android/#create-deep-link", 
            "text": "Creates a deep link URL with encapsulated data    Needs a  Branch Universal Object    Uses  Deep Link Properties    Validate with the  Branch Dashboard    Java  LinkProperties   lp   =   new   LinkProperties () \n     . setChannel ( facebook ) \n     . setFeature ( sharing ) \n     . setCampaign ( content 123 launch ) \n     . setStage ( new user ) \n     . addControlParameter ( $desktop_url ,   http://example.com/home ) \n     . addControlParameter ( custom ,   data ) \n     . addControlParameter ( custom_random ,   Long . toString ( Calendar . getInstance (). getTimeInMillis ()));  buo . generateShortUrl ( this ,   lp ,   new   Branch . BranchLinkCreateListener ()   { \n     @Override \n     public   void   onLinkCreate ( String   url ,   BranchError   error )   { \n         if   ( error   ==   null )   { \n             Log . i ( BRANCH SDK ,   got my Branch link to share:    +   url ); \n         } \n     }  });     Kotlin  val   lp   =   new   LinkProperties () \n     . setChannel ( facebook ) \n     . setFeature ( sharing ) \n     . setCampaign ( content 123 launch ) \n     . setStage ( new user ) \n     . addControlParameter ( $desktop_url ,   http://example.com/home ) \n     . addControlParameter ( custom ,   data ) \n     . addControlParameter ( custom_random ,   Long . toString ( Calendar . getInstance (). getTimeInMillis ()))  buo . generateShortUrl ( this ,   lp ,   BranchLinkCreateListener   {   url ,   error   - \n     if   ( error   ==   null )   { \n         Log . i ( BRANCH SDK ,   got my Branch link to share:    +   url ) \n     }  })", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/android/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Needs a  Branch Universal Object    Uses  Deep Link Properties    Java  LinkProperties   lp   =   new   LinkProperties () \n     . setChannel ( facebook ) \n     . setFeature ( sharing ) \n     . setCampaign ( content 123 launch ) \n     . setStage ( new user ) \n     . addControlParameter ( $desktop_url ,   http://example.com/home ) \n     . addControlParameter ( custom ,   data ) \n     . addControlParameter ( custom_random ,   Long . toString ( Calendar . getInstance (). getTimeInMillis ()));  ShareSheetStyle   ss   =   new   ShareSheetStyle ( MainActivity . this ,   Check this out! ,   This stuff is awesome:  ) \n     . setCopyUrlStyle ( ContextCompat . getDrawable ( this ,   android . R . drawable . ic_menu_send ),   Copy ,   Added to clipboard ) \n     . setMoreOptionStyle ( ContextCompat . getDrawable ( this ,   android . R . drawable . ic_menu_search ),   Show more ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . FACEBOOK ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . EMAIL ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . MESSAGE ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . HANGOUT ) \n     . setAsFullWidthStyle ( true ) \n     . setSharingTitle ( Share With );  buo . showShareSheet ( this ,   lp ,    ss ,    new   Branch . BranchLinkShareListener ()   { \n     @Override \n     public   void   onShareLinkDialogLaunched ()   { \n     } \n     @Override \n     public   void   onShareLinkDialogDismissed ()   { \n     } \n     @Override \n     public   void   onLinkShareResponse ( String   sharedLink ,   String   sharedChannel ,   BranchError   error )   { \n     } \n     @Override \n     public   void   onChannelSelected ( String   channelName )   { \n     }  });     Kotlin  var   lp   =   new   LinkProperties () \n     . setChannel ( facebook ) \n     . setFeature ( sharing ) \n     . setCampaign ( content 123 launch ) \n     . setStage ( new user ) \n     . addControlParameter ( $desktop_url ,   http://example.com/home ) \n     . addControlParameter ( custom ,   data ) \n     . addControlParameter ( custom_random ,   Long . toString ( Calendar . getInstance (). getTimeInMillis ()))  var   ss   =   new   ShareSheetStyle ( this @MainActivity ,   Check this out! ,   This stuff is awesome:  ) \n     . setCopyUrlStyle ( resources . getDrawable ( this ,   android . R . drawable . ic_menu_send ),   Copy ,   Added to clipboard ) \n     . setMoreOptionStyle ( resources . getDrawable ( this ,   android . R . drawable . ic_menu_search ),   Show more ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . FACEBOOK ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . EMAIL ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . MESSAGE ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . HANGOUT ) \n     . setAsFullWidthStyle ( true ) \n     . setSharingTitle ( Share With )  buo . showShareSheet ( this ,   lp ,   ss ,   object   :   Branch . BranchLinkShareListener   { \n     override   fun   onShareLinkDialogLaunched ()   {} \n     override   fun   onShareLinkDialogDismissed ()   {} \n     override   fun   onLinkShareResponse ( sharedLink :   String ,   sharedChannel :   String ,   error :   BranchError )   {} \n     override   fun   onChannelSelected ( channelName :   String )   {}  })", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/android/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Returns  deep link properties    Java  // listener (within Main Activity s onStart)  Branch . getInstance (). initSession ( new   Branch . BranchReferralInitListener ()   { \n     @Override \n     public   void   onInitFinished ( JSONObject   referringParams ,   BranchError   error )   { \n         if   ( error   ==   null )   { \n             Log . i ( BRANCH SDK ,   referringParams . toString ()); \n         }   else   { \n             Log . i ( BRANCH SDK ,   error . getMessage ()); \n         } \n     }  },   this . getIntent (). getData (),   this );  // latest  JSONObject   sessionParams   =   Branch . getInstance (). getLatestReferringParams ();  // first  JSONObject   installParams   =   Branch . getInstance (). getFirstReferringParams ();     Kotlin  // listener (within Main Activity s onStart)  Branch . getInstance (). initSession ( object   :   BranchReferralInitListener   { \n     override   fun   onInitFinished ( referringParams :   JSONObject ,   error :   BranchError ?)   { \n         if   ( error   ==   null )   { \n             Log . e ( BRANCH SDK ,   referringParams . toString ) \n         }   else   { \n             Log . e ( BRANCH SDK ,   error . message ) \n         } \n     }  },   this . intent . data ,   this )  // latest  val   sessionParams   =   Branch . getInstance (). latestReferringParams  // first  val   installParams   =   Branch . getInstance (). firstReferringParams", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/android/#navigate-to-content", 
            "text": "Do stuff with the Branch deep link data    Java  // listener (within Main Activity s onStart)  Branch . getInstance (). initSession ( new   Branch . BranchReferralInitListener ()   { \n     @Override \n     public   void   onInitFinished ( JSONObject   referringParams ,   BranchError   error )   { \n         if   ( error   ==   null )   { \n             // option 1: log data \n             Log . i ( BRANCH SDK ,   referringParams . toString ()); \n\n             // option 2: save data to be used later \n             SharedPreferences   preferences   =   . getSharedPreferences ( MyPreferences ,   Context . MODE_PRIVATE ); \n             SharedPreferences . Editor   editor   =   preferences . edit (); \n             editor . putString ( branchData ,   referringParams . toString ( 2 )); \n             editor . commit (); \n\n             // option 3: navigate to page \n             Intent   intent   =   new   Intent ( MainActivity . this ,   OtherActivity . class ); \n             intent . putExtra ( branchData ,   referringParams . toString ( 2 )); \n             startActivity ( intent ); \n\n             // option 4: display data \n             Toast . makeText ( this ,   referringParams . toString ( 2 ),   Toast . LENGTH_LONG ). show (); \n         }   else   { \n             Log . i ( BRANCH SDK ,   error . getMessage ()); \n         } \n     }  },   this . getIntent (). getData (),   this );     Kotlin  // listener (within Main Activity s onStart)  Branch . getInstance (). initSession ( object   :   BranchReferralInitListener   { \n     override   fun   onInitFinished ( referringParams :   JSONObject ,   error :   BranchError ?)   { \n         if   ( error   ==   null )   { \n             // option 1: log data \n             Log . i ( BRANCH SDK ,   referringParams . toString ()) \n\n             // option 2: save data to be used later \n             val   preferences   =    getSharedPreferences ( MyPreferences ,   Context . MODE_PRIVATE ) \n             val   editor   =   preferences . edit () \n             editor . putString ( branchData ,   referringParams . toString ( 2 )) \n             editor . commit () \n\n             // option 3: navigate to page \n             val   intent   =   Intent ( this ,   MainActivity2 :: class . java ) \n             intent . putExtra ( branchData ,   referringParams . toString ( 2 )) \n             startActivity ( intent ) \n\n             // option 4: display data \n             Toast . makeText ( this ,   referringParams . toString ( 2 ),   Toast . LENGTH_SHORT ). show () \n         }   else   { \n             Log . e ( BRANCH SDK ,   error . message ) \n         } \n     }  },   this . intent . data ,   this )", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/android/#display-content", 
            "text": "List content on  Google Search  with  App Indexing    Enable App Indexing on the  Branch Dashboard    Validate with the  App indexing validator    Needs a  Branch Universal Object    Needs  build.gradle  library  compile   com . google . android . gms : play - services - appindexing : 9. +     Java  buo . listOnGoogleSearch ( this );     Kotlin  buo . listOnGoogleSearch ( this )", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/android/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Branch Universal Object    Uses  Track content properties    Validate with the  Branch Dashboard    Java  buo . userCompletedAction ( BranchEvent . VIEW );     Kotlin  buo . userCompletedAction ( BranchEvent . VIEW )", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/android/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    127  character max for user id    Validate with the  Branch Dashboard    Java  // login  Branch . getInstance (). setIdentity ( your_user_id );  // logout  Branch . getInstance (). logout ();     Kotlin  // login  Branch . getInstance (). setIdentity ( your_user_id )  // logout  Branch . getInstance (). logout ()", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/android/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    63  character max for event name    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard    Java  // option 1:  Branch . getInstance (). userCompletedAction ( your_custom_event );  // option 2: with metadata  JSONObject   metadata   =   new   JSONObject ();  try   { \n     metadata . put ( key ,   value );  }   catch   (   JSONException   e   )   {  }  Branch . getInstance (). userCompletedAction ( your_custom_event ,   metadata );     Kotlin  // option 1:  Branch . getInstance (). userCompletedAction ( your_custom_event )  // option 2: with metadata  val   metadata   =   JSONObject ()  metadata . put ( key ,   value )  Branch . getInstance (). userCompletedAction ( your_custom_event ,   metadata )", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/android/#track-commerce", 
            "text": "Registers a custom commerce event    Uses  Commerce properties  for  Currency      Uses  Commerce properties  for  Category    Validate with the  Branch Dashboard    Ensure to add  revenue  field to track purchase. All other fields are optional    Java  //Add details about each product associated with the purchase (optional)  Product   product1   =   new   Product ();  product1 . setSku ( u123 );  product1 . setName ( cactus );  product1 . setPrice ( 45.00 );  product1 . setQuantity ( 2 );  product1 . setBrand ( brand1 );  product1 . setCategory ( ProductCategory . ELECTRONICS );  product1 . setVariant ( variant1 );  Product   product2   =   new   Product ();  product2 . setSku ( u456 );  product2 . setName ( grass );  product2 . setPrice ( 9.00 );  product2 . setQuantity ( 1 );  product2 . setBrand ( brand2 );  product2 . setCategory ( ProductCategory . CAMERA_AND_OPTICS );  product2 . setVariant ( variant2 );  //Create a list of products associated with the particular purchase (optional)  List Product   productList   =   new   ArrayList Product ();  productList . add ( product1 );  productList . add ( product2 );  //Create the commerce event (only revenue is required)  CommerceEvent   commerceEvent   =   new   CommerceEvent ();  commerceEvent . setRevenue ( 50.29 );  commerceEvent . setCurrencyType ( CurrencyType . USD );  commerceEvent . setTransactionID ( TRANS-1111 );  commerceEvent . setShipping ( 4.50 );  commerceEvent . setTax ( 110.90 );  commerceEvent . setAffiliation ( AFF-ID-101 );  commerceEvent . setProducts ( productList );  //Add metadata (optional)  JSONObject   metadata   =   new   JSONObject ();  try   { \n     metadata . put ( custom_dictionary ,   123 ); \n     metadata . put ( testVar ,   abc );  }   catch   ( Exception   e )   { \n     e . printStackTrace ();  }  //Fire the commerce event  Branch . getInstance (). sendCommerceEvent ( commerceEvent ,   metadata ,   null );     Kotlin  //Add details about each product associated with the purchase (optional)  val   product1   =   Product ()  product1 . sku   =   u123  product1 . name   =   cactus  product1 . price   =   45.00  product1 . quantity   =   2  product1 . brand   =   brand1  product1 . category   =   ProductCategory . ELECTRONICS  product1 . variant   =   variant1  val   product2   =   Product ()  product2 . sku   =   u456  product2 . name   =   grass  product2 . price   =   9.00  product2 . quantity   =   1  product2 . brand   =   brand2  product2 . category   =   ProductCategory . CAMERA_AND_OPTICS  product2 . variant   =   variant2  //Create a list of products associated with the particular purchase (optional)  val   productList   =   ArrayList Product ()  productList . add ( product1 )  productList . add ( product2 )  //Create the commerce event (only revenue is required)  val   commerceEvent   =   CommerceEvent ()  commerceEvent . revenue   =   50.29  commerceEvent . currencyType   =   CurrencyType . USD  commerceEvent . transactionID   =   TRANS-1111  commerceEvent . shipping   =   4.50  commerceEvent . tax   =   110.90  commerceEvent . affiliation   =   AFF-ID-101  commerceEvent . setProducts ( productList )  //Add metadata (optional)  val   metadata   =   JSONObject ()  try   { \n     metadata . put ( custom_dictionary ,   123 ) \n     metadata . put ( testVar ,   abc )  }   catch   ( e :   Exception )   { \n     e . printStackTrace ()  }  //Fire the commerce event  Branch . getInstance (). sendCommerceEvent ( commerceEvent ,   metadata ,   null )", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/android/#handle-referrals", 
            "text": "Referral points are obtained from referral rules on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits   Referral guide     Redeem credits    Java  Branch . getInstance (). redeemRewards ( 5 );     Kotlin  Branch . getInstance (). redeemRewards ( 5 )       Load credits    Java  Branch . getInstance (). loadRewards ( new   BranchReferralStateChangedListener ()   { \n     @Override \n     public   void   onStateChanged ( boolean   changed ,   Branch . BranchError   error )   { \n         int   credits   =   branch . getCredits (); \n     }  });     Kotlin  Branch . getInstance (). loadRewards   {   changed ,   error   - \n     if   ( error   !=   null )   { \n         Log . i ( BRANCH SDK ,   branch load rewards failed. Caused by -   +   error . message ) \n     }   else   { \n         Log . i ( BRANCH SDK ,   changed =    +   changed ) \n         Log . i ( BRANCH SDK ,   rewards =    +   branch . credits ) \n     }  }       Load history    Java  Branch . getInstance (). getCreditHistory ( new   BranchListResponseListener ()   { \n     public   void   onReceivingResponse ( JSONArray   list ,   Branch . BranchError   error )   { \n         if   ( error   !=   null )   { \n             Log . i ( BRANCH SDK ,   branch load rewards failed. Caused by -   +   error . message ) \n         }   else   { \n             Log . i ( BRANCH SDK ,   list ); \n         } \n     }  });     Kotlin  Branch . getInstance (). getCreditHistory   {   history ,   error   - \n     if   ( error   !=   null )   { \n         Log . i ( BRANCH SDK ,   branch load credit history failed. Caused by -   +   error . message ) \n     }   else   { \n         if   ( history . length ()     0 )   { \n             Log . i ( BRANCH SDK ,   history . toString ( 2 )) \n         }   else   { \n             Log . i ( BRANCH SDK ,   no history found ) \n         } \n     }  }", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/android/#handle-push-notification", 
            "text": "Deep link to content from GCM push notifications just by adding a Branch link to your result intent    Java  Intent   resultIntent   =   new   Intent ( this ,   TargetClass . class );  intent . putExtra ( branch , http://xxxx.app.link/testlink );  PendingIntent   resultPendingIntent   =    PendingIntent . getActivity ( this ,   0 ,   resultIntent ,   PendingIntent . FLAG_UPDATE_CURRENT );  intent . putExtra ( branch_force_new_session , true );     Kotlin  val   resultIntent   =   Intent ( this ,   TargetClass :: class . java )  intent . putExtra ( branch ,   http://xxxx.app.link/testlink )  val   resultPendingIntent   =   PendingIntent . getActivity ( this ,   0 ,   resultIntent ,   PendingIntent . FLAG_UPDATE_CURRENT )  intent . putExtra ( branch_force_new_session ,   true )", 
            "title": "Handle push notification"
        }, 
        {
            "location": "/pages/apps/android/#handle-links-in-your-own-app", 
            "text": "Allows you to deep link into your own app from your app itself by launching a Chrome intent    Java  Intent   intent   =   new   Intent ( this ,   ActivityToLaunch . class );  intent . putExtra ( branch , http://xxxx.app.link/testlink );  intent . putExtra ( branch_force_new_session , true );  startActivity ( intent );     Kotlin  val   intent   =   Intent ( this ,   ActivityToLaunch :: class . java )  intent . putExtra ( branch ,   http://xxxx.app.link/testlink )  intent . putExtra ( branch_force_new_session ,   true )  startActivity ( intent )        Warning  Handling a new deep link in your app will clear the current session data and a new referred \"open\" will be attributed.", 
            "title": "Handle links in your own app"
        }, 
        {
            "location": "/pages/apps/android/#enable-100-matching", 
            "text": "Uses  Chrome Tabs  to increase attribute matching success    Add  compile 'com.android.support:customtabs:23.3.0'  to your  build.gradle", 
            "title": "Enable 100% matching"
        }, 
        {
            "location": "/pages/apps/android/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/android/#sample-testing-apps", 
            "text": "Branchsters    Testbed", 
            "title": "Sample testing apps"
        }, 
        {
            "location": "/pages/apps/android/#simulate-an-install", 
            "text": "Need to bypass the device's hardware_id    Set  true  in your  AndroidManifest.xml  meta-data   android:name= io.branch.sdk.TestMode   android:value= true   /  \n        -  [or]  add  Branch.enableTestMode();  before your  Branch.getInstance().initSession()    Do not use  TestMode  in production or in the Google Play Store      Uninstall your app from the device    Click on any Branch deep link (will navigate to the fallback URL since the app is not installed)    Reinstall your app    Read deep link data from  Branch.getInstance().initSession()  for  +is_first_session=true", 
            "title": "Simulate an install"
        }, 
        {
            "location": "/pages/apps/android/#track-content-properties", 
            "text": "Used for  Track content     Key  Value      BNCRegisterViewEvent  User viewed the object    BNCAddToWishlistEvent  User added the object to their wishlist    BNCAddToCartEvent  User added object to cart    BNCPurchaseInitiatedEvent  User started to check out    BNCPurchasedEvent  User purchased the item    BNCShareInitiatedEvent  User started to share the object    BNCShareCompletedEvent  User completed a share", 
            "title": "Track content properties"
        }, 
        {
            "location": "/pages/apps/android/#using-bnclt-or-a-custom-link-domain", 
            "text": "bnc.lt link domain  activity   android:name= com.yourapp.your_activity \n     !-- App Link your activity to Branch links-- \n     intent-filter   android:autoVerify= true \n         action   android:name= android.intent.action.VIEW   / \n         category   android:name= android.intent.category.DEFAULT   / \n         category   android:name= android.intent.category.BROWSABLE   / \n          data   android:scheme= https   android:host= bnc.lt   android:pathPrefix= /LVeu   / \n          data   android:scheme= https   android:host= bnc.lt   android:pathPrefix= /eVeu   / \n     /intent-filter  /activity     custom link domain  activity   android:name= com.yourapp.your_activity \n     !-- App Link your activity to Branch links-- \n     intent-filter   android:autoVerify= true \n         action   android:name= android.intent.action.VIEW   / \n         category   android:name= android.intent.category.DEFAULT   / \n         category   android:name= android.intent.category.BROWSABLE   / \n          data   android:scheme= https   android:host= your.app.com   android:pathPrefix= /LVeu   / \n          data   android:scheme= https   android:host= your.app.com   android:pathPrefix= /eVeu   / \n     /intent-filter  /activity     Change the following values to match your  Branch Dashboard   /LVeu  (live)  /eVeu  (test)  your.app.com", 
            "title": "Using bnc.lt or a custom link domain"
        }, 
        {
            "location": "/pages/apps/android/#branch-with-fabric-answers", 
            "text": "If you do not want to import  answers-shim  compile ( io.branch.sdk.android:library:2.+ ) {\n  exclude module:  answers-shim \n}", 
            "title": "Branch with Fabric Answers"
        }, 
        {
            "location": "/pages/apps/android/#deep-link-routing", 
            "text": "Loads a specific URI Scheme path, for example   $deeplink_path=\"content/123\"  $android_deeplink_path=\"content/123\"     Recommend to use  Navigate to content  instead  meta-data   android:name= io.branch.sdk.auto_link_path   android:value= content/123/, another/path/, another/path/*   /", 
            "title": "Deep link routing"
        }, 
        {
            "location": "/pages/apps/android/#deep-link-routing-in-app", 
            "text": "Used for  WebView  and  ChromeTab  within the app to render HTML normally    Branch links within the  WebView  will route internally within your app, while other contents will continue to route externally    Launch Branch deep links with  Web View    Java  @Override  protected   void   onCreate ( Bundle   savedInstanceState )   { \n     super . onCreate ( savedInstanceState ); \n     setContentView ( R . layout . activity_main ); \n     WebView   webView   =   ( WebView )   findViewById ( R . id . webView ); \n     webView . setWebViewClient ( new   BranchWebViewController ( YOUR_DOMAIN ,   MainActivity . class ));   //YOUR_DOMAIN example: appname.app.link \n     webView . loadUrl ( URL_TO_LOAD );  }  public   class   BranchWebViewController   extends   WebViewClient   { \n\n     private   String   myDomain_ ; \n     private   Class   activityToLaunch_ ; \n\n     BranchWebViewController ( @NonNull   String   myDomain ,   Class   activityToLaunch )   { \n         myDomain_   =   myDomain ; \n         activityToLaunch_   =   activityToLaunch ; \n     } \n\n     @Override \n     public   boolean   shouldOverrideUrlLoading ( WebView   view ,   WebResourceRequest   request )   { \n         String   url   =   request . getUrl (). toString (); \n\n         if   ( url . contains ( myDomain_ ))   { \n             Intent   i   =   new   Intent ( view . getContext (),   activityToLaunch_ ); \n             i . putExtra ( branch ,   url ); \n             i . putExtra ( branch_force_new_session ,   true ); \n             startActivity ( i ); \n             //finish(); if launching same activity \n         }   else   { \n             view . loadUrl ( url ); \n         } \n\n         return   true ; \n     }  }     Kotlin  override   fun   onCreate ( savedInstanceState :   Bundle ?)   { \n     super . onCreate ( savedInstanceState ) \n     setContentView ( R . layout . activity_main ) \n     val   webView   =   findViewById ( R . id . webView )   as   WebView \n     webView !!. webViewClient   =   BranchWebViewController ( appname.app.link ,   MainActivity2 :: class . java ) \n     webView !!. loadUrl ( URL_TO_LOAD )  }  inner   class   BranchWebViewController   internal   constructor ( private   val   myDomain_ :   String ,   private   val   activityToLaunch_ :   Class * )   :   WebViewClient ()   { \n\n     override   fun   onLoadResource ( view :   WebView ,   url :   String )   { \n         super . onLoadResource ( view ,   url ) \n     } \n\n     override   fun   shouldOverrideUrlLoading ( view :   WebView ,   request :   WebResourceRequest ):   Boolean   { \n         val   url   =   request . url . toString () \n\n         if   ( url . contains ( myDomain_ ))   { \n             val   i   =   Intent ( view . context ,   activityToLaunch_ ) \n             i . putExtra ( branch ,   url ) \n             i . putExtra ( branch_force_new_session ,   true ) \n       //finish(); if launching same activity \n             startActivity ( i ) \n         }   else   { \n             view . loadUrl ( url ) \n         } \n\n         return   true \n     }  }       Launch Branch deep links with  Chrome Tabs    Java  CustomTabsIntent . Builder   builder   =   new   CustomTabsIntent . Builder ();  CustomTabsIntent   customTabsIntent   =   builder . build ();  customTabsIntent . intent . putExtra ( branch ,   BRANCH_LINK_TO_LOAD );  customTabsIntent . intent . putExtra ( branch_force_new_session ,   true );  customTabsIntent . launchUrl ( MainActivity . this ,   Uri . parse ( BRANCH_LINK_TO_LOAD ));  //finish(); if launching same activity     Kotlin  val   builder   =   CustomTabsIntent . Builder ()  val   customTabsIntent   =   builder . build ()  customTabsIntent . intent . putExtra ( branch ,   BRANCH_LINK_TO_LOAD )  customTabsIntent . intent . putExtra ( branch_force_new_session ,   true )  customTabsIntent . launchUrl ( this @MainActivity2 ,   Uri . parse ( BRANCH_LINK_TO_LOAD ))  //finish() if launching same activity", 
            "title": "Deep link routing in app"
        }, 
        {
            "location": "/pages/apps/android/#deep-link-activity-finishes", 
            "text": "Be notified when the deep link Activity finishes  meta-data   android:name= io.branch.sdk.auto_link_request_code   android:value= @integer/AutoDeeplinkRequestCode   /     Java  @Override  protected   void   onActivityResult ( int   requestCode ,   int   resultCode ,   Intent   data )   { \n     super . onActivityResult ( requestCode ,   resultCode ,   data ); \n\n     // Checking if the previous activity is launched on branch Auto deep link. \n     if ( requestCode   ==   getResources (). getInteger ( R . integer . AutoDeeplinkRequestCode )){ \n         //Decide here where  to navigate  when an auto deep linked activity finishes. \n         //For e.g. Go to HomeActivity or a  SignUp Activity. \n         Intent   i   =   new   Intent ( getApplicationContext (),   CreditHistoryActivity . class ); \n         startActivity ( i ); \n     }  }     Kotlin  override   fun   onActivityResult ( requestCode :   Int ,   resultCode :   Int ,   data :   Intent ?)   { \n     super . onActivityResult ( requestCode ,   resultCode ,   data ) \n\n     // Checking if the previous activity is launched on branch Auto deep link. \n     if   ( requestCode   ===   resources . getInteger ( R . integer . AutoDeeplinkRequestCode ))   { \n         //Decide here where  to navigate  when an auto deep linked activity finishes. \n         //For e.g. Go to HomeActivity or a  SignUp Activity. \n         val   i   =   Intent ( applicationContext ,   CreditHistoryActivity :: class . java ) \n         startActivity ( i ) \n     }  }", 
            "title": "Deep link activity finishes"
        }, 
        {
            "location": "/pages/apps/android/#pre-android-15-support", 
            "text": "Use  Branch SDK 1.14.5    Add to  onStart()  and  onStop()    Java  @Override  protected   void   onStart ()   { \n     super . onStart (); \n     Branch . getInstance ( getApplicationContext ()). initSession ();  }  @Override  protected   void   onStop ()   { \n     super . onStop (); \n     branch . closeSession ();  }     Kotlin  override   fun   onStart ()   { \n     super . onStart () \n     Branch . getInstance (). initSession ()  }  override   fun   onStop ()   { \n     super . onStop () \n     Branch . getInstance (). closeSession ()  }", 
            "title": "Pre Android 15 support"
        }, 
        {
            "location": "/pages/apps/android/#using-the-default-application-class", 
            "text": "If your app does not have an application class  application   android:name= io.branch.referral.BranchApp", 
            "title": "Using the default application class"
        }, 
        {
            "location": "/pages/apps/android/#custom-install-referrer-class", 
            "text": "Google only allows one  BroadcastReceiver  per application    Add to your  AndroidManifest.xml  receiver   android:name= com.BRANCH SDK.CustomInstallListener   android:exported= true \n   intent-filter \n     action   android:name= com.android.vending.INSTALL_REFERRER   / \n   /intent-filter  /receiver     Create an instance of  io.branch.referral.InstallListener  in  onReceive()    Java  InstallListener   listener   =   new   InstallListener ();  listener . onReceive ( context ,   intent );     Kotlin  val   listener   =   InstallListener ()  listener . onReceive ( context ,   intent )", 
            "title": "Custom install referrer class"
        }, 
        {
            "location": "/pages/apps/android/#generate-signing-certificate", 
            "text": "Used for Android  App Link  deep linking    Navigate to your keystore file    Run  keytool -list -v -keystore my-release-key.keystore    Will generate a value like  AA:C9:D9:A5:E9:76:3E:51:1B:FB:35:00:06:9B:56:AC:FB:A6:28:CE:F3:D6:65:38:18:E3:9C:63:94:FB:D2:C1    Copy this value to your  Branch Dashboard", 
            "title": "Generate signing certificate"
        }, 
        {
            "location": "/pages/apps/android/#matching-through-the-install-listener", 
            "text": "Enable the ability to pass  link_click_id  from Google Play to Branch    This will increase attribution and deferred deep linking accuracy    Branch default is  1.5  seconds to wait for Google Play analytics    You can optimize the performance based on needs (e.g.  0 ,  5 ,  10 )    Add to your application class before  getAutoInstance  ( Load Branch )    Java  Branch . setPlayStoreReferrerCheckTimeout ( 5 );     Kotlin  Branch . setPlayStoreReferrerCheckTimeout ( 5 )     Test  adb shell am broadcast -a com.android.vending.INSTALL_REFERRER -n io.branch.androidexampledemo/io.branch.referral.InstallListener --es  referrer   link_click_id=123", 
            "title": "Matching through the install listener"
        }, 
        {
            "location": "/pages/apps/android/#enable-multidexing", 
            "text": "Adding additional dependencies may overrun the dex limit and lead to  NoClassDefFoundError  or  ClassNotFoundException    Add to your  build.gradle  defaultConfig   { \n     multiDexEnabled   true  }     Add to your  Application class  and make sure it extends  MultiDexApplication    Java  @Override  protected   void   attachBaseContext ( Context   base )   { \n     super . attachBaseContext ( base ); \n     MultiDex . install ( this );  }     Kotlin  override   fun   attachBaseContext ( base :   Context ?)   { \n     super . attachBaseContext ( base ) \n     MultiDex . install ( this )  }", 
            "title": "Enable multidexing"
        }, 
        {
            "location": "/pages/apps/android/#invalidclassexception-classloadingerror-or-verificationerror", 
            "text": "Often caused by a  Proguard  bug. Try the latest Proguard version or disable Proguard optimization by setting  -dontoptimize", 
            "title": "InvalidClassException, ClassLoadingError or VerificationError"
        }, 
        {
            "location": "/pages/apps/android/#proguard-warning-or-errors-with-answers-shim-module", 
            "text": "Often caused when you exclude the  answers-shim . Try adding  -dontwarn com.crashlytics.android.answers.shim.**  to your  Proguard  file", 
            "title": "Proguard warning or errors with answers-shim module"
        }, 
        {
            "location": "/pages/apps/android/#proguard-warning-or-errors-with-appindexing-module", 
            "text": "The Branch SDK has an optional dependency on Firebase app indexing classes to provide new Firebase content listing\n    features. This may cause a proguard warning depending on your proguard settings. Please add the following to your\n    proguard file to solve this issue  -dontwarn com.google.firebase.appindexing.** .", 
            "title": "Proguard warning or errors with AppIndexing module"
        }, 
        {
            "location": "/pages/apps/android/#unable-to-open-this-link-error", 
            "text": "Happens whenever URI Scheme redirection fails.  Make sure you do not have  $deeplink_path  or you have a  $deeplink_path  which your  AndroidManifest.xml  can accept", 
            "title": "Unable to open this link error"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/", 
            "text": "Integrate Branch\n\n\n\n\nInconsistent Universal links behavior on iOS 11.2\n\n\nAfter updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set \nforced uri redirect mode\n on your Branch links to open the app with URI schemes. View details of the issue on the \nApple Bug report\n.\n\n\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\nCordova and Ionic\n\n\n!-- sample config.xml --\n\n\nwidget\n \nid=\ncom.eneff.branch.cordovatestbed\n \nversion=\n0.0.1\n \nxmlns=\nhttp://www.w3.org/ns/widgets\n \nxmlns:cdv=\nhttp://cordova.apache.org/ns/1.0\n\n  \n!-- Branch --\n\n  \nplugin\n \nname=\nbranch-cordova-sdk\n \nspec=\n^2.5.0\n \n/\n\n  \nbranch-config\n\n    \nbranch-key\n \nvalue=\nkey_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3\n \n/\n\n    \nuri-scheme\n \nvalue=\nbranchcordova\n \n/\n\n    \nlink-domain\n \nvalue=\ncordova.app.link\n \n/\n\n    \nios-team-release\n \nvalue=\nPW4Q8885U7\n \n/\n\n  \n/branch-config\n\n\n\n\n\n\n\n\n\nPhoneGap\n\n\n!-- sample config.xml --\n\n\nwidget\n \nid=\ncom.eneff.branch.cordovatestbed\n \nversion=\n1.0.0\n \nxmlns=\nhttp://www.w3.org/ns/widgets\n \nxmlns:gap=\nhttp://phonegap.com/ns/1.0\n\n  \n!-- Branch --\n\n  \nplugin\n \nname=\nbranch-cordova-sdk\n \nspec=\n^2.5.0\n \n/\n\n  \nbranch-config\n\n    \nbranch-key\n \nvalue=\nkey_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3\n \n/\n\n    \nuri-scheme\n \nvalue=\nbranchcordova\n \n/\n\n    \nlink-domain\n \nvalue=\ncordova.app.link\n \n/\n\n    \nios-team-release\n \nvalue=\nPW4Q8885U7\n \n/\n\n  \n/branch-config\n\n\n\n\n\n\n\n\n\nChange the following values to match your \nBranch Dashboard\n\n\n\n\ncom.eneff.branch.cordovatestbed\n\n\nkey_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3\n\n\nbranchcordova\n\n\ncordova.app.link\n\n\nPW4Q8885U7\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nCordova and PhoneGap\n\n\n// sample index.js\n\n\nvar\n \napp\n \n=\n \n{\n\n  \ninitialize\n:\n \nfunction\n()\n \n{\n\n    \nthis\n.\nbindEvents\n();\n\n  \n},\n\n  \nbindEvents\n:\n \nfunction\n()\n \n{\n\n    \ndocument\n.\naddEventListener\n(\ndeviceready\n,\n \nthis\n.\nonDeviceReady\n,\n \nfalse\n);\n\n    \ndocument\n.\naddEventListener\n(\nresume\n,\n \nthis\n.\nonDeviceResume\n,\n \nfalse\n);\n\n  \n},\n\n  \nonDeviceReady\n:\n \nfunction\n()\n \n{\n\n\n    \napp\n.\nhandleBranch\n();\n\n\n  \n},\n\n  \nonDeviceResume\n:\n \nfunction\n()\n \n{\n\n\n    \napp\n.\nhandleBranch\n();\n\n\n  \n},\n\n\n  \nhandleBranch\n:\n \nfunction\n()\n \n{\n\n\n    \n// Branch initialization\n\n\n    \nBranch\n.\ninitSession\n(\nfunction\n(\ndata\n)\n \n{\n\n\n      \nif\n \n(\ndata\n[\n+clicked_branch_link\n])\n \n{\n\n\n        \n// read deep link data on click\n\n\n        \nalert\n(\nDeep Link Data: \n \n+\n \nJSON\n.\nstringify\n(\ndata\n));\n\n\n      \n}\n\n\n    \n});\n\n  \n}\n\n\n};\n\n\n\napp\n.\ninitialize\n();\n\n\n\n\n\n\n\n\n\nIonic 1\n\n\n// sample app.js\n\n\nangular\n.\nmodule\n(\nstarter\n,\n \n[\nionic\n,\n \nstarter.controllers\n,\n \nstarter.services\n])\n\n\n\n.\nrun\n(\nfunction\n(\n$ionicPlatform\n)\n \n{\n\n  \n$ionicPlatform\n.\nready\n(\nfunction\n()\n \n{\n\n    \nif\n \n(\nwindow\n.\ncordova\n \n \nwindow\n.\ncordova\n.\nplugins\n \n \nwindow\n.\ncordova\n.\nplugins\n.\nKeyboard\n)\n \n{\n\n      \ncordova\n.\nplugins\n.\nKeyboard\n.\nhideKeyboardAccessoryBar\n(\ntrue\n);\n\n      \ncordova\n.\nplugins\n.\nKeyboard\n.\ndisableScroll\n(\ntrue\n);\n\n    \n}\n\n    \nif\n \n(\nwindow\n.\nStatusBar\n)\n \n{\n\n      \nStatusBar\n.\nstyleDefault\n();\n\n    \n}\n\n\n    \n// Branch\n\n    \n$ionicPlatform\n.\non\n(\ndeviceready\n,\n \nfunction\n()\n \n{\n\n\n      \nhandleBranch\n();\n\n\n    \n});\n\n\n    \n$ionicPlatform\n.\non\n(\nresume\n,\n \nfunction\n()\n \n{\n\n\n      \nhandleBranch\n();\n\n\n    \n});\n\n\n\n    \nfunction\n \nhandleBranch\n()\n \n{\n\n\n      \n// Branch initialization\n\n\n      \nBranch\n.\ninitSession\n(\nfunction\n(\ndata\n)\n \n{\n\n\n        \nif\n \n(\ndata\n[\n+clicked_branch_link\n])\n \n{\n\n\n          \n// read deep link data on click\n\n\n          \nalert\n(\nDeep Link Data: \n \n+\n \nJSON\n.\nstringify\n(\ndata\n));\n\n\n        \n}\n\n\n      \n});\n\n    \n}\n\n  \n});\n\n\n})\n\n\n// ...\n\n\n\n\n\n\n\n\n\nIonic 2 and 3\n\n\n// sample app.component.js\n\n\nimport\n \n{ \nComponent\n \n}\n \nfrom\n \n@angular\n/\ncore\n;\n\n\nimport\n \n{ \nPlatform\n \n}\n \nfrom\n \nionic\n-\nangular\n;\n\n\nimport\n \n{ \nStatusBar\n,\n \nSplashscreen\n \n}\n \nfrom\n \nionic\n-\nnative\n;\n\n\n\nimport\n \n{ \nTabsPage\n \n}\n \nfrom\n \n../\npages\n/\ntabs\n/\ntabs\n\n\n\n@Component\n({\n\n  \ntemplate\n:\n \n`\nion\n-\nnav\n \n[\nroot\n]=\nrootPage\n/\nion\n-\nnav\n`\n\n\n})\n\n\nexport\n \nclass\n \nMyApp\n \n{\n\n  \nrootPage\n \n=\n \nTabsPage\n;\n\n\n  \nconstructor\n(\nplatform\n:\n \nPlatform\n)\n \n{\n\n    \nplatform\n.\nready\n().\nthen\n(()\n \n=\n \n{\n\n      \nStatusBar\n.\nstyleDefault\n();\n\n      \nSplashscreen\n.\nhide\n();\n\n\n      \nhandleBranch\n();\n\n\n    \n});\n\n\n    \nplatform\n.\nresume\n.\nsubscribe\n(()\n \n=\n \n{\n\n\n      \nhandleBranch\n();\n\n\n    \n});\n\n\n\n    \n// Branch initialization\n\n\n    \nconst\n \nhandleBranch\n \n=\n \n()\n \n=\n \n{\n\n\n      \n// only on devices\n\n\n      \nif\n \n(!\nplatform\n.\nis\n(\ncordova\n))\n \n{\n \nreturn\n \n}\n\n\n      \nconst\n \nBranch\n \n=\n \nwindow\n[\nBranch\n];\n\n\n      \nBranch\n.\ninitSession\n(\ndata\n \n=\n \n{\n\n\n        \nif\n \n(\ndata\n[\n+\nclicked_branch_link\n])\n \n{\n\n\n          \n// read deep link data on click\n\n\n          \nalert\n(\nDeep\n \nLink\n \nData\n:\n \n \n+\n \nJSON\n.\nstringify\n(\ndata\n));\n\n\n        \n}\n\n\n      \n});\n\n\n    \n}\n\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link iOS\n\n\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app \n(\ncordova run ios\n \nphonegap run ios\n \nionic run ios\n)\n\n\n\n\n\n\nPaste deep link in \nApple Notes\n\n\n\n\n\n\nLong press on the deep link \n(not 3D Touch)\n\n\n\n\n\n\nClick \nOpen in \"APP_NAME\"\n to open your app \n(\nexample\n)\n\n\n\n\n\n\n\n\n\n\nTest deep link Android\n\n\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app \n(\ncordova run android\n \nphonegap run android\n \nionic run android\n)\n\n\n\n\n\n\nPaste deep link in \nGoogle Hangouts\n\n\n\n\n\n\nClick on the deep link to open your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nInitialize Branch features\n\n\n\n\n\n\nLoads Branch into your app\n\n\n\n\n\n\nMust be called on \ndeviceready\n and \nresume\n\n\n// for development and debugging only\n\n\nBranch\n.\nsetDebug\n(\ntrue\n)\n\n\n\n// Branch initialization\n\n\nBranch\n.\ninitSession\n(\nfunction\n(\ndata\n)\n \n{\n\n  \nif\n \n(\ndata\n[\n+clicked_branch_link\n])\n \n{\n\n    \n// read deep link data on click\n\n    \nalert\n(\nDeep Link Data: \n \n+\n \nJSON\n.\nstringify\n(\ndata\n))\n\n  \n}\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share (content or user)\n\n\n\n\n\n\nUses the \nUniversal Object Properties\n\n\n// only canonicalIdentifier is required\n\n\nvar\n \nproperties\n \n=\n \n{\n\n  \ncanonicalIdentifier\n:\n \ncontent/123\n,\n\n  \ncanonicalUrl\n:\n \nhttps://example.com/content/123\n,\n\n  \ntitle\n:\n \nContent 123 Title\n,\n\n  \ncontentDescription\n:\n \nContent 123 Description \n \n+\n \nDate\n.\nnow\n(),\n\n  \ncontentImageUrl\n:\n \nhttp://lorempixel.com/400/400/\n,\n\n  \nprice\n:\n \n12.12\n,\n\n  \ncurrency\n:\n \nGBD\n,\n\n  \ncontentIndexingMode\n:\n \nprivate\n,\n\n  \ncontentMetadata\n:\n \n{\n\n    \ncustom\n:\n \ndata\n,\n\n    \ntesting\n:\n \n123\n,\n\n    \nthis_is\n:\n \ntrue\n\n  \n}\n\n\n}\n\n\n\n// create a branchUniversalObj variable to reference with other Branch methods\n\n\nvar\n \nbranchUniversalObj\n \n=\n \nnull\n\n\nBranch\n.\ncreateBranchUniversalObject\n(\nproperties\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nbranchUniversalObj\n \n=\n \nres\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nCreates a deep link URL with encapsulated data\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n// optional fields\n\n\nvar\n \nanalytics\n \n=\n \n{\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \nfeature\n:\n \nonboarding\n,\n\n  \ncampaign\n:\n \ncontent 123 launch\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\none\n,\n \ntwo\n,\n \nthree\n]\n\n\n}\n\n\n\n// optional fields\n\n\nvar\n \nproperties\n \n=\n \n{\n\n  \n$desktop_url\n:\n \nhttp://www.example.com/desktop\n,\n\n  \n$android_url\n:\n \nhttp://www.example.com/android\n,\n\n  \n$ios_url\n:\n \nhttp://www.example.com/ios\n,\n\n  \n$ipad_url\n:\n \nhttp://www.example.com/ipad\n,\n\n  \n$match_duration\n:\n \n2000\n,\n\n  \ncustom_string\n:\n \ndata\n,\n\n  \ncustom_integer\n:\n \nDate\n.\nnow\n(),\n\n  \ncustom_boolean\n:\n \ntrue\n\n\n}\n\n\n\nbranchUniversalObj\n.\ngenerateShortUrl\n(\nanalytics\n,\n \nproperties\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n.\nurl\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n// optional fields\n\n\nvar\n \nanalytics\n \n=\n \n{\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \nfeature\n:\n \nonboarding\n,\n\n  \ncampaign\n:\n \ncontent 123 launch\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\none\n,\n \ntwo\n,\n \nthree\n]\n\n\n}\n\n\n\n// optional fields\n\n\nvar\n \nproperties\n \n=\n \n{\n\n  \n$desktop_url\n:\n \nhttp://www.example.com/desktop\n,\n\n  \ncustom_string\n:\n \ndata\n,\n\n  \ncustom_integer\n:\n \nDate\n.\nnow\n(),\n\n  \ncustom_boolean\n:\n \ntrue\n\n\n}\n\n\n\nvar\n \nmessage\n \n=\n \nCheck out this link\n\n\n\n// optional listeners (must be called before showShareSheet)\n\n\nbranchUniversalObj\n.\nonShareSheetLaunched\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \n// android only\n\n  \nconsole\n.\nlog\n(\nres\n)\n\n\n})\n\n\nbranchUniversalObj\n.\nonShareSheetDismissed\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nres\n)\n\n\n})\n\n\nbranchUniversalObj\n.\nonLinkShareResponse\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nres\n)\n\n\n})\n\n\nbranchUniversalObj\n.\nonChannelSelected\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \n// android only\n\n  \nconsole\n.\nlog\n(\nres\n)\n\n\n})\n\n\n\n// share sheet\n\n\nbranchUniversalObj\n.\nshowShareSheet\n(\nanalytics\n,\n \nproperties\n,\n \nmessage\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nReturns \ndeep link properties\n\n\n\n\n\n\nListener\n\n\n// Branch initialization within your deviceready and resume\n\n\nBranch\n.\ninitSession\n(\nfunction\n(\ndeepLinkData\n)\n \n{\n\n  \nif\n \n(\ndata\n[\n+clicked_branch_link\n])\n \n{\n\n    \n// handler for deep link data on click\n\n    \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\ndeepLinkData\n))\n\n  \n}\n\n\n})\n\n\n\n\n\n\n\n\n\nLatest data\n\n\nBranch\n.\ngetLatestReferringParams\n().\nthen\n(\nfunction\n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\nFirst data\n\n\nBranch\n.\ngetFirstReferringParams\n().\nthen\n(\nfunction\n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nHandled within \nBranch.initSession()\n\n\n\n\n\n\nBranch allows you to pass any custom key-value from URLs to your app. Use this data to navigate to content, display a personalized welcome screen, login a user, offer a promotion, etc.\n\n\nBranch\n.\ninitSession\n(\nfunction\n(\ndata\n)\n \n{\n\n  \nif\n \n(\ndata\n[\n+clicked_branch_link\n])\n \n{\n\n    \n// option 1: save to model to be used later\n\n    \nwindow\n.\nlocalStorage\n[\nbranchData\n]\n \n=\n \ndata\n;\n\n\n    \n// option 2: navigate to page\n\n    \nwindow\n.\nlocation\n.\nhref\n \n=\n \n#/content/123\n\n\n    \n// option 3: display data\n\n    \nalert\n(\nJSON\n.\nstringify\n(\ndata\n));\n\n  \n}\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nList content on \niOS Spotlight\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\nbranchUniversalObj\n.\nlistOnSpotlight\n().\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\nbranchUniversalObj\n.\nregisterView\n().\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\nvar\n \nuserId\n \n=\n \n123456\n\n\nBranch\n.\nsetIdentity\n(\nuserId\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n.\nmessage\n))\n\n\n})\n\n\n\n\n\n\n\n\n\nRemoves the identity of a user\n\n\nBranch\n.\nlogout\n().\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n.\nmessage\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\nvar\n \neventName\n \n=\n \nclicked_on_this\n\n\nvar\n \nmetadata\n \n=\n \n{\n \ncustom_dictionary\n:\n \n123\n,\n \nanything\n:\n \neverything\n \n}\n\n\nBranch\n.\nuserCompletedAction\n(\neventName\n,\n \nmetaData\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n.\nmessage\n))\n\n\n})\n\n\n\n\n\nvar\n \neventName\n \n=\n \nclicked_on_this\n\n\nBranch\n.\nuserCompletedAction\n(\neventName\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n.\nmessage\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nRegisters a custom commerce event\n\n\n\n\n\n\nUses \nTrack commerce properties\n for \nCurrency\n and \nCategory\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n// only revenue is required\n\n\nvar\n \nevent\n \n=\n \n{\n\n  \nrevenue\n:\n \n50.29\n,\n\n  \ncurrency\n:\n \n148\n,\n \n// USD\n\n  \ntransactionID\n:\n \ntransaction id\n,\n\n  \ncoupon\n:\n \ncoupon\n,\n\n  \nshipping\n:\n \n2.22\n,\n\n  \ntax\n:\n \n5.11\n,\n\n  \naffiliation\n:\n \naffiliation\n,\n\n  \nproducts\n:\n \n[\n\n    \n{\n\n      \nsku\n:\n \nu123\n,\n\n      \nname\n:\n \ncactus\n,\n\n      \nprice\n:\n \n4.99\n,\n\n      \nquantity\n:\n \n2\n,\n\n      \nbrand\n:\n \nbrand\n,\n\n      \ncategory\n:\n \n17\n,\n \n// Software\n\n      \nvariant\n:\n \nvariant\n\n    \n},\n\n    \n{\n\n      \nsku\n:\n \nu456\n,\n\n      \nname\n:\n \ngrass\n,\n\n      \nprice\n:\n \n0.00\n,\n\n      \nquantity\n:\n \n1\n\n    \n}\n\n  \n]\n\n\n}\n\n\n\n// optional fields\n\n\nvar\n \nmetadata\n \n=\n \n{\n\n  \ncustom_dictionary\n:\n \n123\n,\n\n  \nanything\n:\n \neverything\n\n\n}\n\n\n\nBranch\n.\nsendCommerceEvent\n(\nevent\n,\n \nmetadata\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nres\n)\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nconsole\n.\nerror\n(\nerr\n)\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n.\nmessage\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral points are obtained from referral rules on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits\n\n\n\n\nReferral guide\n\n\n\n\n\n\n\n\nRedeem credits\n\n\nvar\n \namount\n \n=\n \n10\n\n\nvar\n \nbucket\n \n=\n \nthis_bucket\n\n\nBranch\n.\nredeemRewards\n(\namount\n,\n \nbucket\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\nvar\n \namount\n \n=\n \n10\n\n\nBranch\n.\nredeemRewards\n(\namount\n).\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\nLoad credits\n\n\nvar\n \nbucket\n \n=\n \nthis_bucket\n\n\nBranch\n.\nloadRewards\n(\nbucket\n).\nthen\n(\nfunction\n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\nBranch\n.\nloadRewards\n().\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\nLoad history\n\n\nBranch\n.\ncreditHistory\n().\nthen\n(\nfunction\n \n(\nres\n)\n \n{\n\n  \nalert\n(\nResponse: \n \n+\n \nJSON\n.\nstringify\n(\nres\n))\n\n\n}).\ncatch\n(\nfunction\n \n(\nerr\n)\n \n{\n\n  \nalert\n(\nError: \n \n+\n \nJSON\n.\nstringify\n(\nerr\n))\n\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nRecommendations\n\n\n\n\nNeed to select \n\"app uses IDFA or GAID\"\n when publishing your app\n\n\n\n\n\n\n\n\nOptional app config\n\n\n\n\n\n\nAdditional configuration for custom link domains, simulating installs, unique bundle identifiers, etc\n\n\n!-- sample config.xml --\n\n\nwidget\n \nid=\ncom.eneff.branch.cordovatestbed\n \nversion=\n1.0.0\n \nxmlns=\nhttp://www.w3.org/ns/widgets\n \nxmlns:cdv=\nhttp://cordova.apache.org/ns/1.0\n\n  \n!-- Branch --\n\n  \nplugin\n \nname=\nbranch-cordova-sdk\n \nspec=\n~2.4.2\n \n/\n \n!-- optional spec --\n\n  \nbranch-config\n\n    \nbranch-key\n \nvalue=\nkey_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3\n \n/\n\n    \nuri-scheme\n \nvalue=\nbranchcordova\n \n/\n\n    \nlink-domain\n \nvalue=\nyourcustomdomain.com\n \n/\n\n    \nlink-domain\n \nvalue=\ncordova.app.link\n \n/\n  \n!-- optional previous link domain --\n\n    \nlink-domain\n \nvalue=\nbnc.lt\n \n/\n  \n!-- optional previous link domain --\n\n    \nios-team-release\n \nvalue=\nPW4Q8885U7\n \n/\n \n!-- required if iOS app --\n\n    \nios-team-debug\n \nvalue=\nFG35JLLMXX\n \n/\n \n!-- optional --\n\n    \nandroid-prefix\n \nvalue=\n/WSuf\n \n/\n \n!-- optional (for bnc.lt and custom domains) --\n\n    \nandroid-testmode\n \nvalue=\ntrue\n \n/\n \n!-- optional (simulate installs) --\n\n  \n/branch-config\n\n\n\n\n\nwidget\n \nios-CFBundleIdentifier=\ncom.eneff.branch.cordovatestbedios\n \nandroid-packageName=\ncom.eneff.branch.cordovatestbedandroid\n \nversion=\n1.0.0\n \nxmlns=\nhttp://www.w3.org/ns/widgets\n \nxmlns:cdv=\nhttp://cordova.apache.org/ns/1.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nSync with Mixpanel\n\n\n\n\n\n\nSync Branch withh Mixpanel if the plugin is installed \n\n\n\n\n\n\nAdd before \nBranch.initSession();\n (\nInitialize Branch Features\n)\n\n\nBranch\n.\nsetRequestMetadata\n(\n$mixpanel_distinct_id\n,\n \n123\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimulate an install\n\n\n\n\n\n\nDelete your app\n\n\n\n\n\n\n[iOS]\n iPhone Device -\n Settings -\n Privacy -\n Advertising -\n Reset Advertising Identifier -\n Reset Identifier\n\n\n\n\n\n\n[Android]\n Add \nandroid-testmode value=\"true\" /\n to your \nConfig.xml\n (\nTesting: Optional App Config\n)\n\n\n\n\n\n\nAdd \nBranch.setDebug(true);\n before \nBranch.initSession();\n (\nInitialize Branch Features\n)\n\n\n\n\n\n\nClick on a deep link to navigate to your \n$fallback_url\n because your app is not installed\n\n\n\n\n\n\nInstall your app\n\n\n\n\n\n\nOpen your app\n\n\n\n\n\n\nRead from \nBranch.initSession(data)\n for \n+is_first_session = true\n\n\n\n\n\n\n\n\n\n\nSample app\n\n\n\n\nBranch testbed app\n\n\n\n\n\n\n\n\nUniversal Object properties\n\n\n\n\n\n\nFor \nCreate content reference\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\nLink Property\n\n\n\n\n\n\n\n\n\n\ncanonicalIdentifier\n\n\n\n\n(Required)\n This is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities\n\n\n$canonical_identifier\n\n\n\n\n\n\ncanonicalUrl\n\n\n\n\nThe canonical URL, used for SEO purposes\n\n\n$canonical_url\n\n\n\n\n\n\ntitle\n\n\n\n\nThe name for the piece of content\n\n\n$og_title\n\n\n\n\n\n\ncontentDescription\n\n\n\n\nA description for the content\n\n\n$og_description\n\n\n\n\n\n\ncontentImageUrl\n\n\n\n\nThe image URL for the content. Must be an absolute path\n\n\n$og_image_url\n\n\n\n\n\n\nprice\n\n\n\n\nThe price of the item\n\n\n$amount\n\n\n\n\n\n\ncurrency\n\n\n\n\nThe currency representing the price in ISO 4217 currency code\n\n\n$currency\n\n\n\n\n\n\ncontentIndexingMode\n\n\n\"public\"\n\n\nCan be set to either \n\"public\"\n or \n\"private\"\n. Public indicates that you\u2019d like this content to be discovered by other apps.\n\n\n$publicly_indexable\n\n\n\n\n\n\ncontentMetadata\n\n\n\n\nAny custom key-value data e.g. \n{ \"custom\": \"data\" }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommerce properties\n\n\n\n\n\n\nFor \nTrack commerce\n\n\n\n\n\n\nCategories\n\n\n\n\n\n\n\n\nValue\n\n\nCategory\n\n\nValue\n\n\nCategory\n\n\n\n\n\n\n\n\n\n\n0\n\n\nAnimals \n Pet Supplies\n\n\n11\n\n\nHome \n Garden\n\n\n\n\n\n\n1\n\n\nApparel \n Accessories\n\n\n12\n\n\nLuggage \n Bags\n\n\n\n\n\n\n2\n\n\nArts \n Entertainment\n\n\n13\n\n\nMature\n\n\n\n\n\n\n3\n\n\nBaby \n Toddler\n\n\n14\n\n\nMedia\n\n\n\n\n\n\n4\n\n\nBusiness \n Industrial\n\n\n15\n\n\nOffice Supplies\n\n\n\n\n\n\n5\n\n\nCamera \n Optics\n\n\n16\n\n\nReligious \n Ceremonial\n\n\n\n\n\n\n6\n\n\nElectronics\n\n\n17\n\n\nSoftware\n\n\n\n\n\n\n7\n\n\nFood, Beverage \n Tobacco\n\n\n18\n\n\nSporting Goods\n\n\n\n\n\n\n8\n\n\nFurniture\n\n\n19\n\n\nToys \n Games\n\n\n\n\n\n\n9\n\n\nHardware\n\n\n20\n\n\nVehicles \n Parts\n\n\n\n\n\n\n10\n\n\nHealth \n Beauty\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCurrencies\n\n\n\n\n\n\n\n\nValue\n\n\nCurrency\n\n\nValue\n\n\nCurrency\n\n\nValue\n\n\nCurrency\n\n\n\n\n\n\n\n\n\n\n0\n\n\nAED\n\n\n60\n\n\nHKD\n\n\n120\n\n\nRSD\n\n\n\n\n\n\n1\n\n\nAFN\n\n\n61\n\n\nHNL\n\n\n121\n\n\nRUB\n\n\n\n\n\n\n2\n\n\nALL\n\n\n62\n\n\nHRK\n\n\n122\n\n\nRWF\n\n\n\n\n\n\n3\n\n\nAMD\n\n\n63\n\n\nHTG\n\n\n123\n\n\nSAR\n\n\n\n\n\n\n4\n\n\nANG\n\n\n64\n\n\nHUF\n\n\n124\n\n\nSBD\n\n\n\n\n\n\n5\n\n\nAOA\n\n\n65\n\n\nIDR\n\n\n125\n\n\nSCR\n\n\n\n\n\n\n6\n\n\nARS\n\n\n66\n\n\nILS\n\n\n126\n\n\nSDG\n\n\n\n\n\n\n7\n\n\nAUD\n\n\n67\n\n\nINR\n\n\n127\n\n\nSEK\n\n\n\n\n\n\n8\n\n\nAWG\n\n\n68\n\n\nIQD\n\n\n128\n\n\nSGD\n\n\n\n\n\n\n9\n\n\nAZN\n\n\n69\n\n\nIRR\n\n\n129\n\n\nSHP\n\n\n\n\n\n\n10\n\n\nBAM\n\n\n70\n\n\nISK\n\n\n130\n\n\nSLL\n\n\n\n\n\n\n11\n\n\nBBD\n\n\n71\n\n\nJMD\n\n\n131\n\n\nSOS\n\n\n\n\n\n\n12\n\n\nBDT\n\n\n72\n\n\nJOD\n\n\n132\n\n\nSRD\n\n\n\n\n\n\n13\n\n\nBGN\n\n\n73\n\n\nJPY\n\n\n133\n\n\nSSP\n\n\n\n\n\n\n14\n\n\nBHD\n\n\n74\n\n\nKES\n\n\n134\n\n\nSTD\n\n\n\n\n\n\n15\n\n\nBIF\n\n\n75\n\n\nKGS\n\n\n135\n\n\nSYP\n\n\n\n\n\n\n16\n\n\nBMD\n\n\n76\n\n\nKHR\n\n\n136\n\n\nSZL\n\n\n\n\n\n\n17\n\n\nBND\n\n\n77\n\n\nKMF\n\n\n137\n\n\nTHB\n\n\n\n\n\n\n18\n\n\nBOB\n\n\n78\n\n\nKPW\n\n\n138\n\n\nTJS\n\n\n\n\n\n\n19\n\n\nBOV\n\n\n79\n\n\nKRW\n\n\n139\n\n\nTMT\n\n\n\n\n\n\n20\n\n\nBRL\n\n\n80\n\n\nKWD\n\n\n140\n\n\nTND\n\n\n\n\n\n\n21\n\n\nBSD\n\n\n81\n\n\nKYD\n\n\n141\n\n\nTOP\n\n\n\n\n\n\n22\n\n\nBTN\n\n\n82\n\n\nKZT\n\n\n142\n\n\nTRY\n\n\n\n\n\n\n23\n\n\nBWP\n\n\n83\n\n\nLAK\n\n\n143\n\n\nTTD\n\n\n\n\n\n\n24\n\n\nBYN\n\n\n84\n\n\nLBP\n\n\n144\n\n\nTWD\n\n\n\n\n\n\n25\n\n\nBYR\n\n\n85\n\n\nLKR\n\n\n145\n\n\nTZS\n\n\n\n\n\n\n26\n\n\nBZD\n\n\n86\n\n\nLRD\n\n\n146\n\n\nUAH\n\n\n\n\n\n\n27\n\n\nCAD\n\n\n87\n\n\nLSL\n\n\n147\n\n\nUGX\n\n\n\n\n\n\n28\n\n\nCDF\n\n\n88\n\n\nLYD\n\n\n148\n\n\nUSD\n\n\n\n\n\n\n29\n\n\nCHE\n\n\n89\n\n\nMAD\n\n\n149\n\n\nUSN\n\n\n\n\n\n\n30\n\n\nCHF\n\n\n90\n\n\nMDL\n\n\n150\n\n\nUYI\n\n\n\n\n\n\n31\n\n\nCHW\n\n\n91\n\n\nMGA\n\n\n151\n\n\nUYU\n\n\n\n\n\n\n32\n\n\nCLF\n\n\n92\n\n\nMKD\n\n\n152\n\n\nUZS\n\n\n\n\n\n\n33\n\n\nCLP\n\n\n93\n\n\nMMK\n\n\n153\n\n\nVEF\n\n\n\n\n\n\n34\n\n\nCNY\n\n\n94\n\n\nMNT\n\n\n154\n\n\nVND\n\n\n\n\n\n\n35\n\n\nCOP\n\n\n95\n\n\nMOP\n\n\n155\n\n\nVUV\n\n\n\n\n\n\n36\n\n\nCOU\n\n\n96\n\n\nMRO\n\n\n156\n\n\nWST\n\n\n\n\n\n\n37\n\n\nCRC\n\n\n97\n\n\nMUR\n\n\n157\n\n\nXAF\n\n\n\n\n\n\n38\n\n\nCUC\n\n\n98\n\n\nMVR\n\n\n158\n\n\nXAG\n\n\n\n\n\n\n39\n\n\nCUP\n\n\n99\n\n\nMWK\n\n\n159\n\n\nXAU\n\n\n\n\n\n\n40\n\n\nCVE\n\n\n100\n\n\nMXN\n\n\n160\n\n\nXBA\n\n\n\n\n\n\n41\n\n\nCZK\n\n\n101\n\n\nMXV\n\n\n161\n\n\nXBB\n\n\n\n\n\n\n42\n\n\nDJF\n\n\n102\n\n\nMYR\n\n\n162\n\n\nXBC\n\n\n\n\n\n\n43\n\n\nDKK\n\n\n103\n\n\nMZN\n\n\n163\n\n\nXBD\n\n\n\n\n\n\n44\n\n\nDOP\n\n\n104\n\n\nNAD\n\n\n164\n\n\nXCD\n\n\n\n\n\n\n45\n\n\nDZD\n\n\n105\n\n\nNGN\n\n\n165\n\n\nXDR\n\n\n\n\n\n\n46\n\n\nEGP\n\n\n106\n\n\nNIO\n\n\n166\n\n\nXFU\n\n\n\n\n\n\n47\n\n\nERN\n\n\n107\n\n\nNOK\n\n\n167\n\n\nXOF\n\n\n\n\n\n\n48\n\n\nETB\n\n\n108\n\n\nNPR\n\n\n168\n\n\nXPD\n\n\n\n\n\n\n49\n\n\nEUR\n\n\n109\n\n\nNZD\n\n\n169\n\n\nXPF\n\n\n\n\n\n\n50\n\n\nFJD\n\n\n110\n\n\nOMR\n\n\n170\n\n\nXPT\n\n\n\n\n\n\n51\n\n\nFKP\n\n\n111\n\n\nPAB\n\n\n171\n\n\nXSU\n\n\n\n\n\n\n52\n\n\nGBP\n\n\n112\n\n\nPEN\n\n\n172\n\n\nXTS\n\n\n\n\n\n\n53\n\n\nGEL\n\n\n113\n\n\nPGK\n\n\n173\n\n\nXUA\n\n\n\n\n\n\n54\n\n\nGHS\n\n\n114\n\n\nPHP\n\n\n174\n\n\nXXX\n\n\n\n\n\n\n55\n\n\nGIP\n\n\n115\n\n\nPKR\n\n\n175\n\n\nYER\n\n\n\n\n\n\n56\n\n\nGMD\n\n\n116\n\n\nPLN\n\n\n176\n\n\nZAR\n\n\n\n\n\n\n57\n\n\nGNF\n\n\n117\n\n\nPYG\n\n\n177\n\n\nZMW\n\n\n\n\n\n\n58\n\n\nGTQ\n\n\n118\n\n\nQAR\n\n\n\n\n\n\n\n\n\n\n59\n\n\nGYD\n\n\n119\n\n\nRON\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCordova dependencies\n\n\n\n\n\n\nNode\n\n\n/usr/bin/ruby -e \n$(\ncurl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install\n)\n;\n\nbrew update\n;\n\nbrew install node\n;\n\n\n\n\n\n\n\n\n\nXcode\n\n\n\n\n\n\nInstall \nXcode\n\n\n\n\n\n\nOpen Xcode -\n agree to SDK license agreement\n\n\n\n\n\n\nOpen Xcode -\n Create new Xcode project -\n Run simulator -\n Agree to developer mode on mac\n\n\n\n\n\n\n\n\n\n\nAndroid Studio\n\n\n\n\n\n\nRead \ninstructions\n\n\n\n\n\n\nInstall \nJVM\n\n\n\n\n\n\nInstall \nAndroid Studio\n\n\n\n\n\n\nOpen Android Studio -\n configure -\n appearance/system settings/android sdk -\n android 6.0 -\n Okay\n\n\n\n\n\n\nOpen Android Studio -\n New project -\n ... -\n Run -\n Create new emulator -\n Nexus 6p 23 -\n Finish\n\n\n# add to ~/.bash_profile\n\n\nexport\n \nANDROID_HOME\n=\n$HOME\n/Library/Android/sdk\n\nexport\n \nPATH\n=\n$ANDROID_HOME\n/tools:\n$PATH\n\n\nexport\n \nPATH\n=\n$ANDROID_HOME\n/platform-tools:\n$PATH\n\n\n\n\n\nsource\n ~/.bash_profile\n;\n\n\n\n\n\nandroid update sdk\n;\n\n\n\n\n\n\n\n\n\nInstall Android SDK build-tools 24.0.1\n\n\n\n\n\n\nGenerate Android Keystore\n\n\nkeytool -genkeypair -dname \ncn=Full Name, ou=Business Unit, o=Company, c=US\n -alias release -keypass aaa111 -keystore release.keystore -storepass aaa111 -validity \n10000\n\nkeytool -list -v -keystore release.keystore\n\n\n\n\n\n\n\n\n\n\n\n\nGenymotion \n[optional]\n\n\n\n\n\n\nInstall \nVirtual Box\n\n\n\n\n\n\nInstall \nGenymotion\n\n\n\n\n\n\nGenymotion -\n Add virtual device -\n Google Nexus 6P - 6.0.0 - API 23 -\n Next\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay console logs\n\n\n\n\n\n\niOS Simulator\n\n\n\n\n\n\ncordova run ios;\n\n\n\n\n\n\nSafari -\n Preferences -\n Advance -\n Show Develop menu in menu bar\n\n\n\n\n\n\nSafari -\n Develop -\n Simulator -\n index.html -\n Console\n\n\n\n\n\n\nMay need to unplug and replug device\n\n\n\n\n\n\nMay need to open Xcode and update provisioning profile\n\n\n\n\n\n\n\n\n\n\niOS Xcode\n\n\n\n\n\n\ncordova plugin add cordova-plugin-console;\n\n\n\n\n\n\ncordova build ios;\n\n\n\n\n\n\nXcode -\n APP_LOCATION/platforms/ios/APP_NAME.Xcodeproj\n\n\n\n\n\n\nXcode -\n App -\n General -\n Signing -\n Team\n\n\n\n\n\n\nXcode -\n Product -\n Run\n\n\n\n\n\n\nXcode -\n View -\n Debug Area -\n Activate Console\n\n\n\n\n\n\n\n\n\n\nAndroid Device\n\n\n\n\n\n\nPlug device in\n\n\n\n\n\n\ncordova run android;\n\n\n\n\n\n\nChrome -\n \nchrome://inspect/#devices\n -\n Console\n\n\n\n\n\n\n\n\n\n\nAndroid Genymotion\n\n\n\n\n\n\nGenymotion -\n Start\n\n\n\n\n\n\ncordova run android;\n\n\n\n\n\n\nChrome -\n \nchrome://inspect/#devices\n -\n Console\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpdate the Branch SDK\n\n\n\n\n\n\nTo get the latest improvements and capabilities\n\n\n# terminal\n\ncordova plugin remove io.branch.sdk\ncordova plugin remove branch-cordova-sdk\n\n\n\n\n!-- config.xml --\n\n\nplugin\n \nname=\nbranch-cordova-sdk\n \nspec=\n^2.5.0\n \n/\n\n\n\n\n\n\n\n\n\nTest Deep Link iOS\n\n\n\n\nTest Deep Link Android\n\n\n\n\n\n\n\n\nIncompatibilities\n\n\n\n\n\n\nThe following plugins will not work with the Branch SDK\n\n\n\n\n\n\nPhoneGap NFC Plugin\n\n\n\n\n\n\nCustom URL scheme\n\n\n\n\n\n\nCordova Universal Links Plugin\n\n\n\n\n\n\nIonic Deeplinks Plugin\n\n\n\n\n\n\n\n\n\n\nPhoneGap Build is also not supported by the Branch SDK because we need plugin hooks to enable Entitlements, Universal Links, App Links, and URI Scheme redirects but PhoneGap Build does not allow plugin hooks\n\n\n\n\n\n\n\n\n\n\nCordova errors\n\n\n\n\n\n\nDevice only\n\n\n\n\n\n\nError\n\n\nORIGINAL EXCEPTION: Branch is not defined\n\n\n\n\nReferenceError: Branch is not defined\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\nBranch opens and installs your app, so you cannot simulate Branch in the desktop browser or simulator\n\n\n\n\n// Ionic 2/3 - running on browser instead of device\n\n\nif\n \n(\n!\nplatform\n.\nis\n(\ncordova\n))\n \n{\n \nreturn\n \n}\n\n\nBranch\n.\nuserCompletedAction\n(\ndid_this\n)\n\n\n\n\n\n// Ionic 2/3 - missing Branch import\n\n\nconst\n \nBranch\n \n=\n \nwindow\n[\nBranch\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nProvisioning Profile missing\n\n\n\n\n\n\nError\n\n\n** ARCHIVE FAILED **\n\nThe following build commands failed:\n  Check dependencies\n\n(\n1\n failure\n)\n\nError: Error code \n65\n \nfor\n command: xcodebuild with args: -xcconfig,cordova/build-debug.xcconfig,-workspace,Branch Testing.xcworkspace,-scheme,Branch Testing,-configuration,Debug,-destination,generic/platform\n=\niOS,-archivePath,Branch Testing.xcarchive,archive,CONFIGURATION_BUILD_DIR\n=\nbuild/device,SHARED_PRECOMPS_DIR\n=\nbuild/sharedpch\n\n\n\n\nNo profiles \nfor\n \ncom.eneff.branch.cordova_testbed\n were found\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\nFix by opening your app in \nXcode\n and launch from there (to select a \nProvisioning Profile\n)\n\n\n\n\n\n\n\n\n\n\n\n\nInvalid bundle id\n\n\n\n\n\n\nError\n\n\nAn invalid value \nXC com eneff branch cordova_testbed\n was provided \nfor\n the parameter \nappIdName\n.\n\n\n\n\nError: Error code \n1\n \nfor\n command: /gradlew with args: cdvBuildDebug,-b,/build.gradle,-Dorg.gradle.daemon\n=\ntrue,-Pandroid.useDeprecatedNdk\n=\ntrue\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\nDon't use \ncordova\n, \nhyphens\n (Android), or \nunderscores\n (iOS) in your bundle id (widget id)", 
            "title": "Cordova PhoneGap Ionic"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#integrate-branch", 
            "text": "Inconsistent Universal links behavior on iOS 11.2  After updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set  forced uri redirect mode  on your Branch links to open the app with URI schemes. View details of the issue on the  Apple Bug report .", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#configure-app", 
            "text": "Cordova and Ionic  !-- sample config.xml --  widget   id= com.eneff.branch.cordovatestbed   version= 0.0.1   xmlns= http://www.w3.org/ns/widgets   xmlns:cdv= http://cordova.apache.org/ns/1.0 \n   !-- Branch -- \n   plugin   name= branch-cordova-sdk   spec= ^2.5.0   / \n   branch-config \n     branch-key   value= key_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3   / \n     uri-scheme   value= branchcordova   / \n     link-domain   value= cordova.app.link   / \n     ios-team-release   value= PW4Q8885U7   / \n   /branch-config     PhoneGap  !-- sample config.xml --  widget   id= com.eneff.branch.cordovatestbed   version= 1.0.0   xmlns= http://www.w3.org/ns/widgets   xmlns:gap= http://phonegap.com/ns/1.0 \n   !-- Branch -- \n   plugin   name= branch-cordova-sdk   spec= ^2.5.0   / \n   branch-config \n     branch-key   value= key_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3   / \n     uri-scheme   value= branchcordova   / \n     link-domain   value= cordova.app.link   / \n     ios-team-release   value= PW4Q8885U7   / \n   /branch-config     Change the following values to match your  Branch Dashboard   com.eneff.branch.cordovatestbed  key_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3  branchcordova  cordova.app.link  PW4Q8885U7", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#initialize-branch", 
            "text": "Cordova and PhoneGap  // sample index.js  var   app   =   { \n   initialize :   function ()   { \n     this . bindEvents (); \n   }, \n   bindEvents :   function ()   { \n     document . addEventListener ( deviceready ,   this . onDeviceReady ,   false ); \n     document . addEventListener ( resume ,   this . onDeviceResume ,   false ); \n   }, \n   onDeviceReady :   function ()   {       app . handleBranch ();     }, \n   onDeviceResume :   function ()   {       app . handleBranch ();     },     handleBranch :   function ()   {       // Branch initialization       Branch . initSession ( function ( data )   {         if   ( data [ +clicked_branch_link ])   {           // read deep link data on click           alert ( Deep Link Data:    +   JSON . stringify ( data ));         }       }); \n   }  };  app . initialize ();     Ionic 1  // sample app.js  angular . module ( starter ,   [ ionic ,   starter.controllers ,   starter.services ])  . run ( function ( $ionicPlatform )   { \n   $ionicPlatform . ready ( function ()   { \n     if   ( window . cordova     window . cordova . plugins     window . cordova . plugins . Keyboard )   { \n       cordova . plugins . Keyboard . hideKeyboardAccessoryBar ( true ); \n       cordova . plugins . Keyboard . disableScroll ( true ); \n     } \n     if   ( window . StatusBar )   { \n       StatusBar . styleDefault (); \n     } \n\n     // Branch \n     $ionicPlatform . on ( deviceready ,   function ()   {         handleBranch ();       }); \n\n     $ionicPlatform . on ( resume ,   function ()   {         handleBranch ();       });       function   handleBranch ()   {         // Branch initialization         Branch . initSession ( function ( data )   {           if   ( data [ +clicked_branch_link ])   {             // read deep link data on click             alert ( Deep Link Data:    +   JSON . stringify ( data ));           }         }); \n     } \n   });  })  // ...     Ionic 2 and 3  // sample app.component.js  import   {  Component   }   from   @angular / core ;  import   {  Platform   }   from   ionic - angular ;  import   {  StatusBar ,   Splashscreen   }   from   ionic - native ;  import   {  TabsPage   }   from   ../ pages / tabs / tabs  @Component ({ \n   template :   ` ion - nav   [ root ]= rootPage / ion - nav `  })  export   class   MyApp   { \n   rootPage   =   TabsPage ; \n\n   constructor ( platform :   Platform )   { \n     platform . ready (). then (()   =   { \n       StatusBar . styleDefault (); \n       Splashscreen . hide ();         handleBranch ();       }); \n\n     platform . resume . subscribe (()   =   {         handleBranch ();       });       // Branch initialization       const   handleBranch   =   ()   =   {         // only on devices         if   (! platform . is ( cordova ))   {   return   }         const   Branch   =   window [ Branch ];         Branch . initSession ( data   =   {           if   ( data [ + clicked_branch_link ])   {             // read deep link data on click             alert ( Deep   Link   Data :     +   JSON . stringify ( data ));           }         });       }     }  }", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#test-deep-link-ios", 
            "text": "Create a deep link from the  Branch Dashboard    Delete your app from the device    Compile your app  ( cordova run ios   phonegap run ios   ionic run ios )    Paste deep link in  Apple Notes    Long press on the deep link  (not 3D Touch)    Click  Open in \"APP_NAME\"  to open your app  ( example )", 
            "title": "Test deep link iOS"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#test-deep-link-android", 
            "text": "Create a deep link from the  Branch Dashboard    Delete your app from the device    Compile your app  ( cordova run android   phonegap run android   ionic run android )    Paste deep link in  Google Hangouts    Click on the deep link to open your app", 
            "title": "Test deep link Android"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#initialize-branch-features", 
            "text": "Loads Branch into your app    Must be called on  deviceready  and  resume  // for development and debugging only  Branch . setDebug ( true )  // Branch initialization  Branch . initSession ( function ( data )   { \n   if   ( data [ +clicked_branch_link ])   { \n     // read deep link data on click \n     alert ( Deep Link Data:    +   JSON . stringify ( data )) \n   }  })", 
            "title": "Initialize Branch features"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share (content or user)    Uses the  Universal Object Properties  // only canonicalIdentifier is required  var   properties   =   { \n   canonicalIdentifier :   content/123 , \n   canonicalUrl :   https://example.com/content/123 , \n   title :   Content 123 Title , \n   contentDescription :   Content 123 Description    +   Date . now (), \n   contentImageUrl :   http://lorempixel.com/400/400/ , \n   price :   12.12 , \n   currency :   GBD , \n   contentIndexingMode :   private , \n   contentMetadata :   { \n     custom :   data , \n     testing :   123 , \n     this_is :   true \n   }  }  // create a branchUniversalObj variable to reference with other Branch methods  var   branchUniversalObj   =   null  Branch . createBranchUniversalObject ( properties ). then ( function   ( res )   { \n   branchUniversalObj   =   res \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#create-deep-link", 
            "text": "Creates a deep link URL with encapsulated data    Needs a  Branch Universal Object    Uses  Deep Link Properties    Validate with the  Branch Dashboard  // optional fields  var   analytics   =   { \n   channel :   facebook , \n   feature :   onboarding , \n   campaign :   content 123 launch , \n   stage :   new user , \n   tags :   [ one ,   two ,   three ]  }  // optional fields  var   properties   =   { \n   $desktop_url :   http://www.example.com/desktop , \n   $android_url :   http://www.example.com/android , \n   $ios_url :   http://www.example.com/ios , \n   $ipad_url :   http://www.example.com/ipad , \n   $match_duration :   2000 , \n   custom_string :   data , \n   custom_integer :   Date . now (), \n   custom_boolean :   true  }  branchUniversalObj . generateShortUrl ( analytics ,   properties ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res . url ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Needs a  Branch Universal Object    Uses  Deep Link Properties  // optional fields  var   analytics   =   { \n   channel :   facebook , \n   feature :   onboarding , \n   campaign :   content 123 launch , \n   stage :   new user , \n   tags :   [ one ,   two ,   three ]  }  // optional fields  var   properties   =   { \n   $desktop_url :   http://www.example.com/desktop , \n   custom_string :   data , \n   custom_integer :   Date . now (), \n   custom_boolean :   true  }  var   message   =   Check out this link  // optional listeners (must be called before showShareSheet)  branchUniversalObj . onShareSheetLaunched ( function   ( res )   { \n   // android only \n   console . log ( res )  })  branchUniversalObj . onShareSheetDismissed ( function   ( res )   { \n   console . log ( res )  })  branchUniversalObj . onLinkShareResponse ( function   ( res )   { \n   console . log ( res )  })  branchUniversalObj . onChannelSelected ( function   ( res )   { \n   // android only \n   console . log ( res )  })  // share sheet  branchUniversalObj . showShareSheet ( analytics ,   properties ,   message )", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Returns  deep link properties    Listener  // Branch initialization within your deviceready and resume  Branch . initSession ( function ( deepLinkData )   { \n   if   ( data [ +clicked_branch_link ])   { \n     // handler for deep link data on click \n     alert ( Response:    +   JSON . stringify ( deepLinkData )) \n   }  })     Latest data  Branch . getLatestReferringParams (). then ( function ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })     First data  Branch . getFirstReferringParams (). then ( function ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#navigate-to-content", 
            "text": "Handled within  Branch.initSession()    Branch allows you to pass any custom key-value from URLs to your app. Use this data to navigate to content, display a personalized welcome screen, login a user, offer a promotion, etc.  Branch . initSession ( function ( data )   { \n   if   ( data [ +clicked_branch_link ])   { \n     // option 1: save to model to be used later \n     window . localStorage [ branchData ]   =   data ; \n\n     // option 2: navigate to page \n     window . location . href   =   #/content/123 \n\n     // option 3: display data \n     alert ( JSON . stringify ( data )); \n   }  });", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#display-content", 
            "text": "List content on  iOS Spotlight    Needs a  Branch Universal Object  branchUniversalObj . listOnSpotlight (). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Branch Universal Object    Validate with the  Branch Dashboard  branchUniversalObj . registerView (). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    Validate with the  Branch Dashboard  var   userId   =   123456  Branch . setIdentity ( userId ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err . message ))  })     Removes the identity of a user  Branch . logout (). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err . message ))  })", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard  var   eventName   =   clicked_on_this  var   metadata   =   {   custom_dictionary :   123 ,   anything :   everything   }  Branch . userCompletedAction ( eventName ,   metaData ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err . message ))  })   var   eventName   =   clicked_on_this  Branch . userCompletedAction ( eventName ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err . message ))  })", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#track-commerce", 
            "text": "Registers a custom commerce event    Uses  Track commerce properties  for  Currency  and  Category    Validate with the  Branch Dashboard  // only revenue is required  var   event   =   { \n   revenue :   50.29 , \n   currency :   148 ,   // USD \n   transactionID :   transaction id , \n   coupon :   coupon , \n   shipping :   2.22 , \n   tax :   5.11 , \n   affiliation :   affiliation , \n   products :   [ \n     { \n       sku :   u123 , \n       name :   cactus , \n       price :   4.99 , \n       quantity :   2 , \n       brand :   brand , \n       category :   17 ,   // Software \n       variant :   variant \n     }, \n     { \n       sku :   u456 , \n       name :   grass , \n       price :   0.00 , \n       quantity :   1 \n     } \n   ]  }  // optional fields  var   metadata   =   { \n   custom_dictionary :   123 , \n   anything :   everything  }  Branch . sendCommerceEvent ( event ,   metadata ). then ( function   ( res )   { \n   console . log ( res ) \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   console . error ( err ) \n   alert ( Error:    +   JSON . stringify ( err . message ))  })", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#handle-referrals", 
            "text": "Referral points are obtained from referral rules on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits   Referral guide     Redeem credits  var   amount   =   10  var   bucket   =   this_bucket  Branch . redeemRewards ( amount ,   bucket ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })   var   amount   =   10  Branch . redeemRewards ( amount ). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })     Load credits  var   bucket   =   this_bucket  Branch . loadRewards ( bucket ). then ( function ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })   Branch . loadRewards (). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })     Load history  Branch . creditHistory (). then ( function   ( res )   { \n   alert ( Response:    +   JSON . stringify ( res ))  }). catch ( function   ( err )   { \n   alert ( Error:    +   JSON . stringify ( err ))  })", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#recommendations", 
            "text": "Need to select  \"app uses IDFA or GAID\"  when publishing your app", 
            "title": "Recommendations"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#optional-app-config", 
            "text": "Additional configuration for custom link domains, simulating installs, unique bundle identifiers, etc  !-- sample config.xml --  widget   id= com.eneff.branch.cordovatestbed   version= 1.0.0   xmlns= http://www.w3.org/ns/widgets   xmlns:cdv= http://cordova.apache.org/ns/1.0 \n   !-- Branch -- \n   plugin   name= branch-cordova-sdk   spec= ~2.4.2   /   !-- optional spec -- \n   branch-config \n     branch-key   value= key_live_ndqptlgXNE4LHqIahH1WIpbiyFlb62J3   / \n     uri-scheme   value= branchcordova   / \n     link-domain   value= yourcustomdomain.com   / \n     link-domain   value= cordova.app.link   /    !-- optional previous link domain -- \n     link-domain   value= bnc.lt   /    !-- optional previous link domain -- \n     ios-team-release   value= PW4Q8885U7   /   !-- required if iOS app -- \n     ios-team-debug   value= FG35JLLMXX   /   !-- optional -- \n     android-prefix   value= /WSuf   /   !-- optional (for bnc.lt and custom domains) -- \n     android-testmode   value= true   /   !-- optional (simulate installs) -- \n   /branch-config   widget   ios-CFBundleIdentifier= com.eneff.branch.cordovatestbedios   android-packageName= com.eneff.branch.cordovatestbedandroid   version= 1.0.0   xmlns= http://www.w3.org/ns/widgets   xmlns:cdv= http://cordova.apache.org/ns/1.0", 
            "title": "Optional app config"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#sync-with-mixpanel", 
            "text": "Sync Branch withh Mixpanel if the plugin is installed     Add before  Branch.initSession();  ( Initialize Branch Features )  Branch . setRequestMetadata ( $mixpanel_distinct_id ,   123 )", 
            "title": "Sync with Mixpanel"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#simulate-an-install", 
            "text": "Delete your app    [iOS]  iPhone Device -  Settings -  Privacy -  Advertising -  Reset Advertising Identifier -  Reset Identifier    [Android]  Add  android-testmode value=\"true\" /  to your  Config.xml  ( Testing: Optional App Config )    Add  Branch.setDebug(true);  before  Branch.initSession();  ( Initialize Branch Features )    Click on a deep link to navigate to your  $fallback_url  because your app is not installed    Install your app    Open your app    Read from  Branch.initSession(data)  for  +is_first_session = true", 
            "title": "Simulate an install"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#sample-app", 
            "text": "Branch testbed app", 
            "title": "Sample app"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#universal-object-properties", 
            "text": "For  Create content reference     Key  Default  Usage  Link Property      canonicalIdentifier   (Required)  This is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities  $canonical_identifier    canonicalUrl   The canonical URL, used for SEO purposes  $canonical_url    title   The name for the piece of content  $og_title    contentDescription   A description for the content  $og_description    contentImageUrl   The image URL for the content. Must be an absolute path  $og_image_url    price   The price of the item  $amount    currency   The currency representing the price in ISO 4217 currency code  $currency    contentIndexingMode  \"public\"  Can be set to either  \"public\"  or  \"private\" . Public indicates that you\u2019d like this content to be discovered by other apps.  $publicly_indexable    contentMetadata   Any custom key-value data e.g.  { \"custom\": \"data\" }", 
            "title": "Universal Object properties"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#commerce-properties", 
            "text": "For  Track commerce    Categories     Value  Category  Value  Category      0  Animals   Pet Supplies  11  Home   Garden    1  Apparel   Accessories  12  Luggage   Bags    2  Arts   Entertainment  13  Mature    3  Baby   Toddler  14  Media    4  Business   Industrial  15  Office Supplies    5  Camera   Optics  16  Religious   Ceremonial    6  Electronics  17  Software    7  Food, Beverage   Tobacco  18  Sporting Goods    8  Furniture  19  Toys   Games    9  Hardware  20  Vehicles   Parts    10  Health   Beauty         Currencies     Value  Currency  Value  Currency  Value  Currency      0  AED  60  HKD  120  RSD    1  AFN  61  HNL  121  RUB    2  ALL  62  HRK  122  RWF    3  AMD  63  HTG  123  SAR    4  ANG  64  HUF  124  SBD    5  AOA  65  IDR  125  SCR    6  ARS  66  ILS  126  SDG    7  AUD  67  INR  127  SEK    8  AWG  68  IQD  128  SGD    9  AZN  69  IRR  129  SHP    10  BAM  70  ISK  130  SLL    11  BBD  71  JMD  131  SOS    12  BDT  72  JOD  132  SRD    13  BGN  73  JPY  133  SSP    14  BHD  74  KES  134  STD    15  BIF  75  KGS  135  SYP    16  BMD  76  KHR  136  SZL    17  BND  77  KMF  137  THB    18  BOB  78  KPW  138  TJS    19  BOV  79  KRW  139  TMT    20  BRL  80  KWD  140  TND    21  BSD  81  KYD  141  TOP    22  BTN  82  KZT  142  TRY    23  BWP  83  LAK  143  TTD    24  BYN  84  LBP  144  TWD    25  BYR  85  LKR  145  TZS    26  BZD  86  LRD  146  UAH    27  CAD  87  LSL  147  UGX    28  CDF  88  LYD  148  USD    29  CHE  89  MAD  149  USN    30  CHF  90  MDL  150  UYI    31  CHW  91  MGA  151  UYU    32  CLF  92  MKD  152  UZS    33  CLP  93  MMK  153  VEF    34  CNY  94  MNT  154  VND    35  COP  95  MOP  155  VUV    36  COU  96  MRO  156  WST    37  CRC  97  MUR  157  XAF    38  CUC  98  MVR  158  XAG    39  CUP  99  MWK  159  XAU    40  CVE  100  MXN  160  XBA    41  CZK  101  MXV  161  XBB    42  DJF  102  MYR  162  XBC    43  DKK  103  MZN  163  XBD    44  DOP  104  NAD  164  XCD    45  DZD  105  NGN  165  XDR    46  EGP  106  NIO  166  XFU    47  ERN  107  NOK  167  XOF    48  ETB  108  NPR  168  XPD    49  EUR  109  NZD  169  XPF    50  FJD  110  OMR  170  XPT    51  FKP  111  PAB  171  XSU    52  GBP  112  PEN  172  XTS    53  GEL  113  PGK  173  XUA    54  GHS  114  PHP  174  XXX    55  GIP  115  PKR  175  YER    56  GMD  116  PLN  176  ZAR    57  GNF  117  PYG  177  ZMW    58  GTQ  118  QAR      59  GYD  119  RON", 
            "title": "Commerce properties"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#cordova-dependencies", 
            "text": "Node  /usr/bin/ruby -e  $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install ) ; \nbrew update ; \nbrew install node ;     Xcode    Install  Xcode    Open Xcode -  agree to SDK license agreement    Open Xcode -  Create new Xcode project -  Run simulator -  Agree to developer mode on mac      Android Studio    Read  instructions    Install  JVM    Install  Android Studio    Open Android Studio -  configure -  appearance/system settings/android sdk -  android 6.0 -  Okay    Open Android Studio -  New project -  ... -  Run -  Create new emulator -  Nexus 6p 23 -  Finish  # add to ~/.bash_profile  export   ANDROID_HOME = $HOME /Library/Android/sdk export   PATH = $ANDROID_HOME /tools: $PATH  export   PATH = $ANDROID_HOME /platform-tools: $PATH   source  ~/.bash_profile ;   android update sdk ;     Install Android SDK build-tools 24.0.1    Generate Android Keystore  keytool -genkeypair -dname  cn=Full Name, ou=Business Unit, o=Company, c=US  -alias release -keypass aaa111 -keystore release.keystore -storepass aaa111 -validity  10000 \nkeytool -list -v -keystore release.keystore      Genymotion  [optional]    Install  Virtual Box    Install  Genymotion    Genymotion -  Add virtual device -  Google Nexus 6P - 6.0.0 - API 23 -  Next", 
            "title": "Cordova dependencies"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#display-console-logs", 
            "text": "iOS Simulator    cordova run ios;    Safari -  Preferences -  Advance -  Show Develop menu in menu bar    Safari -  Develop -  Simulator -  index.html -  Console    May need to unplug and replug device    May need to open Xcode and update provisioning profile      iOS Xcode    cordova plugin add cordova-plugin-console;    cordova build ios;    Xcode -  APP_LOCATION/platforms/ios/APP_NAME.Xcodeproj    Xcode -  App -  General -  Signing -  Team    Xcode -  Product -  Run    Xcode -  View -  Debug Area -  Activate Console      Android Device    Plug device in    cordova run android;    Chrome -   chrome://inspect/#devices  -  Console      Android Genymotion    Genymotion -  Start    cordova run android;    Chrome -   chrome://inspect/#devices  -  Console", 
            "title": "Display console logs"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#update-the-branch-sdk", 
            "text": "To get the latest improvements and capabilities  # terminal \ncordova plugin remove io.branch.sdk\ncordova plugin remove branch-cordova-sdk  !-- config.xml --  plugin   name= branch-cordova-sdk   spec= ^2.5.0   /     Test Deep Link iOS   Test Deep Link Android", 
            "title": "Update the Branch SDK"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#incompatibilities", 
            "text": "The following plugins will not work with the Branch SDK    PhoneGap NFC Plugin    Custom URL scheme    Cordova Universal Links Plugin    Ionic Deeplinks Plugin      PhoneGap Build is also not supported by the Branch SDK because we need plugin hooks to enable Entitlements, Universal Links, App Links, and URI Scheme redirects but PhoneGap Build does not allow plugin hooks", 
            "title": "Incompatibilities"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#cordova-errors", 
            "text": "", 
            "title": "Cordova errors"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#device-only", 
            "text": "Error  ORIGINAL EXCEPTION: Branch is not defined  ReferenceError: Branch is not defined    Solution   Branch opens and installs your app, so you cannot simulate Branch in the desktop browser or simulator   // Ionic 2/3 - running on browser instead of device  if   ( ! platform . is ( cordova ))   {   return   }  Branch . userCompletedAction ( did_this )   // Ionic 2/3 - missing Branch import  const   Branch   =   window [ Branch ];", 
            "title": "Device only"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#provisioning-profile-missing", 
            "text": "Error  ** ARCHIVE FAILED **\n\nThe following build commands failed:\n  Check dependencies ( 1  failure ) \nError: Error code  65   for  command: xcodebuild with args: -xcconfig,cordova/build-debug.xcconfig,-workspace,Branch Testing.xcworkspace,-scheme,Branch Testing,-configuration,Debug,-destination,generic/platform = iOS,-archivePath,Branch Testing.xcarchive,archive,CONFIGURATION_BUILD_DIR = build/device,SHARED_PRECOMPS_DIR = build/sharedpch  No profiles  for   com.eneff.branch.cordova_testbed  were found    Solution   Fix by opening your app in  Xcode  and launch from there (to select a  Provisioning Profile )", 
            "title": "Provisioning Profile missing"
        }, 
        {
            "location": "/pages/apps/cordova-phonegap-ionic/#invalid-bundle-id", 
            "text": "Error  An invalid value  XC com eneff branch cordova_testbed  was provided  for  the parameter  appIdName .  Error: Error code  1   for  command: /gradlew with args: cdvBuildDebug,-b,/build.gradle,-Dorg.gradle.daemon = true,-Pandroid.useDeprecatedNdk = true     Solution   Don't use  cordova ,  hyphens  (Android), or  underscores  (iOS) in your bundle id (widget id)", 
            "title": "Invalid bundle id"
        }, 
        {
            "location": "/pages/apps/mparticle-android/", 
            "text": "Integrate Branch\n\n\nThis documentation explains how to send \nmParticle events to your Branch dashboard\n. If you'd like to send Branch installs to your mParticle dashboard, please review the \nBranch/mParticle Data Integration\n. \n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall Branch\n\n\n\n\n\n\nImport the Branch SDK to your \nbuild.gradle\n\n\napply\n \nplugin\n:\n \ncom\n.\nandroid\n.\napplication\n\n\n\nandroid\n \n{\n\n    \ncompileSdkVersion\n \n25\n\n    \nbuildToolsVersion\n \n25.0.2\n\n    \ndefaultConfig\n \n{\n\n        \napplicationId\n \ncom.eneff.branchandroid\n\n        \nminSdkVersion\n \n15\n\n        \ntargetSdkVersion\n \n25\n\n        \nversionCode\n \n1\n\n        \nversionName\n \n1.0\n\n        \ntestInstrumentationRunner\n \nandroid.support.test.runner.AndroidJUnitRunner\n\n    \n}\n\n    \nbuildTypes\n \n{\n\n        \nrelease\n \n{\n\n            \nminifyEnabled\n \nfalse\n\n            \nproguardFiles\n \ngetDefaultProguardFile\n(\nproguard\n-\nandroid\n.\ntxt\n),\n \nproguard\n-\nrules\n.\npro\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\ndependencies\n \n{\n\n    \ncompile\n \nfileTree\n(\ndir\n:\n \nlibs\n,\n \ninclude\n:\n \n[\n*.\njar\n])\n\n    \nandroidTestCompile\n(\ncom\n.\nandroid\n.\nsupport\n.\ntest\n.\nespresso\n:\nespresso\n-\ncore\n:\n2.2.2\n,\n \n{\n\n        \nexclude\n \ngroup\n:\n \ncom\n.\nandroid\n.\nsupport\n,\n \nmodule\n:\n \nsupport\n-\nannotations\n\n    \n})\n\n    \ncompile\n \ncom\n.\nandroid\n.\nsupport\n:\nappcompat\n-\nv7\n:\n25.2.0\n\n    \ncompile\n \ncom\n.\nandroid\n.\nsupport\n:\ndesign\n:\n25.2.0\n\n\n    \ncompile\n \ncom\n.\nmparticle\n:\nandroid\n-\ncore\n:\n4.\n+\n\n\n\n    \ncompile\n \ncom\n.\nmparticle\n:\nandroid\n-\nbranch\n-\nkit\n:\n4\n+\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnable Branch on mParticle\n\n\n\n\nRetrieve your Branch Key on the \nApp Settings\n page of the Branch dashboard.\n\n\nFrom your \nmParticle dashboard\n navigate to the Services page. (The paper airplane icon on the left side)\n\n\nScroll down to the Branch tile, or enter Branch in the search bar.\n\n\nClick on the Branch tile and then select \"Activate a Platform\".\n\n\nClick on the Android icon, then toggle the status ON.\n\n\nEnter your Branch key in the marked field and click \"Save\".\n\n\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\nAdd Branch to your \nAndroidManifest.xml\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nmanifest\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \npackage=\ncom.eneff.branchandroid\n\n\n    \nuses-permission\n \nandroid:name=\nandroid.permission.INTERNET\n \n/\n\n\n    \napplication\n\n        \nandroid:allowBackup=\ntrue\n\n\n        \nandroid:name=\ncom.eneff.branchandroid.CustomApplicationClass\n\n\n        \nandroid:icon=\n@mipmap/ic_launcher\n\n        \nandroid:label=\n@string/app_name\n\n        \nandroid:supportsRtl=\ntrue\n\n        \nandroid:theme=\n@style/AppTheme\n\n\n        \nactivity\n\n            \nandroid:name=\n.MainActivity\n\n\n            \nandroid:launchMode=\nsingleTask\n\n\n            \nandroid:label=\n@string/app_name\n\n            \nandroid:theme=\n@style/AppTheme.NoActionBar\n\n\n            \nintent-filter\n\n                \naction\n \nandroid:name=\nandroid.intent.action.MAIN\n \n/\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.LAUNCHER\n \n/\n\n            \n/intent-filter\n\n\n\n            \n!-- Branch URI Scheme --\n\n\n            \nintent-filter\n\n\n                \ndata\n \nandroid:scheme=\nbranchandroid\n \n/\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n            \n/intent-filter\n\n\n\n\n            \n!-- Branch App Links (optional) --\n\n\n            \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n                \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nuobg.app.link\n \n/\n\n\n            \n/intent-filter\n\n\n        \n/activity\n\n\n    \n/application\n\n\n\n/manifest\n\n\n\n\n\n\n\n\n\nReplace the following with values from your \nBranch Dashboard\n\n\n\n\nbranchandroid\n\n\nuobg.app.link\n\n\n\n\n\n\n\n\n\n\n\n\nHandle Incoming Links\n\n\nOpen the \nActivity\n for which you registered the \nIntent Filter\n in the previous section, and hook into the \nonStart\n lifecycle method by adding this override:\n\n\n@Override\n\n\npublic\n \nvoid\n \nonStart\n()\n \n{\n\n\n  \nMParticle\n.\ngetInstance\n().\ncheckForDeepLink\n(\nnew\n \nDeepLinkListener\n()\n \n{\n\n\n    \n@Override\n\n\n    \npublic\n \nvoid\n \nonResult\n(\nDeepLinkResult\n \nresult\n)\n \n{\n\n\n      \n// Check for the existence of a given key in the link data and route accordingly.\n\n\n      \ntry\n \n{\n\n\n        \nif\n \n((\nresult\n.\ngetParameters\n().\nhas\n(\nmy_custom_key\n))\n \n \n(\nresult\n.\ngetParameters\n().\nget\n(\nmy_custom_key\n).\nequals\n(\ncustom value\n)))\n \n{\n\n\n          \n// Send user to intended path\n\n\n        \n}\n\n\n      \n}\n \ncatch\n \n(\nJSONException\n \ne\n)\n \n{\n\n\n      \n}\n\n\n    \n}\n\n\n\n\n    \n@Override\n\n\n    \npublic\n \nvoid\n \nonError\n(\nDeepLinkError\n \nerror\n)\n \n{\n\n\n      \n// If an error occurred, it will be surfaced via a DeepLinkError.\n\n\n      \nLog\n.\nd\n(\nmy log tag\n,\n \nerror\n.\ntoString\n());\n\n\n    \n}\n\n\n  \n});\n\n\n}\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\nAs with any kit, mParticle will automatically handle initializing Branch sessions. At this point you should start seeing your Branch session data - including installs, re-opens, and any custom events - in your Branch dashboard.\n\n\n\n\n\n\nTest deep link\n\n\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app to your device\n\n\n\n\n\n\nPaste deep link in \nGoogle Hangouts\n\n\n\n\n\n\nClick on the deep link to open your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n    \n// The identifier is what Branch will use to de-dupe the content across many different Universal Objects\n\n   \n.\nsetCanonicalIdentifier\n(\nitem/12345\n)\n\n\n   \n// The canonical URL for SEO purposes (optional)\n\n   \n.\nsetCanonicalUrl\n(\nhttps://branch.io/deepviews\n)\n\n\n   \n// This is where you define the open graph structure and how the object will appear on Facebook or in a deepview\n\n   \n.\nsetTitle\n(\nMy Content Title\n)\n\n   \n.\nsetContentDescription\n(\nMy Content Description\n)\n\n   \n.\nsetContentImageUrl\n(\nhttps://example.com/mycontent-12345.png\n)\n\n\n   \n// You use this to specify whether this content can be discovered publicly - default is public\n\n   \n.\nsetContentIndexingMode\n(\nBranchUniversalObject\n.\nCONTENT_INDEX_MODE\n.\nPUBLIC\n)\n\n\n    \n// Here is where you can add custom keys/values to the deep link data\n\n   \n.\nsetContentMetadata\n(\nnew\n \nContentMetadata\n().\naddCustomMetadata\n(\nproperty1\n,\n \nblue\n)\n\n        \n.\naddCustomMetadata\n(\nproperty2\n,\n \nred\n));\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\nLinkProperties\n \nlinkProperties\n \n=\n \nnew\n \nLinkProperties\n()\n\n   \n.\nsetChannel\n(\nfacebook\n)\n\n   \n.\nsetFeature\n(\nsharing\n)\n\n   \n.\naddControlParameter\n(\n$desktop_url\n,\n \nhttp://example.com/home\n)\n\n   \n.\naddControlParameter\n(\n$ios_url\n,\n \nhttp://example.com/ios\n);\n\n\n\nbranchUniversalObject\n.\ngenerateShortUrl\n(\nthis\n,\n \nlinkProperties\n,\n \nnew\n     \nBranchLinkCreateListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonLinkCreate\n(\nString\n \nurl\n,\n \nBranchError\n \nerror\n)\n \n{\n\n       \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n           \nLog\n.\ni\n(\nMyApp\n,\n \ngot my Branch link to share: \n \n+\n \nurl\n);\n\n       \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\nShareSheetStyle\n \nshareSheetStyle\n \n=\n \nnew\n \nShareSheetStyle\n(\nMainActivity\n.\nthis\n,\n \nCheck this out!\n,\n \nThis stuff is awesome: \n)\n\n    \n.\nsetCopyUrlStyle\n(\ngetResources\n().\ngetDrawable\n(\nandroid\n.\nR\n.\ndrawable\n.\nic_menu_send\n),\n \nCopy\n,\n \nAdded to clipboard\n)\n\n    \n.\nsetMoreOptionStyle\n(\ngetResources\n().\ngetDrawable\n(\nandroid\n.\nR\n.\ndrawable\n.\nic_menu_search\n),\n \nShow more\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nFACEBOOK\n)\n\n    \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nEMAIL\n)\n\n    \n.\nsetAsFullWidthStyle\n(\ntrue\n)\n\n    \n.\nsetSharingTitle\n(\nShare With\n);\n\n\n\nbranchUniversalObject\n.\nshowShareSheet\n(\nthis\n,\n\n                                      \nlinkProperties\n,\n\n                                      \nshareSheetStyle\n,\n\n                                       \nnew\n \nBranch\n.\nBranchLinkShareListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonShareLinkDialogLaunched\n()\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonShareLinkDialogDismissed\n()\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonLinkShareResponse\n(\nString\n \nsharedLink\n,\n \nString\n \nsharedChannel\n,\n \nBranchError\n \nerror\n)\n \n{\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonChannelSelected\n(\nString\n \nchannelName\n)\n \n{\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nReturns \ndeep link properties\n\n\n@Override\n\n\npublic\n \nvoid\n \nonStart\n()\n \n{\n\n  \nMParticle\n.\ngetInstance\n().\ncheckForDeepLink\n(\nnew\n \nDeepLinkListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonResult\n(\nDeepLinkResult\n \nresult\n)\n \n{\n\n      \ntry\n \n{\n\n        \nLog\n.\nd\n(\nBRANCH SDK\n,\n \nresult\n.\ngetParameters\n.\ntoString\n());\n\n      \n}\n \ncatch\n \n(\nJSONException\n \ne\n)\n \n{\n\n      \n}\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonError\n(\nDeepLinkError\n \nerror\n)\n \n{\n\n      \n// If an error occurred, it will be surfaced via a DeepLinkError.\n\n      \nLog\n.\nd\n(\nBRANCH SDK\n,\n \nerror\n.\ntoString\n());\n\n    \n}\n\n  \n});\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nDo stuff with the Branch deep link data.\n\n\n@Override\n\n\npublic\n \nvoid\n \nonStart\n()\n \n{\n\n  \nMParticle\n.\ngetInstance\n().\ncheckForDeepLink\n(\nnew\n \nDeepLinkListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonResult\n(\nDeepLinkResult\n \nresult\n)\n \n{\n\n      \ntry\n \n{\n\n        \nJSONObject\n \nreferringParams\n \n=\n \nresult\n.\ngetParameters\n();\n\n\n        \n// Option 1: Log data\n\n        \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nreferringParams\n.\ntoString\n());\n\n\n        \n// Option 2: Save data to be used later\n\n        \nSharedPreferences\n \npreferences\n \n=\n \n.\ngetSharedPreferences\n(\nMyPreferences\n,\n \nContext\n.\nMODE_PRIVATE\n);\n\n        \nSharedPreferences\n.\nEditor\n \neditor\n \n=\n \npreferences\n.\nedit\n();\n\n        \neditor\n.\nputString\n(\nbranchData\n,\n \nreferringParams\n.\ntoString\n(\n2\n));\n\n        \neditor\n.\ncommit\n();\n\n\n        \n// Option 3: Navigate to page\n\n        \nIntent\n \nintent\n \n=\n \nnew\n \nIntent\n(\nMainActivity\n.\nthis\n,\n \nOtherActivity\n.\nclass\n);\n\n        \nintent\n.\nputExtra\n(\nbranchData\n,\n \nreferringParams\n.\ntoString\n(\n2\n));\n\n        \nstartActivity\n(\nintent\n);\n\n\n        \n// Option 4: Display data\n\n        \nToast\n.\nmakeText\n(\nthis\n,\n \nreferringParams\n.\ntoString\n(\n2\n),\n \nToast\n.\nLENGTH_LONG\n).\nshow\n();\n\n      \n}\n \ncatch\n \n(\nJSONException\n \ne\n)\n \n{\n\n      \n}\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonError\n(\nDeepLinkError\n \nerror\n)\n \n{\n\n      \n// If an error occurred, it will be surfaced via a DeepLinkError.\n\n      \nLog\n.\nd\n(\nBRANCH SDK\n,\n \nerror\n.\ntoString\n());\n\n    \n}\n\n  \n});\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nList content on \nGoogle Search\n with \nApp Indexing\n\n\n\n\n\n\nEnable App Indexing on the \nBranch Dashboard\n\n\n\n\n\n\nValidate with the \nApp indexing validator\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nNeeds \nbuild.gradle\n library\n\n\ncompile\n \ncom\n.\ngoogle\n.\nandroid\n.\ngms\n:\nplay\n-\nservices\n-\nappindexing\n:\n9.\n+\n\n\n\n\n\n\n\n\n\nCall method on Branch Universal Object\n\n\nbuo\n.\nlistOnGoogleSearch\n(\nthis\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nTrack content properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\nbuo\n.\nuserCompletedAction\n(\nBranchEvent\n.\nVIEW\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n// Your user ID should not exceed 127 characters.\n\n\n// The IdentityType CustomerId will automatically propagate to Branch.\n\n\nMParticle\n.\ngetInstance\n().\nsetUserIdentity\n(\nMParticle\n.\nIdentityType\n.\nCustomerId\n,\n \nyour_user_id\n);\n\n\n\n\n\nMParticle\n.\ngetInstance\n().\nlogout\n();\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\n63\n character max for event name\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\n// Option 1:\n\n\nMParticle\n.\nlogEvent\n(\nyour_custom_event\n,\n \nMParticle\n.\nEventType\n.\nYourEventType\n);\n\n\n\n// Option 2: with metadata\n\n\nMap\nString\n,\n \nString\n \nmetaData\n \n=\n \nnew\n \nHashMap\n();\n\n\nmetaData\n.\nput\n(\nkey\n,\n \nvalue\n);\n\n\nMParticle\n.\nlogEvent\n(\nyour_custom_event\n,\n \nMParticle\n.\nEventType\n.\nYourEventType\n,\n \nmetaData\n);\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nRegisters a custom commerce event\n\n\n\n\n\n\nUses \nCommerce properties\n for \nCurrency\n \n\n\n\n\n\n\nUses \nCommerce properties\n for \nCategory\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nEnsure to add \nrevenue\n field to track purchase. All other fields are optional\n\n\n// Add details about each product associated with the purchase (optional)\n\n\nProduct\n \nproduct1\n \n=\n \nnew\n \nProduct\n();\n\n\nproduct1\n.\nsetSku\n(\nu123\n);\n\n\nproduct1\n.\nsetName\n(\ncactus\n);\n\n\nproduct1\n.\nsetPrice\n(\n45.00\n);\n\n\nproduct1\n.\nsetQuantity\n(\n2\n);\n\n\nproduct1\n.\nsetBrand\n(\nbrand1\n);\n\n\nproduct1\n.\nsetCategory\n(\nProductCategory\n.\nELECTRONICS\n);\n\n\nproduct1\n.\nsetVariant\n(\nvariant1\n);\n\n\n\nProduct\n \nproduct2\n \n=\n \nnew\n \nProduct\n();\n\n\nproduct2\n.\nsetSku\n(\nu456\n);\n\n\nproduct2\n.\nsetName\n(\ngrass\n);\n\n\nproduct2\n.\nsetPrice\n(\n9.00\n);\n\n\nproduct2\n.\nsetQuantity\n(\n1\n);\n\n\nproduct2\n.\nsetBrand\n(\nbrand2\n);\n\n\nproduct2\n.\nsetCategory\n(\nProductCategory\n.\nCAMERA_AND_OPTICS\n);\n\n\nproduct2\n.\nsetVariant\n(\nvariant2\n);\n\n\n\n\n// Create a list of products associated with the particular purchase (optional)\n\n\nList\nProduct\n \nproductList\n \n=\n \nnew\n \nArrayList\nProduct\n();\n\n\nproductList\n.\nadd\n(\nproduct1\n);\n\n\nproductList\n.\nadd\n(\nproduct2\n);\n\n\n\n// Create the commerce event (only revenue is required)\n\n\nCommerceEvent\n \ncommerceEvent\n \n=\n \nnew\n \nCommerceEvent\n();\n\n\ncommerceEvent\n.\nsetRevenue\n(\n50.29\n);\n\n\ncommerceEvent\n.\nsetCurrencyType\n(\nCurrencyType\n.\nUSD\n);\n\n\ncommerceEvent\n.\nsetTransactionID\n(\nTRANS-1111\n);\n\n\ncommerceEvent\n.\nsetShipping\n(\n4.50\n);\n\n\ncommerceEvent\n.\nsetTax\n(\n110.90\n);\n\n\ncommerceEvent\n.\nsetAffiliation\n(\nAFF-ID-101\n);\n\n\ncommerceEvent\n.\nsetProducts\n(\nproductList\n);\n\n\n\n\n// Add metadata (optional)\n\n\nJSONObject\n \nmetadata\n \n=\n \nnew\n \nJSONObject\n();\n\n\n\ntry\n \n{\n\n    \nmetadata\n.\nput\n(\ncustom_dictionary\n,\n \n123\n);\n\n    \nmetadata\n.\nput\n(\ntestVar\n,\n \nabc\n);\n\n\n}\n \ncatch\n \n(\nException\n \ne\n)\n \n{\n\n    \ne\n.\nprintStackTrace\n();\n\n\n}\n\n\n\n\n// Fire the commerce event by calling Branch directly.\n\n\nBranch\n.\ngetInstance\n().\nsendCommerceEvent\n(\ncommerceEvent\n,\n \nmetadata\n,\n \nnull\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral points are obtained from referral rules on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits\n\n\n\n\nReferral guide\n\n\n\n\n\n\n\n\nRedeem credits\n\n\nBranch\n.\ngetInstance\n().\nredeemRewards\n(\n5\n);\n\n\n\n\n\n\n\n\n\nLoad credits\n\n\nBranch\n.\ngetInstance\n().\nloadRewards\n(\nnew\n \nBranchReferralStateChangedListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonStateChanged\n(\nboolean\n \nchanged\n,\n \nBranch\n.\nBranchError\n \nerror\n)\n \n{\n\n        \nint\n \ncredits\n \n=\n \nbranch\n.\ngetCredits\n();\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nLoad history\n\n\nBranch\n.\ngetInstance\n().\ngetCreditHistory\n(\nnew\n \nBranchListResponseListener\n()\n \n{\n\n    \npublic\n \nvoid\n \nonReceivingResponse\n(\nJSONArray\n \nlist\n,\n \nBranch\n.\nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nBranch load rewards failed. Caused by -\n \n+\n \nerror\n.\nmessage\n)\n\n        \n}\n \nelse\n \n{\n\n            \nLog\n.\ni\n(\nBRANCH SDK\n,\n \nlist\n);\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nSample testing apps\n\n\n\n\n\n\nBranchsters\n\n\n\n\n\n\nTestbed\n\n\n\n\n\n\n\n\n\n\nSimulate an install\n\n\n\n\n\n\nNeed to bypass the device's hardware_id\n\n\n\n\n\n\nSet \ntrue\n in your \nAndroidManifest.xml\n\n\nmeta-data\n \nandroid:name=\nio.branch.sdk.TestMode\n \nandroid:value=\ntrue\n \n/\n\n\n\n\n\n\n\n\n\nDo not use \nTestMode\n in production or in the Google Play Store\n\n\n\n\n\n\n\n\n\n\nUninstall your app from the device\n\n\n\n\n\n\nClick on any Branch deep link (will navigate to the fallback URL since the app is not installed)\n\n\n\n\n\n\nReinstall your app\n\n\n\n\n\n\nRead deep link data from \nMParticle.getInstance().checkForDeepLink()\n for \n+is_first_session=true\n\n\n\n\n\n\n\n\n\n\nTrack content properties\n\n\n\n\n\n\nUsed for \nTrack content\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nBNCRegisterViewEvent\n\n\nUser viewed the object\n\n\n\n\n\n\nBNCAddToWishlistEvent\n\n\nUser added the object to their wishlist\n\n\n\n\n\n\nBNCAddToCartEvent\n\n\nUser added object to cart\n\n\n\n\n\n\nBNCPurchaseInitiatedEvent\n\n\nUser started to check out\n\n\n\n\n\n\nBNCPurchasedEvent\n\n\nUser purchased the item\n\n\n\n\n\n\nBNCShareInitiatedEvent\n\n\nUser started to share the object\n\n\n\n\n\n\nBNCShareCompletedEvent\n\n\nUser completed a share\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing bnc.lt or a custom link domain\n\n\n\n\n\n\nbnc.lt link domain\n\n\nactivity\n \nandroid:name=\ncom.yourapp.your_activity\n\n    \n!-- App Link your activity to Branch links--\n\n    \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n        \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nbnc.lt\n \nandroid:pathPrefix=\n/LVeu\n \n/\n\n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nbnc.lt\n \nandroid:pathPrefix=\n/eVeu\n \n/\n\n    \n/intent-filter\n\n\n/activity\n\n\n\n\n\n\n\n\n\ncustom link domain\n\n\nactivity\n \nandroid:name=\ncom.yourapp.your_activity\n\n    \n!-- App Link your activity to Branch links--\n\n    \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n        \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n        \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nyour.app.com\n \nandroid:pathPrefix=\n/LVeu\n \n/\n\n         \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nyour.app.com\n \nandroid:pathPrefix=\n/eVeu\n \n/\n\n    \n/intent-filter\n\n\n/activity\n\n\n\n\n\n\n\n\n\nChange the following values to match your \nBranch Dashboard\n\n\n\n\n/LVeu\n (live)\n\n\n/eVeu\n (test)\n\n\nyour.app.com\n\n\n\n\n\n\n\n\n\n\n\n\nGenerate signing certificate\n\n\n\n\n\n\nUsed for Android \nApp Link\n deep linking\n\n\n\n\n\n\nNavigate to your keystore file\n\n\n\n\n\n\nRun \nkeytool -list -v -keystore my-release-key.keystore\n\n\n\n\n\n\nWill generate a value like \nAA:C9:D9:A5:E9:76:3E:51:1B:FB:35:00:06:9B:56:AC:FB:A6:28:CE:F3:D6:65:38:18:E3:9C:63:94:FB:D2:C1\n\n\n\n\n\n\nCopy this value to your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\nEnable multidexing\n\n\n\n\n\n\nAdding additional dependencies may overrun the dex limit and lead to \nNoClassDefFoundError\n or \nClassNotFoundException\n\n\n\n\n\n\nAdd to your \nbuild.gradle\n\n\ndefaultConfig\n \n{\n\n    \nmultiDexEnabled\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\n\nAdd to your \nApplication class\n and make sure it extends \nMultiDexApplication\n\n\n\n\n\n\nJava\n\n\n@Override\n\n\nprotected\n \nvoid\n \nattachBaseContext\n(\nContext\n \nbase\n)\n \n{\n\n    \nsuper\n.\nattachBaseContext\n(\nbase\n);\n\n    \nMultiDex\n.\ninstall\n(\nthis\n);\n\n\n}\n\n\n\n\n\n\n\n\n\nKotlin\n\n\noverride\n \nfun\n \nattachBaseContext\n(\nbase\n:\n \nContext\n?)\n \n{\n\n    \nsuper\n.\nattachBaseContext\n(\nbase\n)\n\n    \nMultiDex\n.\ninstall\n(\nthis\n)\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nInvalidClassException, ClassLoadingError or VerificationError\n\n\n\n\nOften caused by a \nProguard\n bug. Try the latest Proguard version or disable Proguard optimization by setting \n-dontoptimize\n\n\n\n\n\n\n\n\nProguard warning or errors with AppIndexing module\n\n\n\n\nThe Branch SDK has an optional dependency on Firebase app indexing classes to provide new Firebase content listing\n    features. This may cause a proguard warning depending on your proguard settings. Please add the following to your\n    proguard file to solve this issue \n-dontwarn com.google.firebase.appindexing.**\n.\n\n\n\n\n\n\n\n\nUnable to open this link error\n\n\n\n\nHappens whenever URI Scheme redirection fails.\n\n\nMake sure you do not have \n$deeplink_path\n or you have a \n$deeplink_path\n which your \nAndroidManifest.xml\n can accept", 
            "title": "mParticle Android"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#integrate-branch", 
            "text": "This documentation explains how to send  mParticle events to your Branch dashboard . If you'd like to send Branch installs to your mParticle dashboard, please review the  Branch/mParticle Data Integration .", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#install-branch", 
            "text": "Import the Branch SDK to your  build.gradle  apply   plugin :   com . android . application  android   { \n     compileSdkVersion   25 \n     buildToolsVersion   25.0.2 \n     defaultConfig   { \n         applicationId   com.eneff.branchandroid \n         minSdkVersion   15 \n         targetSdkVersion   25 \n         versionCode   1 \n         versionName   1.0 \n         testInstrumentationRunner   android.support.test.runner.AndroidJUnitRunner \n     } \n     buildTypes   { \n         release   { \n             minifyEnabled   false \n             proguardFiles   getDefaultProguardFile ( proguard - android . txt ),   proguard - rules . pro \n         } \n     }  }  dependencies   { \n     compile   fileTree ( dir :   libs ,   include :   [ *. jar ]) \n     androidTestCompile ( com . android . support . test . espresso : espresso - core : 2.2.2 ,   { \n         exclude   group :   com . android . support ,   module :   support - annotations \n     }) \n     compile   com . android . support : appcompat - v7 : 25.2.0 \n     compile   com . android . support : design : 25.2.0 \n\n     compile   com . mparticle : android - core : 4. +       compile   com . mparticle : android - branch - kit : 4 +  }", 
            "title": "Install Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#enable-branch-on-mparticle", 
            "text": "Retrieve your Branch Key on the  App Settings  page of the Branch dashboard.  From your  mParticle dashboard  navigate to the Services page. (The paper airplane icon on the left side)  Scroll down to the Branch tile, or enter Branch in the search bar.  Click on the Branch tile and then select \"Activate a Platform\".  Click on the Android icon, then toggle the status ON.  Enter your Branch key in the marked field and click \"Save\".", 
            "title": "Enable Branch on mParticle"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#configure-app", 
            "text": "Add Branch to your  AndroidManifest.xml  ?xml version= 1.0  encoding= utf-8 ?  manifest   xmlns:android= http://schemas.android.com/apk/res/android \n     package= com.eneff.branchandroid \n\n     uses-permission   android:name= android.permission.INTERNET   / \n\n     application \n         android:allowBackup= true           android:name= com.eneff.branchandroid.CustomApplicationClass           android:icon= @mipmap/ic_launcher \n         android:label= @string/app_name \n         android:supportsRtl= true \n         android:theme= @style/AppTheme \n\n         activity \n             android:name= .MainActivity               android:launchMode= singleTask               android:label= @string/app_name \n             android:theme= @style/AppTheme.NoActionBar \n\n             intent-filter \n                 action   android:name= android.intent.action.MAIN   / \n                 category   android:name= android.intent.category.LAUNCHER   / \n             /intent-filter               !-- Branch URI Scheme --               intent-filter                   data   android:scheme= branchandroid   /                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /               /intent-filter                !-- Branch App Links (optional) --               intent-filter   android:autoVerify= true                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /                   data   android:scheme= https   android:host= uobg.app.link   /               /intent-filter           /activity \n\n     /application  /manifest     Replace the following with values from your  Branch Dashboard   branchandroid  uobg.app.link", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#handle-incoming-links", 
            "text": "Open the  Activity  for which you registered the  Intent Filter  in the previous section, and hook into the  onStart  lifecycle method by adding this override:  @Override  public   void   onStart ()   {     MParticle . getInstance (). checkForDeepLink ( new   DeepLinkListener ()   {       @Override       public   void   onResult ( DeepLinkResult   result )   {         // Check for the existence of a given key in the link data and route accordingly.         try   {           if   (( result . getParameters (). has ( my_custom_key ))     ( result . getParameters (). get ( my_custom_key ). equals ( custom value )))   {             // Send user to intended path           }         }   catch   ( JSONException   e )   {         }       }        @Override       public   void   onError ( DeepLinkError   error )   {         // If an error occurred, it will be surfaced via a DeepLinkError.         Log . d ( my log tag ,   error . toString ());       }     });  }", 
            "title": "Handle Incoming Links"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#initialize-branch", 
            "text": "As with any kit, mParticle will automatically handle initializing Branch sessions. At this point you should start seeing your Branch session data - including installs, re-opens, and any custom events - in your Branch dashboard.", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#test-deep-link", 
            "text": "Create a deep link from the  Branch Dashboard    Delete your app from the device    Compile your app to your device    Paste deep link in  Google Hangouts    Click on the deep link to open your app", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#create-content-reference", 
            "text": "BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n     // The identifier is what Branch will use to de-dupe the content across many different Universal Objects \n    . setCanonicalIdentifier ( item/12345 ) \n\n    // The canonical URL for SEO purposes (optional) \n    . setCanonicalUrl ( https://branch.io/deepviews ) \n\n    // This is where you define the open graph structure and how the object will appear on Facebook or in a deepview \n    . setTitle ( My Content Title ) \n    . setContentDescription ( My Content Description ) \n    . setContentImageUrl ( https://example.com/mycontent-12345.png ) \n\n    // You use this to specify whether this content can be discovered publicly - default is public \n    . setContentIndexingMode ( BranchUniversalObject . CONTENT_INDEX_MODE . PUBLIC ) \n\n     // Here is where you can add custom keys/values to the deep link data \n    . setContentMetadata ( new   ContentMetadata (). addCustomMetadata ( property1 ,   blue ) \n         . addCustomMetadata ( property2 ,   red ));", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#create-deep-link", 
            "text": "LinkProperties   linkProperties   =   new   LinkProperties () \n    . setChannel ( facebook ) \n    . setFeature ( sharing ) \n    . addControlParameter ( $desktop_url ,   http://example.com/home ) \n    . addControlParameter ( $ios_url ,   http://example.com/ios );  branchUniversalObject . generateShortUrl ( this ,   linkProperties ,   new       BranchLinkCreateListener ()   { \n     @Override \n     public   void   onLinkCreate ( String   url ,   BranchError   error )   { \n        if   ( error   ==   null )   { \n            Log . i ( MyApp ,   got my Branch link to share:    +   url ); \n        } \n     }  });", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#share-deep-link", 
            "text": "ShareSheetStyle   shareSheetStyle   =   new   ShareSheetStyle ( MainActivity . this ,   Check this out! ,   This stuff is awesome:  ) \n     . setCopyUrlStyle ( getResources (). getDrawable ( android . R . drawable . ic_menu_send ),   Copy ,   Added to clipboard ) \n     . setMoreOptionStyle ( getResources (). getDrawable ( android . R . drawable . ic_menu_search ),   Show more ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . FACEBOOK ) \n     . addPreferredSharingOption ( SharingHelper . SHARE_WITH . EMAIL ) \n     . setAsFullWidthStyle ( true ) \n     . setSharingTitle ( Share With );  branchUniversalObject . showShareSheet ( this , \n                                       linkProperties , \n                                       shareSheetStyle , \n                                        new   Branch . BranchLinkShareListener ()   { \n     @Override \n     public   void   onShareLinkDialogLaunched ()   { \n     } \n     @Override \n     public   void   onShareLinkDialogDismissed ()   { \n     } \n     @Override \n     public   void   onLinkShareResponse ( String   sharedLink ,   String   sharedChannel ,   BranchError   error )   { \n     } \n     @Override \n     public   void   onChannelSelected ( String   channelName )   { \n     }  });", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Returns  deep link properties  @Override  public   void   onStart ()   { \n   MParticle . getInstance (). checkForDeepLink ( new   DeepLinkListener ()   { \n     @Override \n     public   void   onResult ( DeepLinkResult   result )   { \n       try   { \n         Log . d ( BRANCH SDK ,   result . getParameters . toString ()); \n       }   catch   ( JSONException   e )   { \n       } \n     } \n\n     @Override \n     public   void   onError ( DeepLinkError   error )   { \n       // If an error occurred, it will be surfaced via a DeepLinkError. \n       Log . d ( BRANCH SDK ,   error . toString ()); \n     } \n   });  }", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#navigate-to-content", 
            "text": "Do stuff with the Branch deep link data.  @Override  public   void   onStart ()   { \n   MParticle . getInstance (). checkForDeepLink ( new   DeepLinkListener ()   { \n     @Override \n     public   void   onResult ( DeepLinkResult   result )   { \n       try   { \n         JSONObject   referringParams   =   result . getParameters (); \n\n         // Option 1: Log data \n         Log . i ( BRANCH SDK ,   referringParams . toString ()); \n\n         // Option 2: Save data to be used later \n         SharedPreferences   preferences   =   . getSharedPreferences ( MyPreferences ,   Context . MODE_PRIVATE ); \n         SharedPreferences . Editor   editor   =   preferences . edit (); \n         editor . putString ( branchData ,   referringParams . toString ( 2 )); \n         editor . commit (); \n\n         // Option 3: Navigate to page \n         Intent   intent   =   new   Intent ( MainActivity . this ,   OtherActivity . class ); \n         intent . putExtra ( branchData ,   referringParams . toString ( 2 )); \n         startActivity ( intent ); \n\n         // Option 4: Display data \n         Toast . makeText ( this ,   referringParams . toString ( 2 ),   Toast . LENGTH_LONG ). show (); \n       }   catch   ( JSONException   e )   { \n       } \n     } \n\n     @Override \n     public   void   onError ( DeepLinkError   error )   { \n       // If an error occurred, it will be surfaced via a DeepLinkError. \n       Log . d ( BRANCH SDK ,   error . toString ()); \n     } \n   });  }", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#display-content", 
            "text": "List content on  Google Search  with  App Indexing    Enable App Indexing on the  Branch Dashboard    Validate with the  App indexing validator    Needs a  Branch Universal Object    Needs  build.gradle  library  compile   com . google . android . gms : play - services - appindexing : 9. +     Call method on Branch Universal Object  buo . listOnGoogleSearch ( this );", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Branch Universal Object    Uses  Track content properties    Validate with the  Branch Dashboard  buo . userCompletedAction ( BranchEvent . VIEW );", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#track-users", 
            "text": "// Your user ID should not exceed 127 characters.  // The IdentityType CustomerId will automatically propagate to Branch.  MParticle . getInstance (). setUserIdentity ( MParticle . IdentityType . CustomerId ,   your_user_id );   MParticle . getInstance (). logout ();", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    63  character max for event name    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard    // Option 1:  MParticle . logEvent ( your_custom_event ,   MParticle . EventType . YourEventType );  // Option 2: with metadata  Map String ,   String   metaData   =   new   HashMap ();  metaData . put ( key ,   value );  MParticle . logEvent ( your_custom_event ,   MParticle . EventType . YourEventType ,   metaData );", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#track-commerce", 
            "text": "Registers a custom commerce event    Uses  Commerce properties  for  Currency      Uses  Commerce properties  for  Category    Validate with the  Branch Dashboard    Ensure to add  revenue  field to track purchase. All other fields are optional  // Add details about each product associated with the purchase (optional)  Product   product1   =   new   Product ();  product1 . setSku ( u123 );  product1 . setName ( cactus );  product1 . setPrice ( 45.00 );  product1 . setQuantity ( 2 );  product1 . setBrand ( brand1 );  product1 . setCategory ( ProductCategory . ELECTRONICS );  product1 . setVariant ( variant1 );  Product   product2   =   new   Product ();  product2 . setSku ( u456 );  product2 . setName ( grass );  product2 . setPrice ( 9.00 );  product2 . setQuantity ( 1 );  product2 . setBrand ( brand2 );  product2 . setCategory ( ProductCategory . CAMERA_AND_OPTICS );  product2 . setVariant ( variant2 );  // Create a list of products associated with the particular purchase (optional)  List Product   productList   =   new   ArrayList Product ();  productList . add ( product1 );  productList . add ( product2 );  // Create the commerce event (only revenue is required)  CommerceEvent   commerceEvent   =   new   CommerceEvent ();  commerceEvent . setRevenue ( 50.29 );  commerceEvent . setCurrencyType ( CurrencyType . USD );  commerceEvent . setTransactionID ( TRANS-1111 );  commerceEvent . setShipping ( 4.50 );  commerceEvent . setTax ( 110.90 );  commerceEvent . setAffiliation ( AFF-ID-101 );  commerceEvent . setProducts ( productList );  // Add metadata (optional)  JSONObject   metadata   =   new   JSONObject ();  try   { \n     metadata . put ( custom_dictionary ,   123 ); \n     metadata . put ( testVar ,   abc );  }   catch   ( Exception   e )   { \n     e . printStackTrace ();  }  // Fire the commerce event by calling Branch directly.  Branch . getInstance (). sendCommerceEvent ( commerceEvent ,   metadata ,   null );", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#handle-referrals", 
            "text": "Referral points are obtained from referral rules on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits   Referral guide     Redeem credits  Branch . getInstance (). redeemRewards ( 5 );     Load credits  Branch . getInstance (). loadRewards ( new   BranchReferralStateChangedListener ()   { \n     @Override \n     public   void   onStateChanged ( boolean   changed ,   Branch . BranchError   error )   { \n         int   credits   =   branch . getCredits (); \n     }  });     Load history  Branch . getInstance (). getCreditHistory ( new   BranchListResponseListener ()   { \n     public   void   onReceivingResponse ( JSONArray   list ,   Branch . BranchError   error )   { \n         if   ( error   !=   null )   { \n             Log . i ( BRANCH SDK ,   Branch load rewards failed. Caused by -   +   error . message ) \n         }   else   { \n             Log . i ( BRANCH SDK ,   list ); \n         } \n     }  });", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#sample-testing-apps", 
            "text": "Branchsters    Testbed", 
            "title": "Sample testing apps"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#simulate-an-install", 
            "text": "Need to bypass the device's hardware_id    Set  true  in your  AndroidManifest.xml  meta-data   android:name= io.branch.sdk.TestMode   android:value= true   /     Do not use  TestMode  in production or in the Google Play Store      Uninstall your app from the device    Click on any Branch deep link (will navigate to the fallback URL since the app is not installed)    Reinstall your app    Read deep link data from  MParticle.getInstance().checkForDeepLink()  for  +is_first_session=true", 
            "title": "Simulate an install"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#track-content-properties", 
            "text": "Used for  Track content     Key  Value      BNCRegisterViewEvent  User viewed the object    BNCAddToWishlistEvent  User added the object to their wishlist    BNCAddToCartEvent  User added object to cart    BNCPurchaseInitiatedEvent  User started to check out    BNCPurchasedEvent  User purchased the item    BNCShareInitiatedEvent  User started to share the object    BNCShareCompletedEvent  User completed a share", 
            "title": "Track content properties"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#using-bnclt-or-a-custom-link-domain", 
            "text": "bnc.lt link domain  activity   android:name= com.yourapp.your_activity \n     !-- App Link your activity to Branch links-- \n     intent-filter   android:autoVerify= true \n         action   android:name= android.intent.action.VIEW   / \n         category   android:name= android.intent.category.DEFAULT   / \n         category   android:name= android.intent.category.BROWSABLE   / \n          data   android:scheme= https   android:host= bnc.lt   android:pathPrefix= /LVeu   / \n          data   android:scheme= https   android:host= bnc.lt   android:pathPrefix= /eVeu   / \n     /intent-filter  /activity     custom link domain  activity   android:name= com.yourapp.your_activity \n     !-- App Link your activity to Branch links-- \n     intent-filter   android:autoVerify= true \n         action   android:name= android.intent.action.VIEW   / \n         category   android:name= android.intent.category.DEFAULT   / \n         category   android:name= android.intent.category.BROWSABLE   / \n          data   android:scheme= https   android:host= your.app.com   android:pathPrefix= /LVeu   / \n          data   android:scheme= https   android:host= your.app.com   android:pathPrefix= /eVeu   / \n     /intent-filter  /activity     Change the following values to match your  Branch Dashboard   /LVeu  (live)  /eVeu  (test)  your.app.com", 
            "title": "Using bnc.lt or a custom link domain"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#generate-signing-certificate", 
            "text": "Used for Android  App Link  deep linking    Navigate to your keystore file    Run  keytool -list -v -keystore my-release-key.keystore    Will generate a value like  AA:C9:D9:A5:E9:76:3E:51:1B:FB:35:00:06:9B:56:AC:FB:A6:28:CE:F3:D6:65:38:18:E3:9C:63:94:FB:D2:C1    Copy this value to your  Branch Dashboard", 
            "title": "Generate signing certificate"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#enable-multidexing", 
            "text": "Adding additional dependencies may overrun the dex limit and lead to  NoClassDefFoundError  or  ClassNotFoundException    Add to your  build.gradle  defaultConfig   { \n     multiDexEnabled   true  }     Add to your  Application class  and make sure it extends  MultiDexApplication    Java  @Override  protected   void   attachBaseContext ( Context   base )   { \n     super . attachBaseContext ( base ); \n     MultiDex . install ( this );  }     Kotlin  override   fun   attachBaseContext ( base :   Context ?)   { \n     super . attachBaseContext ( base ) \n     MultiDex . install ( this )  }", 
            "title": "Enable multidexing"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#invalidclassexception-classloadingerror-or-verificationerror", 
            "text": "Often caused by a  Proguard  bug. Try the latest Proguard version or disable Proguard optimization by setting  -dontoptimize", 
            "title": "InvalidClassException, ClassLoadingError or VerificationError"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#proguard-warning-or-errors-with-appindexing-module", 
            "text": "The Branch SDK has an optional dependency on Firebase app indexing classes to provide new Firebase content listing\n    features. This may cause a proguard warning depending on your proguard settings. Please add the following to your\n    proguard file to solve this issue  -dontwarn com.google.firebase.appindexing.** .", 
            "title": "Proguard warning or errors with AppIndexing module"
        }, 
        {
            "location": "/pages/apps/mparticle-android/#unable-to-open-this-link-error", 
            "text": "Happens whenever URI Scheme redirection fails.  Make sure you do not have  $deeplink_path  or you have a  $deeplink_path  which your  AndroidManifest.xml  can accept", 
            "title": "Unable to open this link error"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/", 
            "text": "Integrate Branch\n\n\nThis documentation explains how to send \nmParticle events to your Branch dashboard\n. If you'd like to send Branch installs to your mParticle dashboard, please review the \nBranch/mParticle Data Integration\n. \n\n\n\n\nInconsistent Universal links behavior on iOS 11.2\n\n\nAfter updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set \nforced uri redirect mode\n on your Branch links to open the app with URI schemes. View details of the issue on the \nApple Bug report\n.\n\n\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure bundle identifier\n\n\n\n\n\n\nMake sure Bundle Id matches your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure associated domains\n\n\n\n\nAdd your link domains from your \nBranch Dashboard\n\n\n-alternate\n is needed for Universal Linking with the \nWeb SDK\n inside your Website\n\n\ntest-\n is needed if you need use a \ntest key\n\n\n\n\nIf you use a \ncustom link domain\n, you will need to include your old link domain, your \n-alternate\n link domain, and your new link domain\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure entitlements\n\n\n\n\n\n\nConfirm entitlements are within target\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure info.pList\n\n\n\n\n\n\nAdd \nBranch Dashboard\n values\n\n\n\n\nAdd \nbranch_app_domain\n with your live key domain\n\n\nAdd \nbranch_key\n with your current Branch key\n\n\nAdd your URI scheme as \nURL Types\n -\n \nItem 0\n -\n \nURL Schemes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfirm app prefix\n\n\n\n\n\n\nFrom your \nApple Developer Account\n\n\n\n\n\n\n\n\n\n\n\n\nInstall Branch Kit\n\n\n\n\n\n\nOption 1: \nCocoaPods\n\n\nplatform :ios, \n8.0\n\n\ntarget \nAPP_NAME\n \ndo\n\n  \n# if swift\n\n  use_frameworks!\n\n\n  pod \nmParticle-BranchMetrics\n\n\nend\n\n\n\n\n\n\n\n\nOption 2: \nCarthage\n\n\ngithub \nmparticle-integrations/mparticle-apple-integration-branchmetrics\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnable Branch on mParticle\n\n\n\n\nRetrieve your Branch Key on the \nLink Settings\n page of the Branch dashboard.\n\n\nFrom your \nmParticle dashboard\n navigate to the Services page. (The paper airplane icon on the left side)\n\n\nScroll down to the Branch tile, or enter Branch in the search bar.\n\n\nClick on the Branch tile and then select \"Activate a Platform\".\n\n\nClick on the Apple icon, then toggle the status ON.\n\n\nEnter your Branch key in the marked field and click \"Save\".\n\n\n\n\n\n\n\n\nHandle Incoming Links\n\n\n\n\n\n\nSwift 3\n\n\nimport\n \nUIKit\n\n\n\n@UIApplicationMain\n\n\nclass\n \nAppDelegate\n:\n \nUIResponder\n,\n \nUIApplicationDelegate\n \n{\n\n\n\nvar\n \nwindow\n:\n \nUIWindow\n?\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidFinishLaunchingWithOptions\n \nlaunchOptions\n:\n \n[\nUIApplicationLaunchOptionsKey\n:\n \nAny\n]?)\n \n-\n \nBool\n \n{\n\n\n  \n// This observer must be added before initializing the mParticle session.\n\n  \n// Failure to do so will cause some deep links to be missed.\n\n\n  \nNotificationCenter\n.\ndefault\n.\naddObserver\n(\nself\n,\n \nselector\n:\n \n#selector\n(\nhandleKitDidBecomeActive\n(\n_\n:)),\n \nname\n:\n \nNotification\n.\nName\n.\nmParticleKitDidBecomeActive\n,\n \nobject\n:\n \nnil\n)\n\n\n\n  \nreturn\n \ntrue\n\n\n}\n\n\n\nfunc\n \nhandleKitDidBecomeActive\n(\n_\n \nnotification\n:\n \nNotification\n)\n \n{\n\n\n    \nguard\n \nlet\n \nkitNumber\n \n=\n \nnotification\n.\nuserInfo\n?[\nmParticleKitInstanceKey\n]\n \nas\n?\n \nNSNumber\n \nelse\n \n{\n \nreturn\n \n}\n\n\n    \nguard\n \nlet\n \nkitInstance\n \n=\n \nMPKitInstance\n(\nrawValue\n:\n \nkitNumber\n.\nuintValue\n)\n \nelse\n \n{\n \nreturn\n \n}\n\n\n\n\n    \nswitch\n \nkitInstance\n \n{\n\n\n        \ncase\n \n.\nbranchMetrics\n:\n\n\n            \ncheckForDeeplink\n()\n\n\n        \ndefault\n:\n\n\n            \nbreak\n\n\n    \n}\n\n\n}\n\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ncontinue\n \nuserActivity\n:\n \nNSUserActivity\n,\n \nrestorationHandler\n:\n \n@\nescaping\n \n([\nAny\n]?)\n \n-\n \nVoid\n)\n \n-\n \nBool\n \n{\n\n\n    \ncheckForDeeplink\n()\n\n\n    \nreturn\n \ntrue\n\n\n}\n\n\n\nfunc\n \ncheckForDeeplink\n()\n \n{\n\n\n    \nMParticle\n.\nsharedInstance\n().\ncheckForDeferredDeepLink\n \n{\n \nlinkInfo\n,\n \nerror\n \nin\n\n\n        \n// A few typical scenarios where this block would be invoked:\n\n\n        \n//\n\n\n        \n// (1) Base case:\n\n\n        \n//     - User does not tap on a link, and then opens the app (either after a fresh install or not)\n\n\n        \n//     - This block will be invoked with Branch Metrics\n response indicating that this user did not tap on a link\n\n\n        \n//\n\n\n        \n// (2) Deferred deep link:\n\n\n        \n//     - User without the app installed taps on a link\n\n\n        \n//     - User is redirected from Branch Metrics to the App Store and installs the app\n\n\n        \n//     - User opens the app\n\n\n        \n//     - This block will be invoked with Branch Metrics\n response containing the details of the link\n\n\n        \n//\n\n\n        \n// (3) Deep link with app installed:\n\n\n        \n//     - User with the app already installed taps on a link\n\n\n        \n//     - Application opens via openUrl/continueUserActivity, mParticle forwards launch options etc to Branch\n\n\n        \n//     - This block will be invoked with Branch Metrics\n response containing the details of the link\n\n\n        \n//\n\n\n        \n// If the user navigates away from the app without killing it, this block could be invoked several times:\n\n\n        \n// once for the initial launch, and then again each time the user taps on a link to re-open the app.\n\n\n\n\n        \nguard\n \nlet\n \nlinkInfo\n \n=\n \nlinkInfo\n \nelse\n \n{\n \nreturn\n \n}\n\n\n\n\n        \nprint\n(\nparams:\n \n+\n \nlinkInfo\n)\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n#import \nAppDelegate.h\n\n\n#import \nBranch/Branch.h\n\n\n\n@interface\n \nAppDelegate\n \n()\n\n\n\n@end\n\n\n\n@implementation\n \nAppDelegate\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidFinishLaunchingWithOptions:\n(\nNSDictionary\n \n*\n)\nlaunchOptions\n \n{\n\n\n  \n// This observer must be added before initializing the mParticle session.\n\n  \n// Failure to do so will cause some deep links to be missed.\n\n\n  \nNSNotificationCenter\n \n*\nnotificationCenter\n \n=\n \n[\nNSNotificationCenter\n \ndefaultCenter\n];\n\n\n  \n[\nnotificationCenter\n \naddObserver\n:\nself\n\n\n                         \nselector\n:\n@selector\n(\nhandleKitDidBecomeActive\n:)\n\n\n                             \nname\n:\nmParticleKitDidBecomeActiveNotification\n\n\n                           \nobject\n:\nnil\n];\n\n\n\n  \nreturn\n \nYES\n;\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\nhandleKitDidBecomeActive:\n(\nNSNotification\n \n*\n)\nnotification\n \n{\n\n\n  \nNSDictionary\n \n*\nuserInfo\n \n=\n \n[\nnotification\n \nuserInfo\n];\n\n\n  \nNSNumber\n \n*\nkitNumber\n \n=\n \nuserInfo\n[\nmParticleKitInstanceKey\n];\n\n\n  \nMPKitInstance\n \nkitInstance\n \n=\n \n(\nMPKitInstance\n)[\nkitNumber\n \nintegerValue\n];\n\n\n\n\n  \nif\n \n(\nkitInstance\n \n==\n \nMPKitInstanceBranchMetrics\n)\n \n{\n\n\n    \n[\nself\n \ncheckForDeeplink\n];\n\n\n  \n}\n\n\n}\n\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ncontinueUserActivity:\n(\nNSUserActivity\n \n*\n)\nuserActivity\n \nrestorationHandler:\n(\nvoid\n \n(\n^\n)(\nNSArray\n \n*\n \n_Nullable\n))\nrestorationHandler\n \n{\n\n\n  \n[\nself\n \ncheckForDeeplink\n];\n\n\n  \nreturn\n \nYES\n;\n\n\n}\n\n\n\n-\n \n(\nvoid\n)\ncheckForDeeplink\n \n{\n\n\n  \nMParticle\n \n*\n \nmParticle\n \n=\n \n[\nMParticle\n \nsharedInstance\n];\n\n\n\n\n  \n[\nmParticle\n \ncheckForDeferredDeepLinkWithCompletionHandler\n:\n^\n(\nNSDictionary\nNSString\n \n*\n,\nNSString\n \n*\n \n*\n \n_Nullable\n \nparams\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n\n    \n//\n\n\n    \n// A few typical scenarios where this block would be invoked:\n\n\n    \n//\n\n\n    \n// (1) Base case:\n\n\n    \n//     - User does not tap on a link, and then opens the app (either after a fresh install or not)\n\n\n    \n//     - This block will be invoked with Branch Metrics\n response indicating that this user did not tap on a link\n\n\n    \n//\n\n\n    \n// (2) Deferred deep link:\n\n\n    \n//     - User without the app installed taps on a link\n\n\n    \n//     - User is redirected from Branch Metrics to the App Store and installs the app\n\n\n    \n//     - User opens the app\n\n\n    \n//     - This block will be invoked with Branch Metrics\n response containing the details of the link\n\n\n    \n//\n\n\n    \n// (3) Deep link with app installed:\n\n\n    \n//     - User with the app already installed taps on a link\n\n\n    \n//     - Application opens via openUrl/continueUserActivity, mParticle forwards launch options etc to Branch\n\n\n    \n//     - This block will be invoked with Branch Metrics\n response containing the details of the link\n\n\n    \n//\n\n\n    \n// If the user navigates away from the app without killing it, this block could be invoked several times:\n\n\n    \n// once for the initial launch, and then again each time the user taps on a link to re-open the app.\n\n\n\n\n    \nif\n \n(\nparams\n)\n \n{\n\n\n      \n//Insert custom logic to inspect the params and route the user/customize the experience.\n\n\n      \nNSLog\n(\n@\nparams: %@\n,\n \nparams\n.\ndescription\n);\n\n\n    \n}\n\n\n  \n}];\n\n\n}\n\n\n\n\n@end\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\nAs with any kit, mParticle will automatically handle initializing Branch sessions. At this point you should start seeing your Branch session data - including installs, re-opens, and any custom events - in your Branch dashboard.\n\n\n\n\n\n\nTest deep link\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\nDelete your app from the device\n\n\nCompile and test on a device\n\n\nPaste deep link in \nApple Notes\n\n\nLong press on the deep link (not 3D Touch)\n\n\nClick \nOpen in \"APP_NAME\"\n to open your app (\nexample\n)\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share\n\n\n\n\n\n\nUses \nUniversal Object properties\n\n\n\n\n\n\nSwift 3\n\n\n// only canonicalIdentifier is required\n\n\nlet\n \nbuo\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \ncontent/123\n)\n\n\nbuo\n.\ncanonicalUrl\n \n=\n \nhttps://example.com/content/123\n\n\nbuo\n.\ntitle\n \n=\n \nContent 123 Title\n\n\nbuo\n.\ncontentDescription\n \n=\n \nContent 123 Description \n\\(\nDate\n())\n\n\nbuo\n.\nimageUrl\n \n=\n \nhttp://lorempixel.com/400/400/\n\n\nbuo\n.\nprice\n \n=\n \n12.12\n\n\nbuo\n.\ncurrency\n \n=\n \nUSD\n\n\nbuo\n.\ncontentIndexMode\n \n=\n \n.\npublic\n\n\nbuo\n.\nautomaticallyListOnSpotlight\n \n=\n \ntrue\n\n\nbuo\n.\naddMetadataKey\n(\ncustom\n,\n \nvalue\n:\n \n123\n)\n\n\nbuo\n.\naddMetadataKey\n(\nanything\n,\n \nvalue\n:\n \neverything\n)\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// only canonical identifier is required\n\n\nBranchUniversalObject\n \n*\nbuo\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\ncontent/123\n];\n\n\nbuo\n.\ntitle\n \n=\n \n@\nContent 123 Title\n;\n\n\nbuo\n.\ncontentDescription\n \n=\n \n@\nContent 123 Description\n;\n\n\nbuo\n.\nimageUrl\n \n=\n \n@\nhttps://lorempixel.com/400/400\n;\n\n\nbuo\n.\nprice\n \n=\n \n12.12\n;\n\n\nbuo\n.\ncurrency\n \n=\n \n@\nUSD\n;\n\n\nbuo\n.\ncontentIndexMode\n \n=\n \nContentIndexModePublic\n;\n\n\nbuo\n.\nautomaticallyListOnSpotlight\n \n=\n \nYES\n;\n\n\n[\nbuo\n \naddMetadataKey\n:\n@\ncustom\n \nvalue\n:[[\nNSUUID\n \nUUID\n]\n \nUUIDString\n]];\n\n\n[\nbuo\n \naddMetadataKey\n:\n@\nanything\n \nvalue\n:\n@\neverything\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate link reference\n\n\n\n\n\n\nGenerates the analytical properties for the deep link\n\n\n\n\n\n\nUsed for \nCreate deep link\n and \nShare deep link\n\n\n\n\n\n\nUses \nConfigure link data\n and custom data\n\n\n\n\n\n\nSwift 3\n\n\nlet\n \nlp\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlp\n.\nchannel\n \n=\n \nfacebook\n\n\nlp\n.\nfeature\n \n=\n \nsharing\n\n\nlp\n.\ncampaign\n \n=\n \ncontent 123 launch\n\n\nlp\n.\nstage\n \n=\n \nnew user\n\n\nlp\n.\ntags\n \n=\n \n[\none\n,\n \ntwo\n,\n \nthree\n]\n\n\n\nlp\n.\naddControlParam\n(\n$desktop_url\n,\n \nwithValue\n:\n \nhttp://example.com/desktop\n)\n\n\nlp\n.\naddControlParam\n(\n$ios_url\n,\n \nwithValue\n:\n \nhttp://example.com/ios\n)\n\n\nlp\n.\naddControlParam\n(\n$ipad_url\n,\n \nwithValue\n:\n \nhttp://example.com/ios\n)\n\n\nlp\n.\naddControlParam\n(\n$android_url\n,\n \nwithValue\n:\n \nhttp://example.com/android\n)\n\n\nlp\n.\naddControlParam\n(\n$match_duration\n,\n \nwithValue\n:\n \n2000\n)\n\n\n\nlp\n.\naddControlParam\n(\ncustom_data\n,\n \nwithValue\n:\n \nyes\n)\n\n\nlp\n.\naddControlParam\n(\nlook_at\n,\n \nwithValue\n:\n \nthis\n)\n\n\nlp\n.\naddControlParam\n(\nnav_to\n,\n \nwithValue\n:\n \nover here\n)\n\n\nlp\n.\naddControlParam\n(\nrandom\n,\n \nwithValue\n:\n \nUUID\n.\ninit\n().\nuuidString\n)\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\nBranchLinkProperties\n \n*\nlp\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlp\n.\nfeature\n \n=\n \n@\nfacebook\n;\n\n\nlp\n.\nchannel\n \n=\n \n@\nsharing\n;\n\n\nlp\n.\ncampaign\n \n=\n \n@\ncontent 123 launch\n;\n\n\nlp\n.\nstage\n \n=\n \n@\nnew user\n;\n\n\nlp\n.\ntags\n \n=\n \n@[\n@\none\n,\n \n@\ntwo\n,\n \n@\nthree\n]\n;\n\n\n\n[\nlp\n \naddControlParam\n:\n@\n$desktop_url\n \nwithValue\n:\n \n@\nhttp://example.com/desktop\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$ios_url\n \nwithValue\n:\n \n@\nhttp://example.com/ios\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$ipad_url\n \nwithValue\n:\n \n@\nhttp://example.com/ios\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$android_url\n \nwithValue\n:\n \n@\nhttp://example.com/android\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$match_duration\n \nwithValue\n:\n \n@\n2000\n];\n\n\n\n[\nlp\n \naddControlParam\n:\n@\ncustom_data\n \nwithValue\n:\n \n@\nyes\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\nlook_at\n \nwithValue\n:\n \n@\nthis\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\nnav_to\n \nwithValue\n:\n \n@\nover here\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\nrandom\n \nwithValue\n:\n \n[[\nNSUUID\n \nUUID\n]\n \nUUIDString\n]];\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nGenerates a deep link within your app\n\n\n\n\n\n\nNeeds a \nCreate content reference\n\n\n\n\n\n\nNeeds a \nCreate link reference\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\nbuo\n.\ngetShortUrl\n(\nwith\n:\n \nlp\n)\n \n{\n \n(\nurl\n,\n \nerror\n)\n \nin\n\n  \nprint\n(\nurl\n \n??\n \n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n[\nbuo\n \ngetShortUrlWithLinkProperties\n:\nlp\n \nandCallback\n:\n^\n(\nNSString\n*\n \nurl\n,\n \nNSError\n*\n \nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nNSLog\n(\n@\n@\n,\n \nurl\n);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nNeeds a \nCreate content reference\n\n\n\n\n\n\nNeeds a \nCreate link reference\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nSwift 3\n\n\nlet\n \nmessage\n \n=\n \nCheck out this link\n\n\nbuo\n.\nshowShareSheet\n(\nwith\n:\n \nlp\n,\n \nandShareText\n:\n \nmessage\n,\n \nfrom\n:\n \nself\n)\n \n{\n \n(\nactivityType\n,\n \ncompleted\n)\n \nin\n\n  \nprint\n(\nactivityType\n \n??\n \n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[\nbuo\n \nshowShareSheetWithLinkProperties\n:\nlp\n \nandShareText\n:\n@\nSuper amazing thing I want to share!\n \nfromViewController\n:\nself\n \ncompletion\n:\n^\n(\nNSString\n*\n \nactivityType\n,\n \nBOOL\n \ncompleted\n)\n \n{\n\n    \nNSLog\n(\n@\nfinished presenting\n);\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nReturns \ndeep link properties\n\n\n\n\n\n\nSwift 3\n\n    \nfunc\n \ncheckForDeeplink\n()\n \n{\n\n    \nMParticle\n.\nsharedInstance\n().\ncheckForDeferredDeepLink\n \n{\n \nlinkInfo\n,\n \nerror\n \nin\n\n        \nguard\n \nlet\n \nlinkInfo\n \n=\n \nlinkInfo\n \nelse\n \n{\n \nreturn\n \n}\n\n        \nprint\n(\nlinkInfo\n \nas\n?\n \n[\nString\n:\n \nAnyObject\n]\n \n??\n \n{})\n\n    \n}\n\n\n}\n\n\n\n// Latest\n\n\nlet\n \nsessionParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetLatestReferringParams\n()\n\n\n\n// First\n\n\nlet\n \ninstallParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetFirstReferringParams\n()\n\n\n\n\n\n\n\n\nObjective C\n\n\n-\n \n(\nvoid\n)\ncheckForDeeplink\n \n{\n\n    \nMParticle\n \n*\n \nmParticle\n \n=\n \n[\nMParticle\n \nsharedInstance\n];\n\n\n    \n[\nmParticle\n \ncheckForDeferredDeepLinkWithCompletionHandler\n:\n^\n(\nNSDictionary\nNSString\n \n*\n,\nNSString\n \n*\n \n*\n \n_Nullable\n \nparams\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n        \nif\n \n(\nparams\n)\n \n{\n\n            \nNSLog\n(\n@\nReferring Link Params: %@\n,\n \nparams\n.\ndescription\n);\n\n        \n}\n\n    \n}];\n\n\n}\n\n\n\n// latest\n\n\nNSDictionary\n \n*\nsessionParams\n \n=\n \n[[\nBranch\n \ngetInstance\n]\n \ngetLatestReferringParams\n];\n\n\n\n// first\n\n\nNSDictionary\n \n*\ninstallParams\n \n=\n  \n[[\nBranch\n \ngetInstance\n]\n \ngetFirstReferringParams\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\n\n\n\n\nHandled within \ncheckForDeferredDeepLinkWithCompletionHandler\n\n\n\n\n\n\nSwift 3\n\n\nfunc\n \ncheckForDeeplink\n()\n \n{\n\n    \nMParticle\n.\nsharedInstance\n().\ncheckForDeferredDeepLink\n \n{\n \nlinkInfo\n,\n \nerror\n \nin\n\n        \n// Option 1: Read deep link data\n\n        \nguard\n \nlet\n \ndata\n \n=\n \nlinkInfo\n \nas\n?\n \n[\nString\n:\n \nAnyObject\n]\n \nelse\n \n{\n \nreturn\n \n}\n\n\n        \n// Option 2: Save deep link data to global model\n\n        \nSomeCustomClass\n.\nsharedInstance\n.\nbranchData\n \n=\n \ndata\n\n\n        \n// Option 3: Display data\n\n        \nlet\n \nalert\n \n=\n \nUIAlertController\n(\ntitle\n:\n \nDeep link data\n,\n \nmessage\n:\n \n\\(\ndata\n)\n,\n \npreferredStyle\n:\n \n.\nalert\n)\n\n        \nalert\n.\naddAction\n(\nUIAlertAction\n(\ntitle\n:\n \nOkay\n,\n \nstyle\n:\n \n.\ndefault\n,\n \nhandler\n:\n \nnil\n))\n\n        \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\nalert\n,\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n\n        \n// Option 4: Navigate to view controller\n\n        \nguard\n \nlet\n \noptions\n \n=\n \ndata\n[\nnav_to\n]\n \nas\n?\n \nString\n \nelse\n \n{\n \nreturn\n \n}\n\n        \nswitch\n \noptions\n \n{\n\n            \ncase\n \nlanding_page\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n            \ncase\n \ntutorial\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n            \ncase\n \ncontent\n:\n \nself\n.\nwindow\n?.\nrootViewController\n?.\npresent\n(\n \nSecondViewController\n(),\n \nanimated\n:\n \ntrue\n,\n \ncompletion\n:\n \nnil\n)\n\n            \ndefault\n:\n \nbreak\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n-\n \n(\nvoid\n)\ncheckForDeeplink\n \n{\n\n    \nMParticle\n \n*\n \nmParticle\n \n=\n \n[\nMParticle\n \nsharedInstance\n];\n\n\n    \n[\nmParticle\n \ncheckForDeferredDeepLinkWithCompletionHandler\n:\n^\n(\nNSDictionary\nNSString\n \n*\n,\nNSString\n \n*\n \n*\n \n_Nullable\n \nparams\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n        \n// Option 1: Read deep link data\n\n        \nNSLog\n(\n@\n%@\n,\n \nparams\n);\n\n\n        \n// Option 2: Save deep link data to global model\n\n        \nNSUserDefaults\n \n*\ndefaults\n \n=\n \n[\nNSUserDefaults\n \nstandardUserDefaults\n];\n\n        \n[\ndefaults\n \nsetObject\n:\nparams\n.\ndescription\n \nforKey\n:\n@\nBranchData\n];\n\n        \n[\ndefaults\n \nsynchronize\n];\n\n\n        \n// Option 3: Display data\n\n        \nUIAlertController\n \n*\n \nalert\n \n=\n \n[\nUIAlertController\n \nalertControllerWithTitle\n:\n@\nTitle\n \nmessage\n:\nparams\n.\ndescription\n \npreferredStyle\n:\nUIAlertControllerStyleAlert\n];\n\n        \nUIAlertAction\n \n*\nbutton\n \n=\n \n[\nUIAlertAction\n \nactionWithTitle\n:\n@\nDeep Link Data\n \nstyle\n:\nUIAlertActionStyleDefault\n \nhandler\n:\nnil\n];\n\n        \n[\nalert\n \naddAction\n:\nbutton\n];\n\n        \n[\nself\n.\nwindow\n.\nrootViewController\n \npresentViewController\n:\nalert\n \nanimated\n:\nYES\n \ncompletion\n:\nnil\n];\n\n\n        \n// Option 4: Navigate to view controller\n\n        \nif\n \n([\nparams\n \nobjectForKey\n:\n@\nnavHere\n])\n \n{\n\n            \nViewController\n \n*\nanotherViewController\n \n=\n \n[[\nViewController\n \nalloc\n]\n \ninitWithNibName\n:\n@\nanotherViewController\n \nbundle\n:\nnil\n];\n\n            \n[\nself\n.\nwindow\n.\nrootViewController\n \npresentViewController\n:\nanotherViewController\n \nanimated\n:\nYES\n \ncompletion\n:\nnil\n];\n\n        \n}\n\n    \n}}];\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nList content on \niOS Spotlight\n\n\n\n\n\n\nNeeds a \nCreate content reference\n\n\n\n\n\n\nSwift 3\n\n\nbuo\n.\nautomaticallyListOnSpotlight\n \n=\n \ntrue\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\nbuo\n.\nautomaticallyListOnSpotlight\n \n=\n \nYES\n;\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nCreate content reference\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\nbuo\n.\nuserCompletedAction\n(\nBNCRegisterViewEvent\n)\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n[\nbuo\n \nuserCompletedAction\n:\nBNCRegisterViewEvent\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nMParticle propagates the MPUserIdentityCustomerId ID to Branch\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\n// login\n\n\nMParticle\n.\nsharedInstance\n().\nsetUserIdentity\n(\nyour_user_id\n,\n \nidentityType\n:\n \nMPUserIdentityCustomerId\n)\n\n\n\n// logout\n\n\nMParticle\n.\nsharedInstance\n().\nlogout\n()\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// Login\n\n\n[[\nMParticle\n \nsharedInstance\n]\n \nsetUserIdentity\n:\n@\nyour_user_id\n \nidentityType\n:\nMPUserIdentityCustomerId\n];\n\n\n\n// logout\n\n\n[[\nMParticle\n \nsharedInstance\n]\n \nlogout\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\nvar\n \nevent\n \n=\n \nMPEvent\n().\ninitWithName\n(\nFood Order\n \ntype\n:\nMPEventTypeTransaction\n)\n\n\n\nevent\n.\ninfo\n \n=\n \n[\n\n    \nspice\n:\nhot\n,\n\n    \nmenu\n:\nweekdays\n]\n\n\n\nMParticle\n.\nsharedInstance\n().\nlogEvent\n(\nevent\n)\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\nMPEvent\n \n*\nevent\n \n=\n \n[[\nMPEvent\n \nalloc\n]\n \ninitWithName\n:\n@\nFood Order\n\n                                      \ntype\n:\nMPEventTypeTransaction\n];\n\n\n\nevent\n.\ninfo\n \n=\n \n@{\n@\nspice\n:\n@\nhot\n,\n\n           \n@\nmenu\n:\n@\nweekdays\n}\n;\n \n// optional\n\n\n\n[[\nMParticle\n \nsharedInstance\n]\n \nlogEvent\n:\nevent\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nRegisters a custom commerce event\n\n\n\n\n\n\nUses \nTrack commerce properties\n for \nCurrency\n and \nCategory\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nSwift 3\n\n\n// only revenue is required\n\n\nlet\n \ncommerceEvent\n \n=\n \nBNCCommerceEvent\n.\ninit\n()\n\n\ncommerceEvent\n.\naffiliation\n \n=\n \naffiliation\n\n\ncommerceEvent\n.\ncoupon\n \n=\n \ncoupon\n\n\ncommerceEvent\n.\ncurrency\n \n=\n \nUSD\n\n\ncommerceEvent\n.\ntransactionID\n \n=\n \ntransactionID\n\n\ncommerceEvent\n.\nshipping\n \n=\n \n11.22\n\n\ncommerceEvent\n.\nrevenue\n \n=\n \n99.99\n\n\ncommerceEvent\n.\ntax\n \n=\n \n4.42\n\n\n\n// optional\n\n\nlet\n \nproduct1\n \n=\n \nBNCProduct\n.\ninit\n()\n\n\nproduct1\n.\nsku\n \n=\n \nsku1\n\n\nproduct1\n.\nname\n \n=\n \nname1\n\n\nproduct1\n.\nprice\n \n=\n \n11.11\n\n\nproduct1\n.\nquantity\n \n=\n \n1\n\n\nproduct1\n.\nbrand\n \n=\n \nbrand1\n\n\nproduct1\n.\ncategory\n \n=\n \ncategory1\n\n\nproduct1\n.\nvariant\n \n=\n \nvariant1\n\n\n\n// optional\n\n\nlet\n \nproduct2\n \n=\n \nBNCProduct\n.\ninit\n()\n\n\nproduct2\n.\nsku\n \n=\n \nsku2\n\n\nproduct2\n.\nname\n \n=\n \nname2\n\n\nproduct2\n.\nprice\n \n=\n \n22.22\n\n\nproduct2\n.\nquantity\n \n=\n \n2\n\n\nproduct2\n.\nbrand\n \n=\n \nbrand2\n\n\nproduct2\n.\ncategory\n \n=\n \ncategory2\n\n\nproduct2\n.\nvariant\n \n=\n \nvariant2\n\n\n\ncommerceEvent\n.\nproducts\n \n=\n \n[\nproduct1\n,\n \nproduct2\n]\n\n\n\n// optional\n\n\nlet\n \nmetadata\n:\n \n[\nString\n:\n \nAny\n]\n \n=\n \n[\n\n  \ncustom_dictionary\n:\n \n123\n,\n\n  \nanything\n:\n \neverything\n\n\n]\n\n\n\nBranch\n.\ngetInstance\n().\nsend\n(\ncommerceEvent\n,\n \nmetadata\n:\n \nmetadata\n,\n \nwithCompletion\n:\n \n{\n \n(\nresponse\n,\n \nerror\n)\n \nin\n\n  \nprint\n(\nresponse\n \n??\n \n{})\n\n\n})\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n \n// only revenue is required\n\n\nBNCCommerceEvent\n \n*\ncommerceEvent\n \n=\n \n[\nBNCCommerceEvent\n \nnew\n];\n\n\ncommerceEvent\n.\naffiliation\n \n=\n \n@\naffiliation\n;\n\n\ncommerceEvent\n.\ncoupon\n \n=\n \n@\ncoupon\n;\n\n\ncommerceEvent\n.\ncurrency\n \n=\n \n@\nUSD\n;\n\n\ncommerceEvent\n.\ntransactionID\n \n=\n \n@\ntransactionID\n;\n\n\ncommerceEvent\n.\nshipping\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n11.22\n];\n\n\ncommerceEvent\n.\nrevenue\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n99.99\n];\n\n\ncommerceEvent\n.\ntax\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n4.2\n];;\n\n\n\n// optional\n\n\nBNCProduct\n \n*\nproduct1\n \n=\n \n[\nBNCProduct\n \nnew\n];\n\n\nproduct1\n.\nsku\n \n=\n \n@\nsku1\n;\n\n\nproduct1\n.\nname\n \n=\n \n@\nname1\n;\n\n\nproduct1\n.\nprice\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n11.11\n];\n\n\nproduct1\n.\nquantity\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n1.0\n];\n\n\nproduct1\n.\nbrand\n \n=\n \n@\nbrand1\n;\n\n\nproduct1\n.\ncategory\n \n=\n \n@\ncategory1\n;\n\n\nproduct1\n.\nvariant\n \n=\n \n@\nvariant1\n;\n\n\n\n// optional\n\n\nBNCProduct\n \n*\nproduct2\n \n=\n \n[\nBNCProduct\n \nnew\n];\n\n\nproduct2\n.\nsku\n \n=\n \n@\nsku2\n;\n\n\nproduct2\n.\nname\n \n=\n \n@\nname2\n;\n\n\nproduct2\n.\nprice\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n22.22\n];\n\n\nproduct2\n.\nquantity\n \n=\n \n[[\nNSDecimalNumber\n \nalloc\n]\n \ninitWithFloat\n:\n2.0\n];\n\n\nproduct2\n.\nbrand\n \n=\n \n@\nbrand2\n;\n\n\nproduct2\n.\ncategory\n \n=\n \n@\ncategory2\n;\n\n\nproduct2\n.\nvariant\n \n=\n \n@\nvariant2\n;\n\n\n\ncommerceEvent\n.\nproducts\n \n=\n \n@[\nproduct1\n,\n \nproduct2\n]\n;\n\n\n\n// optional\n\n\nNSDictionary\n \n*\nmetadata\n \n=\n \n@{\n@\ncustom_dictionary\n:\n@123\n,\n\n                       \n@\nanything\n:\n \n@\neverything\n}\n;\n\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsendCommerceEvent\n:\ncommerceEvent\n \nmetadata\n:\nmetadata\n\n                     \nwithCompletion\n:\n^\n(\nNSDictionary\n \n*\nresponse\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n    \nNSLog\n(\n@\n%@\n,\nresponse\n);\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral points are obtained from referral rules on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits\n\n\n\n\nReferral guide\n\n\n\n\n\n\n\n\nRedeem credits\n\n\n\n\n\n\nSwift 3\n\n\n// option 1 (default bucket)\n\n\nlet\n \namount\n \n=\n \n5\n\n\nBranch\n.\ngetInstance\n().\nredeemRewards\n(\namount\n)\n\n\n\n// option 2\n\n\nlet\n \nbucket\n \n=\n \nsignup\n\n\nBranch\n.\ngetInstance\n().\nredeemRewards\n(\namount\n,\n \nforBucket\n:\n \nbucket\n)\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n// option 1 (default bucket)\n\n\nNSInteger\n \namount\n \n=\n \n5\n;\n\n\n[[\nBranch\n \ngetInstance\n]\n \nredeemRewards\n:\namount\n];\n\n\n\n// option 2\n\n\nNSString\n \n*\nbucket\n \n=\n \n@\nsignup\n;\n\n\n[[\nBranch\n \ngetInstance\n]\n \nredeemRewards\n:\namount\n \nforBucket\n:\nbucket\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoad credits\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\nloadRewards\n \n{\n \n(\nchanged\n,\n \nerror\n)\n \nin\n\n  \n// option 1 (defualt bucket)\n\n  \nlet\n \ncredits\n \n=\n \nBranch\n.\ngetInstance\n().\ngetCredits\n()\n\n\n  \n// option 2\n\n  \nlet\n \nbucket\n \n=\n \nsignup\n\n  \nlet\n \ncredits\n \n=\n \nBranch\n.\ngetInstance\n().\ngetCreditsForBucket\n(\nbucket\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nloadRewardsWithCallback\n:\n^\n(\nBOOL\n \nchanged\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n    \nif\n \n(\nchanged\n)\n \n{\n\n    \n// option 1 (defualt bucket)\n\n    \nNSInteger\n \ncredits\n \n=\n \n[[\nBranch\n \ngetInstance\n]\n \ngetCredits\n];\n\n\n    \n// option 2\n\n    \nNSString\n \n*\nbucket\n \n=\n \n@\nsignup\n;\n\n    \nNSInteger\n \ncredit\n \n=\n \n[[\nBranch\n \ngetInstance\n]\n \ngetCreditsForBucket\n:\nbucket\n];\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoad history\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\ngetCreditHistory\n \n{\n \n(\ncreditHistory\n,\n \nerror\n)\n \nin\n\n   \nprint\n(\ncreditHistory\n \n??\n \n{})\n\n \n}\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \ngetCreditHistoryWithCallback\n:\n^\n(\nNSArray\n \n*\n \n_Nullable\n \ncreditHistory\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n    \nNSLog\n(\n@\n%@\n,\ncreditHistory\n);\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nSubmitting to the App Store\n\n\n\n\nNeed to select \napp uses IDFA or GAID\n when publishing your app (for better deep link matching)\n\n\n\n\n\n\n\n\nApp not opening\n\n\n\n\n\n\nDouble check \nIntegrate Branch\n\n\n\n\n\n\nInvestigate if the device disabled universal links (\nRe-enable universal linking\n)\n\n\n\n\n\n\nInvestigate if it is a link related issue (\nDeep links do not open app\n)\n\n\n\n\n\n\nUse \nUniversal links validator\n\n\n\n\n\n\nUse \nAASA validator\n\n\n\n\n\n\nUse \nTest deep link\n\n\n\n\n\n\n\n\n\n\nApp not passing data\n\n\n\n\n\n\nSee if issue is related to \nApp not opening\n\n\n\n\n\n\nInvestigate Branch console logs (\nEnable logging\n)\n\n\n\n\n\n\n\n\n\n\nDeep links are long\n\n\n\n\n\n\nHappens whenever the app cannot make a connection to the Branch servers\n\n\n\n\n\n\nThe long deep links will still open the app and pass data\n\n\n\n\n\n\n\n\n\n\nSample apps\n\n\n\n\n\n\nSwift testbed\n\n\n\n\n\n\nObjective C testbed\n\n\n\n\n\n\n\n\n\n\nTrack content properties\n\n\n\n\n\n\nUsed for \nTrack content\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nBNCRegisterViewEvent\n\n\nUser viewed the object\n\n\n\n\n\n\nBNCAddToWishlistEvent\n\n\nUser added the object to their wishlist\n\n\n\n\n\n\nBNCAddToCartEvent\n\n\nUser added object to cart\n\n\n\n\n\n\nBNCPurchaseInitiatedEvent\n\n\nUser started to check out\n\n\n\n\n\n\nBNCPurchasedEvent\n\n\nUser purchased the item\n\n\n\n\n\n\nBNCShareInitiatedEvent\n\n\nUser started to share the object\n\n\n\n\n\n\nBNCShareCompletedEvent\n\n\nUser completed a share\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRe-enable universal linking\n\n\n\n\n\n\nApple allows users to disable universal linking on a per app per device level on iOS 9 and iOS 10 (fixed in iOS 11)\n\n\n\n\n\n\nUse \nTest deep link\n to re-enable universal linking on the device\n\n\n\n\n\n\n\n\n\n\nShare to email options\n\n\n\n\n\n\nChange the way your deep links behave when shared to email\n\n\n\n\n\n\nNeeds a \nShare deep link\n\n\n\n\n\n\nSwift 3\n\n\nlp\n.\naddControlParam\n(\n$email_subject\n,\n \nwithValue\n:\n \nTherapists hate him.\n)\n\n\nlp\n.\naddControlParam\n(\n$email_html_header\n,\n \nwithValue\n:\n \nstyle\nyour awesome CSS\n/style\n\\n\nOr Dear Friend,\n)\n\n\nlp\n.\naddControlParam\n(\n$email_html_footer\n,\n \nwithValue\n:\n \nThanks!\n)\n\n\nlp\n.\naddControlParam\n(\n$email_html_link_text\n,\n \nwithValue\n:\n \nTap here\n)\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[\nlp\n \naddControlParam\n:\n@\n$email_subject\n \nwithValue\n:\n@\nThis one weird trick.\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$email_html_header\n \nwithValue\n:\n@\nstyle\nyour awesome CSS\n/style\n\\n\nOr Dear Friend,\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$email_html_footer\n \nwithValue\n:\n@\nThanks!\n];\n\n\n[\nlp\n \naddControlParam\n:\n@\n$email_html_link_text\n \nwithValue\n:\n@\nTap here\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare message dynamically\n\n\n\n\n\n\nChange the message you share based on the source the users chooses\n\n\n\n\n\n\nNeeds a \nShare deep link\n\n\n\n\n\n\nSwift 3\n\n\n// import delegate\n\n\nclass\n \nViewController\n:\n \nUITableViewController\n,\n \nBranchShareLinkDelegate\n\n\n\nfunc\n \nbranchShareLinkWillShare\n(\n_\n \nshareLink\n:\n \nBranchShareLink\n)\n \n{\n\n  \n// choose shareSheet.activityType\n\n  \nshareLink\n.\nshareText\n \n=\n \n\\(\nshareLink\n.\nlinkProperties\n.\nchannel\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n// import delegate\n\n\n@interface\n \nViewController\n \n()\n \nBranchShareLinkDelegate\n\n\n\n-\n \n(\nvoid\n)\n \nbranchShareLinkWillShare\n:(\nBranchShareLink\n*\n)\nshareLink\n \n{\n\n  \n// choose shareSheet.activityType\n\n  \nshareLink\n.\nshareText\n \n=\n \n[\nNSString\n \nstringWithFormat\n:\n@\n@%\n,\n \nshareLink\n.\nlinkProperties\n.\nchannel\n];\n\n\n}", 
            "title": "mParticle iOS"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#integrate-branch", 
            "text": "This documentation explains how to send  mParticle events to your Branch dashboard . If you'd like to send Branch installs to your mParticle dashboard, please review the  Branch/mParticle Data Integration .    Inconsistent Universal links behavior on iOS 11.2  After updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set  forced uri redirect mode  on your Branch links to open the app with URI schemes. View details of the issue on the  Apple Bug report .", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#configure-bundle-identifier", 
            "text": "Make sure Bundle Id matches your  Branch Dashboard", 
            "title": "Configure bundle identifier"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#configure-associated-domains", 
            "text": "Add your link domains from your  Branch Dashboard  -alternate  is needed for Universal Linking with the  Web SDK  inside your Website  test-  is needed if you need use a  test key   If you use a  custom link domain , you will need to include your old link domain, your  -alternate  link domain, and your new link domain", 
            "title": "Configure associated domains"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#configure-entitlements", 
            "text": "Confirm entitlements are within target", 
            "title": "Configure entitlements"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#configure-infoplist", 
            "text": "Add  Branch Dashboard  values   Add  branch_app_domain  with your live key domain  Add  branch_key  with your current Branch key  Add your URI scheme as  URL Types  -   Item 0  -   URL Schemes", 
            "title": "Configure info.pList"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#confirm-app-prefix", 
            "text": "From your  Apple Developer Account", 
            "title": "Confirm app prefix"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#install-branch-kit", 
            "text": "Option 1:  CocoaPods  platform :ios,  8.0 \n\ntarget  APP_NAME   do \n   # if swift \n  use_frameworks!   pod  mParticle-BranchMetrics  end    Option 2:  Carthage  github  mparticle-integrations/mparticle-apple-integration-branchmetrics", 
            "title": "Install Branch Kit"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#enable-branch-on-mparticle", 
            "text": "Retrieve your Branch Key on the  Link Settings  page of the Branch dashboard.  From your  mParticle dashboard  navigate to the Services page. (The paper airplane icon on the left side)  Scroll down to the Branch tile, or enter Branch in the search bar.  Click on the Branch tile and then select \"Activate a Platform\".  Click on the Apple icon, then toggle the status ON.  Enter your Branch key in the marked field and click \"Save\".", 
            "title": "Enable Branch on mParticle"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#handle-incoming-links", 
            "text": "Swift 3  import   UIKit  @UIApplicationMain  class   AppDelegate :   UIResponder ,   UIApplicationDelegate   {  var   window :   UIWindow ?  func   application ( _   application :   UIApplication ,   didFinishLaunchingWithOptions   launchOptions :   [ UIApplicationLaunchOptionsKey :   Any ]?)   -   Bool   { \n\n   // This observer must be added before initializing the mParticle session. \n   // Failure to do so will cause some deep links to be missed.     NotificationCenter . default . addObserver ( self ,   selector :   #selector ( handleKitDidBecomeActive ( _ :)),   name :   Notification . Name . mParticleKitDidBecomeActive ,   object :   nil )  \n   return   true  }  func   handleKitDidBecomeActive ( _   notification :   Notification )   {       guard   let   kitNumber   =   notification . userInfo ?[ mParticleKitInstanceKey ]   as ?   NSNumber   else   {   return   }       guard   let   kitInstance   =   MPKitInstance ( rawValue :   kitNumber . uintValue )   else   {   return   }        switch   kitInstance   {           case   . branchMetrics :               checkForDeeplink ()           default :               break       }  }   func   application ( _   application :   UIApplication ,   continue   userActivity :   NSUserActivity ,   restorationHandler :   @ escaping   ([ Any ]?)   -   Void )   -   Bool   {       checkForDeeplink ()       return   true  }  func   checkForDeeplink ()   {       MParticle . sharedInstance (). checkForDeferredDeepLink   {   linkInfo ,   error   in           // A few typical scenarios where this block would be invoked:           //           // (1) Base case:           //     - User does not tap on a link, and then opens the app (either after a fresh install or not)           //     - This block will be invoked with Branch Metrics  response indicating that this user did not tap on a link           //           // (2) Deferred deep link:           //     - User without the app installed taps on a link           //     - User is redirected from Branch Metrics to the App Store and installs the app           //     - User opens the app           //     - This block will be invoked with Branch Metrics  response containing the details of the link           //           // (3) Deep link with app installed:           //     - User with the app already installed taps on a link           //     - Application opens via openUrl/continueUserActivity, mParticle forwards launch options etc to Branch           //     - This block will be invoked with Branch Metrics  response containing the details of the link           //           // If the user navigates away from the app without killing it, this block could be invoked several times:           // once for the initial launch, and then again each time the user taps on a link to re-open the app.            guard   let   linkInfo   =   linkInfo   else   {   return   }            print ( params:   +   linkInfo )       }  }     Objective-C  #import  AppDelegate.h  #import  Branch/Branch.h  @interface   AppDelegate   ()  @end  @implementation   AppDelegate  -   ( BOOL ) application: ( UIApplication   * ) application   didFinishLaunchingWithOptions: ( NSDictionary   * ) launchOptions   { \n\n   // This observer must be added before initializing the mParticle session. \n   // Failure to do so will cause some deep links to be missed.     NSNotificationCenter   * notificationCenter   =   [ NSNotificationCenter   defaultCenter ];     [ notificationCenter   addObserver : self                            selector : @selector ( handleKitDidBecomeActive :)                                name : mParticleKitDidBecomeActiveNotification                              object : nil ];  \n   return   YES ;  }  -   ( void ) handleKitDidBecomeActive: ( NSNotification   * ) notification   {     NSDictionary   * userInfo   =   [ notification   userInfo ];     NSNumber   * kitNumber   =   userInfo [ mParticleKitInstanceKey ];     MPKitInstance   kitInstance   =   ( MPKitInstance )[ kitNumber   integerValue ];      if   ( kitInstance   ==   MPKitInstanceBranchMetrics )   {       [ self   checkForDeeplink ];     }  }   -   ( BOOL ) application: ( UIApplication   * ) application   continueUserActivity: ( NSUserActivity   * ) userActivity   restorationHandler: ( void   ( ^ )( NSArray   *   _Nullable )) restorationHandler   {     [ self   checkForDeeplink ];     return   YES ;  }  -   ( void ) checkForDeeplink   {     MParticle   *   mParticle   =   [ MParticle   sharedInstance ];      [ mParticle   checkForDeferredDeepLinkWithCompletionHandler : ^ ( NSDictionary NSString   * , NSString   *   *   _Nullable   params ,   NSError   *   _Nullable   error )   {       //       // A few typical scenarios where this block would be invoked:       //       // (1) Base case:       //     - User does not tap on a link, and then opens the app (either after a fresh install or not)       //     - This block will be invoked with Branch Metrics  response indicating that this user did not tap on a link       //       // (2) Deferred deep link:       //     - User without the app installed taps on a link       //     - User is redirected from Branch Metrics to the App Store and installs the app       //     - User opens the app       //     - This block will be invoked with Branch Metrics  response containing the details of the link       //       // (3) Deep link with app installed:       //     - User with the app already installed taps on a link       //     - Application opens via openUrl/continueUserActivity, mParticle forwards launch options etc to Branch       //     - This block will be invoked with Branch Metrics  response containing the details of the link       //       // If the user navigates away from the app without killing it, this block could be invoked several times:       // once for the initial launch, and then again each time the user taps on a link to re-open the app.        if   ( params )   {         //Insert custom logic to inspect the params and route the user/customize the experience.         NSLog ( @ params: %@ ,   params . description );       }     }];  }   @end", 
            "title": "Handle Incoming Links"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#initialize-branch", 
            "text": "As with any kit, mParticle will automatically handle initializing Branch sessions. At this point you should start seeing your Branch session data - including installs, re-opens, and any custom events - in your Branch dashboard.", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#test-deep-link", 
            "text": "Create a deep link from the  Branch Dashboard  Delete your app from the device  Compile and test on a device  Paste deep link in  Apple Notes  Long press on the deep link (not 3D Touch)  Click  Open in \"APP_NAME\"  to open your app ( example )", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share    Uses  Universal Object properties    Swift 3  // only canonicalIdentifier is required  let   buo   =   BranchUniversalObject ( canonicalIdentifier :   content/123 )  buo . canonicalUrl   =   https://example.com/content/123  buo . title   =   Content 123 Title  buo . contentDescription   =   Content 123 Description  \\( Date ())  buo . imageUrl   =   http://lorempixel.com/400/400/  buo . price   =   12.12  buo . currency   =   USD  buo . contentIndexMode   =   . public  buo . automaticallyListOnSpotlight   =   true  buo . addMetadataKey ( custom ,   value :   123 )  buo . addMetadataKey ( anything ,   value :   everything )     Objective-C  // only canonical identifier is required  BranchUniversalObject   * buo   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ content/123 ];  buo . title   =   @ Content 123 Title ;  buo . contentDescription   =   @ Content 123 Description ;  buo . imageUrl   =   @ https://lorempixel.com/400/400 ;  buo . price   =   12.12 ;  buo . currency   =   @ USD ;  buo . contentIndexMode   =   ContentIndexModePublic ;  buo . automaticallyListOnSpotlight   =   YES ;  [ buo   addMetadataKey : @ custom   value :[[ NSUUID   UUID ]   UUIDString ]];  [ buo   addMetadataKey : @ anything   value : @ everything ];", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#create-link-reference", 
            "text": "Generates the analytical properties for the deep link    Used for  Create deep link  and  Share deep link    Uses  Configure link data  and custom data    Swift 3  let   lp :   BranchLinkProperties   =   BranchLinkProperties ()  lp . channel   =   facebook  lp . feature   =   sharing  lp . campaign   =   content 123 launch  lp . stage   =   new user  lp . tags   =   [ one ,   two ,   three ]  lp . addControlParam ( $desktop_url ,   withValue :   http://example.com/desktop )  lp . addControlParam ( $ios_url ,   withValue :   http://example.com/ios )  lp . addControlParam ( $ipad_url ,   withValue :   http://example.com/ios )  lp . addControlParam ( $android_url ,   withValue :   http://example.com/android )  lp . addControlParam ( $match_duration ,   withValue :   2000 )  lp . addControlParam ( custom_data ,   withValue :   yes )  lp . addControlParam ( look_at ,   withValue :   this )  lp . addControlParam ( nav_to ,   withValue :   over here )  lp . addControlParam ( random ,   withValue :   UUID . init (). uuidString )     Objective-C  BranchLinkProperties   * lp   =   [[ BranchLinkProperties   alloc ]   init ];  lp . feature   =   @ facebook ;  lp . channel   =   @ sharing ;  lp . campaign   =   @ content 123 launch ;  lp . stage   =   @ new user ;  lp . tags   =   @[ @ one ,   @ two ,   @ three ] ;  [ lp   addControlParam : @ $desktop_url   withValue :   @ http://example.com/desktop ];  [ lp   addControlParam : @ $ios_url   withValue :   @ http://example.com/ios ];  [ lp   addControlParam : @ $ipad_url   withValue :   @ http://example.com/ios ];  [ lp   addControlParam : @ $android_url   withValue :   @ http://example.com/android ];  [ lp   addControlParam : @ $match_duration   withValue :   @ 2000 ];  [ lp   addControlParam : @ custom_data   withValue :   @ yes ];  [ lp   addControlParam : @ look_at   withValue :   @ this ];  [ lp   addControlParam : @ nav_to   withValue :   @ over here ];  [ lp   addControlParam : @ random   withValue :   [[ NSUUID   UUID ]   UUIDString ]];", 
            "title": "Create link reference"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#create-deep-link", 
            "text": "Generates a deep link within your app    Needs a  Create content reference    Needs a  Create link reference    Validate with the  Branch Dashboard    Swift 3  buo . getShortUrl ( with :   lp )   {   ( url ,   error )   in \n   print ( url   ??   )  }     Objective-C  [ buo   getShortUrlWithLinkProperties : lp   andCallback : ^ ( NSString *   url ,   NSError *   error )   { \n     if   ( ! error )   { \n         NSLog ( @ @ ,   url ); \n     }  }];", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Needs a  Create content reference    Needs a  Create link reference    Uses  Deep Link Properties    Swift 3  let   message   =   Check out this link  buo . showShareSheet ( with :   lp ,   andShareText :   message ,   from :   self )   {   ( activityType ,   completed )   in \n   print ( activityType   ??   )  }     Objective C  [ buo   showShareSheetWithLinkProperties : lp   andShareText : @ Super amazing thing I want to share!   fromViewController : self   completion : ^ ( NSString *   activityType ,   BOOL   completed )   { \n     NSLog ( @ finished presenting );  }];", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Returns  deep link properties    Swift 3 \n     func   checkForDeeplink ()   { \n     MParticle . sharedInstance (). checkForDeferredDeepLink   {   linkInfo ,   error   in \n         guard   let   linkInfo   =   linkInfo   else   {   return   } \n         print ( linkInfo   as ?   [ String :   AnyObject ]   ??   {}) \n     }  }  // Latest  let   sessionParams   =   Branch . getInstance (). getLatestReferringParams ()  // First  let   installParams   =   Branch . getInstance (). getFirstReferringParams ()     Objective C  -   ( void ) checkForDeeplink   { \n     MParticle   *   mParticle   =   [ MParticle   sharedInstance ]; \n\n     [ mParticle   checkForDeferredDeepLinkWithCompletionHandler : ^ ( NSDictionary NSString   * , NSString   *   *   _Nullable   params ,   NSError   *   _Nullable   error )   { \n         if   ( params )   { \n             NSLog ( @ Referring Link Params: %@ ,   params . description ); \n         } \n     }];  }  // latest  NSDictionary   * sessionParams   =   [[ Branch   getInstance ]   getLatestReferringParams ];  // first  NSDictionary   * installParams   =    [[ Branch   getInstance ]   getFirstReferringParams ];", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#navigate-to-content", 
            "text": "Handled within  checkForDeferredDeepLinkWithCompletionHandler    Swift 3  func   checkForDeeplink ()   { \n     MParticle . sharedInstance (). checkForDeferredDeepLink   {   linkInfo ,   error   in \n         // Option 1: Read deep link data \n         guard   let   data   =   linkInfo   as ?   [ String :   AnyObject ]   else   {   return   } \n\n         // Option 2: Save deep link data to global model \n         SomeCustomClass . sharedInstance . branchData   =   data \n\n         // Option 3: Display data \n         let   alert   =   UIAlertController ( title :   Deep link data ,   message :   \\( data ) ,   preferredStyle :   . alert ) \n         alert . addAction ( UIAlertAction ( title :   Okay ,   style :   . default ,   handler :   nil )) \n         self . window ?. rootViewController ?. present ( alert ,   animated :   true ,   completion :   nil ) \n\n         // Option 4: Navigate to view controller \n         guard   let   options   =   data [ nav_to ]   as ?   String   else   {   return   } \n         switch   options   { \n             case   landing_page :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n             case   tutorial :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n             case   content :   self . window ?. rootViewController ?. present (   SecondViewController (),   animated :   true ,   completion :   nil ) \n             default :   break \n         } \n     }  }     Objective-C  -   ( void ) checkForDeeplink   { \n     MParticle   *   mParticle   =   [ MParticle   sharedInstance ]; \n\n     [ mParticle   checkForDeferredDeepLinkWithCompletionHandler : ^ ( NSDictionary NSString   * , NSString   *   *   _Nullable   params ,   NSError   *   _Nullable   error )   { \n         // Option 1: Read deep link data \n         NSLog ( @ %@ ,   params ); \n\n         // Option 2: Save deep link data to global model \n         NSUserDefaults   * defaults   =   [ NSUserDefaults   standardUserDefaults ]; \n         [ defaults   setObject : params . description   forKey : @ BranchData ]; \n         [ defaults   synchronize ]; \n\n         // Option 3: Display data \n         UIAlertController   *   alert   =   [ UIAlertController   alertControllerWithTitle : @ Title   message : params . description   preferredStyle : UIAlertControllerStyleAlert ]; \n         UIAlertAction   * button   =   [ UIAlertAction   actionWithTitle : @ Deep Link Data   style : UIAlertActionStyleDefault   handler : nil ]; \n         [ alert   addAction : button ]; \n         [ self . window . rootViewController   presentViewController : alert   animated : YES   completion : nil ]; \n\n         // Option 4: Navigate to view controller \n         if   ([ params   objectForKey : @ navHere ])   { \n             ViewController   * anotherViewController   =   [[ ViewController   alloc ]   initWithNibName : @ anotherViewController   bundle : nil ]; \n             [ self . window . rootViewController   presentViewController : anotherViewController   animated : YES   completion : nil ]; \n         } \n     }}];  }", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#display-content", 
            "text": "List content on  iOS Spotlight    Needs a  Create content reference    Swift 3  buo . automaticallyListOnSpotlight   =   true     Objective-C  buo . automaticallyListOnSpotlight   =   YES ;", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Create content reference    Validate with the  Branch Dashboard    Swift 3  buo . userCompletedAction ( BNCRegisterViewEvent )     Objective-C  [ buo   userCompletedAction : BNCRegisterViewEvent ];", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    MParticle propagates the MPUserIdentityCustomerId ID to Branch    Validate with the  Branch Dashboard    Swift 3  // login  MParticle . sharedInstance (). setUserIdentity ( your_user_id ,   identityType :   MPUserIdentityCustomerId )  // logout  MParticle . sharedInstance (). logout ()     Objective-C  // Login  [[ MParticle   sharedInstance ]   setUserIdentity : @ your_user_id   identityType : MPUserIdentityCustomerId ];  // logout  [[ MParticle   sharedInstance ]   logout ];", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard    Swift 3  var   event   =   MPEvent (). initWithName ( Food Order   type : MPEventTypeTransaction )  event . info   =   [ \n     spice : hot , \n     menu : weekdays ]  MParticle . sharedInstance (). logEvent ( event )     Objective-C  MPEvent   * event   =   [[ MPEvent   alloc ]   initWithName : @ Food Order \n                                       type : MPEventTypeTransaction ];  event . info   =   @{ @ spice : @ hot , \n            @ menu : @ weekdays } ;   // optional  [[ MParticle   sharedInstance ]   logEvent : event ];", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#track-commerce", 
            "text": "Registers a custom commerce event    Uses  Track commerce properties  for  Currency  and  Category    Validate with the  Branch Dashboard    Swift 3  // only revenue is required  let   commerceEvent   =   BNCCommerceEvent . init ()  commerceEvent . affiliation   =   affiliation  commerceEvent . coupon   =   coupon  commerceEvent . currency   =   USD  commerceEvent . transactionID   =   transactionID  commerceEvent . shipping   =   11.22  commerceEvent . revenue   =   99.99  commerceEvent . tax   =   4.42  // optional  let   product1   =   BNCProduct . init ()  product1 . sku   =   sku1  product1 . name   =   name1  product1 . price   =   11.11  product1 . quantity   =   1  product1 . brand   =   brand1  product1 . category   =   category1  product1 . variant   =   variant1  // optional  let   product2   =   BNCProduct . init ()  product2 . sku   =   sku2  product2 . name   =   name2  product2 . price   =   22.22  product2 . quantity   =   2  product2 . brand   =   brand2  product2 . category   =   category2  product2 . variant   =   variant2  commerceEvent . products   =   [ product1 ,   product2 ]  // optional  let   metadata :   [ String :   Any ]   =   [ \n   custom_dictionary :   123 , \n   anything :   everything  ]  Branch . getInstance (). send ( commerceEvent ,   metadata :   metadata ,   withCompletion :   {   ( response ,   error )   in \n   print ( response   ??   {})  })     Objective C    // only revenue is required  BNCCommerceEvent   * commerceEvent   =   [ BNCCommerceEvent   new ];  commerceEvent . affiliation   =   @ affiliation ;  commerceEvent . coupon   =   @ coupon ;  commerceEvent . currency   =   @ USD ;  commerceEvent . transactionID   =   @ transactionID ;  commerceEvent . shipping   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 11.22 ];  commerceEvent . revenue   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 99.99 ];  commerceEvent . tax   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 4.2 ];;  // optional  BNCProduct   * product1   =   [ BNCProduct   new ];  product1 . sku   =   @ sku1 ;  product1 . name   =   @ name1 ;  product1 . price   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 11.11 ];  product1 . quantity   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 1.0 ];  product1 . brand   =   @ brand1 ;  product1 . category   =   @ category1 ;  product1 . variant   =   @ variant1 ;  // optional  BNCProduct   * product2   =   [ BNCProduct   new ];  product2 . sku   =   @ sku2 ;  product2 . name   =   @ name2 ;  product2 . price   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 22.22 ];  product2 . quantity   =   [[ NSDecimalNumber   alloc ]   initWithFloat : 2.0 ];  product2 . brand   =   @ brand2 ;  product2 . category   =   @ category2 ;  product2 . variant   =   @ variant2 ;  commerceEvent . products   =   @[ product1 ,   product2 ] ;  // optional  NSDictionary   * metadata   =   @{ @ custom_dictionary : @123 , \n                        @ anything :   @ everything } ;  [[ Branch   getInstance ]   sendCommerceEvent : commerceEvent   metadata : metadata \n                      withCompletion : ^ ( NSDictionary   * response ,   NSError   * error )   { \n     NSLog ( @ %@ , response );  }];", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#handle-referrals", 
            "text": "Referral points are obtained from referral rules on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits   Referral guide     Redeem credits    Swift 3  // option 1 (default bucket)  let   amount   =   5  Branch . getInstance (). redeemRewards ( amount )  // option 2  let   bucket   =   signup  Branch . getInstance (). redeemRewards ( amount ,   forBucket :   bucket )     Objective C  // option 1 (default bucket)  NSInteger   amount   =   5 ;  [[ Branch   getInstance ]   redeemRewards : amount ];  // option 2  NSString   * bucket   =   @ signup ;  [[ Branch   getInstance ]   redeemRewards : amount   forBucket : bucket ];       Load credits    Swift 3  Branch . getInstance (). loadRewards   {   ( changed ,   error )   in \n   // option 1 (defualt bucket) \n   let   credits   =   Branch . getInstance (). getCredits () \n\n   // option 2 \n   let   bucket   =   signup \n   let   credits   =   Branch . getInstance (). getCreditsForBucket ( bucket )  }     Objective C  [[ Branch   getInstance ]   loadRewardsWithCallback : ^ ( BOOL   changed ,   NSError   *   _Nullable   error )   { \n     if   ( changed )   { \n     // option 1 (defualt bucket) \n     NSInteger   credits   =   [[ Branch   getInstance ]   getCredits ]; \n\n     // option 2 \n     NSString   * bucket   =   @ signup ; \n     NSInteger   credit   =   [[ Branch   getInstance ]   getCreditsForBucket : bucket ]; \n     }  }];       Load history    Swift 3  Branch . getInstance (). getCreditHistory   {   ( creditHistory ,   error )   in \n    print ( creditHistory   ??   {}) \n  }     Objective C  [[ Branch   getInstance ]   getCreditHistoryWithCallback : ^ ( NSArray   *   _Nullable   creditHistory ,   NSError   *   _Nullable   error )   { \n     NSLog ( @ %@ , creditHistory );  }];", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#submitting-to-the-app-store", 
            "text": "Need to select  app uses IDFA or GAID  when publishing your app (for better deep link matching)", 
            "title": "Submitting to the App Store"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#app-not-opening", 
            "text": "Double check  Integrate Branch    Investigate if the device disabled universal links ( Re-enable universal linking )    Investigate if it is a link related issue ( Deep links do not open app )    Use  Universal links validator    Use  AASA validator    Use  Test deep link", 
            "title": "App not opening"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#app-not-passing-data", 
            "text": "See if issue is related to  App not opening    Investigate Branch console logs ( Enable logging )", 
            "title": "App not passing data"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#deep-links-are-long", 
            "text": "Happens whenever the app cannot make a connection to the Branch servers    The long deep links will still open the app and pass data", 
            "title": "Deep links are long"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#sample-apps", 
            "text": "Swift testbed    Objective C testbed", 
            "title": "Sample apps"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#track-content-properties", 
            "text": "Used for  Track content     Key  Value      BNCRegisterViewEvent  User viewed the object    BNCAddToWishlistEvent  User added the object to their wishlist    BNCAddToCartEvent  User added object to cart    BNCPurchaseInitiatedEvent  User started to check out    BNCPurchasedEvent  User purchased the item    BNCShareInitiatedEvent  User started to share the object    BNCShareCompletedEvent  User completed a share", 
            "title": "Track content properties"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#re-enable-universal-linking", 
            "text": "Apple allows users to disable universal linking on a per app per device level on iOS 9 and iOS 10 (fixed in iOS 11)    Use  Test deep link  to re-enable universal linking on the device", 
            "title": "Re-enable universal linking"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#share-to-email-options", 
            "text": "Change the way your deep links behave when shared to email    Needs a  Share deep link    Swift 3  lp . addControlParam ( $email_subject ,   withValue :   Therapists hate him. )  lp . addControlParam ( $email_html_header ,   withValue :   style your awesome CSS /style \\n Or Dear Friend, )  lp . addControlParam ( $email_html_footer ,   withValue :   Thanks! )  lp . addControlParam ( $email_html_link_text ,   withValue :   Tap here )     Objective C  [ lp   addControlParam : @ $email_subject   withValue : @ This one weird trick. ];  [ lp   addControlParam : @ $email_html_header   withValue : @ style your awesome CSS /style \\n Or Dear Friend, ];  [ lp   addControlParam : @ $email_html_footer   withValue : @ Thanks! ];  [ lp   addControlParam : @ $email_html_link_text   withValue : @ Tap here ];", 
            "title": "Share to email options"
        }, 
        {
            "location": "/pages/apps/mparticle-ios/#share-message-dynamically", 
            "text": "Change the message you share based on the source the users chooses    Needs a  Share deep link    Swift 3  // import delegate  class   ViewController :   UITableViewController ,   BranchShareLinkDelegate  func   branchShareLinkWillShare ( _   shareLink :   BranchShareLink )   { \n   // choose shareSheet.activityType \n   shareLink . shareText   =   \\( shareLink . linkProperties . channel )  }     Objective C  // import delegate  @interface   ViewController   ()   BranchShareLinkDelegate  -   ( void )   branchShareLinkWillShare :( BranchShareLink * ) shareLink   { \n   // choose shareSheet.activityType \n   shareLink . shareText   =   [ NSString   stringWithFormat : @ @% ,   shareLink . linkProperties . channel ];  }", 
            "title": "Share message dynamically"
        }, 
        {
            "location": "/pages/apps/titanium/", 
            "text": "Integrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure App\n\n\n\n\n\n\niOS\n\n\n\n\n\n\nAdd your Branch key and register a URI scheme\n\n\n\n\nIn your project\u2019s tiapp.xml file, insert the snippet below. Change yourapp to the URI scheme you\u2019ve selected.\n\n\n\n\n \nios\n\n     \nplist\n\n       \ndict\n\n         \n!-- Add branch key as key-value pair --\n\n         \nkey\nbranch_key\n/key\n\n         \nstring\nkey_live_xxxxxxxxxxxxxxx\n/string\n\n         \n!-- Add unique string for direct deep links --\n\n         \nkey\nCFBundleURLTypes\n/key\n\n         \narray\n\n           \ndict\n\n             \nkey\nCFBundleURLSchemes\n/key\n\n             \narray\n\n               \nstring\nyourapp\n/string\n\n             \n/array\n\n           \n/dict\n\n         \n/array\n\n         \n!-- Add domains to support Universal Links --\n\n         \nkey\ncom.apple.developer.associated-domains\n/key\n\n         \narray\n\n             \nstring\napplinks:xxxx.app.link\n/string\n\n             \nstring\napplinks:xxxx-alternate.app.link\n/string\n\n             \nstring\napplinks:xxxx.test-app.link\n/string\n\n             \nstring\napplinks:xxxx-alternate.test-app.link\n/string\n\n         \n/array\n\n         \n!-- Required step for Universal Links on cold start --\n\n         \nkey\nNSUserActivityTypes\n/key\n\n         \narray\n\n           \nstring\nio.branch.testbed.universalLink\n/string\n\n         \n/array\n\n       \n/dict\n\n     \n/plist\n\n   \n/ios\n\n\n\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nAdd your Branch Key and register a URI Scheme\n\n\n\n\n\n\nOpen your tiapp.xml and add the following \n tag:\n\n    \napplication\n\n        \n!-- Other existing entries --\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey\n \nandroid:value=\nkey_live_xxxxxxxxxxxxxxx\n \n/\n\n    \n/application\n\n\n\n\n\n\n\n\nWithin your Deep Link Activity's definition, insert the intent filter provided below. Change yourapp under android:scheme to the URI scheme you\u2019ve selected.\n\n\n\n\n\n\n    \nintent-filter\n\n      \ndata\n \nandroid:scheme=\nyourapp\n \nandroid:host=\nopen\n \n/\n\n      \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n      \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n      \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n    \n/intent-filter\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nInitialize the SDK by inserting the following snippet into your index.js file:\n\n\n$\n.\ninitialize\n \n=\n \nfunction\n(\nparams\n)\n \n{\n\n       \n$.window.open()\n;\n\n\n       \n$.initializeViews()\n;\n\n       \n$.initializeHandlers()\n;\n\n\n       \nTi.API.info(\nstart\n \ninitSession\n)\n;\n\n       \nbranch.initSession()\n;\n\n       \nbranch.addEventListener(\nbio\n:\ninitSession\n, $.onInitSessionFinished);\n\n\n\n       if (OS_ANDROID) {\n\n\n           Ti.Android.currentActivity.addEventListener(\nnewintent\n, function(e) {\n\n\n               Ti.API.info(\ninside\n \nnewintent\n:\n \n + e);\n\n\n               $.window.open();\n\n\n               branch.initSession();\n\n\n           });\n\n\n       }\n\n\n\n       if (OS_IOS) { // Don\nt forget this condition.\n\n\n          var activity = Ti.App.iOS.createUserActivity({\n\n\n              activityType:\nio.branch.testbed.universalLink\n\n\n          });\n\n\n\n          activity.becomeCurrent();\n\n\n\n          Ti.App.iOS.addEventListener(\ncontinueactivity\n, function(e) {\n\n\n              if (e.activityType === \nio.branch.testbed.universalLink\n) {\n\n\n                  branch.continueUserActivity(e.activityType, e.webpageURL, e.userInfo);\n\n\n              }\n\n\n          });\n\n\n      }\n\n\n   };\n\n\n\n   $.onInitSessionFinished = function(data) {\n\n\n       Ti.API.info(\ninside\n \nonInitSessionFinished\n);\n\n\n       for (key in data) {\n\n\n           if ((key != \ntype\n \n key != \nsource\n \n key != \nbubbles\n \n key != \ncancelBubble\n)\n \n \ndata\n[\nkey\n]\n \n!=\n \nnull\n)\n \n{\n\n               \nTi\n.\nAPI\n.\ninfo\n(\nkey\n \n+\n \ndata\n[\nkey\n]\n);\n\n           \n}\n\n       \n}\n\n   \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link iOS\n\n\n\n\n\n\nCreate a deep link from the \nBranch Marketing Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app\n\n\n\n\n\n\nPaste deep link in \nApple Notes\n\n\n\n\n\n\nLong press on the deep link \n(not 3D Touch)\n\n\n\n\n\n\nClick \nOpen in \"APP_NAME\"\n to open your app \n(\nexample\n)\n\n\n\n\n\n\n\n\n\n\nTest deep link Android\n\n\n\n\n\n\nCreate a deep link from the \nBranch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app\n\n\n\n\n\n\nPaste deep link in \nGoogle Hangouts\n\n\n\n\n\n\nClick on the deep link to open your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share\n\n\n\n\n\n\nUses the Universal Object Properties listed below:\n\n\n\n\n\n\n\n\nKey\n\n\nType\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\ncanonicalIdentifier\n\n\nstring\n\n\nThe identifier of the object\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\nThe title of the object\n\n\n\n\n\n\ncontentDescription\n\n\nstring\n\n\nThe short description of the object\n\n\n\n\n\n\ncontentImageUrl\n\n\nstring\n\n\nURL of the image used by the object\n\n\n\n\n\n\ncontentIndexingMode\n\n\nstring\n\n\nIndexing mode of the object. Set as \"private\" or \"public\".\n\n\n\n\n\n\ncontentMetadata\n\n\ndictionary\n\n\nCustom keys and values as metadata of the object\n\n\n\n\n\n\n\n\n    \nvar\n \nbranchUniversalObject\n \n=\n \nbranch\n.\ncreateBranchUniversalObject\n({\n\n        \ncanonicalIdentifier\n \n:\n \ncontent/12345\n,\n\n        \ntitle\n \n:\n \nMy Content Title\n,\n\n        \ncontentDescription\n \n:\n \nMy Content Description\n,\n\n        \ncontentImageUrl\n \n:\n \nhttps://example.com/mycontent-12345.png\n,\n\n        \ncontentIndexingMode\n \n:\n \npublic\n,\n\n        \ncontentMetadata\n \n:\n \n{\n\n            \nproduct_picture\n \n:\n \n12345\n,\n\n            \nuser_id\n \n:\n \n6789\n\n        \n},\n\n    \n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nCreates a deep link URL with encapsulated data\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\n    \nbranchUniversalObject\n.\ngenerateShortUrl\n({\n\n      \nfeature\n \n:\n \nsample-feature\n,\n\n      \nchannel\n \n:\n \nsample-channel\n,\n\n      \nstage\n \n:\n \nsample-stage\n\n    \n},\n \n{\n\n      \n$desktop_url\n \n:\n \nhttp://desktop-url.com\n,\n\n    \n},\n \nfunction\n \n(\nres\n)\n \n{\n\n        \nTi\n.\nAPI\n.\ninfo\n(\nCompleted link generation\n);\n\n        \nTi\n.\nAPI\n.\ninfo\n(\nres\n);\n\n    \n});\n\n\n\n\n\n\n\nThe event listener bio:generateShortUrl returns a string object containing the generated link:\n\n    \nbranchUniversalObject\n.\naddEventListener\n(\nbio:generateShortUrl\n,\n \n$\n.\nonGenerateUrlFinished\n);\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\n    \nbranchUniversalObject\n.\nshowShareSheet\n({\n\n      \nfeature\n \n:\n \nsample-feature\n,\n\n      \nchannel\n \n:\n \nsample-channel\n,\n\n      \nstage\n \n:\n \nsample-stage\n,\n\n    \n},\n \n{\n\n      \n$desktop_url\n \n:\n \nhttp://desktop-url.com\n,\n\n    \n});\n\n\n\n\n\n\n\nAndroid only (Callbacks in iOS are ignored. There is no need to implement them as the events are handled by UIActivityViewController)\n\n\n\n\n    \nbranchUniversalObject\n.\nshareLinkDialogLaunched\n(\nfunction\n \n()\n \n{\n\n      \nconsole\n.\nlog\n(\nShare sheet launched\n);\n\n    \n});\n\n\n\n\n\n    \nbranchUniversalObject\n.\nshareLinkDialogDismissed\n(\nfunction\n \n()\n \n{\n\n     \nconsole\n.\nlog\n(\nShare sheet dimissed\n);\n\n   \n});\n\n\n\n\n\n    \nbranchUniversalObject\n.\nshareLinkResponse\n(\nfunction\n \n(\nres\n)\n \n{\n\n      \nconsole\n.\nlog\n(\nShare link response: \n \n+\n \nJSON\n.\nstringify\n(\nres\n));\n\n    \n});\n\n\n\n\n\n    \nbranchUniversalObject\n.\nshareChannelSelected\n(\nfunction\n \n(\nres\n)\n \n{\n\n      \nconsole\n.\nlog\n(\nChannel selected: \n \n+\n \nJSON\n.\nstringify\n(\nres\n));\n\n    \n});\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRefer to \n$.onInitSessionFinished()\n in \nInitialize Branch\n\n\n\n\n\n\nReturns \ndeep link properties\n\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\n    \nbranchUniversalObject\n.\nregisterView\n();\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n    \nvar\n \nuserId\n \n=\n \n123456\n;\n\n    \nbranch\n.\nsetIdentity\n(\nuserId\n);\n\n\n\n\n\n\n\n\n\nRemoves the identity of a user\n\n\n    \nbranch\n.\nlogout\n();\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\n    \nvar\n \neventName\n \n=\n \nclicked_on_this\n;\n\n    \nbranch\n.\nuserCompletedAction\n(\neventName\n);\n\n\n\n\n\n\n\n\n\nHandle referral\n\n\n\n\n\n\nReferral points are obtained from referral rules on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits\n\n\n\n\nReferral guide\n\n\n\n\n\n\n\n\nRedeem credits\n\n\n\n\n\n\n    \nint\n \nvalue\n \n=\n \n10\n;\n\n    \nbranch\n.\nredeemRewards\n(\nvalue\n);\n\n\n\n\n\n\n\nLoad credits\n\n\n\n\n    \nvar\n \nbucket\n \n=\n \nthis_bucket\n\n    \nbranch\n.\nloadRewards\n(\nbucket\n);\n\n\n\n\n\n    \nbranch\n.\nloadRewards\n();\n\n\n\n\n\nTo implement the callback, you must add a listener to the event bio:loadRewards. The event returns a dictionary object containing the balance.\n\n\n\n\n\n\nLoad history\n\n\nbranch.getCreditHistory();\n\n\nImplement the callback, by adding a listener to the event bio:getCreditHistory.\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nSample app\n\n\n\n\nBranch testbed app", 
            "title": "Titanium"
        }, 
        {
            "location": "/pages/apps/titanium/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/titanium/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/titanium/#configure-app", 
            "text": "iOS    Add your Branch key and register a URI scheme   In your project\u2019s tiapp.xml file, insert the snippet below. Change yourapp to the URI scheme you\u2019ve selected.     ios \n      plist \n        dict \n          !-- Add branch key as key-value pair -- \n          key branch_key /key \n          string key_live_xxxxxxxxxxxxxxx /string \n          !-- Add unique string for direct deep links -- \n          key CFBundleURLTypes /key \n          array \n            dict \n              key CFBundleURLSchemes /key \n              array \n                string yourapp /string \n              /array \n            /dict \n          /array \n          !-- Add domains to support Universal Links -- \n          key com.apple.developer.associated-domains /key \n          array \n              string applinks:xxxx.app.link /string \n              string applinks:xxxx-alternate.app.link /string \n              string applinks:xxxx.test-app.link /string \n              string applinks:xxxx-alternate.test-app.link /string \n          /array \n          !-- Required step for Universal Links on cold start -- \n          key NSUserActivityTypes /key \n          array \n            string io.branch.testbed.universalLink /string \n          /array \n        /dict \n      /plist \n    /ios       Android    Add your Branch Key and register a URI Scheme    Open your tiapp.xml and add the following   tag:      application \n         !-- Other existing entries -- \n         meta-data   android:name= io.branch.sdk.BranchKey   android:value= key_live_xxxxxxxxxxxxxxx   / \n     /application     Within your Deep Link Activity's definition, insert the intent filter provided below. Change yourapp under android:scheme to the URI scheme you\u2019ve selected.         intent-filter \n       data   android:scheme= yourapp   android:host= open   / \n       action   android:name= android.intent.action.VIEW   / \n       category   android:name= android.intent.category.DEFAULT   / \n       category   android:name= android.intent.category.BROWSABLE   / \n     /intent-filter", 
            "title": "Configure App"
        }, 
        {
            "location": "/pages/apps/titanium/#initialize-branch", 
            "text": "Initialize the SDK by inserting the following snippet into your index.js file:  $ . initialize   =   function ( params )   { \n        $.window.open() ; \n\n        $.initializeViews() ; \n        $.initializeHandlers() ; \n\n        Ti.API.info( start   initSession ) ; \n        branch.initSession() ; \n        branch.addEventListener( bio : initSession , $.onInitSessionFinished);         if (OS_ANDROID) {             Ti.Android.currentActivity.addEventListener( newintent , function(e) {                 Ti.API.info( inside   newintent :    + e);                 $.window.open();                 branch.initSession();             });         }         if (OS_IOS) { // Don t forget this condition.            var activity = Ti.App.iOS.createUserActivity({                activityType: io.branch.testbed.universalLink            });            activity.becomeCurrent();            Ti.App.iOS.addEventListener( continueactivity , function(e) {                if (e.activityType ===  io.branch.testbed.universalLink ) {                    branch.continueUserActivity(e.activityType, e.webpageURL, e.userInfo);                }            });        }     };     $.onInitSessionFinished = function(data) {         Ti.API.info( inside   onInitSessionFinished );         for (key in data) {             if ((key !=  type    key !=  source    key !=  bubbles    key !=  cancelBubble )     data [ key ]   !=   null )   { \n                Ti . API . info ( key   +   data [ key ] ); \n            } \n        } \n    }", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/titanium/#test-deep-link-ios", 
            "text": "Create a deep link from the  Branch Marketing Dashboard    Delete your app from the device    Compile your app    Paste deep link in  Apple Notes    Long press on the deep link  (not 3D Touch)    Click  Open in \"APP_NAME\"  to open your app  ( example )", 
            "title": "Test deep link iOS"
        }, 
        {
            "location": "/pages/apps/titanium/#test-deep-link-android", 
            "text": "Create a deep link from the  Branch Dashboard    Delete your app from the device    Compile your app    Paste deep link in  Google Hangouts    Click on the deep link to open your app", 
            "title": "Test deep link Android"
        }, 
        {
            "location": "/pages/apps/titanium/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/titanium/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share    Uses the Universal Object Properties listed below:     Key  Type  Meaning      canonicalIdentifier  string  The identifier of the object    title  string  The title of the object    contentDescription  string  The short description of the object    contentImageUrl  string  URL of the image used by the object    contentIndexingMode  string  Indexing mode of the object. Set as \"private\" or \"public\".    contentMetadata  dictionary  Custom keys and values as metadata of the object          var   branchUniversalObject   =   branch . createBranchUniversalObject ({ \n         canonicalIdentifier   :   content/12345 , \n         title   :   My Content Title , \n         contentDescription   :   My Content Description , \n         contentImageUrl   :   https://example.com/mycontent-12345.png , \n         contentIndexingMode   :   public , \n         contentMetadata   :   { \n             product_picture   :   12345 , \n             user_id   :   6789 \n         }, \n     });", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/titanium/#create-deep-link", 
            "text": "Creates a deep link URL with encapsulated data    Needs a  Branch Universal Object    Uses  Deep Link Properties    Validate with the  Branch Dashboard         branchUniversalObject . generateShortUrl ({ \n       feature   :   sample-feature , \n       channel   :   sample-channel , \n       stage   :   sample-stage \n     },   { \n       $desktop_url   :   http://desktop-url.com , \n     },   function   ( res )   { \n         Ti . API . info ( Completed link generation ); \n         Ti . API . info ( res ); \n     });    The event listener bio:generateShortUrl returns a string object containing the generated link:      branchUniversalObject . addEventListener ( bio:generateShortUrl ,   $ . onGenerateUrlFinished );", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/titanium/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Needs a  Branch Universal Object    Uses  Deep Link Properties         branchUniversalObject . showShareSheet ({ \n       feature   :   sample-feature , \n       channel   :   sample-channel , \n       stage   :   sample-stage , \n     },   { \n       $desktop_url   :   http://desktop-url.com , \n     });    Android only (Callbacks in iOS are ignored. There is no need to implement them as the events are handled by UIActivityViewController)        branchUniversalObject . shareLinkDialogLaunched ( function   ()   { \n       console . log ( Share sheet launched ); \n     });        branchUniversalObject . shareLinkDialogDismissed ( function   ()   { \n      console . log ( Share sheet dimissed ); \n    });        branchUniversalObject . shareLinkResponse ( function   ( res )   { \n       console . log ( Share link response:    +   JSON . stringify ( res )); \n     });        branchUniversalObject . shareChannelSelected ( function   ( res )   { \n       console . log ( Channel selected:    +   JSON . stringify ( res )); \n     });", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/titanium/#read-deep-link", 
            "text": "Refer to  $.onInitSessionFinished()  in  Initialize Branch    Returns  deep link properties", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/titanium/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Branch Universal Object    Validate with the  Branch Dashboard         branchUniversalObject . registerView ();", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/titanium/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    Validate with the  Branch Dashboard       var   userId   =   123456 ; \n     branch . setIdentity ( userId );     Removes the identity of a user       branch . logout ();", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/titanium/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard         var   eventName   =   clicked_on_this ; \n     branch . userCompletedAction ( eventName );", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/titanium/#handle-referral", 
            "text": "Referral points are obtained from referral rules on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits   Referral guide     Redeem credits         int   value   =   10 ; \n     branch . redeemRewards ( value );    Load credits        var   bucket   =   this_bucket \n     branch . loadRewards ( bucket );        branch . loadRewards ();   To implement the callback, you must add a listener to the event bio:loadRewards. The event returns a dictionary object containing the balance.    Load history  branch.getCreditHistory();  Implement the callback, by adding a listener to the event bio:getCreditHistory.", 
            "title": "Handle referral"
        }, 
        {
            "location": "/pages/apps/titanium/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/titanium/#sample-app", 
            "text": "Branch testbed app", 
            "title": "Sample app"
        }, 
        {
            "location": "/pages/apps/react-native/", 
            "text": "Integrate Branch\n\n\n\n\nInconsistent Universal links behavior on iOS 11.2\n\n\nAfter updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set \nforced uri redirect mode\n on your Branch links to open the app with URI schemes. View details of the issue on the \nApple Bug report\n.\n\n\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall Branch\n\n\n\n\n\n\nOption 1: Pure React Native App\n\n\n\n\n\n\nInstall the module\n\n\n\n\n\n\nYarn\n\n    \nyarn add react-native-branch\n\n\n\n\n\n\n\nNPM\n\n    \nnpm install --save react-native-branch\n\n\n\n\n\n\n\n\n\n\n\n(Optional) Add a branch.json file to the root of your app (next to package.json).\n    You can configure the contents at any time, but it must be present when you\n    run \nreact-native link\n in order to be automatically included in your native\n    projects. This allows you to configure certain behaviors that otherwise require\n    native code changes. See \nhttps://rnbranch.app.link/branch-json\n for full details\n    on the branch.json file.\n\n\n\n\n\n\nRun \nreact-native link react-native-branch\n\n\n\n\n\n\n\n\n\n\nOption 2: Native iOS app with React pod\n\n\n\n\n\n\nAdd these lines to your \nPodfile\n\n\npod\n \nreact-native-branch\n,\n \npath\n:\n \n../node_modules/react-native-branch\n\n\npod\n \nBranch-SDK\n,\n \npath\n:\n \n../node_modules/react-native-branch/ios\n\n\n\n\n\n\n\n\n\nRun \npod install\n to regenerate the \nPods\n project with the new dependencies. Note that the location of \nnode_modules\n relative to your \nPodfile\n may vary.\n\n\n\n\n\n\n(Optional) Add a branch.json file to the root of your app (next to package.json). See \nhttps://rnbranch.app.link/branch-json\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpdate from \n 2.0.0\n\n\n\n\n\n\nIf also upgrading React Native, use \nreact-native-git-upgrade\n to upgrade\n    your React Native app to the latest version of React Native, if possible.\n\n\nnpm install -g react-native-git-upgrade\n\ncd\n /path/to/myapp\nreact-native-git-upgrade\n\n\n\n\n\n\n\n\nVersion 2.x includes the native SDKs in the NPM module. Please remove any installation\n    of the native Branch SDK from Maven, CocoaPods, Carthage or by manually adding the framework (iOS).\n\n\n\n\n\n\nAndroid:\n\n\n\n\n\n\nIn \nandroid/app/build.gradle\n:\n\n\n\n\n\n\nRemove\n\n\n\n\n\n\ncompile \nio.branch.sdk.android:library:2.+\n\n\n\n\n\n\n\n\n\niOS\n\n\n\n\n\n\nRemove the Branch SDK depending on how you originally installed it.\n\n\n\n\n\n\nOriginally installed using CocoaPods:\n\n\n\n\n\n\nRemove \npod \"Branch\"\n from your \nPodfile\n.\n\n\n\n\n\n\nIf using the \nReact\n pod from \nnode_modules\n, add \npod \"Branch-SDK\", path: \"../node_modules/react-native-branch/ios\"\n. (Note the different pod name.)\n\n\npod\n \nreact-native-branch\n,\n \npath\n:\n \n../node_modules/react-native-branch\n\n\npod\n \nBranch-SDK\n,\n \npath\n:\n \n../node_modules/react-native-branch/ios\n\n\n\n\n\n\n\n\n\npod install\n\n\n\n\n\n\nTo remove CocoaPods entirely from your project, in case you were only using it for Branch:\n\n\npod deintegrate\n\n\n\n\n\n\n\n\n\n\n\n\nOriginally installed using Carthage:\n\n\n\n\n\n\nRemove the \nBranch.framework\n from your project's dependencies.\n\n\n\n\n\n\nRemove \nBranch.framework\n from the input and output paths of your \ncarthage copy-frameworks\n build phase.\n\n\n\n\n\n\n\n\n\n\nOriginally installed manually:\n\n\n\n\nRemove the \nBranch.framework\n from your project's dependencies.\n\n\n\n\n\n\n\n\nIf also updating from react-native \n 0.40 (react-native-branch 0.9), replace \n#import \"RNBranch.h\"\n with:\n\n\n#import \nReact/RCTRootView.h\n\n\n#import \nreact-native-branch/RNBranch.h\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\niOS\n\n\n\n\n\n\nConfigure bundle identifier\n\n\n\n\n\n\nBundle Id matches \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure associated domains\n\n\n\n\nAdd your link domains from your \nBranch Dashboard\n\n\n-alternate\n is needed for Universal Linking with the \nWeb SDK\n inside your Website\n\n\ntest-\n is needed if you need use a \ntest key\n\n\n\n\nIf you use a \ncustom link domain\n, you will need to include your old link domain, your \n-alternate\n link domain, and your new link domain\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure entitlements\n\n\n\n\n\n\nConfirm entitlements are within target\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure info.pList\n\n\n\n\n\n\nAdd \nBranch Dashboard\n values\n\n\n\n\nAdd \nbranch_app_domain\n with your live key domain\n\n\nAdd \nbranch_key\n with your current Branch key\n\n\nAdd your URI scheme as \nURL Types\n -\n \nItem 0\n -\n \nURL Schemes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfirm app prefix\n\n\n\n\n\n\nFrom your \nApple Developer Account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nAndroidManifest.xml\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nmanifest\n \nxmlns:android=\nhttp://schemas.android.com/apk/res/android\n\n    \npackage=\ncom.eneff.branchandroid\n\n\n    \nuses-permission\n \nandroid:name=\nandroid.permission.INTERNET\n \n/\n\n\n    \napplication\n\n        \nandroid:allowBackup=\ntrue\n\n\n        \nandroid:name=\ncom.eneff.branchandroid.CustomApplicationClass\n\n\n        \nandroid:icon=\n@mipmap/ic_launcher\n\n        \nandroid:label=\n@string/app_name\n\n        \nandroid:supportsRtl=\ntrue\n\n        \nandroid:theme=\n@style/AppTheme\n\n\n        \nactivity\n\n            \nandroid:name=\n.MainActivity\n\n\n            \nandroid:launchMode=\nsingleTask\n\n\n            \nandroid:label=\n@string/app_name\n\n            \nandroid:theme=\n@style/AppTheme.NoActionBar\n\n\n            \nintent-filter\n\n                \naction\n \nandroid:name=\nandroid.intent.action.MAIN\n \n/\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.LAUNCHER\n \n/\n\n            \n/intent-filter\n\n\n\n            \n!-- Branch URI Scheme --\n\n\n            \nintent-filter\n\n\n                \ndata\n \nandroid:scheme=\nbranchandroid\n \n/\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n            \n/intent-filter\n\n\n\n\n            \n!-- Branch App Links (optional) --\n\n\n            \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n\n                \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n\n                \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n\n                \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nuobg.app.link\n \n/\n\n\n            \n/intent-filter\n\n\n        \n/activity\n\n\n\n        \n!-- Branch init --\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey\n \nandroid:value=\nkey_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa\n \n/\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey.test\n \nandroid:value=\nkey_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa\n \n/\n\n\n        \nmeta-data\n \nandroid:name=\nio.branch.sdk.TestMode\n \nandroid:value=\nfalse\n \n/\n\n\n\n\n        \n!-- Branch install referrer tracking (optional) --\n\n\n        \nreceiver\n \nandroid:name=\nio.branch.referral.InstallListener\n \nandroid:exported=\ntrue\n\n\n            \nintent-filter\n\n\n                \naction\n \nandroid:name=\ncom.android.vending.INSTALL_REFERRER\n \n/\n\n\n            \n/intent-filter\n\n\n        \n/receiver\n\n\n\n    \n/application\n\n\n\n/manifest\n\n\n\n\n\n\n\n\n\nReplace the following with values from your \nBranch Dashboard\n\n\n\n\nbranchandroid\n\n\nuobg.app.link\n\n\nkey_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa\n\n\nkey_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa\n\n\n\n\n\n\n\n\n\n\n\n\nandroid/app/proguard-rules.pro\n\n      \n-dontwarn io.branch.**\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\niOS\n\n\nIf you are using Swift, add \n#import \nreact-native-branch/RNBranch.h\n to your Bridging header if you have one.\n\n\nIf you are using the \nReact\n pod in a native app with \nuse_frameworks!\n, you may simply use a Swift import in the AppDelegate.swift: \nimport react_native_branch\n.\n\n\n\n\n\n\nSwift 3 \n 4- AppDelegate.swift\n\n\n// Initialize the Branch Session at the top of existing application:didFinishLaunchingWithOptions:\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidFinishLaunchingWithOptions\n:\n \n[\nUIApplicationLaunchOptionsKey\n:\n \nAny\n]?)\n \n-\n \nBool\n \n{\n\n\n  \n// Uncomment this line to use the test key instead of the live one.\n\n\n  \n// RNBranch.useTestInstance()\n\n\n  \nRNBranch\n.\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n,\n \nisReferrable\n:\n \ntrue\n)\n \n// \n-- add this\n\n\n\n  \n//...\n\n\n}\n\n\n\n// Add the openURL and continueUserActivity functions\n\n\nfunc\n \napplication\n(\n_\n \napp\n:\n \nUIApplication\n,\n \nopen\n \nurl\n:\n \nURL\n,\n \noptions\n:\n \n[\nUIApplicationOpenURLOptionsKey\n \n:\n \nAny\n]\n \n=\n \n[:])\n \n-\n \nBool\n \n{\n\n\n  \nreturn\n \nRNBranch\n.\nbranch\n.\napplication\n(\napp\n,\n \nopen\n:\n \nurl\n,\n \noptions\n:\n \noptions\n)\n\n\n}\n\n\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ncontinue\n \nuserActivity\n:\n \nNSUserActivity\n,\n \nrestorationHandler\n:\n \n@\nescaping\n \n([\nAny\n]?)\n \n-\n \nVoid\n)\n \n-\n \nBool\n \n{\n\n\n  \nreturn\n \nRNBranch\n.\ncontinue\n(\nuserActivity\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C - AppDelegate.m\n\n\n#import \nreact-native-branch/RNBranch.h\n \n// at the top\n\n\n\n\n// Initialize the Branch Session at the top of existing application:didFinishLaunchingWithOptions:\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidFinishLaunchingWithOptions:\n(\nNSDictionary\n \n*\n)\nlaunchOptions\n\n\n{\n\n\n    \n// Uncomment this line to use the test key instead of the live one.\n\n\n    \n// [RNBranch useTestInstance]\n\n\n    \n[\nRNBranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nisReferrable\n:\nYES\n];\n \n// \n-- add this\n\n\n    \nNSURL\n \n*\njsCodeLocation\n;\n\n    \n//...\n\n\n}\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \nopenURL:\n(\nNSURL\n \n*\n)\nurl\n \nsourceApplication:\n(\nNSString\n \n*\n)\nsourceApplication\n \nannotation:\n(\nid\n)\nannotation\n \n{\n\n\n    \nif\n \n(\n!\n[\nRNBranch\n.\nbranch\n \napplication\n:\napplication\n \nopenURL\n:\nurl\n \nsourceApplication\n:\nsourceApplication\n \nannotation\n:\nannotation\n])\n \n{\n\n\n        \n// do other deep link routing for the Facebook SDK, Pinterest SDK, etc\n\n\n    \n}\n\n\n    \nreturn\n \nYES\n;\n\n\n}\n\n\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ncontinueUserActivity:\n(\nNSUserActivity\n \n*\n)\nuserActivity\n \nrestorationHandler:\n(\nvoid\n \n(\n^\n)(\nNSArray\n \n*\nrestorableObjects\n))\nrestorationHandler\n \n{\n\n\n    \nreturn\n \n[\nRNBranch\n \ncontinueUserActivity\n:\nuserActivity\n];\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nMainApplication.java\n\n\n// ...\n\n\n\n// import Branch and RNBranch\n\n\nimport\n \nio.branch.rnbranch.RNBranchPackage\n;\n\n\nimport\n \nio.branch.referral.Branch\n;\n\n\n\n\n//...\n\n\n\n// add RNBranchPackage to react-native package list\n\n\n@Override\n\n  \nprotected\n \nList\nReactPackage\n \ngetPackages\n()\n \n{\n\n    \nreturn\n \nArrays\n.\nReactPackage\nasList\n(\n\n            \nnew\n \nMainReactPackage\n(),\n\n\n            \nnew\n \nRNBranchPackage\n(),\n \n// \n-- add this\n\n\n\n\n// ...\n\n\n\n// add onCreate() override\n\n\n@Override\n\n\npublic\n \nvoid\n \nonCreate\n()\n \n{\n\n  \nsuper\n.\nonCreate\n();\n\n\n  \nBranch\n.\ngetAutoInstance\n(\nthis\n);\n\n\n}\n\n\n\n\n\n\n\n\n\nMainActivity.java\n\n\nimport\n \nio.branch.rnbranch.*\n;\n \n// \n-- add this\n\n\nimport\n \nandroid.content.Intent\n;\n \n// \n-- and this\n\n\n\n\npublic\n \nclass\n \nMainActivity\n \nextends\n \nReactActivity\n \n{\n\n\n      \n@Override\n\n      \nprotected\n \nString\n \ngetMainComponentName\n()\n \n{\n\n          \nreturn\n \nbase\n;\n\n      \n}\n\n\n      \n// Override onStart, onNewIntent:\n\n      \n@Override\n\n      \nprotected\n \nvoid\n \nonStart\n()\n \n{\n\n          \nsuper\n.\nonStart\n();\n\n\n          \nRNBranchModule\n.\ninitSession\n(\ngetIntent\n().\ngetData\n(),\n \nthis\n);\n\n\n      \n}\n\n\n\n      \n@Override\n\n\n      \npublic\n \nvoid\n \nonNewIntent\n(\nIntent\n \nintent\n)\n \n{\n\n\n          \nsetIntent\n(\nintent\n);\n\n\n      \n}\n\n\n      \n// ...\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link iOS\n\n\n\n\n\n\nCreate a deep link from the \nBranch Marketing Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app with Xcode\n\n\n\n\n\n\nPaste deep link in \nApple Notes\n\n\n\n\n\n\nLong press on the deep link \n(not 3D Touch)\n\n\n\n\n\n\nClick \nOpen in \"APP_NAME\"\n to open your app \n(\nexample\n)\n\n\n\n\n\n\n\n\n\n\nTest deep link Android\n\n\n\n\n\n\nCreate a deep link from the \nBranch Marketing Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app with Android Studio\n\n\n\n\n\n\nPaste deep link in \nGoogle Hangouts\n\n\n\n\n\n\nClick on the deep link to open your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nImport Branch\n\n\n\n\n\n\nIn any React Native source file that uses the Branch SDK.\n\n\nimport\n \nbranch\n,\n \n{\n \nBranchEvent\n \n}\n \nfrom\n \nreact-native-branch\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share (content or user)\n\n\n\n\n\n\nUses the \nUniversal Object Properties\n\n\n\n\n\n\n// only canonicalIdentifier is required\n\n\nlet\n \nbranchUniversalObject\n \n=\n \nawait\n \nbranch\n.\ncreateBranchUniversalObject\n(\ncanonicalIdentifier\n,\n \n{\n\n  \nlocallyIndex\n:\n \ntrue\n,\n\n  \ntitle\n:\n \nCool Content!\n,\n\n  \ncontentDescription\n:\n \nCool Content Description\n}),\n\n  \ncontentMetadata\n:\n \n{\n\n    \nratingAverage\n:\n \n4.2\n,\n\n    \ncustomMetadata\n:\n \n{\n\n      \nprop1\n:\n \ntest\n,\n\n      \nprop2\n:\n \nabc\n\n    \n}\n\n  \n}\n\n\n})\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nCreates a deep link URL with encapsulated data\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nlet\n \nlinkProperties\n \n=\n \n{\n\n    \nfeature\n:\n \nshare\n,\n\n    \nchannel\n:\n \nfacebook\n\n\n}\n\n\n\nlet\n \ncontrolParams\n \n=\n \n{\n\n     \n$desktop_url\n:\n \nhttp://desktop-url.com/monster/12345\n\n\n}\n\n\n\nlet\n \n{\nurl\n}\n \n=\n \nawait\n \nbranchUniversalObject\n.\ngenerateShortUrl\n(\nlinkProperties\n,\n \ncontrolParams\n)\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nlet\n \nshareOptions\n \n=\n \n{\n \nmessageHeader\n:\n \nCheck this out\n,\n \nmessageBody\n:\n \nNo really, check this out!\n \n}\n\n\nlet\n \nlinkProperties\n \n=\n \n{\n \nfeature\n:\n \nshare\n,\n \nchannel\n:\n \nRNApp\n \n}\n\n\nlet\n \ncontrolParams\n \n=\n \n{\n \n$desktop_url\n:\n \nhttp://example.com/home\n,\n \n$ios_url\n:\n \nhttp://example.com/ios\n \n}\n\n\nlet\n \n{\nchannel\n,\n \ncompleted\n,\n \nerror\n}\n \n=\n \nawait\n \nbranchUniversalObject\n.\nshowShareSheet\n(\nshareOptions\n,\n \nlinkProperties\n,\n \ncontrolParams\n)\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nReturns \ndeep link properties\n\n\n\n\n\n\nListener\n\n\n\n\n\n\nbranch\n.\nsubscribe\n(({\n \nerror\n,\n \nparams\n \n})\n \n=\n \n{\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \nconsole\n.\nerror\n(\nError from Branch: \n \n+\n \nerror\n)\n\n    \nreturn\n\n  \n}\n\n\n  \n// params will never be null if error is null\n\n\n})\n\n\n\nlet\n \nlastParams\n \n=\n \nawait\n \nbranch\n.\ngetLatestReferringParams\n()\n \n// params from last open\n\n\nlet\n \ninstallParams\n \n=\n \nawait\n \nbranch\n.\ngetFirstReferringParams\n()\n \n// params from original install\n\n\n\n\n\n\n\n\n\nNavigate to content\n\n\nbranch\n.\nsubscribe\n(({\n \nerror\n,\n \nparams\n \n})\n \n=\n \n{\n\n  \nif\n \n(\nerror\n)\n \n{\n\n    \nconsole\n.\nerror\n(\nError from Branch: \n \n+\n \nerror\n)\n\n    \nreturn\n\n  \n}\n\n\n  \n// params will never be null if error is null\n\n\n  \nif\n \n(\nparams\n[\n+non_branch_link\n])\n \n{\n\n    \nconst\n \nnonBranchUrl\n \n=\n \nparams\n[\n+non_branch_link\n]\n\n    \n// Route non-Branch URL if appropriate.\n\n    \nreturn\n\n  \n}\n\n\n  \nif\n \n(\n!\nparams\n[\n+clicked_branch_link\n])\n \n{\n\n    \n// Indicates initialization success and some other conditions.\n\n    \n// No link was opened.\n\n    \nreturn\n\n  \n}\n\n\n  \n// A Branch link was opened.\n\n  \n// Route link based on data in params, e.g.\n\n\n  \n// Get title and url for route\n\n  \nconst\n \ntitle\n \n=\n \nparams\n.\n$og_title\n\n  \nconst\n \nurl\n \n=\n \nparams\n.\n$canonical_url\n\n  \nconst\n \nimage\n \n=\n \nparams\n.\n$og_image_url\n\n\n  \n// Now push the view for this URL\n\n  \nthis\n.\nnavigator\n.\npush\n({\n \ntitle\n:\n \ntitle\n,\n \nurl\n:\n \nurl\n,\n \nimage\n:\n \nimage\n \n})\n\n\n})\n\n\n\n\n\n\n\n\n\nAdjust cached link TTL\n\n\n\n\n\n\nAny link that launched the app is cached by the native layers and returned\n    to the \nbranch.subscribe\n listener after JavaScript finishes loading.\n\n\n\n\n\n\nBy default, the initial link is cached for 5 seconds. This allows you to\n    unsubscribe and resubscribe later without receiving the initial link.\n\n\n\n\n\n\nIf your app takes longer than this to load, you can adjust the TTL for\n    the initial link by adjusting \nbranch.initSessionTtl\n to a value in\n    milliseconds.\n\n\n\n\n\n\nbranch\n.\ninitSessionTtl\n \n=\n \n10000\n \n// Set to 10 seconds\n\n\nbranch\n.\nsubscribe\n({\n \nerror\n,\n \nparams\n \n}\n \n=\n \n{\n\n  \n// ...\n\n\n})\n\n\n\n\n\n\n\n\n\nDisplay content\n\n\n\n\n\n\nList content on iOS Spotlight\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nListing on Spotlight requires adding \nCoreSpotlight.framework\n to your Xcode project.\n\n\n\n\n\n\nimport\n \nbranch\n,\n \n{\n \nBranchEvent\n \n}\n \nfrom\n \nreact-native-branch\n\n\nlet\n \nbranchUniversalObject\n \n=\n \nawait\n \nbranch\n.\ncreateBranchUniversalObject\n(\ncanonicalIdentifier\n,\n \n{\n\n  \nlocallyIndex\n:\n \ntrue\n,\n\n  \n// other properties\n\n\n})\n\n\n\nbranchUniversalObject\n.\nlogEvent\n(\nBranchEvent\n.\nViewItem\n)\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nTrack how many times a piece of content is viewed\n\n\n\n\n\n\nNeeds a \nBranch Universal Object\n\n\n\n\n\n\nUses \nTrack content properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nimport\n \n{\n \nBranchEvent\n \n}\n \nfrom\n \nreact-native-branch\n\n\nbranchUniversalObject\n.\nlogEvent\n(\nBranchEvent\n.\nViewItem\n)\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nbranch\n.\nsetIdentity\n(\ntheUserId\n)\n\n\nbranch\n.\nlogout\n()\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nTrack standard and custom events\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\n63\n max event name length\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nimport\n \n{\n \nBranchEvent\n \n}\n \nfrom\n \nreact-native-branch\n\n\n\n// Associate one or more content items with an event\n\n\nnew\n \nBranchEvent\n(\nBranchEvent\n.\nViewItems\n,\n \n[\nbuo1\n,\n \nbuo2\n]).\nlogEvent\n()\n\n\n\n// Log a standard event with parameters\n\n\nnew\n \nBranchEvent\n(\nBranchEvent\n.\nPurchase\n,\n \nbuo\n,\n \n{\n\n  \nrevenue\n:\n \n20\n,\n\n  \nshipping\n:\n \n2\n,\n\n  \ntax\n:\n \n1.6\n,\n\n  \ncurrency\n:\n \nUSD\n\n\n}).\nlogEvent\n()\n\n\n\n// Set parameters after initialization\n\n\nlet\n \nevent\n \n=\n \nnew\n \nBranchEvent\n(\nBranchEvent\n.\nSearch\n)\n\n\nevent\n.\nsearchQuery\n \n=\n \ntennis rackets\n\n\nevent\n.\nlogEvent\n()\n\n\n\n// Log a custom event\n\n\nnew\n \nBranchEvent\n(\nUserScannedItem\n,\n \nbuo\n).\nlogEvent\n()\n\n\n\n\n\n\n\nWhen logging an event with a single Branch Universal Object, use the\n    convenient logEvent method\n\n\n\n\nbuo\n.\nlogEvent\n(\nBranchEvent\n.\nViewItem\n)\n\n\nbuo\n.\nlogEvent\n(\nBranchEvent\n.\nPurchase\n,\n \n{\n \nrevenue\n:\n \n20\n \n})\n\n\n\n\n\n\n\n\n\nStandard events\n\n\n\n\n\n\n\n\n\n\n\n\nEvent constant\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBranchEvent.AddToCart\n\n\nStandard Add to Cart event\n\n\n\n\n\n\nBranchEvent.AddToWishlist\n\n\nStandard Add to Wishlist event\n\n\n\n\n\n\nBranchEvent.ViewCart\n\n\nStandard View Cart event\n\n\n\n\n\n\nBranchEvent.InitiatePurchase\n\n\nStandard Initiate Purchase event\n\n\n\n\n\n\nBranchEvent.AddPaymentInfo\n\n\nStandard Add Payment Info event\n\n\n\n\n\n\nBranchEvent.Purchase\n\n\nStandard Purchase event\n\n\n\n\n\n\nBranchEvent.SpendCredits\n\n\nStandard Spend Credits event\n\n\n\n\n\n\nBranchEvent.Search\n\n\nStandard Search event\n\n\n\n\n\n\nBranchEvent.ViewItem\n\n\nStandard View Item event for a single Branch Universal Object\n\n\n\n\n\n\nBranchEvent.ViewItems\n\n\nStandard View Items event for multiple Branch Universal Objects\n\n\n\n\n\n\nBranchEvent.Rate\n\n\nStandard Rate event\n\n\n\n\n\n\nBranchEvent.Share\n\n\nStandard Share event\n\n\n\n\n\n\nBranchEvent.CompleteRegistration\n\n\nStandard Complete Registration event\n\n\n\n\n\n\nBranchEvent.CompleteTutorial\n\n\nStandard Complete Tutorial event\n\n\n\n\n\n\nBranchEvent.AchieveLevel\n\n\nStandard Achieve Level event\n\n\n\n\n\n\nBranchEvent.AchievementUnlocked\n\n\nStandard Unlock Achievement event\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral points are obtained from referral rules on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits\n\n\n\n\nReferral guide\n\n\n\n\n\n\n\n\nRedeem rewards\n\n\nlet\n \nredeemResult\n \n=\n \nawait\n \nbranch\n.\nredeemRewards\n(\namount\n,\n \nbucket\n)\n\n\n\n\n\n\n\n\n\nLoad rewards\n\n\nlet\n \nrewards\n \n=\n \nawait\n \nbranch\n.\nloadRewards\n()\n\n\n\n\n\n\n\n\n\nLoad history\n\n\nlet\n \ncreditHistory\n \n=\n \nawait\n \nbranch\n.\ngetCreditHistory\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle links in your own app\n\n\n\n\n\n\nAllows you to deep link into your own from your app itself\n\n\nbranch\n.\nopenURL\n(\nhttps://example.app.link/u3fzDwyyjF\n)\n\n\nbranch\n.\nopenURL\n(\nhttps://example.app.link/u3fzDwyyjF\n,\n \n{\nnewActivity\n:\n \ntrue\n})\n \n// Finish the Android current activity before opening the link. Results in a new activity window. Ignored on iOS.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIf you aren't using the \nnewActivity\n option, it is necessary to move the call to the \nRNBranch.initSession method\n to the main activity's \nonResume\n method instead of \nonStart\n.\n\n\n\n\n\n\nWarning\n\n\nHandling a new deep link in your app will clear the current session data and a new referred \"open\" will be attributed.\n\n\n\n\n\n\n\n\nHandle push notifications\n\n\n\n\n\n\nAllows you to track Branch deep links in your push notifications\n\n\n\n\n\n\nUse \nopenURL\n to handle the deep links\n\n\n\n\n\n\n\n\n\n\nTrack Apple Search Ads\n\n\n\n\n\n\nAllows Branch to track Apple Search Ads deep linking analytics\n\n\n\n\n\n\nAnalytics from Apple's API have been slow which will make our analytics lower. Additionally, Apple's API does not send us all the data of an ad every time which will make ads tracked by us to show a generic campaign sometimes.\n\n\n\n\n\n\nThis requires an option to be set before the native SDK initializes, which\n    happens before JS finishes loading. There are two options:\n\n\n\n\n\n\nAdd \n\"delayInitToCheckForSearchAds\": true\n to your \nbranch.json\n file:\n\n\n{\n\n    \ndelayInitToCheckForSearchAds\n:\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\n\nModify your AppDelegate in Xcode. Insert the following before the call\n    to \n[RNBranch initSessionWithLaunchOptions:isReferrable:]\n.\n\n\n\n\n\n\nSwift 3 \n 4\n\n\nBranch\n.\ngetInstance\n().\ndelayInitToCheckForSearchAds\n()\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n[[\nBranch\n \ngetInstance\n]\n \ndelayInitToCheckForSearchAds\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest with fake campaign params (do not test in production)\n\n\n\n\n\n\nAdd \n\"appleSearchAdsDebugMode\": true\n to \nbranch.debug.json\n. Do\n    not set this parameter in \nbranch.json\n, or it will be enabled in\n    release builds.\n\n\n{\n\n    \ndelayInitToCheckForSearchAds\n:\n \ntrue\n,\n\n    \nappleSearchAdsDebugMode\n:\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\n\nAdd the following call to your AppDelegate (before the \ninitSession\n) call.\n    Use conditional compilation or remove before releasing to production.\n\n\n\n\n\n\nSwift 3 \n 4\n\n\n#if\n \nDEBUG\n\n    \nBranch\n.\ngetInstance\n().\nsetAppleSearchAdsDebugMode\n()\n\n\n#endif\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n#ifdef DEBUG\n\n    \n[[\nBranch\n \ngetInstance\n]\n \nsetAppleSearchAdsDebugMode\n];\n\n\n#endif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnable 100% matching\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nUses \nChrome Tabs\n to increase attribute matching success\n\n\n\n\n\n\nAdd \ncompile 'com.android.support:customtabs:23.3.0'\n to your \nbuild.gradle\n\n\n\n\n\n\n\n\n\n\niOS\n\n\n\n\n\n\nUse the \nSFSafariViewController\n to increase the attribution matching success\n\n\n\n\n\n\nThe 100% match is a bit of a misnomer, as it is only 100% match from when a user clicks from the Safari browser. According to our analysis, clicking through Safari happens about 50-75% of the time depending on the use case. For example, clicking from Facebook, Gmail or Chrome won\u2019t trigger a 100% match here. However, it\u2019s still beneficial to the matching accuracy, so we recommend employing it.\n\n\n\n\n\n\nWhen using a custom domain, add a \nbranch_app_domain\n string key in your Info.plist with your custom domain\nto enable 100% matching.\n\n\n\n\n\n\nBy default, cookie-based matching is enabled on iOS 9 and 10 if the \nSafariServices.framework\n\nis included in an app's dependencies, and the app uses an app.link subdomain or sets the \nbranch_app_domain\n\nin the Info.plist. It can be disabled with a call to the SDK.\n\n\n\n\n\n\nAdd before \ninitSession\n \nInitialize Branch\n\n\n\n\n\n\nSwift 3 \n 4\n\n\nBranch\n.\ngetInstance\n().\ndisableCookieBasedMatching\n()\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \ndisableCookieBasedMatching\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nUse test key\n\n\n\n\n\n\nUse the Branch \ntest key\n instead of the \nlive key\n.\n\n\n\n\n\n\nIn iOS, add before \ninitSession\n \nInitialize Branch\n.\n\n\n\n\n\n\nIn iOS, update \nbranch_key\n in your \nInfo.plist\n to a dictionary (\nexample\n).\n\n\n\n\n\n\nIn Android, set \ntest mode\n to \ntrue\n.\n\n\n\n\n\n\nThe \ntest key\n of your app must match the \ntest key\n of your deep link.\n\n\n\n\n\n\nUse conditional compilation or remove before releasing to production.\n\n\n\n\n\n\nSwift 3 \n 4\n\n\n#if\n \nDEBUG\n\n    \nRNBranch\n.\nuseTestInstance\n()\n\n\n#endif\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n#ifdef DEBUG\n\n    \n[\nRNBranch\n \nuseTestInstance\n];\n\n\n#endif\n\n\n\n\n\n\n\n\n\n\n\n\n\nAndroid:\n Use this in a build type or product flavor or be sure to remove before\n    releasing to production.\n\n\nmeta-data android:name=\"io.branch.sdk.TestMode\" android:value=\"true\" /\n\n\n\n\n\n\n\n\n\n\nSimulate an install\n\n\nDo not test in production.\n\n\nThis requires a native method call that must be made before JS has loaded. There are two options.\n\n\n\n\n\n\nUse a \nbranch.json\n file with your project. See \nhttps://rnbranch.app.link/branch-json\n for full details.\n    Add \n\"debugMode\": true\n to \nbranch.debug.json\n:\n\n\n{\n\n    \nappleSearchAdsDebugMode\n:\n \ntrue\n,\n\n    \ndebugMode\n:\n \ntrue\n,\n\n    \ndelayInitToCheckForSearchAds\n:\n \ntrue\n\n\n}\n\n\n\n\n\nDo not add this setting to \nbranch.json\n, or it will be enabled for release builds.\n\n\n\n\n\n\nModify your native app code.\n\n\nAndroid\n\n\nSimulated installs may be enabled on Android by adding \nmeta-data android:name=\"io.branch.sdk.TestMode\" android:value=\"true\"/\n to the \napplication\n element of your Android manifest. Use this in a build type\nsuch as \ndebug\n or a product flavor, or be sure to remove it from your manifest before releasing to prod. \nClick here\n for more details.\n\n\nAlternately, add \nRNBranchModule.setDebug();\n in your MainActivity before the call to \ninitSession\n. Be sure to remove it\nbefore releasing to prod.\n\n\n    \n// Remove before prod release\n\n    \nRNBranchModule\n.\nsetDebug\n();\n\n    \nRNBranchModule\n.\ninitSession\n(\ngetIntent\n().\ngetData\n(),\n \nthis\n);\n\n\n\n\n\niOS\n\n\nAdd \n[RNBranch setDebug];\n or \nRNBranch.setDebug()\n in your AppDelegate before the call to \ninitSession\n.\nUse conditional compilation or remove before releasing to prod.\n\n\n\n\n\n\nSwift 3 \n 4\n\n\n#if\n \nDEBUG\n\n    \nRNBranch\n.\nsetDebug\n()\n\n\n#endif\n\n\nRNBranch\n.\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n,\n \nisReferrable\n:\n \ntrue\n)\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n#ifdef DEBUG\n\n    \n[\nRNBranch\n \nsetDebug\n];\n\n\n#endif\n\n\n[\nRNBranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nisReferrable\n:\nYES\n];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing getLatestReferringParams to handle link opens\n\n\nThe \ngetLatestReferringParams\n method is essentially a synchronous method that retrieves the latest\nreferring link parameters stored by the native SDK. However, React Native does not support synchronous\ncalls to native code from JavaScript, so the method returns a promise. You must \nawait\n the response\nor use \nthen\n to receive the result. The same remarks apply to the \ngetFirstReferringParams\n method.\nHowever, this is only a restriction of React Native. The purpose of \ngetLatestReferringParams\n is to\nretrieve those parameters one time. The promise will only return one result. It will not continue\nto return results when links are opened or wait for a link to be opened. This method is not intended\nto notify the app when a link has been opened.\n\n\nTo receive notification whenever a link is opened, \nincluding at app launch\n, call\n\nbranch.subscribe\n. The callback to this method will return any initial link that launched the\napp and all subsequent link opens. There is no need to call \ngetLatestReferringParams\n at app\nlaunch to check for an initial link. Use \nbranch.subscribe\n to handle all link opens.\n\n\n\n\n\n\nCommon build problems\n\n\n\n\n\n\nBe sure to follow the instructions to \nUpdate from \n 2.0.0\n if your\n    app used an earlier version of react-native-branch. In version 2.x, the native SDKs are embedded\n    in the NPM module and must not also be added from elsewhere (Gradle, CocoaPods, etc.).\n\n\n\n\n\n\nNote that when using the \nReact\n pod in a native app, the name of the native SDK pod is \nBranch-SDK\n,\n    not \nBranch\n, and it comes from \nnode_modules\n, not the CocoaPods repo.\n\n\n\n\n\n\nStarting with React Native 0.40, all external iOS headers in Objective-C must be imported as\n    \n#import \nPackageName/Header.h\n.\n    This applies to React Native headers as well as the \nreact-native-branch/RNBranch.h\n header\n    from this SDK.\n\n\n\n\n\n\nIf you upgraded from RN \n 0.40 manually, without adjusting your Xcode project settings, you may\n    still be importing headers with double quotes. This probably indicates a problem with your settings.\n\n\n\n\n\n\nThe \nreact-native-git-upgrade\n tool from NPM may be used to update dependencies as well as project\n    settings.\n\n\n\n\n\n\nOn Android, when using Proguard in release builds, depending on your build settings, it may be\n    necessary to add one or both of these lines to your \nandroid/app/proguard-rules.pro\n file:\n\n\n-dontwarn com.crashlytics.android.answers.shim.**\n-dontwarn com.google.firebase.appindexing.**\n\n\n\n\n\n\n\n\n\n\n\n\nGeneral troubleshooting\n\n\nSee the troubleshooting guide for each native SDK:\n\n\n\n\niOS\n\n\nAndroid\n\n\n\n\n\n\n\n\nSample apps\n\n\n\n\nExamples\n\n\nTutorial", 
            "title": "React Native"
        }, 
        {
            "location": "/pages/apps/react-native/#integrate-branch", 
            "text": "Inconsistent Universal links behavior on iOS 11.2  After updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set  forced uri redirect mode  on your Branch links to open the app with URI schemes. View details of the issue on the  Apple Bug report .", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/react-native/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/react-native/#install-branch", 
            "text": "Option 1: Pure React Native App    Install the module    Yarn \n     yarn add react-native-branch    NPM \n     npm install --save react-native-branch      (Optional) Add a branch.json file to the root of your app (next to package.json).\n    You can configure the contents at any time, but it must be present when you\n    run  react-native link  in order to be automatically included in your native\n    projects. This allows you to configure certain behaviors that otherwise require\n    native code changes. See  https://rnbranch.app.link/branch-json  for full details\n    on the branch.json file.    Run  react-native link react-native-branch      Option 2: Native iOS app with React pod    Add these lines to your  Podfile  pod   react-native-branch ,   path :   ../node_modules/react-native-branch  pod   Branch-SDK ,   path :   ../node_modules/react-native-branch/ios     Run  pod install  to regenerate the  Pods  project with the new dependencies. Note that the location of  node_modules  relative to your  Podfile  may vary.    (Optional) Add a branch.json file to the root of your app (next to package.json). See  https://rnbranch.app.link/branch-json .", 
            "title": "Install Branch"
        }, 
        {
            "location": "/pages/apps/react-native/#update-from-200", 
            "text": "If also upgrading React Native, use  react-native-git-upgrade  to upgrade\n    your React Native app to the latest version of React Native, if possible.  npm install -g react-native-git-upgrade cd  /path/to/myapp\nreact-native-git-upgrade    Version 2.x includes the native SDKs in the NPM module. Please remove any installation\n    of the native Branch SDK from Maven, CocoaPods, Carthage or by manually adding the framework (iOS).    Android:    In  android/app/build.gradle :    Remove    compile  io.branch.sdk.android:library:2.+     iOS    Remove the Branch SDK depending on how you originally installed it.    Originally installed using CocoaPods:    Remove  pod \"Branch\"  from your  Podfile .    If using the  React  pod from  node_modules , add  pod \"Branch-SDK\", path: \"../node_modules/react-native-branch/ios\" . (Note the different pod name.)  pod   react-native-branch ,   path :   ../node_modules/react-native-branch  pod   Branch-SDK ,   path :   ../node_modules/react-native-branch/ios     pod install    To remove CocoaPods entirely from your project, in case you were only using it for Branch:  pod deintegrate      Originally installed using Carthage:    Remove the  Branch.framework  from your project's dependencies.    Remove  Branch.framework  from the input and output paths of your  carthage copy-frameworks  build phase.      Originally installed manually:   Remove the  Branch.framework  from your project's dependencies.     If also updating from react-native   0.40 (react-native-branch 0.9), replace  #import \"RNBranch.h\"  with:  #import  React/RCTRootView.h  #import  react-native-branch/RNBranch.h", 
            "title": "Update from &lt; 2.0.0"
        }, 
        {
            "location": "/pages/apps/react-native/#configure-app", 
            "text": "", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/react-native/#ios", 
            "text": "Configure bundle identifier    Bundle Id matches  Branch Dashboard       Configure associated domains   Add your link domains from your  Branch Dashboard  -alternate  is needed for Universal Linking with the  Web SDK  inside your Website  test-  is needed if you need use a  test key   If you use a  custom link domain , you will need to include your old link domain, your  -alternate  link domain, and your new link domain       Configure entitlements    Confirm entitlements are within target       Configure info.pList    Add  Branch Dashboard  values   Add  branch_app_domain  with your live key domain  Add  branch_key  with your current Branch key  Add your URI scheme as  URL Types  -   Item 0  -   URL Schemes        Confirm app prefix    From your  Apple Developer Account", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/apps/react-native/#android", 
            "text": "AndroidManifest.xml  ?xml version= 1.0  encoding= utf-8 ?  manifest   xmlns:android= http://schemas.android.com/apk/res/android \n     package= com.eneff.branchandroid \n\n     uses-permission   android:name= android.permission.INTERNET   / \n\n     application \n         android:allowBackup= true           android:name= com.eneff.branchandroid.CustomApplicationClass           android:icon= @mipmap/ic_launcher \n         android:label= @string/app_name \n         android:supportsRtl= true \n         android:theme= @style/AppTheme \n\n         activity \n             android:name= .MainActivity               android:launchMode= singleTask               android:label= @string/app_name \n             android:theme= @style/AppTheme.NoActionBar \n\n             intent-filter \n                 action   android:name= android.intent.action.MAIN   / \n                 category   android:name= android.intent.category.LAUNCHER   / \n             /intent-filter               !-- Branch URI Scheme --               intent-filter                   data   android:scheme= branchandroid   /                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /               /intent-filter                !-- Branch App Links (optional) --               intent-filter   android:autoVerify= true                   action   android:name= android.intent.action.VIEW   /                   category   android:name= android.intent.category.DEFAULT   /                   category   android:name= android.intent.category.BROWSABLE   /                   data   android:scheme= https   android:host= uobg.app.link   /               /intent-filter           /activity           !-- Branch init --           meta-data   android:name= io.branch.sdk.BranchKey   android:value= key_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa   /           meta-data   android:name= io.branch.sdk.BranchKey.test   android:value= key_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa   /           meta-data   android:name= io.branch.sdk.TestMode   android:value= false   /            !-- Branch install referrer tracking (optional) --           receiver   android:name= io.branch.referral.InstallListener   android:exported= true               intent-filter                   action   android:name= com.android.vending.INSTALL_REFERRER   /               /intent-filter           /receiver  \n     /application  /manifest     Replace the following with values from your  Branch Dashboard   branchandroid  uobg.app.link  key_live_gdzsepIaUf7wG3dEWb3aBkmcutm0PwJa  key_test_edwDakKcMeWzJ3hC3aZs9kniyuaWGCTa       android/app/proguard-rules.pro \n       -dontwarn io.branch.**", 
            "title": "Android"
        }, 
        {
            "location": "/pages/apps/react-native/#initialize-branch", 
            "text": "", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/react-native/#ios_1", 
            "text": "If you are using Swift, add  #import  react-native-branch/RNBranch.h  to your Bridging header if you have one.  If you are using the  React  pod in a native app with  use_frameworks! , you may simply use a Swift import in the AppDelegate.swift:  import react_native_branch .    Swift 3   4- AppDelegate.swift  // Initialize the Branch Session at the top of existing application:didFinishLaunchingWithOptions:  func   application ( _   application :   UIApplication ,   didFinishLaunchingWithOptions :   [ UIApplicationLaunchOptionsKey :   Any ]?)   -   Bool   {     // Uncomment this line to use the test key instead of the live one.     // RNBranch.useTestInstance()     RNBranch . initSession ( launchOptions :   launchOptions ,   isReferrable :   true )   //  -- add this  \n   //...  }  // Add the openURL and continueUserActivity functions  func   application ( _   app :   UIApplication ,   open   url :   URL ,   options :   [ UIApplicationOpenURLOptionsKey   :   Any ]   =   [:])   -   Bool   {     return   RNBranch . branch . application ( app ,   open :   url ,   options :   options )  }   func   application ( _   application :   UIApplication ,   continue   userActivity :   NSUserActivity ,   restorationHandler :   @ escaping   ([ Any ]?)   -   Void )   -   Bool   {     return   RNBranch . continue ( userActivity )  }     Objective-C - AppDelegate.m  #import  react-native-branch/RNBranch.h   // at the top   // Initialize the Branch Session at the top of existing application:didFinishLaunchingWithOptions:  -   ( BOOL ) application: ( UIApplication   * ) application   didFinishLaunchingWithOptions: ( NSDictionary   * ) launchOptions  {       // Uncomment this line to use the test key instead of the live one.       // [RNBranch useTestInstance]       [ RNBranch   initSessionWithLaunchOptions : launchOptions   isReferrable : YES ];   //  -- add this       NSURL   * jsCodeLocation ; \n     //...  }  -   ( BOOL ) application: ( UIApplication   * ) application   openURL: ( NSURL   * ) url   sourceApplication: ( NSString   * ) sourceApplication   annotation: ( id ) annotation   {       if   ( ! [ RNBranch . branch   application : application   openURL : url   sourceApplication : sourceApplication   annotation : annotation ])   {           // do other deep link routing for the Facebook SDK, Pinterest SDK, etc       }       return   YES ;  }   -   ( BOOL ) application: ( UIApplication   * ) application   continueUserActivity: ( NSUserActivity   * ) userActivity   restorationHandler: ( void   ( ^ )( NSArray   * restorableObjects )) restorationHandler   {       return   [ RNBranch   continueUserActivity : userActivity ];  }", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/apps/react-native/#android_1", 
            "text": "MainApplication.java  // ...  // import Branch and RNBranch  import   io.branch.rnbranch.RNBranchPackage ;  import   io.branch.referral.Branch ;   //...  // add RNBranchPackage to react-native package list  @Override \n   protected   List ReactPackage   getPackages ()   { \n     return   Arrays . ReactPackage asList ( \n             new   MainReactPackage (),               new   RNBranchPackage (),   //  -- add this   // ...  // add onCreate() override  @Override  public   void   onCreate ()   { \n   super . onCreate ();     Branch . getAutoInstance ( this );  }     MainActivity.java  import   io.branch.rnbranch.* ;   //  -- add this  import   android.content.Intent ;   //  -- and this   public   class   MainActivity   extends   ReactActivity   { \n\n       @Override \n       protected   String   getMainComponentName ()   { \n           return   base ; \n       } \n\n       // Override onStart, onNewIntent: \n       @Override \n       protected   void   onStart ()   { \n           super . onStart ();             RNBranchModule . initSession ( getIntent (). getData (),   this );         }         @Override         public   void   onNewIntent ( Intent   intent )   {             setIntent ( intent );         }         // ...  }", 
            "title": "Android"
        }, 
        {
            "location": "/pages/apps/react-native/#test-deep-link-ios", 
            "text": "Create a deep link from the  Branch Marketing Dashboard    Delete your app from the device    Compile your app with Xcode    Paste deep link in  Apple Notes    Long press on the deep link  (not 3D Touch)    Click  Open in \"APP_NAME\"  to open your app  ( example )", 
            "title": "Test deep link iOS"
        }, 
        {
            "location": "/pages/apps/react-native/#test-deep-link-android", 
            "text": "Create a deep link from the  Branch Marketing Dashboard    Delete your app from the device    Compile your app with Android Studio    Paste deep link in  Google Hangouts    Click on the deep link to open your app", 
            "title": "Test deep link Android"
        }, 
        {
            "location": "/pages/apps/react-native/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/react-native/#import-branch", 
            "text": "In any React Native source file that uses the Branch SDK.  import   branch ,   {   BranchEvent   }   from   react-native-branch", 
            "title": "Import Branch"
        }, 
        {
            "location": "/pages/apps/react-native/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share (content or user)    Uses the  Universal Object Properties    // only canonicalIdentifier is required  let   branchUniversalObject   =   await   branch . createBranchUniversalObject ( canonicalIdentifier ,   { \n   locallyIndex :   true , \n   title :   Cool Content! , \n   contentDescription :   Cool Content Description }), \n   contentMetadata :   { \n     ratingAverage :   4.2 , \n     customMetadata :   { \n       prop1 :   test , \n       prop2 :   abc \n     } \n   }  })", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/react-native/#create-deep-link", 
            "text": "Creates a deep link URL with encapsulated data    Needs a  Branch Universal Object    Uses  Deep Link Properties    Validate with the  Branch Dashboard    let   linkProperties   =   { \n     feature :   share , \n     channel :   facebook  }  let   controlParams   =   { \n      $desktop_url :   http://desktop-url.com/monster/12345  }  let   { url }   =   await   branchUniversalObject . generateShortUrl ( linkProperties ,   controlParams )", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/react-native/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Needs a  Branch Universal Object    Uses  Deep Link Properties    let   shareOptions   =   {   messageHeader :   Check this out ,   messageBody :   No really, check this out!   }  let   linkProperties   =   {   feature :   share ,   channel :   RNApp   }  let   controlParams   =   {   $desktop_url :   http://example.com/home ,   $ios_url :   http://example.com/ios   }  let   { channel ,   completed ,   error }   =   await   branchUniversalObject . showShareSheet ( shareOptions ,   linkProperties ,   controlParams )", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/react-native/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Returns  deep link properties    Listener    branch . subscribe (({   error ,   params   })   =   { \n   if   ( error )   { \n     console . error ( Error from Branch:    +   error ) \n     return \n   } \n\n   // params will never be null if error is null  })  let   lastParams   =   await   branch . getLatestReferringParams ()   // params from last open  let   installParams   =   await   branch . getFirstReferringParams ()   // params from original install", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/react-native/#navigate-to-content", 
            "text": "branch . subscribe (({   error ,   params   })   =   { \n   if   ( error )   { \n     console . error ( Error from Branch:    +   error ) \n     return \n   } \n\n   // params will never be null if error is null \n\n   if   ( params [ +non_branch_link ])   { \n     const   nonBranchUrl   =   params [ +non_branch_link ] \n     // Route non-Branch URL if appropriate. \n     return \n   } \n\n   if   ( ! params [ +clicked_branch_link ])   { \n     // Indicates initialization success and some other conditions. \n     // No link was opened. \n     return \n   } \n\n   // A Branch link was opened. \n   // Route link based on data in params, e.g. \n\n   // Get title and url for route \n   const   title   =   params . $og_title \n   const   url   =   params . $canonical_url \n   const   image   =   params . $og_image_url \n\n   // Now push the view for this URL \n   this . navigator . push ({   title :   title ,   url :   url ,   image :   image   })  })", 
            "title": "Navigate to content"
        }, 
        {
            "location": "/pages/apps/react-native/#adjust-cached-link-ttl", 
            "text": "Any link that launched the app is cached by the native layers and returned\n    to the  branch.subscribe  listener after JavaScript finishes loading.    By default, the initial link is cached for 5 seconds. This allows you to\n    unsubscribe and resubscribe later without receiving the initial link.    If your app takes longer than this to load, you can adjust the TTL for\n    the initial link by adjusting  branch.initSessionTtl  to a value in\n    milliseconds.    branch . initSessionTtl   =   10000   // Set to 10 seconds  branch . subscribe ({   error ,   params   }   =   { \n   // ...  })", 
            "title": "Adjust cached link TTL"
        }, 
        {
            "location": "/pages/apps/react-native/#display-content", 
            "text": "List content on iOS Spotlight    Needs a  Branch Universal Object    Listing on Spotlight requires adding  CoreSpotlight.framework  to your Xcode project.    import   branch ,   {   BranchEvent   }   from   react-native-branch  let   branchUniversalObject   =   await   branch . createBranchUniversalObject ( canonicalIdentifier ,   { \n   locallyIndex :   true , \n   // other properties  })  branchUniversalObject . logEvent ( BranchEvent . ViewItem )", 
            "title": "Display content"
        }, 
        {
            "location": "/pages/apps/react-native/#track-content", 
            "text": "Track how many times a piece of content is viewed    Needs a  Branch Universal Object    Uses  Track content properties    Validate with the  Branch Dashboard    import   {   BranchEvent   }   from   react-native-branch  branchUniversalObject . logEvent ( BranchEvent . ViewItem )", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/react-native/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    Validate with the  Branch Dashboard    branch . setIdentity ( theUserId )  branch . logout ()", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/react-native/#track-events", 
            "text": "Track standard and custom events    Events named  open ,  close ,  install , and  referred session  are Branch restricted    63  max event name length    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard    import   {   BranchEvent   }   from   react-native-branch  // Associate one or more content items with an event  new   BranchEvent ( BranchEvent . ViewItems ,   [ buo1 ,   buo2 ]). logEvent ()  // Log a standard event with parameters  new   BranchEvent ( BranchEvent . Purchase ,   buo ,   { \n   revenue :   20 , \n   shipping :   2 , \n   tax :   1.6 , \n   currency :   USD  }). logEvent ()  // Set parameters after initialization  let   event   =   new   BranchEvent ( BranchEvent . Search )  event . searchQuery   =   tennis rackets  event . logEvent ()  // Log a custom event  new   BranchEvent ( UserScannedItem ,   buo ). logEvent ()    When logging an event with a single Branch Universal Object, use the\n    convenient logEvent method   buo . logEvent ( BranchEvent . ViewItem )  buo . logEvent ( BranchEvent . Purchase ,   {   revenue :   20   })", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/react-native/#standard-events", 
            "text": "Event constant  Description      BranchEvent.AddToCart  Standard Add to Cart event    BranchEvent.AddToWishlist  Standard Add to Wishlist event    BranchEvent.ViewCart  Standard View Cart event    BranchEvent.InitiatePurchase  Standard Initiate Purchase event    BranchEvent.AddPaymentInfo  Standard Add Payment Info event    BranchEvent.Purchase  Standard Purchase event    BranchEvent.SpendCredits  Standard Spend Credits event    BranchEvent.Search  Standard Search event    BranchEvent.ViewItem  Standard View Item event for a single Branch Universal Object    BranchEvent.ViewItems  Standard View Items event for multiple Branch Universal Objects    BranchEvent.Rate  Standard Rate event    BranchEvent.Share  Standard Share event    BranchEvent.CompleteRegistration  Standard Complete Registration event    BranchEvent.CompleteTutorial  Standard Complete Tutorial event    BranchEvent.AchieveLevel  Standard Achieve Level event    BranchEvent.AchievementUnlocked  Standard Unlock Achievement event", 
            "title": "Standard events"
        }, 
        {
            "location": "/pages/apps/react-native/#handle-referrals", 
            "text": "Referral points are obtained from referral rules on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits   Referral guide     Redeem rewards  let   redeemResult   =   await   branch . redeemRewards ( amount ,   bucket )     Load rewards  let   rewards   =   await   branch . loadRewards ()     Load history  let   creditHistory   =   await   branch . getCreditHistory ()", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/react-native/#handle-links-in-your-own-app", 
            "text": "Allows you to deep link into your own from your app itself  branch . openURL ( https://example.app.link/u3fzDwyyjF )  branch . openURL ( https://example.app.link/u3fzDwyyjF ,   { newActivity :   true })   // Finish the Android current activity before opening the link. Results in a new activity window. Ignored on iOS.        Note  If you aren't using the  newActivity  option, it is necessary to move the call to the  RNBranch.initSession method  to the main activity's  onResume  method instead of  onStart .    Warning  Handling a new deep link in your app will clear the current session data and a new referred \"open\" will be attributed.", 
            "title": "Handle links in your own app"
        }, 
        {
            "location": "/pages/apps/react-native/#handle-push-notifications", 
            "text": "Allows you to track Branch deep links in your push notifications    Use  openURL  to handle the deep links", 
            "title": "Handle push notifications"
        }, 
        {
            "location": "/pages/apps/react-native/#track-apple-search-ads", 
            "text": "Allows Branch to track Apple Search Ads deep linking analytics    Analytics from Apple's API have been slow which will make our analytics lower. Additionally, Apple's API does not send us all the data of an ad every time which will make ads tracked by us to show a generic campaign sometimes.    This requires an option to be set before the native SDK initializes, which\n    happens before JS finishes loading. There are two options:    Add  \"delayInitToCheckForSearchAds\": true  to your  branch.json  file:  { \n     delayInitToCheckForSearchAds :   true  }     Modify your AppDelegate in Xcode. Insert the following before the call\n    to  [RNBranch initSessionWithLaunchOptions:isReferrable:] .    Swift 3   4  Branch . getInstance (). delayInitToCheckForSearchAds ()     Objective-C  [[ Branch   getInstance ]   delayInitToCheckForSearchAds ];         Test with fake campaign params (do not test in production)    Add  \"appleSearchAdsDebugMode\": true  to  branch.debug.json . Do\n    not set this parameter in  branch.json , or it will be enabled in\n    release builds.  { \n     delayInitToCheckForSearchAds :   true , \n     appleSearchAdsDebugMode :   true  }     Add the following call to your AppDelegate (before the  initSession ) call.\n    Use conditional compilation or remove before releasing to production.    Swift 3   4  #if   DEBUG \n     Branch . getInstance (). setAppleSearchAdsDebugMode ()  #endif     Objective-C  #ifdef DEBUG \n     [[ Branch   getInstance ]   setAppleSearchAdsDebugMode ];  #endif", 
            "title": "Track Apple Search Ads"
        }, 
        {
            "location": "/pages/apps/react-native/#enable-100-matching", 
            "text": "Android    Uses  Chrome Tabs  to increase attribute matching success    Add  compile 'com.android.support:customtabs:23.3.0'  to your  build.gradle      iOS    Use the  SFSafariViewController  to increase the attribution matching success    The 100% match is a bit of a misnomer, as it is only 100% match from when a user clicks from the Safari browser. According to our analysis, clicking through Safari happens about 50-75% of the time depending on the use case. For example, clicking from Facebook, Gmail or Chrome won\u2019t trigger a 100% match here. However, it\u2019s still beneficial to the matching accuracy, so we recommend employing it.    When using a custom domain, add a  branch_app_domain  string key in your Info.plist with your custom domain\nto enable 100% matching.    By default, cookie-based matching is enabled on iOS 9 and 10 if the  SafariServices.framework \nis included in an app's dependencies, and the app uses an app.link subdomain or sets the  branch_app_domain \nin the Info.plist. It can be disabled with a call to the SDK.    Add before  initSession   Initialize Branch    Swift 3   4  Branch . getInstance (). disableCookieBasedMatching ()     Objective C  [[ Branch   getInstance ]   disableCookieBasedMatching ];", 
            "title": "Enable 100% matching"
        }, 
        {
            "location": "/pages/apps/react-native/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/react-native/#use-test-key", 
            "text": "Use the Branch  test key  instead of the  live key .    In iOS, add before  initSession   Initialize Branch .    In iOS, update  branch_key  in your  Info.plist  to a dictionary ( example ).    In Android, set  test mode  to  true .    The  test key  of your app must match the  test key  of your deep link.    Use conditional compilation or remove before releasing to production.    Swift 3   4  #if   DEBUG \n     RNBranch . useTestInstance ()  #endif     Objective-C  #ifdef DEBUG \n     [ RNBranch   useTestInstance ];  #endif       Android:  Use this in a build type or product flavor or be sure to remove before\n    releasing to production.  meta-data android:name=\"io.branch.sdk.TestMode\" android:value=\"true\" /", 
            "title": "Use test key"
        }, 
        {
            "location": "/pages/apps/react-native/#simulate-an-install", 
            "text": "Do not test in production.  This requires a native method call that must be made before JS has loaded. There are two options.    Use a  branch.json  file with your project. See  https://rnbranch.app.link/branch-json  for full details.\n    Add  \"debugMode\": true  to  branch.debug.json :  { \n     appleSearchAdsDebugMode :   true , \n     debugMode :   true , \n     delayInitToCheckForSearchAds :   true  }   Do not add this setting to  branch.json , or it will be enabled for release builds.    Modify your native app code.  Android  Simulated installs may be enabled on Android by adding  meta-data android:name=\"io.branch.sdk.TestMode\" android:value=\"true\"/  to the  application  element of your Android manifest. Use this in a build type\nsuch as  debug  or a product flavor, or be sure to remove it from your manifest before releasing to prod.  Click here  for more details.  Alternately, add  RNBranchModule.setDebug();  in your MainActivity before the call to  initSession . Be sure to remove it\nbefore releasing to prod.       // Remove before prod release \n     RNBranchModule . setDebug (); \n     RNBranchModule . initSession ( getIntent (). getData (),   this );   iOS  Add  [RNBranch setDebug];  or  RNBranch.setDebug()  in your AppDelegate before the call to  initSession .\nUse conditional compilation or remove before releasing to prod.    Swift 3   4  #if   DEBUG \n     RNBranch . setDebug ()  #endif  RNBranch . initSession ( launchOptions :   launchOptions ,   isReferrable :   true )     Objective-C  #ifdef DEBUG \n     [ RNBranch   setDebug ];  #endif  [ RNBranch   initSessionWithLaunchOptions : launchOptions   isReferrable : YES ];", 
            "title": "Simulate an install"
        }, 
        {
            "location": "/pages/apps/react-native/#using-getlatestreferringparams-to-handle-link-opens", 
            "text": "The  getLatestReferringParams  method is essentially a synchronous method that retrieves the latest\nreferring link parameters stored by the native SDK. However, React Native does not support synchronous\ncalls to native code from JavaScript, so the method returns a promise. You must  await  the response\nor use  then  to receive the result. The same remarks apply to the  getFirstReferringParams  method.\nHowever, this is only a restriction of React Native. The purpose of  getLatestReferringParams  is to\nretrieve those parameters one time. The promise will only return one result. It will not continue\nto return results when links are opened or wait for a link to be opened. This method is not intended\nto notify the app when a link has been opened.  To receive notification whenever a link is opened,  including at app launch , call branch.subscribe . The callback to this method will return any initial link that launched the\napp and all subsequent link opens. There is no need to call  getLatestReferringParams  at app\nlaunch to check for an initial link. Use  branch.subscribe  to handle all link opens.", 
            "title": "Using getLatestReferringParams to handle link opens"
        }, 
        {
            "location": "/pages/apps/react-native/#common-build-problems", 
            "text": "Be sure to follow the instructions to  Update from   2.0.0  if your\n    app used an earlier version of react-native-branch. In version 2.x, the native SDKs are embedded\n    in the NPM module and must not also be added from elsewhere (Gradle, CocoaPods, etc.).    Note that when using the  React  pod in a native app, the name of the native SDK pod is  Branch-SDK ,\n    not  Branch , and it comes from  node_modules , not the CocoaPods repo.    Starting with React Native 0.40, all external iOS headers in Objective-C must be imported as\n     #import  PackageName/Header.h .\n    This applies to React Native headers as well as the  react-native-branch/RNBranch.h  header\n    from this SDK.    If you upgraded from RN   0.40 manually, without adjusting your Xcode project settings, you may\n    still be importing headers with double quotes. This probably indicates a problem with your settings.    The  react-native-git-upgrade  tool from NPM may be used to update dependencies as well as project\n    settings.    On Android, when using Proguard in release builds, depending on your build settings, it may be\n    necessary to add one or both of these lines to your  android/app/proguard-rules.pro  file:  -dontwarn com.crashlytics.android.answers.shim.**\n-dontwarn com.google.firebase.appindexing.**", 
            "title": "Common build problems"
        }, 
        {
            "location": "/pages/apps/react-native/#general-troubleshooting", 
            "text": "See the troubleshooting guide for each native SDK:   iOS  Android", 
            "title": "General troubleshooting"
        }, 
        {
            "location": "/pages/apps/react-native/#sample-apps", 
            "text": "Examples  Tutorial", 
            "title": "Sample apps"
        }, 
        {
            "location": "/pages/apps/unity/", 
            "text": "Integrate Branch\n\n\n\n\nInconsistent Universal links behavior on iOS 11.2\n\n\nAfter updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set \nforced uri redirect mode\n on your Branch links to open the app with URI schemes. View details of the issue on the \nApple Bug report\n.\n\n\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\nCustomize your app.link domain:\n\n\n\n\n\n\n\n\n\n\n\n\nGet the Branch SDK\n\n\n\n\n\n\nDownload the latest SDK version\n or clone our \nopen-source GitHub repository\n.\n\n\n\n\n\n\nImport the \nBranchUnityWrapper.unitypackage\n into your project by clicking \nAssets -\n Import Package\n.\n\n\n\n\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\nAdd the Branch prefab asset to the \nfirst scene\n of your Unity project\n\n\n\n\n\n\nUpdate your Branch prefab\n\n\n\n\n\n\nDo not forget to click on the \nUpdate iOS Wrapper\n and the \nUpdate Android Manifest\n buttons once you are done.\n\n\n\n\n\n\n\n\nPrefab fields\n\n\n\n\n\n\n\n\nField name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSimulate Fresh Installs\n\n\nThis checkbox enables debug mode. This allows you to simulate fresh every time you uninstall and reinstall the app. Please make sure to uncheck this box before releasing your app.\n\n\n\n\n\n\nTest Mode\n\n\nThis checkbox picks the test key from your Branch prefab. If this box is unchecked, by default, your live Branch key is used.\n\n\n\n\n\n\nTest Branch Key\n\n\nThis is the test Branch key found on the \nApp Settings page\n of your Test Branch app\n\n\n\n\n\n\nTest Branch URI\n\n\nThis is the test URI scheme that you have set for your app on the \nLink Settings page\n for your Test Branch app\n\n\n\n\n\n\nTest Android Path Prefix\n\n\nThis field is only applicable if you are on the \nbnc.lt\n domain of your Test Branch app. You can find it underneath the field labeled SHA256 Cert Fingerprints on the \nLink Settings page\n once you\u2019ve enabled App Links. It will look something like this: \n/WSuf\n (the initial / character should be included).\n\n\n\n\n\n\nTest App Links\n\n\nThis field is applicable if you want to enable \nAPPLINKS\n and \nUNIVERSAL LINKS\n for your domain. Please make sure to add the correct domain found on the bottom of the \nLink Settings page\n of your Test Branch app. Add the -alternate domain to have your Branch links deeplink from your \nDeepviews\n and \nJourneys\n. If you are not using a \napp.links\n domain please write into \n\n\n\n\n\n\nLive Branch Key\n\n\nThis is the Live Branch key found on the \nApp Settings page\n of your Live Branch app\n\n\n\n\n\n\nLive Branch URI\n\n\nThis is the Live URI scheme that you have set for your app on the \nLink Settings page\n for your Live Branch app\n\n\n\n\n\n\nLive Android Path Prefix\n\n\nThis field is only applicable if you are on the \nbnc.lt\n domain \nLink Settings page\n for your Live Branch app. You can find it underneath the field labeled SHA256 Cert Fingerprints on the \nLink Settings page\n once you\u2019ve enabled App Links. It will look something like this: \n/WSuf\n (the initial / character should be included).\n\n\n\n\n\n\nLive App Links\n\n\nThis field is applicable if you want to enable \nAPPLINKS\n and \nUNIVERSAL LINKS\n for your domain. Please make sure to add the correct domain found on the bottom of the \nLink Settings page\n of your Live Branch app. Add the -alternate domain to have your Branch links deeplink from your \nDeepviews\n and \nJourneys\n. If you are not using a \napp.links\n domain please write into \n\n\n\n\n\n\n\n\n\n\nNote for Android\n\n\nOccasionally, Android will barf after you add our library due to generic issues unrelated to Branch. Please see this \nAndroid troubleshooting section\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\nAdd Branch to your \nMonobehavior\n script of your \nfirst Scene\n\n\nusing\n \nUnityEngine\n;\n\n\nusing\n \nSystem.Collections\n;\n\n\n\npublic\n \nclass\n \nSpin\n \n:\n \nMonoBehaviour\n \n{\n\n\n    \n// Use this for initialization\n\n    \nvoid\n \nStart\n \n()\n \n{\n\n\n        \nBranch\n.\ninitSession\n(\nCallbackWithBranchUniversalObject\n);\n\n\n    \n}\n\n\n\n    \nvoid\n \nCallbackWithBranchUniversalObject\n(\nBranchUniversalObject\n \nbuo\n,\n\n\n                                            \nBranchLinkProperties\n \nlinkProps\n,\n\n\n                                            \nstring\n \nerror\n)\n \n{\n\n\n        \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n\n            \nSystem\n.\nConsole\n.\nWriteLine\n(\nError : \n\n\n                                    \n+\n \nerror\n);\n\n\n        \n}\n \nelse\n \nif\n \n(\nlinkProperties\n.\ncontrolParams\n.\nCount\n \n \n0\n)\n \n{\n\n\n            \nSystem\n.\nConsole\n.\nWriteLine\n(\nDeeplink params : \n\n\n                                    \n+\n \nbuo\n.\nToJsonString\n()\n\n\n                                    \n+\n \nlinkProps\n.\nToJsonString\n());\n\n\n        \n}\n\n\n    \n}\n\n\n\n\n    \n// Update is called once per frame\n\n    \nvoid\n \nUpdate\n \n()\n \n{\n\n        \n//rotate 90 degress per second\n\n        \ntransform\n.\nRotate\n(\nVector3\n.\nup\n \n*\n \nTime\n.\ndeltaTime\n*\n90\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link\n\n\n\n\n\n\nCreate a Quick link\n on the Branch Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nPaste Quick link in \nGoogle Hangouts (Android)\n or \nNotes (iOS)\n\n\n\n\n\n\nClick on the Quick link to open your app\n\n\n\n\n\n\nCompile and download your app to your device\n\n\n\n\n\n\nYou should see deferred deep link data show in your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share with your link\n\n\nBranchUniversalObject\n \nuniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n();\n\n\n// Content index mode: 0 - private mode, 1 - public mode\n\n\nuniversalObject\n.\ncontentIndexMode\n \n=\n \n1\n;\n\n\n//Identifier that helps Branch dedupe across many instances of the same content.\n\n\nuniversalObject\n.\ncanonicalIdentifier\n \n=\n \nid12345\n;\n\n\n// OG title\n\n\nuniversalObject\n.\ntitle\n \n=\n \nid12345 title\n;\n\n\n// OG Description\n\n\nuniversalObject\n.\ncontentDescription\n \n=\n \nMy awesome piece of content!\n;\n\n\n// OG Image\n\n\nuniversalObject\n.\nimageUrl\n \n=\n \nhttps://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png\n;\n\n\n// User defined key value pair\n\n\nuniversalObject\n.\nmetadata\n.\nAdd\n(\nfoo\n,\n \nbar\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nAfter you have created a \nBranch Universal Object\n, Define Link Properties\n\n\nBranchLinkProperties\n \nlinkProperties\n \n=\n \nnew\n \nBranchLinkProperties\n();\n\n\nlinkProperties\n.\ntags\n.\nAdd\n(\ntag1\n);\n\n\nlinkProperties\n.\ntags\n.\nAdd\n(\ntag2\n);\n\n\n// Feature link is associated with. Eg. Sharing\n\n\nlinkProperties\n.\nfeature\n \n=\n \ninvite\n;\n\n\n// The channel where you plan on sharing the link Eg.Facebook, Twitter, SMS etc\n\n\nlinkProperties\n.\nchannel\n \n=\n \nTwitter\n;\n\n\n// The Campaign that drives this link\n\n\nlinkProperties\n.\ncampaign\n \n=\n \nreferral\n;\n\n\nlinkProperties\n.\nstage\n \n=\n \n2\n;\n\n\n// Parameters used to control Link behavior\n\n\nlinkProperties\n.\ncontrolParams\n.\nAdd\n(\n$desktop_url\n,\n \nhttp://example.com\n);\n\n\n\n\n\n\n\n\n\nGenerate a Branch link\n\n\nBranch\n.\ngetShortURL\n(\nuniversalObject\n,\n \nlinkProperties\n,\n \n(\nparams\n,\n \nerror\n)\n \n=\n \n{\n\n    \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n        \nDebug\n.\nLogError\n(\nBranch.getShortURL failed: \n \n+\n \nerror\n);\n\n    \n}\n \nelse\n \nif\n \n(\nparams\n \n!=\n \nnull\n)\n \n{\n\n        \nDebug\n.\nLog\n(\nBranch.getShortURL shared params: \n \n+\n \nurl\n);\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nShare deep links between users and apps\n\n\nBranch\n.\nshareLink\n(\nuniversalObject\n,\n \nlinkProperties\n,\n \nSharing link: \n,\n \n(\nparameters\n,\n \nerror\n)\n \n=\n \n{\n\n    \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n        \nDebug\n.\nLogError\n(\nBranch.shareLink failed: \n \n+\n \nerror\n);\n\n    \n}\n \nelse\n \nif\n \n(\nparameters\n \n!=\n \nnull\n)\n \n{\n\n            \nDebug\n.\nLog\n(\nBranch.shareLink: \n \n+\n \nparameters\n[\nsharedLink\n].\nToString\n()\n \n+\n \n \n \n+\n \nparameters\n[\nsharedChannel\n].\nToString\n());\n\n\n}\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRead Deeplink params from a \nBUO\n in your \nBranchInitSession callback\n\n\n\n\n\n\nReturns \ndeep link properties\n\n\npublic\n \nvoid\n \nCallbackWithBranchUniversalObject\n(\nBranchUniversalObject\n \nuniversalObject\n,\n \nBranchLinkProperties\n \nlinkProperties\n,\n \nstring\n \nerror\n)\n \n{\n\n    \nif\n \n(\nerror\n \n!=\n \nnull\n)\n \n{\n\n        \nDebug\n.\nLogError\n(\nBranch Error: \n \n+\n \nerror\n);\n\n    \n}\n \nelse\n \n{\n\n        \nDebug\n.\nLog\n(\nBranch initialization completed: \n);\n\n        \nDebug\n.\nLog\n(\nUniversal Object: \n \n+\n \nuniversalObject\n.\nToJsonString\n());\n\n        \nDebug\n.\nLog\n(\nLink Properties: \n \n+\n \nlinkProperties\n.\nToJsonString\n());\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nThis refereshes with every session (App Installs and App Opens)\n\n\n\n\nRead install (install or open) parameters from anywhere after Branch initsession\n\n\nBranchUniversalObject\n \nobj\n \n=\n \nBranch\n.\ngetFirstReferringBranchUniversalObject\n();\n\n\nBranchLinkProperties\n \nlink\n \n=\n \nBranch\n.\ngetFirstReferringBranchLinkProperties\n();\n\n\n\n\n\n\n\n\n\n\n\n\n\nNavigate and Display content\n\n\n\n\n\n\nUse the link parameters to decide which view you wish to load\n\n\npublic\n \nclass\n \nMyCoolBehaviorScript\n \n:\n \nMonoBehaviour\n \n{\n\n    \nvoid\n \nStart\n \n()\n \n{\n\n        \nBranch\n.\ninitSession\n(\ndelegate\n(\nDictionary\nstring\n,\n \nobject\n \nparameters\n,\n \nstring\n \nerror\n)\n \n{\n\n            \nif\n \n(\nparameters\n.\nContainsKey\n(\npicture_id\n)\n \n{\n\n                \n// load the Scene to show the picture\n\n                \nSceneManager\n.\nLoadSceneAsync\n(\nImageScene\n,\n \nLoadSceneMode\n.\nAdditive\n);\n\n            \n}\n \nelse\n \n{\n\n                \n// load your normal Scene\n\n                \nSceneManager\n.\nLoadSceneAsync\n(\nNormalScene\n,\n \nLoadSceneMode\n.\nSingle\n);\n\n            \n}\n\n        \n});\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack content\n\n\n\n\n\n\nIf you want to track the number of times a user views a BUO content\n\n\nBranch\n.\nregisterView\n(\nuniversalObject\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSet User-Ids on Login/Register\n\n\nBranch\n.\nsetIdentity\n(\nyour user id\n);\n\n\n\n\n\n\n\n\n\nUnSet User-Ids on logout\n\n\nBranch\n.\nlogout\n();\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nTrack custom events\n\n\nBranch\n.\nuserCompletedAction\n(\nyour_custom_event\n);\n\n\n\n\n\n\n\n\n\nStore meta data with these custom events\n\n\nDictionary\nstring\n,\n \nobject\n \nstateItems\n \n=\n \nnew\n \nDictionary\nstring\n,\n \nobject\n\n\n{\n\n    \n{\n \nusername\n,\n \nJoe\n \n},\n\n    \n{\n \ndescription\n,\n \nJoe likes long walks on the beach...\n \n}\n\n\n};\n\n\nBranch\n.\nuserCompletedAction\n(\nyour_custom_event\n,\n \nstateItems\n);\n \n// same 63 characters max limit\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nTypical Referral Flow\n\n\n\n\nSetup a Reward rule on your \nBranch Dashboard\n.\n\n\nReferrer has his/her identity set at \nlogin/signup\n\n\nReferrer \ncreates\n a Branch link.\n\n\nReferrer \nshares\n the Branch link.\n\n\nReferee clicks on the Branch link, installs the app.\n\n\nThe referee has his/her identity set at \nlogin/signup\n\n\nReferee \ntriggers a custom event\n after login/Signup.\n\n\nUse the following SDK methods to see a user's \ncurrent credits\n, \nredeem credits\n and check a user's entire \ncredit history\n.\n\n\n\n\n\n\n\n\nGet Reward balance\n\n\nBranch\n.\nloadRewards\n(\ndelegate\n(\nbool\n \nchanged\n,\n \nstring\n \nerror\n)\n \n{\n\n    \n// changed boolean will indicate if the balance changed from what is currently in memory\n\n\n    \n// will return the balance of the current user\ns credits\n\n    \nint\n \ncredits\n \n=\n \nBranch\n.\ngetCredits\n();\n\n\n});\n\n\n\n\n\n\n\n\n\nRedeem Rewards\n\n\nBranch\n.\nredeemRewards\n(\n5\n);\n\n\n\n\n\n\n\n\n\nGet Credit History\n\n\nBranch\n.\ngetCreditHistory\n(\ndelegate\n(\nList\nstring\n \nhistoryItems\n,\n \nstring\n \nerror\n)\n \n{\n\n    \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n    \n// process history\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\niOS + Unity 4.6 Note\n\n\nBranch requires ARC, and we don\u2019t intend to add checks thoughout the SDK to try and support pre-ARC.\nHowever, you can add flags to the project to compile the Branch files with ARC. If you wish to do this\nadd \n-fobjc-arc\n to all Branch files.\n\n\n\n\nNote: we by default have this flag checked, but please check before building for iOS.\n\n\n\n\n\n\n\n\nAndroid - Using your own Custom Application Class\n\n\nIf you are using your own Custom Application class, you will need to add Branch android library into your project and call the following in method OnCreate():\n\n\nBranch\n.\ngetAutoInstance\n(\nthis\n.\ngetApplicationContext\n());\n\n\n\n\n\nIf you are using your own custom Activity class, please make sure that you are overridding the following Activities:\n\n\n@Override\n\n\npublic\n \nvoid\n \nonCreate\n(\nBundle\n \nsavedInstanceState\n)\n \n{\n\n    \nsuper\n.\nonCreate\n(\nsavedInstanceState\n);\n\n\n}\n\n\n\n@Override\n\n\npublic\n \nvoid\n \nonNewIntent\n(\nIntent\n \nintent\n)\n \n{\n\n    \nthis\n.\nsetIntent\n(\nintent\n);\n\n\n}\n\n\n\n\n\n\n\n\n\nSupport Branch with different Plugins\n\n\nThe Branch SDK has its own custom \nactivity\n and \napplication\n class. Other plugins that use their own\ncustom activity and application classes can cause \"conflicts\" between these classes. To resolve these conflicts:\n\n\n\n\nCreate a empty android library\n\n\nAdd the Branch plugin along with the other plugins into your project\n\n\nCreate a custom Activity and Application class that will contain the custom logic for all your plugins\n\n\nBuild your library\n\n\nAdd your library into Unity project\n\n\nChange android:name to name of your custom Application class in the \napplication\n tag of your Manifest\n\n\nChange android:name to name of your custom Activity class in the \nactivity\n tag of your Manifest\n\n\n\n\n\n\n\n\nSupport several IMPL_APP_CONTROLLER_SUBCLASS\n\n\nThe Branch Unity SDK plugin uses its own UnityAppController that expands default AppController. This is used to catch Universal Links.\n\n\n@interface\n \nBranchAppController\n \n:\n \nUnityAppController\n\n\n{\n\n\n}\n\n\n@end\n\n\n\n@implementation\n \nBranchAppController\n\n\n\n-\n \n(\nBOOL\n)\napplication\n:(\nUIApplication\n \n*)\napplication\n \ncontinueUserActivity\n:(\nNSUserActivity\n \n*)\nuserActivity\n \nrestorationHandler\n:(\nvoid\n \n(^)(\nNSArray\n \n*))\nrestorationHandler\n \n{\n\n    \nBOOL\n \nhandledByBranch\n \n=\n \n[[\nBranchUnityWrapper\n \nsharedInstance\n]\n \ncontinueUserActivity\n:\nuserActivity\n];\n\n    \nreturn\n \nhandledByBranch\n;\n\n\n}\n\n\n\n@end\n\n\n\nIMPL_APP_CONTROLLER_SUBCLASS\n(\nBranchAppController\n)\n\n\n\n\n\nSome Plugins expand the default AppController the same was as Branch does like Cardboard SDK plugin. To resolve conflicts:\n\n\n\n\nMerge all custom AppControllers in one.\n\n\nComment code in other AppControllers (or delete other AppControllers).\n\n\n\n\n\n\n\n\nSample app\n\n\n\n\nBranch Testbed app\n\n\nCode Samples\n for resolving conflicts with other 3rd party plugins", 
            "title": "Unity"
        }, 
        {
            "location": "/pages/apps/unity/#integrate-branch", 
            "text": "Inconsistent Universal links behavior on iOS 11.2  After updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set  forced uri redirect mode  on your Branch links to open the app with URI schemes. View details of the issue on the  Apple Bug report .", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/unity/#configure-branch", 
            "text": "Complete your  Branch Dashboard     Customize your app.link domain:", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/unity/#get-the-branch-sdk", 
            "text": "Download the latest SDK version  or clone our  open-source GitHub repository .    Import the  BranchUnityWrapper.unitypackage  into your project by clicking  Assets -  Import Package .", 
            "title": "Get the Branch SDK"
        }, 
        {
            "location": "/pages/apps/unity/#configure-app", 
            "text": "Add the Branch prefab asset to the  first scene  of your Unity project", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/unity/#update-your-branch-prefab", 
            "text": "Do not forget to click on the  Update iOS Wrapper  and the  Update Android Manifest  buttons once you are done.", 
            "title": "Update your Branch prefab"
        }, 
        {
            "location": "/pages/apps/unity/#prefab-fields", 
            "text": "Field name  Description      Simulate Fresh Installs  This checkbox enables debug mode. This allows you to simulate fresh every time you uninstall and reinstall the app. Please make sure to uncheck this box before releasing your app.    Test Mode  This checkbox picks the test key from your Branch prefab. If this box is unchecked, by default, your live Branch key is used.    Test Branch Key  This is the test Branch key found on the  App Settings page  of your Test Branch app    Test Branch URI  This is the test URI scheme that you have set for your app on the  Link Settings page  for your Test Branch app    Test Android Path Prefix  This field is only applicable if you are on the  bnc.lt  domain of your Test Branch app. You can find it underneath the field labeled SHA256 Cert Fingerprints on the  Link Settings page  once you\u2019ve enabled App Links. It will look something like this:  /WSuf  (the initial / character should be included).    Test App Links  This field is applicable if you want to enable  APPLINKS  and  UNIVERSAL LINKS  for your domain. Please make sure to add the correct domain found on the bottom of the  Link Settings page  of your Test Branch app. Add the -alternate domain to have your Branch links deeplink from your  Deepviews  and  Journeys . If you are not using a  app.links  domain please write into     Live Branch Key  This is the Live Branch key found on the  App Settings page  of your Live Branch app    Live Branch URI  This is the Live URI scheme that you have set for your app on the  Link Settings page  for your Live Branch app    Live Android Path Prefix  This field is only applicable if you are on the  bnc.lt  domain  Link Settings page  for your Live Branch app. You can find it underneath the field labeled SHA256 Cert Fingerprints on the  Link Settings page  once you\u2019ve enabled App Links. It will look something like this:  /WSuf  (the initial / character should be included).    Live App Links  This field is applicable if you want to enable  APPLINKS  and  UNIVERSAL LINKS  for your domain. Please make sure to add the correct domain found on the bottom of the  Link Settings page  of your Live Branch app. Add the -alternate domain to have your Branch links deeplink from your  Deepviews  and  Journeys . If you are not using a  app.links  domain please write into       Note for Android  Occasionally, Android will barf after you add our library due to generic issues unrelated to Branch. Please see this  Android troubleshooting section", 
            "title": "Prefab fields"
        }, 
        {
            "location": "/pages/apps/unity/#initialize-branch", 
            "text": "Add Branch to your  Monobehavior  script of your  first Scene  using   UnityEngine ;  using   System.Collections ;  public   class   Spin   :   MonoBehaviour   { \n\n     // Use this for initialization \n     void   Start   ()   {           Branch . initSession ( CallbackWithBranchUniversalObject );       }       void   CallbackWithBranchUniversalObject ( BranchUniversalObject   buo ,                                               BranchLinkProperties   linkProps ,                                               string   error )   {           if   ( error   !=   null )   {               System . Console . WriteLine ( Error :                                        +   error );           }   else   if   ( linkProperties . controlParams . Count     0 )   {               System . Console . WriteLine ( Deeplink params :                                        +   buo . ToJsonString ()                                       +   linkProps . ToJsonString ());           }       }        // Update is called once per frame \n     void   Update   ()   { \n         //rotate 90 degress per second \n         transform . Rotate ( Vector3 . up   *   Time . deltaTime * 90 ); \n     }  }", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/unity/#test-deep-link", 
            "text": "Create a Quick link  on the Branch Dashboard    Delete your app from the device    Paste Quick link in  Google Hangouts (Android)  or  Notes (iOS)    Click on the Quick link to open your app    Compile and download your app to your device    You should see deferred deep link data show in your app", 
            "title": "Test deep link"
        }, 
        {
            "location": "/pages/apps/unity/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/unity/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share with your link  BranchUniversalObject   universalObject   =   new   BranchUniversalObject ();  // Content index mode: 0 - private mode, 1 - public mode  universalObject . contentIndexMode   =   1 ;  //Identifier that helps Branch dedupe across many instances of the same content.  universalObject . canonicalIdentifier   =   id12345 ;  // OG title  universalObject . title   =   id12345 title ;  // OG Description  universalObject . contentDescription   =   My awesome piece of content! ;  // OG Image  universalObject . imageUrl   =   https://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png ;  // User defined key value pair  universalObject . metadata . Add ( foo ,   bar );", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/unity/#create-deep-link", 
            "text": "After you have created a  Branch Universal Object , Define Link Properties  BranchLinkProperties   linkProperties   =   new   BranchLinkProperties ();  linkProperties . tags . Add ( tag1 );  linkProperties . tags . Add ( tag2 );  // Feature link is associated with. Eg. Sharing  linkProperties . feature   =   invite ;  // The channel where you plan on sharing the link Eg.Facebook, Twitter, SMS etc  linkProperties . channel   =   Twitter ;  // The Campaign that drives this link  linkProperties . campaign   =   referral ;  linkProperties . stage   =   2 ;  // Parameters used to control Link behavior  linkProperties . controlParams . Add ( $desktop_url ,   http://example.com );     Generate a Branch link  Branch . getShortURL ( universalObject ,   linkProperties ,   ( params ,   error )   =   { \n     if   ( error   !=   null )   { \n         Debug . LogError ( Branch.getShortURL failed:    +   error ); \n     }   else   if   ( params   !=   null )   { \n         Debug . Log ( Branch.getShortURL shared params:    +   url ); \n     }  });", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/unity/#share-deep-link", 
            "text": "Share deep links between users and apps  Branch . shareLink ( universalObject ,   linkProperties ,   Sharing link:  ,   ( parameters ,   error )   =   { \n     if   ( error   !=   null )   { \n         Debug . LogError ( Branch.shareLink failed:    +   error ); \n     }   else   if   ( parameters   !=   null )   { \n             Debug . Log ( Branch.shareLink:    +   parameters [ sharedLink ]. ToString ()   +       +   parameters [ sharedChannel ]. ToString ());  }  });", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/unity/#read-deep-link", 
            "text": "Read Deeplink params from a  BUO  in your  BranchInitSession callback    Returns  deep link properties  public   void   CallbackWithBranchUniversalObject ( BranchUniversalObject   universalObject ,   BranchLinkProperties   linkProperties ,   string   error )   { \n     if   ( error   !=   null )   { \n         Debug . LogError ( Branch Error:    +   error ); \n     }   else   { \n         Debug . Log ( Branch initialization completed:  ); \n         Debug . Log ( Universal Object:    +   universalObject . ToJsonString ()); \n         Debug . Log ( Link Properties:    +   linkProperties . ToJsonString ()); \n     }  }    This refereshes with every session (App Installs and App Opens)", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/unity/#read-install-install-or-open-parameters-from-anywhere-after-branch-initsession", 
            "text": "BranchUniversalObject   obj   =   Branch . getFirstReferringBranchUniversalObject ();  BranchLinkProperties   link   =   Branch . getFirstReferringBranchLinkProperties ();", 
            "title": "Read install (install or open) parameters from anywhere after Branch initsession"
        }, 
        {
            "location": "/pages/apps/unity/#navigate-and-display-content", 
            "text": "Use the link parameters to decide which view you wish to load  public   class   MyCoolBehaviorScript   :   MonoBehaviour   { \n     void   Start   ()   { \n         Branch . initSession ( delegate ( Dictionary string ,   object   parameters ,   string   error )   { \n             if   ( parameters . ContainsKey ( picture_id )   { \n                 // load the Scene to show the picture \n                 SceneManager . LoadSceneAsync ( ImageScene ,   LoadSceneMode . Additive ); \n             }   else   { \n                 // load your normal Scene \n                 SceneManager . LoadSceneAsync ( NormalScene ,   LoadSceneMode . Single ); \n             } \n         }); \n     }  }", 
            "title": "Navigate and Display content"
        }, 
        {
            "location": "/pages/apps/unity/#track-content", 
            "text": "If you want to track the number of times a user views a BUO content  Branch . registerView ( universalObject );", 
            "title": "Track content"
        }, 
        {
            "location": "/pages/apps/unity/#track-users", 
            "text": "", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/unity/#set-user-ids-on-loginregister", 
            "text": "Branch . setIdentity ( your user id );", 
            "title": "Set User-Ids on Login/Register"
        }, 
        {
            "location": "/pages/apps/unity/#unset-user-ids-on-logout", 
            "text": "Branch . logout ();", 
            "title": "UnSet User-Ids on logout"
        }, 
        {
            "location": "/pages/apps/unity/#track-events", 
            "text": "", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/unity/#track-custom-events", 
            "text": "Branch . userCompletedAction ( your_custom_event );", 
            "title": "Track custom events"
        }, 
        {
            "location": "/pages/apps/unity/#store-meta-data-with-these-custom-events", 
            "text": "Dictionary string ,   object   stateItems   =   new   Dictionary string ,   object  { \n     {   username ,   Joe   }, \n     {   description ,   Joe likes long walks on the beach...   }  };  Branch . userCompletedAction ( your_custom_event ,   stateItems );   // same 63 characters max limit", 
            "title": "Store meta data with these custom events"
        }, 
        {
            "location": "/pages/apps/unity/#handle-referrals", 
            "text": "", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/unity/#typical-referral-flow", 
            "text": "Setup a Reward rule on your  Branch Dashboard .  Referrer has his/her identity set at  login/signup  Referrer  creates  a Branch link.  Referrer  shares  the Branch link.  Referee clicks on the Branch link, installs the app.  The referee has his/her identity set at  login/signup  Referee  triggers a custom event  after login/Signup.  Use the following SDK methods to see a user's  current credits ,  redeem credits  and check a user's entire  credit history .", 
            "title": "Typical Referral Flow"
        }, 
        {
            "location": "/pages/apps/unity/#get-reward-balance", 
            "text": "Branch . loadRewards ( delegate ( bool   changed ,   string   error )   { \n     // changed boolean will indicate if the balance changed from what is currently in memory \n\n     // will return the balance of the current user s credits \n     int   credits   =   Branch . getCredits ();  });", 
            "title": "Get Reward balance"
        }, 
        {
            "location": "/pages/apps/unity/#redeem-rewards", 
            "text": "Branch . redeemRewards ( 5 );", 
            "title": "Redeem Rewards"
        }, 
        {
            "location": "/pages/apps/unity/#get-credit-history", 
            "text": "Branch . getCreditHistory ( delegate ( List string   historyItems ,   string   error )   { \n     if   ( error   ==   null )   { \n     // process history \n     }  });", 
            "title": "Get Credit History"
        }, 
        {
            "location": "/pages/apps/unity/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/unity/#ios-unity-46-note", 
            "text": "Branch requires ARC, and we don\u2019t intend to add checks thoughout the SDK to try and support pre-ARC.\nHowever, you can add flags to the project to compile the Branch files with ARC. If you wish to do this\nadd  -fobjc-arc  to all Branch files.   Note: we by default have this flag checked, but please check before building for iOS.", 
            "title": "iOS + Unity 4.6 Note"
        }, 
        {
            "location": "/pages/apps/unity/#android-using-your-own-custom-application-class", 
            "text": "If you are using your own Custom Application class, you will need to add Branch android library into your project and call the following in method OnCreate():  Branch . getAutoInstance ( this . getApplicationContext ());   If you are using your own custom Activity class, please make sure that you are overridding the following Activities:  @Override  public   void   onCreate ( Bundle   savedInstanceState )   { \n     super . onCreate ( savedInstanceState );  }  @Override  public   void   onNewIntent ( Intent   intent )   { \n     this . setIntent ( intent );  }", 
            "title": "Android - Using your own Custom Application Class"
        }, 
        {
            "location": "/pages/apps/unity/#support-branch-with-different-plugins", 
            "text": "The Branch SDK has its own custom  activity  and  application  class. Other plugins that use their own\ncustom activity and application classes can cause \"conflicts\" between these classes. To resolve these conflicts:   Create a empty android library  Add the Branch plugin along with the other plugins into your project  Create a custom Activity and Application class that will contain the custom logic for all your plugins  Build your library  Add your library into Unity project  Change android:name to name of your custom Application class in the  application  tag of your Manifest  Change android:name to name of your custom Activity class in the  activity  tag of your Manifest", 
            "title": "Support Branch with different Plugins"
        }, 
        {
            "location": "/pages/apps/unity/#support-several-impl_app_controller_subclass", 
            "text": "The Branch Unity SDK plugin uses its own UnityAppController that expands default AppController. This is used to catch Universal Links.  @interface   BranchAppController   :   UnityAppController  {  }  @end  @implementation   BranchAppController  -   ( BOOL ) application :( UIApplication   *) application   continueUserActivity :( NSUserActivity   *) userActivity   restorationHandler :( void   (^)( NSArray   *)) restorationHandler   { \n     BOOL   handledByBranch   =   [[ BranchUnityWrapper   sharedInstance ]   continueUserActivity : userActivity ]; \n     return   handledByBranch ;  }  @end  IMPL_APP_CONTROLLER_SUBCLASS ( BranchAppController )   Some Plugins expand the default AppController the same was as Branch does like Cardboard SDK plugin. To resolve conflicts:   Merge all custom AppControllers in one.  Comment code in other AppControllers (or delete other AppControllers).", 
            "title": "Support several IMPL_APP_CONTROLLER_SUBCLASS"
        }, 
        {
            "location": "/pages/apps/unity/#sample-app", 
            "text": "Branch Testbed app  Code Samples  for resolving conflicts with other 3rd party plugins", 
            "title": "Sample app"
        }, 
        {
            "location": "/pages/apps/xamarin/", 
            "text": "Integrate Branch\n\n\n\n\nInconsistent Universal links behavior on iOS 11.2\n\n\nAfter updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set \nforced uri redirect mode\n on your Branch links to open the app with URI schemes. View details of the issue on the \nApple Bug report\n.\n\n\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstall Branch\n\n\n\n\n\n\nNuget\n\n\nThe Branch Xamarin SDK is available as a NuGet package. The \nBranch NuGet package\n must be added to each of the Xamarin projects that will use Branch methods.\n\n\nTo add the Branch NuGet package to a project:\n\n\n\n\nRight-click on each project and select \nAdd\n \n \nAdd NuGet Packages\n\n\nIf not already present, find the \nMicrosoft BCL Build Components\n package version 1.0.21 and add it to the project\n\n\nFind the \nBranch Xamarin SDK\n package version 3.0 and add it to the project\n\n\n\n\n\n\n\n\nManually\n\n\nIf, instead of using NuGet, you would rather build and reference the Branch assemblies directly:\n\n\n\n\nClone this repository to the local machine: \nhttps://github.com/BranchMetrics/xamarin-branch-deep-linking.git\n\n\nAdd the \nBranch-Xamarin-SDK\n project to the solution and reference it from the Android, iOS and Forms (if applicable) projects\n\n\nAdd the \nBranch-Xamarin-SDK.Droid\n project to the solution and reference it from the Android project, if any\n\n\nAdd the \nBranch-Xamarin-SDK.iOS\n project and reference it from the iOS project, if any\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure app\n\n\n\n\n\n\niOS\n\n\n\n\n\n\nCreate an Apple device Provisioning Profile for the app\n\n\n\n\nOpen Xcode and create a new project with the same name as your Xamarin iOS project\n\n\nOn the Xcode project's \nGeneral\n tab, verify the app's case-sensitive Bundle Identifier is correct and select the appropriate Team (be sure to resolve any errors here)\n\n\nSelect the \nCapabilities\n tab and enable the \nAssociated Domains\n entitlement\n\n\nCreate 'applinks:' entries for the Branch link domain and the alternate link domain (the link domain can be found at the bottom of the Branch dashboard's \nLink Settings\n page). For example, the entries for an app with the default link domain 'testiosapp.app.link' would be:\n\napplinks:testiosapp.app.link\n\n\napplinks:testiosapp-alternate.app.link\n\n\nUse Xcode to run this newly-created app on an iOS device. This will create and install a Provisioning Profile with the proper entitlements on that device.\n\n\nClose Xcode\n\n\n\n\n\n\n\n\nEnter the app's settings on the Branch dashboard\n\n\n\n\nOn the \nLink Settings\n page, check the \nI have an iOS App\n checkbox\n\n\nEnter the app's URI Scheme in the \niOS URI Scheme\n field (for an app with the URI Scheme \ntestbed-xamarin\n, for example, the entry would be: \ntestbed-xamarin://\n)\n\n\nEnter the app's Apple Store name in the \nApple Store Search\n field (if the app is not yet available on the App Store select \nCustom URL\n and enter as a placeholder the URL of an appropriate web site - the exact site does not matter)\n\n\nCheck the \nEnable Universal Links\n checkbox\n\n\nEnter the app's case-sensitive Bundle Identifier and Apple App Prefix as shown on the \nApple Developer Portal\n\n\n\n\n\n\n\n\nConfigure the Xamarin project's Info.plist file\n\n\n\n\nOpen the \nInfo.plist\n file\n\n\nEnter the app's \nBundle Identifier\n from the \nApple Developer Portal\n in the \nBundle Identifier\n field. \nIMPORTANT:\n this field will automatically be populated with an all-lowercase value by Xamarin. The value is in fact case sensitive and must match the value in the \nApple Developer Portal\n precisely.\n\n\nClick on the \nAdvanced\n tab\n\n\nIn the \nURL Types\n section, click the \nAdd URL Type\n button\n\nIdentifier:\n Branch Scheme\n\nURL Schemes:\n {the app's URI Scheme - 'testiosapp', for example}\n\nRole:\n Editor\n\n\n\n\n\n\n\n\n\n\nConfigure the Xamarin project's Associated Domains entitlement\n\n\n\n\nOpen the \nEntitlements.plist\n file and browse to \nAssociated Domains\n\n\nCreate entries for both the app's link domain and its alternate link domain. The entries for the TestBed-Xamarin app would be:\n\napplinks:testiosapp.app.link\n\n\napplinks:testiosapp-alternate.app.link\n\n\n\n\n\n\n\n\n\n\nUpdate the project's Signing Identity and Provisioning Profile\n\n\n\n\nRight-click on the iOS project and select \nOptions\n\n\nSelect \niOS Bundle Signing\n\n\nSet the \nSigning Identity\n and \nProvisioning Profile values\n to the values used when deploying the Provisioning Profile to the device above\n\n\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nEnsure that the Android project is not using the Shared Mono Runtime\n\n\n\n\nRight-click on the Android project and select: \nOptions\n\n\nSelect: \nAndroid Build\n\n\nOn the \nGeneral\n tab, un-check: \nUse Shared Mono Runtime\n\n\n\n\n\n\n\n\nAdd app capabilities in the app's Manifest file\n\n\nIn the \nRequired permissions\n section of \nAndroidManifest.xml\n, configure the following permissions:\n\n\n\n\nAccessNetworkState\n\n\nInternet\n\n\n\n\nAdditional reading on the Android manifest:\n\n\n\n\nWorking with android manifest.xml\n\n\nAdd permissions to android manifest\n\n\n\n\n\n\n\n\nAdd the app's Branch key to the Strings.xml file\n\n\nAdd the Branch key to the Android project's \nResources/values/Strings.xml\n file. This file contains values that can be accessed by the app's Application class.\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \nstring\n \nname=\napp_name\nTestXamarinFormsApp\n/string\n\n    \nstring\n \nname=\nbranch_key\nkey_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW\n/string\n\n\n/resources\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n\n\n\n\niOS\n\n\nBranch initialization occurs within the \nFinishedLaunching\n method of the \nAppDelegate.cs\n file. Branch calls are also required in the \nOpenUrl\n, \nContinueUserActivity\n, and \nReceiveRemoteNotification\n methods to ensure that Branch link information is handled properly whenever the app becomes active.\n\n\nWhenever the app becomes active, the Branch SDK will reach out to the Branch back end to retrieve any available link parameters. If the app became active due to a click on a Branch link, the link data will be returned in the \nInitSessionComplete method\n. This is where any deep link routing logic should reside. Any error in retrieving Branch link data from the back end will returned in the \nSessionRequestError\n method.\n\n\n// AppDelegate.cs\n\n\n\nusing\n \nFoundation\n;\n\n\nusing\n \nUIKit\n;\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\nusing\n \nBranchXamarinSDK.iOS\n;\n\n\nusing\n \nSystem\n;\n\n\n\nnamespace\n \nTestiOSApp.iOS\n\n\n{\n\n\n    [Register(\nAppDelegate\n)]\n\n    \npublic\n \nclass\n \nAppDelegate\n \n:\n \nUIApplicationDelegate\n,\n \nIBranchBUOSessionInterface\n\n    \n{\n\n        \npublic\n \noverride\n \nUIWindow\n \nWindow\n\n        \n{\n\n            \nget\n;\n\n            \nset\n;\n\n        \n}\n\n\n        \npublic\n \noverride\n \nbool\n \nFinishedLaunching\n(\nUIApplication\n \napplication\n,\n \nNSDictionary\n \nlaunchOptions\n)\n\n        \n{\n\n            \n// Debug mode - set to \nfalse\n before releasing to production\n\n            \nBranchIOS\n.\nDebug\n \n=\n \ntrue\n;\n\n            \nBranchIOS\n.\nInit\n(\nkey_live_cgEguO4UiDJSL4HIyTu85dkkDAdz38ER\n,\n \nlaunchOptions\n,\n \nthis\n);\n\n\n            \nreturn\n \ntrue\n;\n\n        \n}\n\n\n        \n// Called when the app is opened via URI scheme\n\n        \npublic\n \noverride\n \nbool\n \nOpenUrl\n(\nUIApplication\n \napplication\n,\n \nNSUrl\n \nurl\n,\n \nstring\n \nsourceApplication\n,\n \nNSObject\n \nannotation\n)\n\n        \n{\n\n            \nreturn\n \nBranchIOS\n.\ngetInstance\n().\nOpenUrl\n(\nurl\n);\n\n        \n}\n\n\n        \n// Called when the app is opened from a Universal Link\n\n        \npublic\n \noverride\n \nbool\n \nContinueUserActivity\n(\nUIApplication\n \napplication\n,\n \nNSUserActivity\n \nuserActivity\n,\n\n                      \nUIApplicationRestorationHandler\n \ncompletionHandler\n)\n\n        \n{\n\n            \nreturn\n \nBranchIOS\n.\ngetInstance\n().\nContinueUserActivity\n(\nuserActivity\n);\n\n        \n}\n\n\n        \n// Called when the app receives a push notification\n\n        \npublic\n \noverride\n \nvoid\n \nReceivedRemoteNotification\n(\nUIApplication\n \napplication\n,\n \nNSDictionary\n \nuserInfo\n)\n\n        \n{\n\n            \nBranchIOS\n.\ngetInstance\n().\nHandlePushNotification\n(\nuserInfo\n);\n\n        \n}\n\n\n        \n// Called when the Branch initialization is completed\n\n        \n// Put deep-linking logic in this method\n\n        \npublic\n \nvoid\n \nInitSessionComplete\n(\nBranchUniversalObject\n \nbuo\n,\n \nBranchLinkProperties\n \nblp\n)\n\n        \n{\n\n            \nNSObject\n[]\n \nkeys\n \n=\n \n{\n\n                \nNSObject\n.\nFromObject\n(\n+is_first_session\n)\n\n            \n};\n\n\n            \nNSObject\n[]\n \nvalues\n \n=\n \n{\n \nNSObject\n.\nFromObject\n(\n0\n)\n \n};\n\n            \nif\n \n(\nbuo\n.\nmetadata\n.\nContainsKey\n(\n+is_first_session\n))\n\n            \n{\n\n                \nvalues\n[\n0\n]\n \n=\n \nNSObject\n.\nFromObject\n(\nbuo\n.\nmetadata\n[\n+is_first_session\n]);\n\n            \n}\n\n\n            \nNSDictionary\n \nnsData\n \n=\n \nNSDictionary\n.\nFromObjectsAndKeys\n(\nvalues\n,\n \nkeys\n);\n\n        \n}\n\n\n        \n// Called when there is an error initializing Branch\n\n        \npublic\n \nvoid\n \nSessionRequestError\n(\nBranchError\n \nerror\n)\n\n        \n{\n\n            \nConsole\n.\nWriteLine\n(\nBranch error: \n \n+\n \nerror\n.\nErrorCode\n);\n\n            \nConsole\n.\nWriteLine\n(\nerror\n.\nErrorMessage\n);\n\n        \n}\n\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nCreate the project's *Application.cs\n class\n*\n\n\n\n\nRight-click on the .Droid project and select \nAdd \n New File...\n\n\nSelect: \nGeneral \n Empty File\n\n\nName the file: \nApplication.cs\n\n\nEnter the following code (replace 'TestAndroidApp' with the actual name of the app):\n\n\n\n\nusing\n \nSystem\n;\n\n\nusing\n \nAndroid.App\n;\n\n\nusing\n \nAndroid.Content\n;\n\n\nusing\n \nAndroid.Runtime\n;\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\n\nnamespace\n \nTestAndroidApp.Droid\n\n\n{\n\n\n    [Application(AllowBackup = true, Icon = \n@mipmap/icon\n, Label = \n@string/app_name\n)]\n\n\n    [MetaData(\nio.branch.sdk.auto_link_disable\n, Value = \nfalse\n)]\n\n\n    [MetaData(\nio.branch.sdk.TestMode\n, Value = \ntrue\n)]\n\n\n    [MetaData(\nio.branch.sdk.BranchKey\n, Value = \n@string/branch_key\n)]\n\n\n    \npublic\n \nclass\n \nTestAndroidApp\n \n:\n \nApplication\n\n    \n{\n\n        \npublic\n \nTestAndroidApp\n(\nIntPtr\n \njavaReference\n,\n \nJniHandleOwnership\n \ntransfer\n)\n \n:\n \nbase\n(\njavaReference\n,\n \ntransfer\n)\n\n        \n{\n\n        \n}\n\n\n        \npublic\n \noverride\n \nvoid\n \nOnCreate\n()\n\n        \n{\n\n            \nbase\n.\nOnCreate\n();\n\n            \nBranchAndroid\n.\nGetAutoInstance\n(\nthis\n.\nApplicationContext\n);\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nio.branch.sdk.TestMode\n\n\nSetting this parameter to \ntrue\n enables Debug Mode, which causes simple uninstall/reinstalls of the app to trigger \ninstall\n events. Be sure to disable this before deploying to production. Note that enabling Debug Mode on Android also forces the app to use the Branch \nTest\n key if this key has been added to the project. Apps running with a \nTest\n key will be unable to receive data from Branch links created with the \nLive\n key.\n\n\n\n\n\n\nio.branch.sdk.BranchKey\n\n\nThe app's Branch key. Both a \nLive\n key and a \nTest\n key can be added to the Strings.xml file. When \nTest\n Mode is enabled the app will automatically use the \nTest\n key, if one has been specified.\n\n\n\n\n\n\n\n\n\n\n\n\nCreate an activity to handle Branch events: BranchActivity\n\n\n\n\nRight-click on the .Droid project and select \nAdd \n New File...\n\n\nSelect: \nAndroid \n Activity\n\n\nRename the file: \nBranchActivity.cs\n\n\nEnter the following code (replace 'TestAndroidApp' with the actual name of the app):\n\n\n\n\nusing\n \nSystem\n;\n\n\nusing\n \nSystem.Collections.Generic\n;\n\n\nusing\n \nSystem.Linq\n;\n\n\nusing\n \nSystem.Text\n;\n\n\nusing\n \nNewtonsoft.Json\n;\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\n\nusing\n \nAndroid.App\n;\n\n\nusing\n \nAndroid.Content\n;\n\n\nusing\n \nAndroid.OS\n;\n\n\nusing\n \nAndroid.Runtime\n;\n\n\nusing\n \nAndroid.Views\n;\n\n\nusing\n \nAndroid.Widget\n;\n\n\n\nnamespace\n \nTestAndroidApp.Droid\n\n\n{\n\n\n    [Activity(Label = \nBranchActivity\n)]\n\n    \npublic\n \nclass\n \nBranchActivity\n \n:\n \nActivity\n\n\n    \n{\n\n        \nprivate\n \nstring\n \nlogString\n \n=\n \n;\n\n\n        \nprotected\n \noverride\n \nvoid\n \nOnCreate\n(\nBundle\n \nsavedInstanceState\n)\n\n        \n{\n\n            \nbase\n.\nOnCreate\n(\nsavedInstanceState\n);\n\n\n            \nLogMessage\n(\nBranch initialization completed: \n);\n\n\n            \nDictionary\nstring\n,\n \nobject\n \ndata\n \n=\n \nJsonConvert\n.\nDeserializeObject\nDictionary\nstring\n,\n \nobject\n(\nIntent\n.\nGetStringExtra\n(\nBranchData\n));\n\n            \nforeach\n \n(\nvar\n \nkey\n \nin\n \ndata\n.\nKeys\n)\n\n            \n{\n\n                \nLogMessage\n(\nkey\n \n+\n \n : \n \n+\n \ndata\n[\nkey\n].\nToString\n());\n\n            \n}\n\n        \n}\n\n\n        \n#region Utils\n\n\n        \nvoid\n \nLogMessage\n(\nstring\n \nmessage\n)\n\n        \n{\n\n            \nConsole\n.\nWriteLine\n(\nmessage\n);\n\n            \nlogString\n \n+=\n \nDateTime\n.\nNow\n.\nToLongTimeString\n()\n \n+\n \n \n \n+\n \nmessage\n \n+\n \n\\n\n;\n\n        \n}\n\n\n        \n#endregion\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nCreate an activity to handle Branch errors: BranchErrorActivity\n\n\n\n\nRight-click on the .Droid project and select \nAdd \n New File...\n\n\nSelect: \nAndroid \n Activity\n\n\nRename the file: \nBranchErrorActivity.cs\n\n\nEnter the following code (replace 'TestAndroidApp' with the actual name of the app):\n\n\n\n\nusing\n \nSystem\n;\n\n\nusing\n \nSystem.Collections.Generic\n;\n\n\nusing\n \nSystem.Linq\n;\n\n\nusing\n \nSystem.Text\n;\n\n\n\nusing\n \nAndroid.App\n;\n\n\nusing\n \nAndroid.Content\n;\n\n\nusing\n \nAndroid.OS\n;\n\n\nusing\n \nAndroid.Runtime\n;\n\n\nusing\n \nAndroid.Views\n;\n\n\nusing\n \nAndroid.Widget\n;\n\n\n\nnamespace\n \nTestAndroidApp.Droid\n\n\n{\n\n\n    [Activity(Label = \nBranchErrorActivity\n)]\n\n    \npublic\n \nclass\n \nBranchErrorActivity\n \n:\n \nActivity\n\n    \n{\n\n        \nprivate\n \nstring\n \nlogString\n \n=\n \n;\n\n\n        \nprotected\n \noverride\n \nvoid\n \nOnCreate\n(\nBundle\n \nsavedInstanceState\n)\n\n        \n{\n\n            \nbase\n.\nOnCreate\n(\nsavedInstanceState\n);\n\n\n            \nLogMessage\n(\nBranch initialization failed\n);\n\n            \nLogMessage\n(\nError code: \n \n+\n \nIntent\n.\nExtras\n.\nGetInt\n(\nErrorCode\n).\nToString\n());\n\n            \nLogMessage\n(\nIntent\n.\nExtras\n.\nGetString\n(\nErrorMessage\n));\n\n        \n}\n\n\n        \n#region Utils\n\n\n        \nvoid\n \nLogMessage\n(\nstring\n \nmessage\n)\n\n        \n{\n\n            \nConsole\n.\nWriteLine\n(\nmessage\n);\n\n            \nlogString\n \n+=\n \nDateTime\n.\nNow\n.\nToLongTimeString\n()\n \n+\n \n \n \n+\n \nmessage\n \n+\n \n\\n\n;\n\n        \n}\n\n\n        \n#endregion\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nInitialize Branch and configure Branch session management\n\n\nBranch must be initilialized in the OnCreate method of either the Application class or the first Activity launched by the app. The OnNewIntent method must be added to retrieve the latest link identifier when the app becomes active due to a Branch link click.\n\n\nBranch initializes asynchronously, with Branch link parameters being returned following a network call to Branch. If initialization is successful, the InitSessionComplete method will be invoked. If initialization is unsuccessful, the SessionRequestError method will be invoked. Deep link routing logic should be located in the InitSessionComplete method.\n\n\nIn the code example below the following Branch initialization and session management steps have been added to MainActivity.cs:\n\n\n\n\nAn Activity to respond to the app's URI Scheme\n\n\nAn Activity is launched in \nsingleTask\n mode\n\n\nOverride the OnCreate method and initialize the Branch SDK\n\n\nOverride the OnNewIntent method\n\n\nAdd an InitSessionComplete method for processing Branch link information (this is where deep link routing code should be located)\n\n\nAdd a SessionRequestError method to handle situations where Branch fails to initialize\n\n\n\n\n```csharp\nusing Android.App;\nusing Android.Widget;\nusing Android.OS;\nusing BranchXamarinSDK;\nusing System;\nusing System.Collections.Generic;\nusing Android.Content;\nusing Newtonsoft.Json;\n\n\nnamespace TestAndroidApp.Droid\n{\n    [Activity(Label = \"TestAndroidApp\", MainLauncher = true, Icon = \"@mipmap/icon\", LaunchMode = Android.Content.PM.LaunchMode.SingleTask)]\n\n\n[\nIntentFilter\n(\nnew\n[\n]\n \n{\n \nandroid.intent.action.VIEW\n \n}\n,\n\n\nCategories\n \n=\n \nnew\n[]\n \n{\n \nandroid.intent.category.DEFAULT\n,\n \nandroid.intent.category.BROWSABLE\n \n}\n,\n\n\nDataScheme\n \n=\n \ntestandroidapp\n,\n\n\nDataHost\n \n=\n \nopen\n)]\n\n\n\n[\nIntentFilter\n(\nnew\n[\n]\n \n{\n \nandroid.intent.action.VIEW\n \n}\n,\n\n\nCategories\n \n=\n \nnew\n[]\n \n{\n \nandroid.intent.category.DEFAULT\n,\n \nandroid.intent.category.BROWSABLE\n \n}\n,\n\n\nDataScheme\n \n=\n \nhttps\n,\n\n\nDataHost\n \n=\n \ntestandroidapp.app.link\n)]\n\n\n\n[\nIntentFilter\n(\nnew\n[\n]\n \n{\n \nandroid.intent.action.VIEW\n \n}\n,\n\n\nCategories\n \n=\n \nnew\n[]\n \n{\n \nandroid.intent.category.DEFAULT\n,\n \nandroid.intent.category.BROWSABLE\n \n}\n,\n\n\nDataScheme\n \n=\n \nhttps\n,\n\n\nDataHost\n \n=\n \ntestandroidapp-alternate.app.link\n)]\n\n\n\npublic\n \nclass\n \nMainActivity\n \n:\n \nActivity\n,\n \nIBranchSessionInterface\n\n\n{\n\n\n    \nprotected\n \noverride\n \nvoid\n \nOnCreate(Bundle\n \nsavedInstanceState)\n\n    \n{\n\n        \nbase.OnCreate(savedInstanceState)\n;\n\n\n        \nBranchAndroid.Init(this,\n \nResources.GetString(Resource.String.branch_key),\n \nthis)\n;\n\n    \n}\n\n\n    \n//\n \nEnsure\n \nwe\n \nget\n \nthe\n \nupdated\n \nlink\n \nidentifier\n \nwhen\n \nthe\n \napp\n \nbecomes\n \nactive\n\n    \n//\n \ndue\n \nto\n \na\n \nBranch\n \nlink\n \nclick\n \nafter\n \nhaving\n \nbeen\n \nin\n \nthe\n \nbackground\n\n    \nprotected\n \noverride\n \nvoid\n \nOnNewIntent\n(\nIntent\n \nintent\n)\n\n    \n{\n\n        \nthis.Intent\n \n=\n \nintent\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nInitSessionComplete\n(\nDictionary\nstring\n,\n \nobject\n \ndata\n)\n\n    \n{\n\n        \n//Handle\n \ncustom\n \nlogic\n \nbased\n \non\n \ndeep\n \nlink\n \ndata\n \nin\n \nInitSessionComplete\n\n\n        \n//View\n \nall\n \nthe\n \nlink\n \ndata\n \nin\n \nthe\n \nconsole\n\n        \nConsole.WriteLine(\nMy\n \nLink\n \nData\n:\n \n \n+\n \nJsonConvert\n.\nSerializeObject\n(\ndata\n));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//Preferred method: use BranchActivity created previously to handle the link data\n                        //Will need to update BranchActivity with desired custom logic, to open the correct page in the app\n                        (this, typeof(BranchActivity));\n                        intent.PutExtra(\"BranchData\", JsonConvert.SerializeObject(data));\n\n\n                    \nStartActivity\n(\nintent\n);\nvar\n \nintent\n \n=\n \nnew\n \nIntent\n\n                \n}\n\n\n                \npublic\n \nvoid\n \nSessionRequestError\n(\nBranchError\n \nerror\n)\n\n                \n{\n\n                    \nConsole.WriteLine(\nBranch\n \nsession\n \ninitialization\n \nerror\n:\n \n + error.ErrorCode);\n\n\n                    Console.WriteLine(error.ErrorMessage);\n\n\n\n                    var intent = new Intent(this, typeof(BranchErrorActivity));\n\n\n                    intent.PutExtra(\nErrorCode\n, error.ErrorCode);\n\n\n                    intent.PutExtra(\nErrorMessage\n,\n \nerror\n.\nErrorMessage\n);\n\n\n                    \nStartActivity(intent)\n;\n\n                \n}\n\n            \n}\n\n        \n}\n\n        \n```\n\n\n\n\n\n\n\n\n\n\nConfigure Branch with Xamarin Forms\n\n\n\n\n\n\nChange the C# project's profile to PCL 4.5 - Profile78\n\n\n\n\nRight-click on the project name and select: \nOptions\n\n\nBrowse the menu to \nBuild \n General\n\n\nChange the \nCurrent Profile\n to: \nPCL 4.5 - Profile78\n\n\n\n\n\n\n\n\nAdd the Branch SDK with NuGet\n\n\nThe Branch Xamarin SDK is available as a NuGet package. The \nBranch NuGet package\n must be added to each of the Xamarin projects that will use Branch methods.\n\n\n\n\nRight-click on each project and select \nAdd \n Add NuGet Packages\n\n\nIf not already present, find the \nMicrosoft BCL Build Components\n package version 1.0.21 and add it to the project\n\n\nFind the \nBranch Xamarin SDK\n package version 3.0 and add it to the project\n\n\n\n\n\n\n\n\nCreate a class for Branch session handling\n\n\nBranch initializes asynchronously, with Branch link parameters being returned following a network call to Branch. If initialization is successful, the InitSessionComplete method will be invoked. If initialization is unsuccessful, the SessionRequestError method will be invoked. Deep link routing logic should be located in the InitSessionComplete method.\n\n\n\n\nRight-click on the C# project and select \nAdd \n New File...\n\n\nSelect: \nGeneral \n Empty Class\n\n\nRename the file: \nTestXamarinFormsApp.cs\n\n\nEnter the following code (replacing 'TestXamarinFormsApp' with the actual name of the app):\n\n\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\nusing\n \nSystem.Collections.Generic\n;\n\n\nusing\n \nSystem.ComponentModel\n;\n\n\nusing\n \nXamarin.Forms\n;\n\n\n\nnamespace\n \nTestXamarinFormsApp\n\n\n{\n\n    \npublic\n \nclass\n \nTestXamarinFormsApp\n \n:\n \nApplication\n,\n \nIBranchSessionInterface\n\n    \n{\n\n\n        \npublic\n \nTestXamarinFormsApp\n()\n\n        \n{\n\n        \n}\n\n\n        \n#region IBranchSessionInterface implementation\n\n\n        \npublic\n \nvoid\n \nInitSessionComplete\n(\nDictionary\nstring\n,\n \nobject\n \ndata\n)\n\n        \n{\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nCloseSessionComplete\n()\n\n        \n{\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nSessionRequestError\n(\nBranchError\n \nerror\n)\n\n        \n{\n\n        \n}\n\n\n        \n#endregion\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nCreate a class for handling link data\n\n\nBranch stores link data in an object referred to as the \nBranch Universal Object\n, or \nBUO\n.\n\n\n\n\nRight-click on the C# project and select \nAdd \n New File...\n\n\nSelect: \nGeneral \n Empty Class\n\n\nRename the file: \nTestXamarinFormsAppBUO.cs\n\n\nEnter the following code (replace 'TestXamarinFormsApp' with the actual name of the app):\n\n\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\nusing\n \nSystem.Collections.Generic\n;\n\n\nusing\n \nSystem.ComponentModel\n;\n\n\nusing\n \nXamarin.Forms\n;\n\n\n\nnamespace\n \nTestXamarinFormsApp\n\n\n{\n\n    \npublic\n \nclass\n \nTestXamarinFormsAppBUO\n \n:\n \nApplication\n,\n \nIBranchBUOSessionInterface\n\n    \n{\n\n\n        \npublic\n \nTestXamarinFormsAppBUO\n()\n\n        \n{\n\n        \n}\n\n\n        \n#region IBranchBUOSessionInterface implementation\n\n\n        \npublic\n \nvoid\n \nInitSessionComplete\n(\nBranchUniversalObject\n \nbuo\n,\n \nBranchLinkProperties\n \nblp\n)\n\n        \n{\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nSessionRequestError\n(\nBranchError\n \nerror\n)\n\n        \n{\n\n        \n}\n\n\n        \n#endregion\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\niOS\n\n\n\n\n\n\nCreate an Apple device Provisioning Profile for the app\n\n\n\n\nOpen Xcode and create a new project with the same name as your Xamarin iOS project\n\n\nOn the Xcode project's \nGeneral\n tab, enter the app's Bundle Identifier and select the appropriate Team (be sure to resolve any errors here)\n\n\nSelect the \nCapabilities\n tab and enable the \nAssociated Domains\n entitlement\n\n\nCreate 'applinks:' entries for the Branch link domain assigned to the app (the link domain can be found at the bottom of the Branch dashboard's \nLink Settings\n page). For example, the entries for the app \nTestXamarinFormsApp\n would be:\n\napplinks:testxamarinformsapp.app.link\n\n\napplinks:testxamarinformsapp-alternate.app.link\n\n\nUse Xcode to run this newly-created app on an iOS device. This will create and install a Provisioning Profile with the proper entitlements on that device.\n\n\nClose Xcode\n\n\n\n\n\n\n\n\nEnter the app's settings on the Branch dashboard\n\n\n\n\nOn the \nLink Settings\n page, check the \nI have an iOS App\n checkbox\n\n\nEnter the app's URI Scheme in the \niOS URI Scheme\n field (for an app with the URI Scheme \ntestxamarinformsapp\n, for example, the entry would be: \ntestxamarinformsapp://\n)\n\n\nEnter the app's Apple Store name in the \nApple Store Search\n field (if the app is not yet available on the App Store select \nCustom URL\n and enter as a placeholder the URL of an appropriate web site - the exact site does not matter)\n\n\nCheck the \nEnable Universal Links\n checkbox\n\n\nEnter the app's Bundle Identifier and Apple App Prefix as shown on the \nApple Developer Portal\n\n\n\n\n\n\n\n\nConfigure the Xamarin project's Info.plist file\n\n\n\n\nOpen the \nInfo.plist\n file\n\n\nEnter the app's \nBundle Identifier\n from the \nApple Developer Portal\n in the \nBundle Identifier\n field. \nIMPORTANT:\n this field will automatically be populated with an all-lowercase value by Xamarin. The value is in fact case sensitive and must match the value in the \nApple Developer Portal\n precisely.\n\n\nClick on the \nAdvanced\n tab\n\n\nIn the \nURL Types\n section, click the \nAdd URL Type\n button\n\nIdentifier:\n Branch Scheme\n\nURL Schemes:\n {the app's URI Scheme - 'testxamarinformsapp', for example}\n\nRole:\n Editor\n\n\n\n\n\n\n\n\n\n\nConfigure the Xamarin project's Associated Domains entitlement\n\n\n\n\nOpen the \nEntitlements.plist\n file and browse to \nAssociated Domains\n (if this file does not already exist, create it)\n\n\nCreate entries for both the app's link domain and its alternate link domain. The entries for the TestBed-Xamarin app would be:\n\napplinks:testxamarinformsapp.app.link\n\n\napplinks:testxamarinformsapp-alternate.app.link\n\n\n\n\n\n\n\n\n\n\nAdd Branch calls to the AppDelegate.cs file\n\n\nTo ensure that the Branch SDK initializes when the app starts and can retrieve link parameters whenever the app becomes active, Branch initialization occurs within the \nFinishedLaunching\n method of the AppDelegate.cs file. Branch calls are also required in the OpenUrl, ContinueUserActivity, and ReceiveRemoteNotification methods to ensure that Branch link information is handled properly whenever the app becomes active. The \nAppDelegate.cs\n file should look like this:\n\n\nusing\n \nSystem\n;\n\n\nusing\n \nSystem.Collections.Generic\n;\n\n\nusing\n \nSystem.Linq\n;\n\n\n\nusing\n \nFoundation\n;\n\n\nusing\n \nUIKit\n;\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\nusing\n \nTestXamarinFormsApp\n;\n\n\n\nnamespace\n \nTestXamarinFormsApp.iOS\n\n\n{\n\n\n    [Register(\nAppDelegate\n)]\n\n    \npublic\n \npartial\n \nclass\n \nAppDelegate\n \n:\n \nglobal\n::\nXamarin\n.\nForms\n.\nPlatform\n.\niOS\n.\nFormsApplicationDelegate\n\n    \n{\n\n        \npublic\n \noverride\n \nbool\n \nFinishedLaunching\n(\nUIApplication\n \napp\n,\n \nNSDictionary\n \noptions\n)\n\n        \n{\n\n            \nglobal\n::\nXamarin\n.\nForms\n.\nForms\n.\nInit\n();\n\n\n            \n// Debug mode - set to \nfalse\n before releasing to production\n\n            \nBranchIOS\n.\nDebug\n \n=\n \ntrue\n;\n\n\n            \nTestXamarinFormsAppBUO\n \nappBUO\n \n=\n \nnew\n \nTestXamarinFormsAppBUO\n();\n\n            \nBranchIOS\n.\nInit\n(\nkey_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW\n,\n \noptions\n,\n \nappBUO\n);\n\n            \nLoadApplication\n(\nappBUO\n);\n\n\n            \nreturn\n \nbase\n.\nFinishedLaunching\n(\napp\n,\n \noptions\n);\n\n        \n}\n\n\n        \n// Called when the app is opened via URI scheme\n\n        \npublic\n \noverride\n \nbool\n \nOpenUrl\n(\nUIApplication\n \napplication\n,\n \nNSUrl\n \nurl\n,\n \nstring\n \nsourceApplication\n,\n \nNSObject\n \nannotation\n)\n\n        \n{\n\n            \nreturn\n \nBranchIOS\n.\ngetInstance\n().\nOpenUrl\n(\nurl\n);\n\n        \n}\n\n\n        \n// Called when the app is opened from a Universal Link\n\n        \npublic\n \noverride\n \nbool\n \nContinueUserActivity\n(\nUIApplication\n \napplication\n,\n \nNSUserActivity\n \nuserActivity\n,\n \nUIApplicationRestorationHandler\n \ncompletionHandler\n)\n\n        \n{\n\n            \nreturn\n \nBranchIOS\n.\ngetInstance\n().\nContinueUserActivity\n(\nuserActivity\n);\n\n        \n}\n\n\n        \n// Called when the app receives a push notification\n\n        \npublic\n \noverride\n \nvoid\n \nReceivedRemoteNotification\n(\nUIApplication\n \napplication\n,\n \nNSDictionary\n \nuserInfo\n)\n\n        \n{\n\n            \nBranchIOS\n.\ngetInstance\n().\nHandlePushNotification\n(\nuserInfo\n);\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n\n\n\n\nEnsure that the Android project is not using the Shared Mono Runtime\n\n\n\n\nRight-click on the Android project and select: \nOptions\n\n\nSelect: \nAndroid Build\n\n\nOn the \nGeneral\n tab, un-check: \nUse Shared Mono Runtime\n\n\n\n\n\n\n\n\nAdd app capabilities in the AndroidManifest.xml file\n\n\nIn the \nRequired permissions\n section of \nAndroidManifest.xml\n, configure the following permissions:\n\n\n\n\nAccessNetworkState\n\n\nInternet\n\n\n\n\nAdditional reading on the Android manifest\n\n\n\n\nWorking with android manifest.xml\n\n\nAdd permissions to android manifest\n\n\n\n\n\n\n\n\nAdd the app's Branch key to the Strings.xml file\n\n\nCreate a \nResources/values/Strings.xml\n file that can be accessed by the app's Application class for the Android project and add the Branch key to this file.\n\n\n\n\nIn the Android project, browse to \nResources/values\n\n\nRight-click on the \nvalues\n folder and select: \nAdd \n New File...\n\n\nSelect: \nXML \n Empty XML File\n\n\nName the file: \nStrings\n\n\nEnter the following values:\n\n\n\n\n?xml version=\n1.0\n encoding=\nutf-8\n?\n\n\nresources\n\n    \nstring\n \nname=\napp_name\nTestXamarinFormsApp\n/string\n\n    \nstring\n \nname=\nbranch_key\nkey_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW\n/string\n\n\n/resources\n\n\n\n\n\n\n\n\n\nConfigure the .Droid project's Application class\n\n\nWithin the .Droid project's Application class:\n\n\n\n\nSet the Branch SDK's initialization parameters\n\n\nOverride the \nOnCreate()\n method to call \nBranchAndroid.GetAutoInstance\n\n\n\n\nIf an Appplication class does not already exist for the project, create one:\n\n\n\n\nRight-click on the .Droid project and select: \nAdd \n New File...\n\n\nSelect: \nGeneral \n Empty Class\n\n\nName the file: \n{app name}\n ('TestXamarinFormsApp', for example)\n\n\n\n\nThe file should have the following contents:\n\n\nusing\n \nSystem\n;\n\n\nusing\n \nAndroid.App\n;\n\n\nusing\n \nAndroid.Content\n;\n\n\nusing\n \nAndroid.Runtime\n;\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\n\nnamespace\n \nTestXamarinFormsApp.Droid\n\n\n{\n\n\n\n    [Application (AllowBackup = true, Icon = \n@drawable/icon\n, Label = \n@string/app_name\n)]\n\n\n    [MetaData(\nio.branch.sdk.auto_link_disable\n, Value = \nfalse\n)]\n\n\n    [MetaData(\nio.branch.sdk.TestMode\n, Value = \ntrue\n)]\n\n\n    [MetaData(\nio.branch.sdk.BranchKey\n, Value = \n@string/branch_key\n)]\n\n\n    \npublic\n \nclass\n \nApp\n \n:\n \nApplication\n\n    \n{\n\n        \npublic\n \nApp\n(\nIntPtr\n \njavaReference\n,\n \nJniHandleOwnership\n \ntransfer\n)\n \n:\n \nbase\n(\njavaReference\n,\n \ntransfer\n)\n\n        \n{\n\n        \n}\n\n\n        \npublic\n \noverride\n \nvoid\n \nOnCreate\n()\n\n        \n{\n\n            \nbase\n.\nOnCreate\n();\n\n            \nBranchAndroid\n.\nGetAutoInstance\n(\nthis\n.\nApplicationContext\n);\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nio.branch.sdk.TestMode\n\n\nSetting this parameter to \ntrue\n enables Debug Mode, which causes simple uninstall/reinstalls of the app to trigger \ninstall\n events. Be sure to disable this before deploying to production. Note that enabling Debug Mode on Android also forces the app to use the Branch \nTest\n key if this key has been added to the project. Apps running with a \nTest\n key will be unable to receive data from Branch links created with the \nLive\n key.\n\n\n\n\n\n\nio.branch.sdk.BranchKey\n\n\nThe app's Branch key. Both a \nLive\n key and a \nTest\n key can be added to the Strings.xml file. When \nTest\n Mode is enabled the app will automatically use the \nTest\n key, if one has been specified.\n\n\n\n\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\nBranch must be initilialized in the OnCreate method of either the Application class or the first Activity launched by the app. The OnNewIntent method must be added to retrieve the latest link identifier when the app becomes active due to a Branch link click.\n\n\nIn the code example below the following Branch initialization and session management steps have been added to MainActivity.cs:\n\n\n\n\nRegister an Activity to respond to the app's URI Scheme\n\n\nEnsure the Activity is launched in \nsingleTask\n mode\n\n\nOverride the OnCreate method and initialize the Branch SDK\n\n\nOverride the OnNewIntent method\n\n\n\n\nusing\n \nSystem\n;\n\n\n\nusing\n \nAndroid.App\n;\n\n\nusing\n \nAndroid.Content\n;\n\n\nusing\n \nAndroid.Content.PM\n;\n\n\nusing\n \nAndroid.Runtime\n;\n\n\nusing\n \nAndroid.Views\n;\n\n\nusing\n \nAndroid.Widget\n;\n\n\nusing\n \nAndroid.OS\n;\n\n\n\nusing\n \nBranchXamarinSDK\n;\n\n\nusing\n \nTestXamarinFormsApp\n;\n\n\n\nnamespace\n \nTestXamarinFormsApp.Droid\n\n\n{\n\n\n    [Activity(Label = \nTestXamarinFormsApp.Droid\n, LaunchMode = LaunchMode.SingleTask, Icon = \n@drawable/icon\n, Theme = \n@style/MyTheme\n, MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]\n\n\n\n    [IntentFilter(new[]\n \n{\n \nandroid.intent.action.VIEW\n \n},\n\n        \nCategories\n \n=\n \nnew\n[]\n \n{\n \nandroid.intent.category.DEFAULT\n,\n \nandroid.intent.category.BROWSABLE\n \n},\n\n        \nDataScheme\n \n=\n \ntestxamarinformsapp\n,\n\n        \nDataHost\n \n=\n \nopen\n)]\n\n\n\n    [IntentFilter(new[]\n \n{\n \nandroid.intent.action.VIEW\n \n},\n\n        \nCategories\n \n=\n \nnew\n[]\n \n{\n \nandroid.intent.category.DEFAULT\n,\n \nandroid.intent.category.BROWSABLE\n \n},\n\n        \nDataScheme\n \n=\n \nhttps\n,\n\n        \nDataHost\n \n=\n \ntestxamarinformsapp.app.link\n)]\n\n\n    \npublic\n \nclass\n \nMainActivity\n \n:\n \nglobal\n::\nXamarin\n.\nForms\n.\nPlatform\n.\nAndroid\n.\nFormsApplicationActivity\n\n    \n{\n\n        \nprotected\n \noverride\n \nvoid\n \nOnCreate\n(\nBundle\n \nsavedInstanceState\n)\n\n        \n{\n\n            \nbase\n.\nOnCreate\n(\nsavedInstanceState\n);\n\n\n            \nglobal\n::\nXamarin\n.\nForms\n.\nForms\n.\nInit\n(\nthis\n,\n \nsavedInstanceState\n);\n\n\n            \nTestXamarinFormsAppBUO\n \nlinkData\n \n=\n \nnew\n \nTestXamarinFormsAppBUO\n();\n\n            \nBranchAndroid\n.\nInit\n(\nthis\n,\n \nGetString\n(\nResource\n.\nString\n.\nbranch_key\n),\n \nlinkData\n);\n\n            \nLoadApplication\n(\nlinkData\n);\n\n        \n}\n\n\n        \nprotected\n \noverride\n \nvoid\n \nOnNewIntent\n(\nIntent\n \nintent\n)\n\n        \n{\n\n            \nthis\n.\nIntent\n \n=\n \nintent\n;\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTest deep link iOS\n\n\n\n\n\n\nCreate a deep link from the \nBranch Marketing Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app with Xcode\n\n\n\n\n\n\nPaste deep link in \nApple Notes\n\n\n\n\n\n\nLong press on the deep link \n(not 3D Touch)\n\n\n\n\n\n\nClick \nOpen in \"APP_NAME\"\n to open your app \n(\nexample\n)\n\n\n\n\n\n\n\n\n\n\nTest deep link Android\n\n\n\n\n\n\nCreate a deep link from the \nBranch Marketing Dashboard\n\n\n\n\n\n\nDelete your app from the device\n\n\n\n\n\n\nCompile your app with Android Studio\n\n\n\n\n\n\nPaste deep link in \nGoogle Hangouts\n\n\n\n\n\n\nClick on the deep link to open your app\n\n\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nCreate content reference\n\n\n\n\n\n\nThe \nBranch Universal Object\n encapsulates the thing you want to share\n\n\n\n\n\n\nUses \nUniversal Object properties\n\n\n\n\n\n\nBranchUniversalObject\n \nuniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n();\n\n\nuniversalObject\n.\ncanonicalIdentifier\n \n=\n \nid12345\n;\n\n\nuniversalObject\n.\ntitle\n \n=\n \nid12345 title\n;\n\n\nuniversalObject\n.\ncontentDescription\n \n=\n \nMy awesome piece of content!\n;\n\n\nuniversalObject\n.\nimageUrl\n \n=\n \nhttps://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png\n;\n\n\nuniversalObject\n.\nmetadata\n.\nAdd\n(\nfoo\n,\n \nbar\n);\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nGenerates a deep link within your app\n\n\n\n\n\n\nNeeds a \nCreate content reference\n\n\n\n\n\n\nNeeds a \nCreate link reference\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nBranchLinkProperties\n \nlinkProperties\n \n=\n \nnew\n \nBranchLinkProperties\n();\n\n\nlinkProperties\n.\ntags\n.\nAdd\n(\ntag1\n);\n\n\nlinkProperties\n.\ntags\n.\nAdd\n(\ntag2\n);\n\n\nlinkProperties\n.\nfeature\n \n=\n \nsharing\n;\n\n\nlinkProperties\n.\nchannel\n \n=\n \nfacebook\n;\n\n\nlinkProperties\n.\ncontrolParams\n.\nAdd\n(\n$desktop_url\n,\n \nhttp://example.com\n);\n\n\n\nBranch\n.\nGetInstance\n().\nGetShortURL\n(\ncallback\n,\n\n                                  \nuniversalObject\n,\n\n                                  \nlinkProperties\n);\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nNeeds a \nCreate content reference\n\n\n\n\n\n\nNeeds a \nCreate link reference\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nShareLink\n \n(\nIBranchLinkShareInterface\n \ncallback\n,\n\n           \nBranchUniversalObject\n \nuniversalObject\n,\n\n           \nBranchLinkProperties\n \nlinkProperties\n,\n\n           \nstring\n \nmessage\n)\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nReturns \ndeep link properties\n\n\n\n\n\n\n// latest\n\n\nDictionary\nstring\n,\n \nobject\n \nsessionParams\n \n=\n \nBranch\n.\nGetInstance\n().\nGetLatestReferringParams\n();\n\n\n\n// first\n\n\nDictionary\nstring\n,\n \nobject\n \ninstallParams\n \n=\n \nBranch\n.\nGetInstance\n().\nGetFirstReferringParams\n();\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nbranch\n.\nSetIdentity\n(\nthe user id\n,\n \nthis\n);\n  \n// Where this implements IBranchIdentityInterface\n\n\nbranch\n.\nLogout\n(\nthis\n);\n \n// Where this implements IBranchIdentityInterface\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nbranch\n.\nUserCompletedAction\n(\nthe_custom_event\n);\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nRegisters a custom commerce event\n\n\n\n\n\n\nUses \nTrack commerce properties\n for \nCurrency\n and \nCategory\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n\n\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nDictionary\nstring\n,\n \nobject\n \ndata\n \n=\n \nnew\n \nDictionary\nstring\n,\n \nobject\n();\n\n\ndata\n.\nAdd\n(\nsku\n,\n \n123456789\n);\n\n\nbranch\n.\nUserCompletedAction\n(\npurchase_event\n,\n \ndata\n);\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral points are obtained from referral rules on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits\n\n\n\n\nReferral guide\n\n\n\n\n\n\n\n\nRedeem credits\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nbranch\n.\nRedeemRewards\n(\nthis\n,\n \namount\n,\n \nbucket\n);\n\n\n\n#region IBranchRewardsInterface implementation\n\n\n        \npublic\n \nvoid\n \nRewardsLoaded\n \n()\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nRewardsRedeemed\n \n()\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nCreditHistory\n \n(\nList\nCreditHistoryEntry\n \nhistory\n)\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nRewardsRequestError\n \n(\nBranchError\n \nerror\n)\n\n        \n{\n\n         \n// Do something with the data...\n\n        \n}\n\n\n        \n#endregion\n\n\n\n\n\n\n\n\n\nLoad credits\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nbranch\n.\nLoadRewards\n(\nthis\n);\n\n\n\n#region IBranchRewardsInterface implementation\n\n\n        \npublic\n \nvoid\n \nRewardsLoaded\n \n()\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nRewardsRedeemed\n \n()\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nCreditHistory\n \n(\nList\nCreditHistoryEntry\n \nhistory\n)\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n        \npublic\n \nvoid\n \nRewardsRequestError\n \n(\nBranchError\n \nerror\n)\n\n        \n{\n\n            \n// Do something with the data...\n\n        \n}\n\n\n\n#endregion\n\n\n\n\n\n\n\n\n\nLoad history\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\nGetInstance\n \n();\n\n\nbranch\n.\nGetCreditHistory\n(\nthis\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nUnable to add Branch-required NuGet packages to the C# project\n\n\nAdding required NuGet packages to the C# project may fail if the project has not been configured to use \nPCL 4.5 - Profile78\n\n\n\n\nRight-click on the project name and select: \nOptions\n\n\nBrowse the menu to \nBuild \n General\n\n\nChange the \nCurrent Profile\n to: \nPCL 4.5 - Profile78\n\n\n\n\n\n\n\n\nAndroid app fails to build with linking errors\n\n\nThe Newtonsoft JSON NuGet package is automatically added to a project when the Branch Xamarin SDK NuGet package is added. There is a known issue with this package that results in linking errors when building a project.\n\n\nerror XA0009: Error while loading assembly: /Users/david/Projects/TestXamarinFormsApp/Droid/obj/Debug/android/assets/mscorlib.dll\n\n\nTo resolve this issue with the Newtonsoft JSON NuGet package:\n\n\n\n\nRight-click on the project and select Options\n\n\nGo to \nAndroid Build\n and select the \nLinker\n tab\n\n\nSelect: \nRelease\n\n\nGo to the \nIgnore assemblies\n box\n\n\nAdd: \nSystem.Core\n\n\nRebuild the app\n\n\n\n\n\n\n\n\nDeploying iOS app to device fails with Provisioning Profile erros after changing entitlements\n\n\nXamarin automatically populates the \nBundle Identifier\n field in the \nInfo.plist\n file with an all-lowercase value derived from the app's name. This value is in fact case sensitive and must match the value in the \nApple Developer Portal\n precisely. The default Xamarin configuration may work when there are no entitlements configured and then suddenly begin failing after entitlements have been added.\n\n\nThis issue can be resolved by ensuring that the \nBundle Identifier\n in the \nInfo.plist\n matches the \nBundle Identifier\n shown on the \nApple Developer Portal\n.\n\n\n\n\nOpen the \nInfo.plist\n file\n\n\nEnter the app's \nBundle Identifier\n from the \nApple Developer Portal\n in the \nBundle Identifier\n field\n\n\n\n\n\n\n\n\nSample apps\n\n\nThere are four fully-functional demo apps included in this repository: a Xamarin Native and Xamarin Forms apps for both iOS and Android platforms. Use these apps as reference models for integrating the Branch SDK.\n\n\n\n\n\n\nTestbed-Xamarin (Native apps)\n\n\n\n\niOS\n\n\nAndroid\n\n\n\n\n\n\n\n\nTestbed-XamarinForms (Forms apps)\n\n\n\n\niOS\n\n\nAndroid", 
            "title": "Xamarin"
        }, 
        {
            "location": "/pages/apps/xamarin/#integrate-branch", 
            "text": "Inconsistent Universal links behavior on iOS 11.2  After updating a device to iOS 11.2, we found that the app's AASA file is no longer downloaded reliably onto your user\u2019s device after an app install. As a result, clicking on Universal links will no longer open the app consistenly. You can set  forced uri redirect mode  on your Branch links to open the app with URI schemes. View details of the issue on the  Apple Bug report .", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/apps/xamarin/#configure-branch", 
            "text": "Complete your  Branch Dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/apps/xamarin/#install-branch", 
            "text": "Nuget  The Branch Xamarin SDK is available as a NuGet package. The  Branch NuGet package  must be added to each of the Xamarin projects that will use Branch methods.  To add the Branch NuGet package to a project:   Right-click on each project and select  Add     Add NuGet Packages  If not already present, find the  Microsoft BCL Build Components  package version 1.0.21 and add it to the project  Find the  Branch Xamarin SDK  package version 3.0 and add it to the project     Manually  If, instead of using NuGet, you would rather build and reference the Branch assemblies directly:   Clone this repository to the local machine:  https://github.com/BranchMetrics/xamarin-branch-deep-linking.git  Add the  Branch-Xamarin-SDK  project to the solution and reference it from the Android, iOS and Forms (if applicable) projects  Add the  Branch-Xamarin-SDK.Droid  project to the solution and reference it from the Android project, if any  Add the  Branch-Xamarin-SDK.iOS  project and reference it from the iOS project, if any", 
            "title": "Install Branch"
        }, 
        {
            "location": "/pages/apps/xamarin/#configure-app", 
            "text": "iOS    Create an Apple device Provisioning Profile for the app   Open Xcode and create a new project with the same name as your Xamarin iOS project  On the Xcode project's  General  tab, verify the app's case-sensitive Bundle Identifier is correct and select the appropriate Team (be sure to resolve any errors here)  Select the  Capabilities  tab and enable the  Associated Domains  entitlement  Create 'applinks:' entries for the Branch link domain and the alternate link domain (the link domain can be found at the bottom of the Branch dashboard's  Link Settings  page). For example, the entries for an app with the default link domain 'testiosapp.app.link' would be: applinks:testiosapp.app.link  applinks:testiosapp-alternate.app.link  Use Xcode to run this newly-created app on an iOS device. This will create and install a Provisioning Profile with the proper entitlements on that device.  Close Xcode     Enter the app's settings on the Branch dashboard   On the  Link Settings  page, check the  I have an iOS App  checkbox  Enter the app's URI Scheme in the  iOS URI Scheme  field (for an app with the URI Scheme  testbed-xamarin , for example, the entry would be:  testbed-xamarin:// )  Enter the app's Apple Store name in the  Apple Store Search  field (if the app is not yet available on the App Store select  Custom URL  and enter as a placeholder the URL of an appropriate web site - the exact site does not matter)  Check the  Enable Universal Links  checkbox  Enter the app's case-sensitive Bundle Identifier and Apple App Prefix as shown on the  Apple Developer Portal     Configure the Xamarin project's Info.plist file   Open the  Info.plist  file  Enter the app's  Bundle Identifier  from the  Apple Developer Portal  in the  Bundle Identifier  field.  IMPORTANT:  this field will automatically be populated with an all-lowercase value by Xamarin. The value is in fact case sensitive and must match the value in the  Apple Developer Portal  precisely.  Click on the  Advanced  tab  In the  URL Types  section, click the  Add URL Type  button Identifier:  Branch Scheme URL Schemes:  {the app's URI Scheme - 'testiosapp', for example} Role:  Editor      Configure the Xamarin project's Associated Domains entitlement   Open the  Entitlements.plist  file and browse to  Associated Domains  Create entries for both the app's link domain and its alternate link domain. The entries for the TestBed-Xamarin app would be: applinks:testiosapp.app.link  applinks:testiosapp-alternate.app.link      Update the project's Signing Identity and Provisioning Profile   Right-click on the iOS project and select  Options  Select  iOS Bundle Signing  Set the  Signing Identity  and  Provisioning Profile values  to the values used when deploying the Provisioning Profile to the device above       Android    Ensure that the Android project is not using the Shared Mono Runtime   Right-click on the Android project and select:  Options  Select:  Android Build  On the  General  tab, un-check:  Use Shared Mono Runtime     Add app capabilities in the app's Manifest file  In the  Required permissions  section of  AndroidManifest.xml , configure the following permissions:   AccessNetworkState  Internet   Additional reading on the Android manifest:   Working with android manifest.xml  Add permissions to android manifest     Add the app's Branch key to the Strings.xml file  Add the Branch key to the Android project's  Resources/values/Strings.xml  file. This file contains values that can be accessed by the app's Application class.  ?xml version= 1.0  encoding= utf-8 ?  resources \n     string   name= app_name TestXamarinFormsApp /string \n     string   name= branch_key key_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW /string  /resources", 
            "title": "Configure app"
        }, 
        {
            "location": "/pages/apps/xamarin/#initialize-branch", 
            "text": "iOS  Branch initialization occurs within the  FinishedLaunching  method of the  AppDelegate.cs  file. Branch calls are also required in the  OpenUrl ,  ContinueUserActivity , and  ReceiveRemoteNotification  methods to ensure that Branch link information is handled properly whenever the app becomes active.  Whenever the app becomes active, the Branch SDK will reach out to the Branch back end to retrieve any available link parameters. If the app became active due to a click on a Branch link, the link data will be returned in the  InitSessionComplete method . This is where any deep link routing logic should reside. Any error in retrieving Branch link data from the back end will returned in the  SessionRequestError  method.  // AppDelegate.cs  using   Foundation ;  using   UIKit ;  using   BranchXamarinSDK ;  using   BranchXamarinSDK.iOS ;  using   System ;  namespace   TestiOSApp.iOS  {      [Register( AppDelegate )] \n     public   class   AppDelegate   :   UIApplicationDelegate ,   IBranchBUOSessionInterface \n     { \n         public   override   UIWindow   Window \n         { \n             get ; \n             set ; \n         } \n\n         public   override   bool   FinishedLaunching ( UIApplication   application ,   NSDictionary   launchOptions ) \n         { \n             // Debug mode - set to  false  before releasing to production \n             BranchIOS . Debug   =   true ; \n             BranchIOS . Init ( key_live_cgEguO4UiDJSL4HIyTu85dkkDAdz38ER ,   launchOptions ,   this ); \n\n             return   true ; \n         } \n\n         // Called when the app is opened via URI scheme \n         public   override   bool   OpenUrl ( UIApplication   application ,   NSUrl   url ,   string   sourceApplication ,   NSObject   annotation ) \n         { \n             return   BranchIOS . getInstance (). OpenUrl ( url ); \n         } \n\n         // Called when the app is opened from a Universal Link \n         public   override   bool   ContinueUserActivity ( UIApplication   application ,   NSUserActivity   userActivity , \n                       UIApplicationRestorationHandler   completionHandler ) \n         { \n             return   BranchIOS . getInstance (). ContinueUserActivity ( userActivity ); \n         } \n\n         // Called when the app receives a push notification \n         public   override   void   ReceivedRemoteNotification ( UIApplication   application ,   NSDictionary   userInfo ) \n         { \n             BranchIOS . getInstance (). HandlePushNotification ( userInfo ); \n         } \n\n         // Called when the Branch initialization is completed \n         // Put deep-linking logic in this method \n         public   void   InitSessionComplete ( BranchUniversalObject   buo ,   BranchLinkProperties   blp ) \n         { \n             NSObject []   keys   =   { \n                 NSObject . FromObject ( +is_first_session ) \n             }; \n\n             NSObject []   values   =   {   NSObject . FromObject ( 0 )   }; \n             if   ( buo . metadata . ContainsKey ( +is_first_session )) \n             { \n                 values [ 0 ]   =   NSObject . FromObject ( buo . metadata [ +is_first_session ]); \n             } \n\n             NSDictionary   nsData   =   NSDictionary . FromObjectsAndKeys ( values ,   keys ); \n         } \n\n         // Called when there is an error initializing Branch \n         public   void   SessionRequestError ( BranchError   error ) \n         { \n             Console . WriteLine ( Branch error:    +   error . ErrorCode ); \n             Console . WriteLine ( error . ErrorMessage ); \n         } \n\n     }  }     Android    Create the project's *Application.cs  class *   Right-click on the .Droid project and select  Add   New File...  Select:  General   Empty File  Name the file:  Application.cs  Enter the following code (replace 'TestAndroidApp' with the actual name of the app):   using   System ;  using   Android.App ;  using   Android.Content ;  using   Android.Runtime ;  using   BranchXamarinSDK ;  namespace   TestAndroidApp.Droid  {      [Application(AllowBackup = true, Icon =  @mipmap/icon , Label =  @string/app_name )]      [MetaData( io.branch.sdk.auto_link_disable , Value =  false )]      [MetaData( io.branch.sdk.TestMode , Value =  true )]      [MetaData( io.branch.sdk.BranchKey , Value =  @string/branch_key )] \n\n     public   class   TestAndroidApp   :   Application \n     { \n         public   TestAndroidApp ( IntPtr   javaReference ,   JniHandleOwnership   transfer )   :   base ( javaReference ,   transfer ) \n         { \n         } \n\n         public   override   void   OnCreate () \n         { \n             base . OnCreate (); \n             BranchAndroid . GetAutoInstance ( this . ApplicationContext ); \n         } \n     }  }      Key  Value      io.branch.sdk.TestMode  Setting this parameter to  true  enables Debug Mode, which causes simple uninstall/reinstalls of the app to trigger  install  events. Be sure to disable this before deploying to production. Note that enabling Debug Mode on Android also forces the app to use the Branch  Test  key if this key has been added to the project. Apps running with a  Test  key will be unable to receive data from Branch links created with the  Live  key.    io.branch.sdk.BranchKey  The app's Branch key. Both a  Live  key and a  Test  key can be added to the Strings.xml file. When  Test  Mode is enabled the app will automatically use the  Test  key, if one has been specified.       Create an activity to handle Branch events: BranchActivity   Right-click on the .Droid project and select  Add   New File...  Select:  Android   Activity  Rename the file:  BranchActivity.cs  Enter the following code (replace 'TestAndroidApp' with the actual name of the app):   using   System ;  using   System.Collections.Generic ;  using   System.Linq ;  using   System.Text ;  using   Newtonsoft.Json ;  using   BranchXamarinSDK ;  using   Android.App ;  using   Android.Content ;  using   Android.OS ;  using   Android.Runtime ;  using   Android.Views ;  using   Android.Widget ;  namespace   TestAndroidApp.Droid  {      [Activity(Label =  BranchActivity )] \n     public   class   BranchActivity   :   Activity \n\n     { \n         private   string   logString   =   ; \n\n         protected   override   void   OnCreate ( Bundle   savedInstanceState ) \n         { \n             base . OnCreate ( savedInstanceState ); \n\n             LogMessage ( Branch initialization completed:  ); \n\n             Dictionary string ,   object   data   =   JsonConvert . DeserializeObject Dictionary string ,   object ( Intent . GetStringExtra ( BranchData )); \n             foreach   ( var   key   in   data . Keys ) \n             { \n                 LogMessage ( key   +    :    +   data [ key ]. ToString ()); \n             } \n         } \n\n         #region Utils \n\n         void   LogMessage ( string   message ) \n         { \n             Console . WriteLine ( message ); \n             logString   +=   DateTime . Now . ToLongTimeString ()   +       +   message   +   \\n ; \n         } \n\n         #endregion \n     }  }     Create an activity to handle Branch errors: BranchErrorActivity   Right-click on the .Droid project and select  Add   New File...  Select:  Android   Activity  Rename the file:  BranchErrorActivity.cs  Enter the following code (replace 'TestAndroidApp' with the actual name of the app):   using   System ;  using   System.Collections.Generic ;  using   System.Linq ;  using   System.Text ;  using   Android.App ;  using   Android.Content ;  using   Android.OS ;  using   Android.Runtime ;  using   Android.Views ;  using   Android.Widget ;  namespace   TestAndroidApp.Droid  {      [Activity(Label =  BranchErrorActivity )] \n     public   class   BranchErrorActivity   :   Activity \n     { \n         private   string   logString   =   ; \n\n         protected   override   void   OnCreate ( Bundle   savedInstanceState ) \n         { \n             base . OnCreate ( savedInstanceState ); \n\n             LogMessage ( Branch initialization failed ); \n             LogMessage ( Error code:    +   Intent . Extras . GetInt ( ErrorCode ). ToString ()); \n             LogMessage ( Intent . Extras . GetString ( ErrorMessage )); \n         } \n\n         #region Utils \n\n         void   LogMessage ( string   message ) \n         { \n             Console . WriteLine ( message ); \n             logString   +=   DateTime . Now . ToLongTimeString ()   +       +   message   +   \\n ; \n         } \n\n         #endregion \n     }  }     Initialize Branch and configure Branch session management  Branch must be initilialized in the OnCreate method of either the Application class or the first Activity launched by the app. The OnNewIntent method must be added to retrieve the latest link identifier when the app becomes active due to a Branch link click.  Branch initializes asynchronously, with Branch link parameters being returned following a network call to Branch. If initialization is successful, the InitSessionComplete method will be invoked. If initialization is unsuccessful, the SessionRequestError method will be invoked. Deep link routing logic should be located in the InitSessionComplete method.  In the code example below the following Branch initialization and session management steps have been added to MainActivity.cs:   An Activity to respond to the app's URI Scheme  An Activity is launched in  singleTask  mode  Override the OnCreate method and initialize the Branch SDK  Override the OnNewIntent method  Add an InitSessionComplete method for processing Branch link information (this is where deep link routing code should be located)  Add a SessionRequestError method to handle situations where Branch fails to initialize   ```csharp\nusing Android.App;\nusing Android.Widget;\nusing Android.OS;\nusing BranchXamarinSDK;\nusing System;\nusing System.Collections.Generic;\nusing Android.Content;\nusing Newtonsoft.Json;  namespace TestAndroidApp.Droid\n{\n    [Activity(Label = \"TestAndroidApp\", MainLauncher = true, Icon = \"@mipmap/icon\", LaunchMode = Android.Content.PM.LaunchMode.SingleTask)]  [ IntentFilter ( new [ ]   {   android.intent.action.VIEW   } ,  Categories   =   new []   {   android.intent.category.DEFAULT ,   android.intent.category.BROWSABLE   } ,  DataScheme   =   testandroidapp ,  DataHost   =   open )]  [ IntentFilter ( new [ ]   {   android.intent.action.VIEW   } ,  Categories   =   new []   {   android.intent.category.DEFAULT ,   android.intent.category.BROWSABLE   } ,  DataScheme   =   https ,  DataHost   =   testandroidapp.app.link )]  [ IntentFilter ( new [ ]   {   android.intent.action.VIEW   } ,  Categories   =   new []   {   android.intent.category.DEFAULT ,   android.intent.category.BROWSABLE   } ,  DataScheme   =   https ,  DataHost   =   testandroidapp-alternate.app.link )]  public   class   MainActivity   :   Activity ,   IBranchSessionInterface  { \n\n     protected   override   void   OnCreate(Bundle   savedInstanceState) \n     { \n         base.OnCreate(savedInstanceState) ; \n\n         BranchAndroid.Init(this,   Resources.GetString(Resource.String.branch_key),   this) ; \n     } \n\n     //   Ensure   we   get   the   updated   link   identifier   when   the   app   becomes   active \n     //   due   to   a   Branch   link   click   after   having   been   in   the   background \n     protected   override   void   OnNewIntent ( Intent   intent ) \n     { \n         this.Intent   =   intent ; \n     } \n\n     public   void   InitSessionComplete ( Dictionary string ,   object   data ) \n     { \n         //Handle   custom   logic   based   on   deep   link   data   in   InitSessionComplete \n\n         //View   all   the   link   data   in   the   console \n         Console.WriteLine( My   Link   Data :     +   JsonConvert . SerializeObject ( data ));         //Preferred method: use BranchActivity created previously to handle the link data\n                        //Will need to update BranchActivity with desired custom logic, to open the correct page in the app\n                        (this, typeof(BranchActivity));\n                        intent.PutExtra(\"BranchData\", JsonConvert.SerializeObject(data));                       StartActivity ( intent ); var   intent   =   new   Intent \n                 } \n\n                 public   void   SessionRequestError ( BranchError   error ) \n                 { \n                     Console.WriteLine( Branch   session   initialization   error :    + error.ErrorCode);                      Console.WriteLine(error.ErrorMessage);                      var intent = new Intent(this, typeof(BranchErrorActivity));                      intent.PutExtra( ErrorCode , error.ErrorCode);                      intent.PutExtra( ErrorMessage ,   error . ErrorMessage ); \n\n                     StartActivity(intent) ; \n                 } \n             } \n         } \n         ```", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/apps/xamarin/#configure-branch-with-xamarin-forms", 
            "text": "Change the C# project's profile to PCL 4.5 - Profile78   Right-click on the project name and select:  Options  Browse the menu to  Build   General  Change the  Current Profile  to:  PCL 4.5 - Profile78     Add the Branch SDK with NuGet  The Branch Xamarin SDK is available as a NuGet package. The  Branch NuGet package  must be added to each of the Xamarin projects that will use Branch methods.   Right-click on each project and select  Add   Add NuGet Packages  If not already present, find the  Microsoft BCL Build Components  package version 1.0.21 and add it to the project  Find the  Branch Xamarin SDK  package version 3.0 and add it to the project     Create a class for Branch session handling  Branch initializes asynchronously, with Branch link parameters being returned following a network call to Branch. If initialization is successful, the InitSessionComplete method will be invoked. If initialization is unsuccessful, the SessionRequestError method will be invoked. Deep link routing logic should be located in the InitSessionComplete method.   Right-click on the C# project and select  Add   New File...  Select:  General   Empty Class  Rename the file:  TestXamarinFormsApp.cs  Enter the following code (replacing 'TestXamarinFormsApp' with the actual name of the app):   using   BranchXamarinSDK ;  using   System.Collections.Generic ;  using   System.ComponentModel ;  using   Xamarin.Forms ;  namespace   TestXamarinFormsApp  { \n     public   class   TestXamarinFormsApp   :   Application ,   IBranchSessionInterface \n     { \n\n         public   TestXamarinFormsApp () \n         { \n         } \n\n         #region IBranchSessionInterface implementation \n\n         public   void   InitSessionComplete ( Dictionary string ,   object   data ) \n         { \n         } \n\n         public   void   CloseSessionComplete () \n         { \n         } \n\n         public   void   SessionRequestError ( BranchError   error ) \n         { \n         } \n\n         #endregion \n     }  }     Create a class for handling link data  Branch stores link data in an object referred to as the  Branch Universal Object , or  BUO .   Right-click on the C# project and select  Add   New File...  Select:  General   Empty Class  Rename the file:  TestXamarinFormsAppBUO.cs  Enter the following code (replace 'TestXamarinFormsApp' with the actual name of the app):   using   BranchXamarinSDK ;  using   System.Collections.Generic ;  using   System.ComponentModel ;  using   Xamarin.Forms ;  namespace   TestXamarinFormsApp  { \n     public   class   TestXamarinFormsAppBUO   :   Application ,   IBranchBUOSessionInterface \n     { \n\n         public   TestXamarinFormsAppBUO () \n         { \n         } \n\n         #region IBranchBUOSessionInterface implementation \n\n         public   void   InitSessionComplete ( BranchUniversalObject   buo ,   BranchLinkProperties   blp ) \n         { \n         } \n\n         public   void   SessionRequestError ( BranchError   error ) \n         { \n         } \n\n         #endregion \n     }  }     iOS    Create an Apple device Provisioning Profile for the app   Open Xcode and create a new project with the same name as your Xamarin iOS project  On the Xcode project's  General  tab, enter the app's Bundle Identifier and select the appropriate Team (be sure to resolve any errors here)  Select the  Capabilities  tab and enable the  Associated Domains  entitlement  Create 'applinks:' entries for the Branch link domain assigned to the app (the link domain can be found at the bottom of the Branch dashboard's  Link Settings  page). For example, the entries for the app  TestXamarinFormsApp  would be: applinks:testxamarinformsapp.app.link  applinks:testxamarinformsapp-alternate.app.link  Use Xcode to run this newly-created app on an iOS device. This will create and install a Provisioning Profile with the proper entitlements on that device.  Close Xcode     Enter the app's settings on the Branch dashboard   On the  Link Settings  page, check the  I have an iOS App  checkbox  Enter the app's URI Scheme in the  iOS URI Scheme  field (for an app with the URI Scheme  testxamarinformsapp , for example, the entry would be:  testxamarinformsapp:// )  Enter the app's Apple Store name in the  Apple Store Search  field (if the app is not yet available on the App Store select  Custom URL  and enter as a placeholder the URL of an appropriate web site - the exact site does not matter)  Check the  Enable Universal Links  checkbox  Enter the app's Bundle Identifier and Apple App Prefix as shown on the  Apple Developer Portal     Configure the Xamarin project's Info.plist file   Open the  Info.plist  file  Enter the app's  Bundle Identifier  from the  Apple Developer Portal  in the  Bundle Identifier  field.  IMPORTANT:  this field will automatically be populated with an all-lowercase value by Xamarin. The value is in fact case sensitive and must match the value in the  Apple Developer Portal  precisely.  Click on the  Advanced  tab  In the  URL Types  section, click the  Add URL Type  button Identifier:  Branch Scheme URL Schemes:  {the app's URI Scheme - 'testxamarinformsapp', for example} Role:  Editor      Configure the Xamarin project's Associated Domains entitlement   Open the  Entitlements.plist  file and browse to  Associated Domains  (if this file does not already exist, create it)  Create entries for both the app's link domain and its alternate link domain. The entries for the TestBed-Xamarin app would be: applinks:testxamarinformsapp.app.link  applinks:testxamarinformsapp-alternate.app.link      Add Branch calls to the AppDelegate.cs file  To ensure that the Branch SDK initializes when the app starts and can retrieve link parameters whenever the app becomes active, Branch initialization occurs within the  FinishedLaunching  method of the AppDelegate.cs file. Branch calls are also required in the OpenUrl, ContinueUserActivity, and ReceiveRemoteNotification methods to ensure that Branch link information is handled properly whenever the app becomes active. The  AppDelegate.cs  file should look like this:  using   System ;  using   System.Collections.Generic ;  using   System.Linq ;  using   Foundation ;  using   UIKit ;  using   BranchXamarinSDK ;  using   TestXamarinFormsApp ;  namespace   TestXamarinFormsApp.iOS  {      [Register( AppDelegate )] \n     public   partial   class   AppDelegate   :   global :: Xamarin . Forms . Platform . iOS . FormsApplicationDelegate \n     { \n         public   override   bool   FinishedLaunching ( UIApplication   app ,   NSDictionary   options ) \n         { \n             global :: Xamarin . Forms . Forms . Init (); \n\n             // Debug mode - set to  false  before releasing to production \n             BranchIOS . Debug   =   true ; \n\n             TestXamarinFormsAppBUO   appBUO   =   new   TestXamarinFormsAppBUO (); \n             BranchIOS . Init ( key_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW ,   options ,   appBUO ); \n             LoadApplication ( appBUO ); \n\n             return   base . FinishedLaunching ( app ,   options ); \n         } \n\n         // Called when the app is opened via URI scheme \n         public   override   bool   OpenUrl ( UIApplication   application ,   NSUrl   url ,   string   sourceApplication ,   NSObject   annotation ) \n         { \n             return   BranchIOS . getInstance (). OpenUrl ( url ); \n         } \n\n         // Called when the app is opened from a Universal Link \n         public   override   bool   ContinueUserActivity ( UIApplication   application ,   NSUserActivity   userActivity ,   UIApplicationRestorationHandler   completionHandler ) \n         { \n             return   BranchIOS . getInstance (). ContinueUserActivity ( userActivity ); \n         } \n\n         // Called when the app receives a push notification \n         public   override   void   ReceivedRemoteNotification ( UIApplication   application ,   NSDictionary   userInfo ) \n         { \n             BranchIOS . getInstance (). HandlePushNotification ( userInfo ); \n         } \n     }  }       Android    Ensure that the Android project is not using the Shared Mono Runtime   Right-click on the Android project and select:  Options  Select:  Android Build  On the  General  tab, un-check:  Use Shared Mono Runtime     Add app capabilities in the AndroidManifest.xml file  In the  Required permissions  section of  AndroidManifest.xml , configure the following permissions:   AccessNetworkState  Internet   Additional reading on the Android manifest   Working with android manifest.xml  Add permissions to android manifest     Add the app's Branch key to the Strings.xml file  Create a  Resources/values/Strings.xml  file that can be accessed by the app's Application class for the Android project and add the Branch key to this file.   In the Android project, browse to  Resources/values  Right-click on the  values  folder and select:  Add   New File...  Select:  XML   Empty XML File  Name the file:  Strings  Enter the following values:   ?xml version= 1.0  encoding= utf-8 ?  resources \n     string   name= app_name TestXamarinFormsApp /string \n     string   name= branch_key key_live_liAnF8k7gZUEZv76Rt9a4bffAzlC5zVW /string  /resources     Configure the .Droid project's Application class  Within the .Droid project's Application class:   Set the Branch SDK's initialization parameters  Override the  OnCreate()  method to call  BranchAndroid.GetAutoInstance   If an Appplication class does not already exist for the project, create one:   Right-click on the .Droid project and select:  Add   New File...  Select:  General   Empty Class  Name the file:  {app name}  ('TestXamarinFormsApp', for example)   The file should have the following contents:  using   System ;  using   Android.App ;  using   Android.Content ;  using   Android.Runtime ;  using   BranchXamarinSDK ;  namespace   TestXamarinFormsApp.Droid  {      [Application (AllowBackup = true, Icon =  @drawable/icon , Label =  @string/app_name )]      [MetaData( io.branch.sdk.auto_link_disable , Value =  false )]      [MetaData( io.branch.sdk.TestMode , Value =  true )]      [MetaData( io.branch.sdk.BranchKey , Value =  @string/branch_key )] \n\n     public   class   App   :   Application \n     { \n         public   App ( IntPtr   javaReference ,   JniHandleOwnership   transfer )   :   base ( javaReference ,   transfer ) \n         { \n         } \n\n         public   override   void   OnCreate () \n         { \n             base . OnCreate (); \n             BranchAndroid . GetAutoInstance ( this . ApplicationContext ); \n         } \n     }  }      Key  Value      io.branch.sdk.TestMode  Setting this parameter to  true  enables Debug Mode, which causes simple uninstall/reinstalls of the app to trigger  install  events. Be sure to disable this before deploying to production. Note that enabling Debug Mode on Android also forces the app to use the Branch  Test  key if this key has been added to the project. Apps running with a  Test  key will be unable to receive data from Branch links created with the  Live  key.    io.branch.sdk.BranchKey  The app's Branch key. Both a  Live  key and a  Test  key can be added to the Strings.xml file. When  Test  Mode is enabled the app will automatically use the  Test  key, if one has been specified.       Initialize Branch  Branch must be initilialized in the OnCreate method of either the Application class or the first Activity launched by the app. The OnNewIntent method must be added to retrieve the latest link identifier when the app becomes active due to a Branch link click.  In the code example below the following Branch initialization and session management steps have been added to MainActivity.cs:   Register an Activity to respond to the app's URI Scheme  Ensure the Activity is launched in  singleTask  mode  Override the OnCreate method and initialize the Branch SDK  Override the OnNewIntent method   using   System ;  using   Android.App ;  using   Android.Content ;  using   Android.Content.PM ;  using   Android.Runtime ;  using   Android.Views ;  using   Android.Widget ;  using   Android.OS ;  using   BranchXamarinSDK ;  using   TestXamarinFormsApp ;  namespace   TestXamarinFormsApp.Droid  {      [Activity(Label =  TestXamarinFormsApp.Droid , LaunchMode = LaunchMode.SingleTask, Icon =  @drawable/icon , Theme =  @style/MyTheme , MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]      [IntentFilter(new[]   {   android.intent.action.VIEW   }, \n         Categories   =   new []   {   android.intent.category.DEFAULT ,   android.intent.category.BROWSABLE   }, \n         DataScheme   =   testxamarinformsapp , \n         DataHost   =   open )]      [IntentFilter(new[]   {   android.intent.action.VIEW   }, \n         Categories   =   new []   {   android.intent.category.DEFAULT ,   android.intent.category.BROWSABLE   }, \n         DataScheme   =   https , \n         DataHost   =   testxamarinformsapp.app.link )] \n\n     public   class   MainActivity   :   global :: Xamarin . Forms . Platform . Android . FormsApplicationActivity \n     { \n         protected   override   void   OnCreate ( Bundle   savedInstanceState ) \n         { \n             base . OnCreate ( savedInstanceState ); \n\n             global :: Xamarin . Forms . Forms . Init ( this ,   savedInstanceState ); \n\n             TestXamarinFormsAppBUO   linkData   =   new   TestXamarinFormsAppBUO (); \n             BranchAndroid . Init ( this ,   GetString ( Resource . String . branch_key ),   linkData ); \n             LoadApplication ( linkData ); \n         } \n\n         protected   override   void   OnNewIntent ( Intent   intent ) \n         { \n             this . Intent   =   intent ; \n         } \n     }  }", 
            "title": "Configure Branch with Xamarin Forms"
        }, 
        {
            "location": "/pages/apps/xamarin/#test-deep-link-ios", 
            "text": "Create a deep link from the  Branch Marketing Dashboard    Delete your app from the device    Compile your app with Xcode    Paste deep link in  Apple Notes    Long press on the deep link  (not 3D Touch)    Click  Open in \"APP_NAME\"  to open your app  ( example )", 
            "title": "Test deep link iOS"
        }, 
        {
            "location": "/pages/apps/xamarin/#test-deep-link-android", 
            "text": "Create a deep link from the  Branch Marketing Dashboard    Delete your app from the device    Compile your app with Android Studio    Paste deep link in  Google Hangouts    Click on the deep link to open your app", 
            "title": "Test deep link Android"
        }, 
        {
            "location": "/pages/apps/xamarin/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/apps/xamarin/#create-content-reference", 
            "text": "The  Branch Universal Object  encapsulates the thing you want to share    Uses  Universal Object properties    BranchUniversalObject   universalObject   =   new   BranchUniversalObject ();  universalObject . canonicalIdentifier   =   id12345 ;  universalObject . title   =   id12345 title ;  universalObject . contentDescription   =   My awesome piece of content! ;  universalObject . imageUrl   =   https://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png ;  universalObject . metadata . Add ( foo ,   bar );", 
            "title": "Create content reference"
        }, 
        {
            "location": "/pages/apps/xamarin/#create-deep-link", 
            "text": "Generates a deep link within your app    Needs a  Create content reference    Needs a  Create link reference    Validate with the  Branch Dashboard    BranchLinkProperties   linkProperties   =   new   BranchLinkProperties ();  linkProperties . tags . Add ( tag1 );  linkProperties . tags . Add ( tag2 );  linkProperties . feature   =   sharing ;  linkProperties . channel   =   facebook ;  linkProperties . controlParams . Add ( $desktop_url ,   http://example.com );  Branch . GetInstance (). GetShortURL ( callback , \n                                   universalObject , \n                                   linkProperties );", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/apps/xamarin/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Needs a  Create content reference    Needs a  Create link reference    Uses  Deep Link Properties    ShareLink   ( IBranchLinkShareInterface   callback , \n            BranchUniversalObject   universalObject , \n            BranchLinkProperties   linkProperties , \n            string   message )", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/apps/xamarin/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Returns  deep link properties    // latest  Dictionary string ,   object   sessionParams   =   Branch . GetInstance (). GetLatestReferringParams ();  // first  Dictionary string ,   object   installParams   =   Branch . GetInstance (). GetFirstReferringParams ();", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/apps/xamarin/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    Validate with the  Branch Dashboard    Branch   branch   =   Branch . GetInstance   ();  branch . SetIdentity ( the user id ,   this );    // Where this implements IBranchIdentityInterface  branch . Logout ( this );   // Where this implements IBranchIdentityInterface", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/apps/xamarin/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard    Branch   branch   =   Branch . GetInstance   ();  branch . UserCompletedAction ( the_custom_event );", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/apps/xamarin/#track-commerce", 
            "text": "Registers a custom commerce event    Uses  Track commerce properties  for  Currency  and  Category    Validate with the  Branch Dashboard    Branch   branch   =   Branch . GetInstance   ();  Dictionary string ,   object   data   =   new   Dictionary string ,   object ();  data . Add ( sku ,   123456789 );  branch . UserCompletedAction ( purchase_event ,   data );", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/apps/xamarin/#handle-referrals", 
            "text": "Referral points are obtained from referral rules on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits   Referral guide     Redeem credits  Branch   branch   =   Branch . GetInstance   ();  branch . RedeemRewards ( this ,   amount ,   bucket );  #region IBranchRewardsInterface implementation \n\n         public   void   RewardsLoaded   () \n         { \n             // Do something with the data... \n         } \n\n         public   void   RewardsRedeemed   () \n         { \n             // Do something with the data... \n         } \n\n         public   void   CreditHistory   ( List CreditHistoryEntry   history ) \n         { \n             // Do something with the data... \n         } \n\n         public   void   RewardsRequestError   ( BranchError   error ) \n         { \n          // Do something with the data... \n         } \n\n         #endregion     Load credits  Branch   branch   =   Branch . GetInstance   ();  branch . LoadRewards ( this );  #region IBranchRewardsInterface implementation \n\n         public   void   RewardsLoaded   () \n         { \n             // Do something with the data... \n         } \n\n         public   void   RewardsRedeemed   () \n         { \n             // Do something with the data... \n         } \n\n         public   void   CreditHistory   ( List CreditHistoryEntry   history ) \n         { \n             // Do something with the data... \n         } \n\n         public   void   RewardsRequestError   ( BranchError   error ) \n         { \n             // Do something with the data... \n         }  #endregion     Load history  Branch   branch   =   Branch . GetInstance   ();  branch . GetCreditHistory ( this );", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/apps/xamarin/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/apps/xamarin/#unable-to-add-branch-required-nuget-packages-to-the-c-project", 
            "text": "Adding required NuGet packages to the C# project may fail if the project has not been configured to use  PCL 4.5 - Profile78   Right-click on the project name and select:  Options  Browse the menu to  Build   General  Change the  Current Profile  to:  PCL 4.5 - Profile78", 
            "title": "Unable to add Branch-required NuGet packages to the C# project"
        }, 
        {
            "location": "/pages/apps/xamarin/#android-app-fails-to-build-with-linking-errors", 
            "text": "The Newtonsoft JSON NuGet package is automatically added to a project when the Branch Xamarin SDK NuGet package is added. There is a known issue with this package that results in linking errors when building a project.  error XA0009: Error while loading assembly: /Users/david/Projects/TestXamarinFormsApp/Droid/obj/Debug/android/assets/mscorlib.dll  To resolve this issue with the Newtonsoft JSON NuGet package:   Right-click on the project and select Options  Go to  Android Build  and select the  Linker  tab  Select:  Release  Go to the  Ignore assemblies  box  Add:  System.Core  Rebuild the app", 
            "title": "Android app fails to build with linking errors"
        }, 
        {
            "location": "/pages/apps/xamarin/#deploying-ios-app-to-device-fails-with-provisioning-profile-erros-after-changing-entitlements", 
            "text": "Xamarin automatically populates the  Bundle Identifier  field in the  Info.plist  file with an all-lowercase value derived from the app's name. This value is in fact case sensitive and must match the value in the  Apple Developer Portal  precisely. The default Xamarin configuration may work when there are no entitlements configured and then suddenly begin failing after entitlements have been added.  This issue can be resolved by ensuring that the  Bundle Identifier  in the  Info.plist  matches the  Bundle Identifier  shown on the  Apple Developer Portal .   Open the  Info.plist  file  Enter the app's  Bundle Identifier  from the  Apple Developer Portal  in the  Bundle Identifier  field", 
            "title": "Deploying iOS app to device fails with Provisioning Profile erros after changing entitlements"
        }, 
        {
            "location": "/pages/apps/xamarin/#sample-apps", 
            "text": "There are four fully-functional demo apps included in this repository: a Xamarin Native and Xamarin Forms apps for both iOS and Android platforms. Use these apps as reference models for integrating the Branch SDK.    Testbed-Xamarin (Native apps)   iOS  Android     Testbed-XamarinForms (Forms apps)   iOS  Android", 
            "title": "Sample apps"
        }, 
        {
            "location": "/pages/apps/api/", 
            "text": "Postman\n\n\n\n\n\n\nUse \nPostman\n to test Branch API for requests, responses, and code examples\n\n\n\n\n\n\nChange the \nbranch_key\n to match your \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nLink\n\n\n\n\n\n\nLink create\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/url \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nchannel\n: \nfacebook\n,\n\n\n  \nfeature\n: \nonboarding\n,\n\n\n  \ncampaign\n: \nnew product\n,\n\n\n  \nstage\n: \nnew user\n,\n\n\n  \ntags\n: [\none\n, \ntwo\n, \nthree\n],\n\n\n  \ndata\n: {\n\n\n    \n$canonical_identifier\n: \ncontent/123\n,\n\n\n    \n$og_title\n: \nTitle from Deep Link\n,\n\n\n    \n$og_description\n: \nDescription from Deep Link\n,\n\n\n    \n$og_image_url\n: \nhttp://www.lorempixel.com/400/400/\n,\n\n\n    \n$desktop_url\n: \nhttp://www.example.com\n,\n\n\n    \ncustom_boolean\n: true,\n\n\n    \ncustom_integer\n: 1243,\n\n\n    \ncustom_string\n: \neverything\n,\n\n\n    \ncustom_array\n: [1,2,3,4,5,6],\n\n\n    \ncustom_object\n: { \nrandom\n: \ndictionary\n }\n\n\n  }\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nurl\n:\n \nhttps://example.app.link/WgiqvsepqF\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\n...\n\n\n...\n\n\nParameters from \nConfiguring Links\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLink create bulk\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/url/bulk/key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt \n\\\n\n  -d \n[\n\n\n    {\n\n\n      \nchannel\n: \nfacebook\n,\n\n\n      \nfeature\n: \nonboarding\n,\n\n\n      \ncampaign\n: \nnew product\n,\n\n\n      \nstage\n: \nnew user\n,\n\n\n      \ntags\n: [\none\n, \ntwo\n, \nthree\n],\n\n\n      \ndata\n: {\n\n\n        \n$canonical_identifier\n: \ncontent/123\n,\n\n\n        \n$og_title\n: \nTitle from Deep Link\n,\n\n\n        \n$og_description\n: \nDescription from Deep Link\n,\n\n\n        \n$og_image_url\n: \nhttp://www.lorempixel.com/400/400/\n,\n\n\n        \n$desktop_url\n: \nhttp://www.example.com\n,\n\n\n        \ncustom_boolean\n: true,\n\n\n        \ncustom_integer\n: 1243,\n\n\n        \ncustom_string\n: \neverything\n,\n\n\n        \ncustom_array\n: [1,2,3,4,5,6],\n\n\n        \ncustom_object\n: { \nrandom\n: \ndictionary\n }\n\n\n      }\n\n\n    },\n\n\n    {\n\n\n      \nchannel\n: \nfacebook\n,\n\n\n      \nfeature\n: \nonboarding\n,\n\n\n      \ncampaign\n: \nnew product\n,\n\n\n      \nstage\n: \nnew user\n,\n\n\n      \ntags\n: [\none\n, \ntwo\n, \nthree\n],\n\n\n      \ndata\n: {\n\n\n        \n$canonical_identifier\n: \ncontent/123\n,\n\n\n        \n$og_title\n: \nTitle from Deep Link\n,\n\n\n        \n$og_description\n: \nDescription from Deep Link\n,\n\n\n        \n$og_image_url\n: \nhttp://www.lorempixel.com/400/400/\n,\n\n\n        \n$desktop_url\n: \nhttp://www.example.com\n\n\n      }\n\n\n    }\n\n\n  ]\n\n\n\n\n\n\n\n\n\nResponse\n\n\n[\n\n  \n{\n\n    \nurl\n:\n \nhttps://example.app.link/0AjuiLcpqF\n\n  \n},\n\n  \n{\n\n    \nurl\n:\n \nhttps://example.app.link/5IULiLcpqF\n\n  \n}\n\n\n]\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\n...\n\n\n...\n\n\nParameters from \nConfiguring Links\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBulk link creator is limited to \n1000\n links at a time\n\n\n\n\n\n\n\n\n\n\nLink read\n\n\n\n\n\n\nReturns \ndeep link properties\n\n\n\n\n\n\nRequest\n\n\ncurl -XGET \nhttps://api.branch.io/v1/url?url=https://example.app.link/WgiqvsepqF\nbranch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \ncampaign\n:\n \nnew product\n,\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \nfeature\n:\n \nonboarding\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\n\n    \none\n,\n\n    \ntwo\n,\n\n    \nthree\n\n  \n],\n\n  \ndata\n:\n \n{\n\n    \n$canonical_identifier\n:\n \ncontent/123\n,\n\n    \n$desktop_url\n:\n \nhttp://www.example.com\n,\n\n    \n$og_description\n:\n \nDescription from Deep Link\n,\n\n    \n$og_image_url\n:\n \nhttp://www.lorempixel.com/400/400/\n,\n\n    \n$og_title\n:\n \nTitle from Deep Link\n,\n\n    \n$one_time_use\n:\n \nfalse\n,\n\n    \ncustom_array\n:\n \n[\n\n      \n1\n,\n\n      \n2\n,\n\n      \n3\n,\n\n      \n4\n,\n\n      \n5\n,\n\n      \n6\n\n    \n],\n\n    \ncustom_boolean\n:\n \ntrue\n,\n\n    \ncustom_integer\n:\n \n1243\n,\n\n    \ncustom_object\n:\n \n{\n\n      \nrandom\n:\n \ndictionary\n\n    \n},\n\n    \ncustom_string\n:\n \neverything\n,\n\n    \n~campaign\n:\n \nnew product\n,\n\n    \n~channel\n:\n \nfacebook\n,\n\n    \n~creation_source\n:\n \n0\n,\n\n    \n~feature\n:\n \nonboarding\n,\n\n    \n~id\n:\n \n423196192848102356\n,\n\n    \n~stage\n:\n \nnew user\n,\n\n    \n~tags\n:\n \n[\n\n      \none\n,\n\n      \ntwo\n,\n\n      \nthree\n\n    \n],\n\n    \nurl\n:\n \nhttps://example.app.link/WgiqvsepqF\n\n  \n},\n\n  \ntype\n:\n \n0\n,\n\n  \nalias\n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nThe deep link url\n\n\n\u221a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLink update\n\n\n\n\n\n\nRequest\n\n\ncurl -XPUT \nhttps://api.branch.io/v1/url?url=https%3A%2F%2Fexample.app.link%2F5IULiLcpqF\n \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nbranch_secret\n: \nsecret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9\n,\n\n\n  \nchannel\n: \ntwitter\n,\n\n\n  \ndata\n:{\n\n\n    \nname\n:\nalex\n,\n\n\n    \nuser_id\n:\n12346\n\n\n  }\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \ncampaign\n:\n \nnew product\n,\n\n  \nchannel\n:\n \ntwitter\n,\n\n  \nfeature\n:\n \nonboarding\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\n\n    \none\n,\n\n    \ntwo\n,\n\n    \nthree\n\n  \n],\n\n  \ndata\n:\n \n{\n\n    \n$one_time_use\n:\n \nfalse\n,\n\n    \nname\n:\n \nalex\n,\n\n    \nuser_id\n:\n \n12346\n,\n\n    \n~campaign\n:\n \nnew product\n,\n\n    \n~channel\n:\n \ntwitter\n,\n\n    \n~creation_source\n:\n \n0\n,\n\n    \n~feature\n:\n \nonboarding\n,\n\n    \n~id\n:\n \n423196096467215333\n,\n\n    \n~stage\n:\n \nnew user\n,\n\n    \n~tags\n:\n \n[\n\n      \none\n,\n\n      \ntwo\n,\n\n      \nthree\n\n    \n],\n\n    \nurl\n:\n \nhttps://example.app.link/5IULiLcpqF\n\n  \n},\n\n  \ntype\n:\n \n0\n,\n\n  \nalias\n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nbranch_secret\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nurl\n\n\nstring\n\n\nThe deep link url\n\n\n\u221a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLink troubleshooting\n\n\n\n\ndata\n is overridden on \nLink update\n, not appended\n\n\n\n\n\n\n\n\nEvent\n\n\n\n\n\n\nEvent create\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/event \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nidentity\n: \nbob\n,\n\n\n  \nevent\n: \ncustom_event\n,\n\n\n  \nmetadata\n: {\n\n\n    \ncustom_data\n: \nanything\n,\n\n\n    \nhello\n: \nworld\n\n\n  }\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nevent\n\n\nstring\n\n\nName of the custom event\n\n\n\u221a\n\n\n\n\n\n\nidentity\n\n\nstring\n\n\nUnique user id, also known as the \nDeveloper Id\n on your \nBranch Identity Dashboard\n\n\n\n\n\n\n\n\nmetadata\n\n\n{}\n\n\nCustom key-value pairs related to the event\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvent create commerce\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST https://api.branch.io/v1/event \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nidentity\n: \n222\n,\n\n\n  \nevent\n: \npurchase\n,\n\n\n  \nmetadata\n: {\n\n\n    \nhello\n: \nworld\n,\n\n\n    \ncustom_data\n: \nthis\n\n\n  },\n\n\n  \ncommerce_data\n: {\n\n\n    \nrevenue\n: 50.0,\n\n\n    \ncurrency\n: \nUSD\n,\n\n\n    \ntransaction_id\n: \nfoo-transaction-id\n,\n\n\n    \nshipping\n: 0.0,\n\n\n    \ntax\n: 5.0,\n\n\n    \naffiliation\n: \nfoo-affiliation\n,\n\n\n    \nproducts\n: [\n\n\n      {\n\n\n        \nsku\n: \nfoo-sku-1\n,\n\n\n        \nname\n: \nfoo-item-1\n,\n\n\n        \nprice\n: 45.00,\n\n\n        \nquantity\n: 1,\n\n\n        \nbrand\n: \nfoo-brand\n,\n\n\n        \ncategory\n: \nElectronics\n,\n\n\n        \nvariant\n: \nfoo-variant-1\n\n\n      },\n\n\n      {\n\n\n        \nsku\n: \nfoo-sku-2\n,\n\n\n        \nprice\n: 2.50,\n\n\n        \nquantity\n: 2\n\n\n      }\n\n\n    ]\n\n\n  }\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{}\n\n\n\n\n\n\n\n\n\n\n\n\n\nUser\n\n\n\n\n\n\nUser create\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/profile \n\\\n\n  -d \n{\n\n\n    \nbranch_key\n:\nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n    \nidentity\n:\nsteve\n,\n\n\n    \nidentity_id\n:\n444\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nidentity_id\n:\n \n444\n,\n\n  \nlink\n:\n \nhttps://example.app.link/?%24identity_id=444\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nidentity\n\n\nstring\n\n\nUnique user id, also known as the \nDeveloper Id\n on your \nBranch Identity Dashboard\n\n\n\u221a\n\n\n\n\n\n\nidentity_id\n\n\nstring\n\n\nUnique user id for Branch, also known as the \nBranch Identity Id\n on your \nBranch Identity Dashboard\n\n\n\u221a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUser read\n\n\n\n\n\n\nRequest\n\n\n# identity\n\ncurl -XGET \nhttps://api.branch.io/v1/profile?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\nidentity=steve\n\n\n\n# identity id\n\ncurl -XGET \nhttps://api.branch.io/v1/profile?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\nidentity_id=444\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nidentity_id\n:\n \n444\n,\n\n  \nidentity\n:\n \nsteve\n,\n\n  \nlink\n:\n \nhttps://example.app.link/?%24identity_id=444\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nidentity\n\n\nstring\n\n\nUnique user id, also known as the \nDeveloper Id\n on your \nBranch Identity Dashboard\n\n\n\u221a*\n\n\n\n\n\n\nidentity_id\n\n\nstring\n\n\nUnique user id for Branch, also known as the \nBranch Identity Id\n on your \nBranch Identity Dashboard\n\n\n\u221a*\n\n\n\n\n\n\n\n\n\n\n*\n =  \nidentity\n \nOR\n \nidentity_id\n is required\n\n\n\n\n\n\n\n\n\n\n\n\nReferral\n\n\n\n\n\n\nReferral link\n\n\n\n\n\n\nCreate a user\n with an \n$identity_id\n\n\n\n\n\n\nCreate a link\n with the \n$identity_id\n from step 1 in the link data dictionary\n\n\n\n\n\n\n\n\n\n\nReferral reward\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/credits \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nbranch_secret\n: \nsecret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9\n,\n\n\n  \nidentity\n: \nsteve\n,\n\n\n  \namount\n: \n10\n,\n\n\n  \nbucket\n: \ndefault\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nsuccess\n:\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nbranch_secret\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nidentity\n\n\nstring\n\n\nUnique user id, also known as the \nDeveloper Id\n on your \nBranch Identity Dashboard\n\n\n\u221a\n\n\n\n\n\n\namount\n\n\nstring\n\n\nNumber of credits\n\n\n\u221a\n\n\n\n\n\n\nbucket\n\n\nstring\n\n\nThe category where the credits are save to (defaults to \ndefault\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferral redeem\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/redeem \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nbranch_secret\n: \nsecret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9\n,\n\n\n  \nidentity\n: \nsteve\n,\n\n\n  \namount\n: \n5\n,\n\n\n  \nbucket\n: \ndefault\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n// success\n\n\n{}\n\n\n\n// failure\n\n\n{\n\n  \nerror\n:\n \n{\n\n    \ncode\n:\n \n402\n,\n\n    \nmessage\n:\n \nNot enough credits to redeem.\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferral read\n\n\n\n\n\n\nRequest\n\n\ncurl -XGET \nhttps://api.branch.io/v1/credits?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\nidentity=steve\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \ndefault\n:\n \n40\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferral history\n\n\n\n\n\n\nRequest\n\n\ncurl -XGET \nhttps://api.branch.io/v1/credithistory?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\nidentity=steve\n\n\n\n\n\n\n\n\n\nResponse\n\n\n[\n\n  \n{\n\n    \ntransaction\n:\n \n{\n\n      \ndate\n:\n \n2017-08-07T22:15:10.503Z\n,\n\n      \nid\n:\n \n423229952507361694\n,\n\n      \nbucket\n:\n \ndefault\n,\n\n      \ntype\n:\n \n2\n,\n\n      \namount\n:\n \n-\n5\n\n    \n},\n\n    \nevent\n:\n \n{\n\n      \nname\n:\n \nnull\n,\n\n      \nmetadata\n:\n \nnull\n\n    \n},\n\n    \nreferrer\n:\n \nnull\n,\n\n    \nreferree\n:\n \nnull\n\n  \n},\n\n  \n{\n\n    \ntransaction\n:\n \n{\n\n      \ndate\n:\n \n2017-08-07T22:15:01.818Z\n,\n\n      \nid\n:\n \n423229916080032437\n,\n\n      \nbucket\n:\n \ndefault\n,\n\n      \ntype\n:\n \n2\n,\n\n      \namount\n:\n \n-\n5\n\n    \n},\n\n    \nevent\n:\n \n{\n\n      \nname\n:\n \nnull\n,\n\n      \nmetadata\n:\n \nnull\n\n    \n},\n\n    \nreferrer\n:\n \nnull\n,\n\n    \nreferree\n:\n \nnull\n\n  \n},\n\n  \n{\n\n    \ntransaction\n:\n \n{\n\n      \ndate\n:\n \n2017-08-07T22:10:57.224Z\n,\n\n      \nid\n:\n \n423228890178439487\n,\n\n      \nbucket\n:\n \ndefault\n,\n\n      \ntype\n:\n \n1\n,\n\n      \namount\n:\n \n10\n\n    \n},\n\n    \nevent\n:\n \n{\n\n      \nname\n:\n \nnull\n,\n\n      \nmetadata\n:\n \nnull\n\n    \n},\n\n    \nreferrer\n:\n \nnull\n,\n\n    \nreferree\n:\n \nnull\n\n  \n},\n\n  \n{\n\n    \ntransaction\n:\n \n{\n\n      \ndate\n:\n \n2017-08-07T22:10:56.416Z\n,\n\n      \nid\n:\n \n423228886789240847\n,\n\n      \nbucket\n:\n \ndefault\n,\n\n      \ntype\n:\n \n1\n,\n\n      \namount\n:\n \n10\n\n    \n},\n\n    \nevent\n:\n \n{\n\n      \nname\n:\n \nnull\n,\n\n      \nmetadata\n:\n \nnull\n\n    \n},\n\n    \nreferrer\n:\n \nnull\n,\n\n    \nreferree\n:\n \nnull\n\n  \n}\n\n\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferral reconcile\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST https://api.branch.io/v1/reconcile \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nbranch_secret\n: \nsecret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9\n,\n\n\n  \nidentity\n: \nsteve\n,\n\n\n  \namount\n: \n20\n,\n\n\n  \nbucket\n: \ndefault\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nid\n:\n \n423232788708309278\n,\n\n  \napp_id\n:\n \n423194549918126821\n,\n\n  \nidentity_id\n:\n \n444\n,\n\n  \ntype\n:\n \n4\n,\n\n  \nbucket\n:\n \ndefault\n,\n\n  \namount\n:\n \n-\n20\n,\n\n  \ndate\n:\n \n2017-08-07T22:26:26.706Z\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nReferral create rule\n\n\n\n\n\n\nRequest\n\n\ncurl -XPOST https://api.branch.io/v1/eventresponse \n\\\n\n  -d \n{\n\n\n  \nbranch_key\n: \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n\n\n  \nbranch_secret\n: \nsecret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9\n,\n\n\n  \ncalculation_type\n: 2,\n\n\n  \nlocation\n: 4,\n\n\n  \ntype\n: \ncredit\n,\n\n\n  \nevent\n: \nsignup\n,\n\n\n  \nmetadata\n: {\n\n\n    \nweb_hook_url\n: \nhttp://www.example.com\n,\n\n\n    \namount\n: \n20\n,\n\n\n    \nbucket\n: \ndefault\n\n\n  },\n\n\n  \nfilter\n: {\n\n\n  \nviewed_tutorial\n: true,\n\n\n  \ngeo\n: \nover_here\n\n\n  }\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nbranch_secret\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\ncalculation_type\n\n\nint\n\n\n0\n reward for each use, \n1\n reward for first use only\n\n\n\u221a\n\n\n\n\n\n\nlocation\n\n\nint\n\n\n0\n all acting users, \n1\n referring users, \n4\n, referred acting users\n\n\n\u221a\n\n\n\n\n\n\ntype\n\n\nstring\n\n\ncredit\n reward points, \nweb_hook\n reward webhook callback\n\n\n\u221a\n\n\n\n\n\n\nweb_hook\n\n\nstring\n\n\nThe url to call when an event occurs\n\n\ntype\n = \nweb_hook\n\n\n\n\n\n\namount\n\n\nstring\n\n\nNumber of credits\n\n\ntype\n = \ncredit\n\n\n\n\n\n\nbucket\n\n\nstring\n\n\nThe category where the credits are save to\n\n\ntype\n = \ncredit\n\n\n\n\n\n\nfilter\n\n\njson\n\n\nThis is the set of keys and values that must be contained in the event metadata for this reward to be issued\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlease take note of the \ntype\n parameter\n\n\ntype\n = \ncredit\n will create a reward rule on your dashboard, but \ntype\n = \nweb_hook\n will create a webhook each time the reward rule is triggered. To see the structure of the webhook callback, please test this with \nRequestBin\n or a similar service.\n\n\n\n\n\n\n\n\nReferral troubleshooting\n\n\n\n\nReferral \ncredits\n cannot go below zero\n\n\n\n\n\n\n\n\nWebhook\n\n\n\n\n\n\nWebhook create\n\n\n\n\nSee \nReferral create rule\n\n\n\n\n\n\n\n\nApp\n\n\n\n\n\n\nApp create\n\n\n\n\n\n\nRequest\n\n\ncurl\n \n-\nXPOST\n \nhttps\n:\n//api.branch.io/v1/app \\\n\n  \n-\nd\n \n{\n\n\n  \nuser_id\n: \nYOUR_USER_ID\n,\n\n\n  \napp_name\n: \neneff_test_3\n,\n\n\n  \ndev_name\n: \nYOUR_NAME\n,\n\n\n  \ndev_email\n: \nYOUR_EMAIL\n,\n\n\n\n  \nalways_open_app\n: \n1\n,\n\n\n\n  \nandroid_app\n: \n2\n,\n\n\n  \nandroid_url\n: \nhttps://www.example.com/ios\n,\n\n\n  \nandroid_uri_scheme\n: \nbranchtest://\n,\n\n\n  \nandroid_package_name\n: \ncom.branch.test\n,\n\n\n  \nandroid_app_links_enabled\n: \n1\n,\n\n\n\n  \nios_app\n: \n2\n,\n\n\n  \nios_url\n: \nhttps://www.example.com/ios\n,\n\n\n  \nios_uri_scheme\n: \nbranchtest://\n,\n\n\n  \nios_store_country\n: \nUS\n,\n\n\n  \nuniversal_linking_enabled\n: \n1\n,\n\n\n  \nios_bundle_id\n: \ncom.branch.test\n,\n\n\n  \nios_team_id\n: \nPW4Q8885U8\n,\n\n\n\n  \nfire_url\n: \nhttps://www.example.com/amazon\n,\n\n\n  \nwindows_phone_url\n: \nhttps://www.example.com/windows\n,\n\n\n  \nblackberry_url\n: \nhttps://www.example.com/blackberry\n,\n\n\n  \nweb_url\n: \nhttps://www.example.com/web\n,\n\n\n  \ndefault_desktop_url\n: \nhttps://www.example.com/desktop\n,\n\n\n\n  \ntext_message\n: \nclick here to download {{ link }}\n,\n\n\n\n  \nog_app_id\n: \nbranch 123\n,\n\n\n  \nog_title\n: \nbranch test\n,\n\n\n  \nog_description\n: \nbranch description\n,\n\n\n  \nog_image_url\n: \nhttp://lorempixel.com/400/400/\n,\n\n\n\n  \ndeepview_desktop\n: \nbranch_default\n,\n\n\n  \ndeepview_ios\n: \nbranch_default\n,\n\n\n  \ndeepview_android\n: \nbranch_default\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nalternate_short_url_domain\n:\n \na8p0-alternate.app.link\n,\n\n  \nalways_open_app\n:\n \n1\n,\n\n  \nandroid_app\n:\n \n2\n,\n\n  \nandroid_app_links_enabled\n:\n \n1\n,\n\n  \nandroid_package_name\n:\n \ncom.branch.test\n,\n\n  \nandroid_uri_scheme\n:\n \nbranchtest://\n,\n\n  \nandroid_url\n:\n \nhttps://www.example.com/ios\n,\n\n  \napp_key\n:\n \n423190238827926224\n,\n\n  \napp_name\n:\n \neneff_test_3\n,\n\n  \nblackberry_url\n:\n \nhttps://www.example.com/blackberry\n,\n\n  \nbranch_key\n:\n \nkey_live_hptFZsX5x7Nsvfq4MWdB5ohosCfQ6tjl\n,\n\n  \nbranch_secret\n:\n \nsecret_live_sHyeiy240rxQhDF2H2DJYrypRHoq4z1x\n,\n\n  \ncreation_date\n:\n \n2017-08-07T19:37:22.024Z\n,\n\n  \ndeepview_android\n:\n \nbranch_default\n,\n\n  \ndeepview_desktop\n:\n \nbranch_default\n,\n\n  \ndeepview_ios\n:\n \nbranch_default\n,\n\n  \ndefault_desktop_url\n:\n \nhttps://www.example.com/desktop\n,\n\n  \ndefault_short_url_domain\n:\n \na8p0.app.link\n,\n\n  \ndev_email\n:\n \nYOUR_EMAIL\n,\n\n  \ndev_name\n:\n \nYOUR_NAME\n,\n\n  \nfire_url\n:\n \nhttps://www.example.com/amazon\n,\n\n  \nid\n:\n \n423190238827926224\n,\n\n  \nios_app\n:\n \n2\n,\n\n  \nios_bundle_id\n:\n \ncom.branch.test\n,\n\n  \nios_store_country\n:\n \nUS\n,\n\n  \nios_team_id\n:\n \nPW4Q8885U8\n,\n\n  \nios_uri_scheme\n:\n \nbranchtest://\n,\n\n  \nios_url\n:\n \nhttps://www.example.com/ios\n,\n\n  \nog_app_id\n:\n \nbranch 123\n,\n\n  \nog_description\n:\n \nbranch description\n,\n\n  \nog_image_url\n:\n \nhttp://lorempixel.com/400/400/\n,\n\n  \nog_title\n:\n \nbranch test\n,\n\n  \norigin\n:\n \nAPI: creator id = YOUR_USER_ID, creator email = YOUR_EMAIL\n,\n\n  \nshort_url_domain\n:\n \n,\n\n  \ntext_message\n:\n \nclick here to download {{ link }}\n,\n\n  \nuniversal_linking_enabled\n:\n \n1\n,\n\n  \nweb_url\n:\n \nhttps://www.example.com/web\n,\n\n  \nwindows_phone_url\n:\n \nhttps://www.example.com/windows\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nuser_id\n\n\nstring\n\n\nThe Dashboard User Id obtained from \nBranch Account Dashboard\n\n\n\u221a\n\n\n\n\n\n\napp_name\n\n\nstring\n\n\nThe name of the app\n\n\n\u221a\n\n\n\n\n\n\ndev_name\n\n\nstring\n\n\nThe main contact developer name\n\n\n\u221a\n\n\n\n\n\n\ndev_email\n\n\nstring\n\n\nThe main contact developer email. A email is sent on account creation\n\n\n\u221a\n\n\n\n\n\n\nandroid_app\n\n\nstring\n\n\nWhether an Android app is enabled. \n0\n or \n1\n indicating \ntrue\n\n\n\n\n\n\n\n\nandroid_url\n\n\nstring\n\n\nThe url of the Android store, or package name (e.g. \ncom.android.myapp\n). \nandroid_app\n must be set to \n2\n\n\n\n\n\n\n\n\nandroid_uri_scheme\n\n\nstring\n\n\nThe Android URI scheme\n\n\n\n\n\n\n\n\nandroid_package_name\n\n\nstring\n\n\nThe Android package name (e.g. \ncom.android.myapp\n)\n\n\n\n\n\n\n\n\nsha256_cert_fingerprints\n\n\n[string]\n\n\nThe SHA256 fingerprints for App Links\n\n\n\n\n\n\n\n\nandroid_app_links_enabled\n\n\nstring\n\n\nWhether App Links are enabled. \n0\n or \n1\n indicating \ntrue\n\n\n\n\n\n\n\n\nios_app\n\n\nstring\n\n\nWhether an iOS app is enabled, (\n0\n or \n1\n indicating \ntrue\n\n\n\n\n\n\n\n\nios_url\n\n\nstring\n\n\nThe url of iOS store, or app id (e.g. \nid512451233\n), or a fallback URL for iOS if present. \nios_app\n must be set to \n2\n\n\n\n\n\n\n\n\nios_uri_scheme\n\n\nstring\n\n\nThe iOS URI scheme\n\n\n\n\n\n\n\n\nios_store_country\n\n\nstring\n\n\nThe country code of the app, defaults to \nUS\n\n\n\n\n\n\n\n\nios_bundle_id\n\n\nstring\n\n\nThe iOS Bundle Id\n\n\n\n\n\n\n\n\nios_team_id\n\n\nstring\n\n\nThe iOS Team Id\n\n\n\n\n\n\n\n\nuniversal_linking_enabled\n\n\nstring\n\n\nWhether Universal Links should be enabled. \n0\n or \n1\n indicating \ntrue\n\n\n\n\n\n\n\n\nfire_url\n\n\nstring\n\n\nThe redirect on Fire phone\n\n\n\n\n\n\n\n\nwindows_phone_url\n\n\nstring\n\n\nThe redirect on Windows phone\n\n\n\n\n\n\n\n\nblackberry_url\n\n\nstring\n\n\nThe redirect on Blackberry phone\n\n\n\n\n\n\n\n\nweb_url\n\n\nstring\n\n\nBackup website if URLs are \nnull\n\n\n\n\n\n\n\n\ndefault_desktop_url\n\n\nstring\n\n\nThe default desktop redirect, or \nnull\n if set to hosted SMS\n\n\n\n\n\n\n\n\ntext_message\n\n\nstring\n\n\nText message to use for text-me feature, \n{{ link }}\n is required and will be replaced with a deep link\n\n\n\n\n\n\n\n\nog_app_id\n\n\nstring\n\n\nOpen Graph app id\n\n\n\n\n\n\n\n\nog_title\n\n\nstring\n\n\nOpen Graph title to be used with link\n\n\n\n\n\n\n\n\nog_description\n\n\nstring\n\n\nOpen Graph description to be used with link\n\n\n\n\n\n\n\n\nog_image_url\n\n\nstring\n\n\nOpen Graph image URL to be used with link\n\n\n\n\n\n\n\n\ndeepview_desktop\n\n\nstring\n\n\nThe current deepview selected for the desktop platform\n\n\n\n\n\n\n\n\ndeepview_ios\n\n\nstring\n\n\nThe current deepview selected for the iOS platform\n\n\n\n\n\n\n\n\ndeepview_android\n\n\nstring\n\n\nThe current deepview selected for the Android platform\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApp read\n\n\n\n\n\n\nRequest\n\n\ncurl\n \n-\nXGET\n \nhttps://api.branch.io/v1/app/key_live_kkDv1y82q6RdiaazE5wAyipkqCnI9i0a?branch_secret=secret_live_igBCicZbq9H3NvYgBishHWuQu4aMbQ0n\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nalternate_short_url_domain\n:\n \n84jv-alternate.app.link\n,\n\n  \nalways_open_app\n:\n \n1\n,\n\n  \nandroid_app\n:\n \n2\n,\n\n  \nandroid_app_links_enabled\n:\n \ntrue\n,\n\n  \nandroid_cd_enabled\n:\n \nnull\n,\n\n  \nandroid_cd_hashed\n:\n \nnull\n,\n\n  \nandroid_package_name\n:\n \ncom.branch.test\n,\n\n  \nandroid_uri_scheme\n:\n \nbranchtest://\n,\n\n  \nandroid_url\n:\n \nhttps://www.example.com/ios\n,\n\n  \napp_key\n:\n \n423188837653566156\n,\n\n  \napp_name\n:\n \neneff_test_3\n,\n\n  \nauto_fetch\n:\n \nnull\n,\n\n  \nblackberry_url\n:\n \nhttps://www.example.com/blackberry\n,\n\n  \nbranch_key\n:\n \nkey_live_kkDv1y82q6RdiaazE5wAyipkqCnI9i0a\n,\n\n  \nbranch_secret\n:\n \nsecret_live_igBCicZbq9H3NvYgBishHWuQu4aMbQ0n\n,\n\n  \ncreation_date\n:\n \n2017-08-07T19:31:47.958Z\n,\n\n  \ndeepview_android\n:\n \nbranch_default\n,\n\n  \ndeepview_desktop\n:\n \nbranch_default\n,\n\n  \ndeepview_ios\n:\n \nbranch_default\n,\n\n  \ndefault_desktop_url\n:\n \nhttps://www.example.com/desktop\n,\n\n  \ndefault_short_url_domain\n:\n \n84jv.app.link\n,\n\n  \ndesktop_uri_scheme\n:\n \nnull\n,\n\n  \ndev_email\n:\n \nYOUR_EMAIL\n,\n\n  \ndev_name\n:\n \nYOUR_NAME\n,\n\n  \nesp_config\n:\n \nnull\n,\n\n  \nfire_url\n:\n \nhttps://www.example.com/amazon\n,\n\n  \nid\n:\n \n423188837653566156\n,\n\n  \nios_app\n:\n \n2\n,\n\n  \nios_bundle_id\n:\n \ncom.branch.test\n,\n\n  \nios_cd_enabled\n:\n \nnull\n,\n\n  \nios_cd_hashed\n:\n \nnull\n,\n\n  \nios_store_country\n:\n \nUS\n,\n\n  \nios_team_id\n:\n \nPW4Q8885U8\n,\n\n  \nios_uri_scheme\n:\n \nbranchtest://\n,\n\n  \nios_url\n:\n \nhttps://www.example.com/ios\n,\n\n  \nmap_utm_params\n:\n \nnull\n,\n\n  \nog_app_id\n:\n \nbranch 123\n,\n\n  \nog_description\n:\n \nbranch description\n,\n\n  \nog_image_url\n:\n \nhttp://lorempixel.com/400/400/\n,\n\n  \nog_title\n:\n \nbranch test\n,\n\n  \norigin\n:\n \nAPI: creator id = YOUR_USER_ID, creator email = YOUR_EMAIL\n,\n\n  \nredirect_domains_whitelist\n:\n \nnull\n,\n\n  \nsha256_cert_fingerprints\n:\n \nnull\n,\n\n  \nshort_url_domain\n:\n \n,\n\n  \nsitemap_enabled\n:\n \nnull\n,\n\n  \ntext_message\n:\n \nclick here to download {{ link }}\n,\n\n  \nuniversal_linking_enabled\n:\n \ntrue\n,\n\n  \nweb_url\n:\n \nhttps://www.example.com/web\n,\n\n  \nwindows_phone_url\n:\n \nhttps://www.example.com/windows\n,\n\n  \nzuora_account_id\n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nbranch_secret\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApp update\n\n\n\n\n\n\nRequest\n\n\ncurl\n \n-\nXPUT\n \nhttps\n:\n//api.branch.io/v1/app/key_live_icCccJIpd7GlYY5oOmoEtpafuDiuyXhT \\\n\n  \n-\nd\n \n{\n\n\n  \nbranch_secret\n: \nsecret_live_D3sN7UDL27glpNKZfGPt6BlmKD9txUBp\n,\n\n\n  \ndev_email\n: \nYOUR_EMAIL\n,\n\n\n  \napp_name\n: \neneff_test_3_updated\n\n\n}\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nalternate_short_url_domain\n:\n \neneff-alternate.app.link\n,\n\n  \nalways_open_app\n:\n \nnull\n,\n\n  \nandroid_app\n:\n \n2\n,\n\n  \nandroid_app_links_enabled\n:\n \nfalse\n,\n\n  \nandroid_cd_enabled\n:\n \nnull\n,\n\n  \nandroid_cd_hashed\n:\n \nnull\n,\n\n  \nandroid_package_name\n:\n \ncom.eneff.branch.example\n,\n\n  \nandroid_uri_scheme\n:\n \nenefftest://\n,\n\n  \nandroid_url\n:\n \nhttps://www.example.com\n,\n\n  \napp_key\n:\n \n299552032371528050\n,\n\n  \napp_name\n:\n \neneff_test_3_updated\n,\n\n  \nauto_fetch\n:\n \nnull\n,\n\n  \nblackberry_url\n:\n \nnull\n,\n\n  \nbranch_key\n:\n \nkey_live_icCccJIpd7GlYY5oOmoEtpafuDiuyXhT\n,\n\n  \nbranch_secret\n:\n \nsecret_live_D3sN7UDL27glpNKZfGPt6BlmKD9txUBp\n,\n\n  \ncreation_date\n:\n \n2016-08-31T15:23:16.518Z\n,\n\n  \ndeepview_android\n:\n \nnull\n,\n\n  \ndeepview_desktop\n:\n \nnull\n,\n\n  \ndeepview_ios\n:\n \neneff_test_deepview_5blb\n,\n\n  \ndefault_desktop_url\n:\n \nhttps://www.example.com\n,\n\n  \ndefault_short_url_domain\n:\n \neneff.app.link\n,\n\n  \ndesktop_uri_scheme\n:\n \nnull\n,\n\n  \ndev_email\n:\n \nYOUR_EMAIL\n,\n\n  \ndev_name\n:\n \nYOUR_NAME\n,\n\n  \nesp_config\n:\n \nnull\n,\n\n  \nfire_url\n:\n \nnull\n,\n\n  \nid\n:\n \n299552032371528050\n,\n\n  \nios_app\n:\n \n2\n,\n\n  \nios_bundle_id\n:\n \ncom.eneff.branch.example\n,\n\n  \nios_cd_enabled\n:\n \nnull\n,\n\n  \nios_cd_hashed\n:\n \nnull\n,\n\n  \nios_store_country\n:\n \nUS\n,\n\n  \nios_team_id\n:\n \nPW4Q8885U8\n,\n\n  \nios_uri_scheme\n:\n \nenefftest://\n,\n\n  \nios_url\n:\n \n,\n\n  \nmap_utm_params\n:\n \nnull\n,\n\n  \nog_app_id\n:\n \nnull\n,\n\n  \nog_description\n:\n \nbranch description updated\n,\n\n  \nog_image_url\n:\n \nhttp://lorempixel.com/400/400/\n,\n\n  \nog_title\n:\n \nhello\n,\n\n  \norigin\n:\n \nnull\n,\n\n  \nredirect_domains_whitelist\n:\n \nnull\n,\n\n  \nsha256_cert_fingerprints\n:\n \nnull\n,\n\n  \nshort_url_domain\n:\n \n,\n\n  \nsitemap_enabled\n:\n \nnull\n,\n\n  \ntext_message\n:\n \nnull\n,\n\n  \nuniversal_linking_enabled\n:\n \ntrue\n,\n\n  \nweb_url\n:\n \nhttps://www.cookies.com\n,\n\n  \nwindows_phone_url\n:\n \nnull\n,\n\n  \nzuora_account_id\n:\n \nnull\n\n\n}\n\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nbranch_key\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\nbranch_secret\n\n\nstring\n\n\nFrom your \nBranch Settings Dashboard\n\n\n\u221a\n\n\n\n\n\n\ndev_email\n\n\nstring\n\n\nThe main contact developer email\n\n\n\u221a\n\n\n\n\n\n\n...\n\n\n...\n\n\nParameters from \nApp Create\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAPI troubleshooting\n\n\n\n\n\n\nUse your \nbranch_key\n and \nbranch_secret\n from your \nBranch Settings Dashboard\n\n\n\n\n\n\nUse your \nuser_id\n from your \nBranch Account Dashboard\n\n\n\n\n\n\nValues have a \n255\n character max", 
            "title": "API"
        }, 
        {
            "location": "/pages/apps/api/#postman", 
            "text": "Use  Postman  to test Branch API for requests, responses, and code examples    Change the  branch_key  to match your  Branch Dashboard", 
            "title": "Postman"
        }, 
        {
            "location": "/pages/apps/api/#link", 
            "text": "", 
            "title": "Link"
        }, 
        {
            "location": "/pages/apps/api/#link-create", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/url  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     channel :  facebook ,     feature :  onboarding ,     campaign :  new product ,     stage :  new user ,     tags : [ one ,  two ,  three ],     data : {       $canonical_identifier :  content/123 ,       $og_title :  Title from Deep Link ,       $og_description :  Description from Deep Link ,       $og_image_url :  http://www.lorempixel.com/400/400/ ,       $desktop_url :  http://www.example.com ,       custom_boolean : true,       custom_integer : 1243,       custom_string :  everything ,       custom_array : [1,2,3,4,5,6],       custom_object : {  random :  dictionary  }    }  }     Response  { \n   url :   https://example.app.link/WgiqvsepqF  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    ...  ...  Parameters from  Configuring Links", 
            "title": "Link create"
        }, 
        {
            "location": "/pages/apps/api/#link-create-bulk", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/url/bulk/key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt  \\ \n  -d  [      {         channel :  facebook ,         feature :  onboarding ,         campaign :  new product ,         stage :  new user ,         tags : [ one ,  two ,  three ],         data : {           $canonical_identifier :  content/123 ,           $og_title :  Title from Deep Link ,           $og_description :  Description from Deep Link ,           $og_image_url :  http://www.lorempixel.com/400/400/ ,           $desktop_url :  http://www.example.com ,           custom_boolean : true,           custom_integer : 1243,           custom_string :  everything ,           custom_array : [1,2,3,4,5,6],           custom_object : {  random :  dictionary  }        }      },      {         channel :  facebook ,         feature :  onboarding ,         campaign :  new product ,         stage :  new user ,         tags : [ one ,  two ,  three ],         data : {           $canonical_identifier :  content/123 ,           $og_title :  Title from Deep Link ,           $og_description :  Description from Deep Link ,           $og_image_url :  http://www.lorempixel.com/400/400/ ,           $desktop_url :  http://www.example.com        }      }    ]     Response  [ \n   { \n     url :   https://example.app.link/0AjuiLcpqF \n   }, \n   { \n     url :   https://example.app.link/5IULiLcpqF \n   }  ]     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    ...  ...  Parameters from  Configuring Links        Bulk link creator is limited to  1000  links at a time", 
            "title": "Link create bulk"
        }, 
        {
            "location": "/pages/apps/api/#link-read", 
            "text": "Returns  deep link properties    Request  curl -XGET  https://api.branch.io/v1/url?url=https://example.app.link/WgiqvsepqF branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt     Response  { \n   campaign :   new product , \n   channel :   facebook , \n   feature :   onboarding , \n   stage :   new user , \n   tags :   [ \n     one , \n     two , \n     three \n   ], \n   data :   { \n     $canonical_identifier :   content/123 , \n     $desktop_url :   http://www.example.com , \n     $og_description :   Description from Deep Link , \n     $og_image_url :   http://www.lorempixel.com/400/400/ , \n     $og_title :   Title from Deep Link , \n     $one_time_use :   false , \n     custom_array :   [ \n       1 , \n       2 , \n       3 , \n       4 , \n       5 , \n       6 \n     ], \n     custom_boolean :   true , \n     custom_integer :   1243 , \n     custom_object :   { \n       random :   dictionary \n     }, \n     custom_string :   everything , \n     ~campaign :   new product , \n     ~channel :   facebook , \n     ~creation_source :   0 , \n     ~feature :   onboarding , \n     ~id :   423196192848102356 , \n     ~stage :   new user , \n     ~tags :   [ \n       one , \n       two , \n       three \n     ], \n     url :   https://example.app.link/WgiqvsepqF \n   }, \n   type :   0 , \n   alias :   null  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    url  string  The deep link url  \u221a", 
            "title": "Link read"
        }, 
        {
            "location": "/pages/apps/api/#link-update", 
            "text": "Request  curl -XPUT  https://api.branch.io/v1/url?url=https%3A%2F%2Fexample.app.link%2F5IULiLcpqF   \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     branch_secret :  secret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9 ,     channel :  twitter ,     data :{       name : alex ,       user_id : 12346    }  }     Response  { \n   campaign :   new product , \n   channel :   twitter , \n   feature :   onboarding , \n   stage :   new user , \n   tags :   [ \n     one , \n     two , \n     three \n   ], \n   data :   { \n     $one_time_use :   false , \n     name :   alex , \n     user_id :   12346 , \n     ~campaign :   new product , \n     ~channel :   twitter , \n     ~creation_source :   0 , \n     ~feature :   onboarding , \n     ~id :   423196096467215333 , \n     ~stage :   new user , \n     ~tags :   [ \n       one , \n       two , \n       three \n     ], \n     url :   https://example.app.link/5IULiLcpqF \n   }, \n   type :   0 , \n   alias :   null  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    branch_secret  string  From your  Branch Settings Dashboard  \u221a    url  string  The deep link url  \u221a", 
            "title": "Link update"
        }, 
        {
            "location": "/pages/apps/api/#link-troubleshooting", 
            "text": "data  is overridden on  Link update , not appended", 
            "title": "Link troubleshooting"
        }, 
        {
            "location": "/pages/apps/api/#event", 
            "text": "", 
            "title": "Event"
        }, 
        {
            "location": "/pages/apps/api/#event-create", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/event  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     identity :  bob ,     event :  custom_event ,     metadata : {       custom_data :  anything ,       hello :  world    }  }     Response  {}     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    event  string  Name of the custom event  \u221a    identity  string  Unique user id, also known as the  Developer Id  on your  Branch Identity Dashboard     metadata  {}  Custom key-value pairs related to the event", 
            "title": "Event create"
        }, 
        {
            "location": "/pages/apps/api/#event-create-commerce", 
            "text": "Request  curl -X POST https://api.branch.io/v1/event  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     identity :  222 ,     event :  purchase ,     metadata : {       hello :  world ,       custom_data :  this    },     commerce_data : {       revenue : 50.0,       currency :  USD ,       transaction_id :  foo-transaction-id ,       shipping : 0.0,       tax : 5.0,       affiliation :  foo-affiliation ,       products : [        {           sku :  foo-sku-1 ,           name :  foo-item-1 ,           price : 45.00,           quantity : 1,           brand :  foo-brand ,           category :  Electronics ,           variant :  foo-variant-1        },        {           sku :  foo-sku-2 ,           price : 2.50,           quantity : 2        }      ]    }  }     Response  {}", 
            "title": "Event create commerce"
        }, 
        {
            "location": "/pages/apps/api/#user", 
            "text": "", 
            "title": "User"
        }, 
        {
            "location": "/pages/apps/api/#user-create", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/profile  \\ \n  -d  {       branch_key : key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,       identity : steve ,       identity_id : 444  }     Response  { \n   identity_id :   444 , \n   link :   https://example.app.link/?%24identity_id=444  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    identity  string  Unique user id, also known as the  Developer Id  on your  Branch Identity Dashboard  \u221a    identity_id  string  Unique user id for Branch, also known as the  Branch Identity Id  on your  Branch Identity Dashboard  \u221a", 
            "title": "User create"
        }, 
        {
            "location": "/pages/apps/api/#user-read", 
            "text": "Request  # identity \ncurl -XGET  https://api.branch.io/v1/profile?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt identity=steve  # identity id \ncurl -XGET  https://api.branch.io/v1/profile?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt identity_id=444     Response  { \n   identity_id :   444 , \n   identity :   steve , \n   link :   https://example.app.link/?%24identity_id=444  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    identity  string  Unique user id, also known as the  Developer Id  on your  Branch Identity Dashboard  \u221a*    identity_id  string  Unique user id for Branch, also known as the  Branch Identity Id  on your  Branch Identity Dashboard  \u221a*      *  =   identity   OR   identity_id  is required", 
            "title": "User read"
        }, 
        {
            "location": "/pages/apps/api/#referral", 
            "text": "", 
            "title": "Referral"
        }, 
        {
            "location": "/pages/apps/api/#referral-link", 
            "text": "Create a user  with an  $identity_id    Create a link  with the  $identity_id  from step 1 in the link data dictionary", 
            "title": "Referral link"
        }, 
        {
            "location": "/pages/apps/api/#referral-reward", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/credits  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     branch_secret :  secret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9 ,     identity :  steve ,     amount :  10 ,     bucket :  default  }     Response  { \n   success :   true  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    branch_secret  string  From your  Branch Settings Dashboard  \u221a    identity  string  Unique user id, also known as the  Developer Id  on your  Branch Identity Dashboard  \u221a    amount  string  Number of credits  \u221a    bucket  string  The category where the credits are save to (defaults to  default )", 
            "title": "Referral reward"
        }, 
        {
            "location": "/pages/apps/api/#referral-redeem", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/redeem  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     branch_secret :  secret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9 ,     identity :  steve ,     amount :  5 ,     bucket :  default  }     Response  // success  {}  // failure  { \n   error :   { \n     code :   402 , \n     message :   Not enough credits to redeem. \n   }  }", 
            "title": "Referral redeem"
        }, 
        {
            "location": "/pages/apps/api/#referral-read", 
            "text": "Request  curl -XGET  https://api.branch.io/v1/credits?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt identity=steve     Response  { \n   default :   40  }", 
            "title": "Referral read"
        }, 
        {
            "location": "/pages/apps/api/#referral-history", 
            "text": "Request  curl -XGET  https://api.branch.io/v1/credithistory?branch_key=key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt identity=steve     Response  [ \n   { \n     transaction :   { \n       date :   2017-08-07T22:15:10.503Z , \n       id :   423229952507361694 , \n       bucket :   default , \n       type :   2 , \n       amount :   - 5 \n     }, \n     event :   { \n       name :   null , \n       metadata :   null \n     }, \n     referrer :   null , \n     referree :   null \n   }, \n   { \n     transaction :   { \n       date :   2017-08-07T22:15:01.818Z , \n       id :   423229916080032437 , \n       bucket :   default , \n       type :   2 , \n       amount :   - 5 \n     }, \n     event :   { \n       name :   null , \n       metadata :   null \n     }, \n     referrer :   null , \n     referree :   null \n   }, \n   { \n     transaction :   { \n       date :   2017-08-07T22:10:57.224Z , \n       id :   423228890178439487 , \n       bucket :   default , \n       type :   1 , \n       amount :   10 \n     }, \n     event :   { \n       name :   null , \n       metadata :   null \n     }, \n     referrer :   null , \n     referree :   null \n   }, \n   { \n     transaction :   { \n       date :   2017-08-07T22:10:56.416Z , \n       id :   423228886789240847 , \n       bucket :   default , \n       type :   1 , \n       amount :   10 \n     }, \n     event :   { \n       name :   null , \n       metadata :   null \n     }, \n     referrer :   null , \n     referree :   null \n   }  ]", 
            "title": "Referral history"
        }, 
        {
            "location": "/pages/apps/api/#referral-reconcile", 
            "text": "Request  curl -X POST https://api.branch.io/v1/reconcile  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     branch_secret :  secret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9 ,     identity :  steve ,     amount :  20 ,     bucket :  default  }     Response  { \n   id :   423232788708309278 , \n   app_id :   423194549918126821 , \n   identity_id :   444 , \n   type :   4 , \n   bucket :   default , \n   amount :   - 20 , \n   date :   2017-08-07T22:26:26.706Z  }", 
            "title": "Referral reconcile"
        }, 
        {
            "location": "/pages/apps/api/#referral-create-rule", 
            "text": "Request  curl -XPOST https://api.branch.io/v1/eventresponse  \\ \n  -d  {     branch_key :  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,     branch_secret :  secret_live_RrrsLqpzVcoVWf5t4ncQVpzlg2pRpGH9 ,     calculation_type : 2,     location : 4,     type :  credit ,     event :  signup ,     metadata : {       web_hook_url :  http://www.example.com ,       amount :  20 ,       bucket :  default    },     filter : {     viewed_tutorial : true,     geo :  over_here    }  }      Response  {}     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    branch_secret  string  From your  Branch Settings Dashboard  \u221a    calculation_type  int  0  reward for each use,  1  reward for first use only  \u221a    location  int  0  all acting users,  1  referring users,  4 , referred acting users  \u221a    type  string  credit  reward points,  web_hook  reward webhook callback  \u221a    web_hook  string  The url to call when an event occurs  type  =  web_hook    amount  string  Number of credits  type  =  credit    bucket  string  The category where the credits are save to  type  =  credit    filter  json  This is the set of keys and values that must be contained in the event metadata for this reward to be issued         Please take note of the  type  parameter  type  =  credit  will create a reward rule on your dashboard, but  type  =  web_hook  will create a webhook each time the reward rule is triggered. To see the structure of the webhook callback, please test this with  RequestBin  or a similar service.", 
            "title": "Referral create rule"
        }, 
        {
            "location": "/pages/apps/api/#referral-troubleshooting", 
            "text": "Referral  credits  cannot go below zero", 
            "title": "Referral troubleshooting"
        }, 
        {
            "location": "/pages/apps/api/#webhook", 
            "text": "", 
            "title": "Webhook"
        }, 
        {
            "location": "/pages/apps/api/#webhook-create", 
            "text": "See  Referral create rule", 
            "title": "Webhook create"
        }, 
        {
            "location": "/pages/apps/api/#app", 
            "text": "", 
            "title": "App"
        }, 
        {
            "location": "/pages/apps/api/#app-create", 
            "text": "Request  curl   - XPOST   https : //api.branch.io/v1/app \\ \n   - d   {     user_id :  YOUR_USER_ID ,     app_name :  eneff_test_3 ,     dev_name :  YOUR_NAME ,     dev_email :  YOUR_EMAIL ,     always_open_app :  1 ,     android_app :  2 ,     android_url :  https://www.example.com/ios ,     android_uri_scheme :  branchtest:// ,     android_package_name :  com.branch.test ,     android_app_links_enabled :  1 ,     ios_app :  2 ,     ios_url :  https://www.example.com/ios ,     ios_uri_scheme :  branchtest:// ,     ios_store_country :  US ,     universal_linking_enabled :  1 ,     ios_bundle_id :  com.branch.test ,     ios_team_id :  PW4Q8885U8 ,     fire_url :  https://www.example.com/amazon ,     windows_phone_url :  https://www.example.com/windows ,     blackberry_url :  https://www.example.com/blackberry ,     web_url :  https://www.example.com/web ,     default_desktop_url :  https://www.example.com/desktop ,     text_message :  click here to download {{ link }} ,     og_app_id :  branch 123 ,     og_title :  branch test ,     og_description :  branch description ,     og_image_url :  http://lorempixel.com/400/400/ ,     deepview_desktop :  branch_default ,     deepview_ios :  branch_default ,     deepview_android :  branch_default  }     Response  { \n   alternate_short_url_domain :   a8p0-alternate.app.link , \n   always_open_app :   1 , \n   android_app :   2 , \n   android_app_links_enabled :   1 , \n   android_package_name :   com.branch.test , \n   android_uri_scheme :   branchtest:// , \n   android_url :   https://www.example.com/ios , \n   app_key :   423190238827926224 , \n   app_name :   eneff_test_3 , \n   blackberry_url :   https://www.example.com/blackberry , \n   branch_key :   key_live_hptFZsX5x7Nsvfq4MWdB5ohosCfQ6tjl , \n   branch_secret :   secret_live_sHyeiy240rxQhDF2H2DJYrypRHoq4z1x , \n   creation_date :   2017-08-07T19:37:22.024Z , \n   deepview_android :   branch_default , \n   deepview_desktop :   branch_default , \n   deepview_ios :   branch_default , \n   default_desktop_url :   https://www.example.com/desktop , \n   default_short_url_domain :   a8p0.app.link , \n   dev_email :   YOUR_EMAIL , \n   dev_name :   YOUR_NAME , \n   fire_url :   https://www.example.com/amazon , \n   id :   423190238827926224 , \n   ios_app :   2 , \n   ios_bundle_id :   com.branch.test , \n   ios_store_country :   US , \n   ios_team_id :   PW4Q8885U8 , \n   ios_uri_scheme :   branchtest:// , \n   ios_url :   https://www.example.com/ios , \n   og_app_id :   branch 123 , \n   og_description :   branch description , \n   og_image_url :   http://lorempixel.com/400/400/ , \n   og_title :   branch test , \n   origin :   API: creator id = YOUR_USER_ID, creator email = YOUR_EMAIL , \n   short_url_domain :   , \n   text_message :   click here to download {{ link }} , \n   universal_linking_enabled :   1 , \n   web_url :   https://www.example.com/web , \n   windows_phone_url :   https://www.example.com/windows  }     Parameters     Key  Value  Usage  Required      user_id  string  The Dashboard User Id obtained from  Branch Account Dashboard  \u221a    app_name  string  The name of the app  \u221a    dev_name  string  The main contact developer name  \u221a    dev_email  string  The main contact developer email. A email is sent on account creation  \u221a    android_app  string  Whether an Android app is enabled.  0  or  1  indicating  true     android_url  string  The url of the Android store, or package name (e.g.  com.android.myapp ).  android_app  must be set to  2     android_uri_scheme  string  The Android URI scheme     android_package_name  string  The Android package name (e.g.  com.android.myapp )     sha256_cert_fingerprints  [string]  The SHA256 fingerprints for App Links     android_app_links_enabled  string  Whether App Links are enabled.  0  or  1  indicating  true     ios_app  string  Whether an iOS app is enabled, ( 0  or  1  indicating  true     ios_url  string  The url of iOS store, or app id (e.g.  id512451233 ), or a fallback URL for iOS if present.  ios_app  must be set to  2     ios_uri_scheme  string  The iOS URI scheme     ios_store_country  string  The country code of the app, defaults to  US     ios_bundle_id  string  The iOS Bundle Id     ios_team_id  string  The iOS Team Id     universal_linking_enabled  string  Whether Universal Links should be enabled.  0  or  1  indicating  true     fire_url  string  The redirect on Fire phone     windows_phone_url  string  The redirect on Windows phone     blackberry_url  string  The redirect on Blackberry phone     web_url  string  Backup website if URLs are  null     default_desktop_url  string  The default desktop redirect, or  null  if set to hosted SMS     text_message  string  Text message to use for text-me feature,  {{ link }}  is required and will be replaced with a deep link     og_app_id  string  Open Graph app id     og_title  string  Open Graph title to be used with link     og_description  string  Open Graph description to be used with link     og_image_url  string  Open Graph image URL to be used with link     deepview_desktop  string  The current deepview selected for the desktop platform     deepview_ios  string  The current deepview selected for the iOS platform     deepview_android  string  The current deepview selected for the Android platform", 
            "title": "App create"
        }, 
        {
            "location": "/pages/apps/api/#app-read", 
            "text": "Request  curl   - XGET   https://api.branch.io/v1/app/key_live_kkDv1y82q6RdiaazE5wAyipkqCnI9i0a?branch_secret=secret_live_igBCicZbq9H3NvYgBishHWuQu4aMbQ0n     Response  { \n   alternate_short_url_domain :   84jv-alternate.app.link , \n   always_open_app :   1 , \n   android_app :   2 , \n   android_app_links_enabled :   true , \n   android_cd_enabled :   null , \n   android_cd_hashed :   null , \n   android_package_name :   com.branch.test , \n   android_uri_scheme :   branchtest:// , \n   android_url :   https://www.example.com/ios , \n   app_key :   423188837653566156 , \n   app_name :   eneff_test_3 , \n   auto_fetch :   null , \n   blackberry_url :   https://www.example.com/blackberry , \n   branch_key :   key_live_kkDv1y82q6RdiaazE5wAyipkqCnI9i0a , \n   branch_secret :   secret_live_igBCicZbq9H3NvYgBishHWuQu4aMbQ0n , \n   creation_date :   2017-08-07T19:31:47.958Z , \n   deepview_android :   branch_default , \n   deepview_desktop :   branch_default , \n   deepview_ios :   branch_default , \n   default_desktop_url :   https://www.example.com/desktop , \n   default_short_url_domain :   84jv.app.link , \n   desktop_uri_scheme :   null , \n   dev_email :   YOUR_EMAIL , \n   dev_name :   YOUR_NAME , \n   esp_config :   null , \n   fire_url :   https://www.example.com/amazon , \n   id :   423188837653566156 , \n   ios_app :   2 , \n   ios_bundle_id :   com.branch.test , \n   ios_cd_enabled :   null , \n   ios_cd_hashed :   null , \n   ios_store_country :   US , \n   ios_team_id :   PW4Q8885U8 , \n   ios_uri_scheme :   branchtest:// , \n   ios_url :   https://www.example.com/ios , \n   map_utm_params :   null , \n   og_app_id :   branch 123 , \n   og_description :   branch description , \n   og_image_url :   http://lorempixel.com/400/400/ , \n   og_title :   branch test , \n   origin :   API: creator id = YOUR_USER_ID, creator email = YOUR_EMAIL , \n   redirect_domains_whitelist :   null , \n   sha256_cert_fingerprints :   null , \n   short_url_domain :   , \n   sitemap_enabled :   null , \n   text_message :   click here to download {{ link }} , \n   universal_linking_enabled :   true , \n   web_url :   https://www.example.com/web , \n   windows_phone_url :   https://www.example.com/windows , \n   zuora_account_id :   null  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    branch_secret  string  From your  Branch Settings Dashboard  \u221a", 
            "title": "App read"
        }, 
        {
            "location": "/pages/apps/api/#app-update", 
            "text": "Request  curl   - XPUT   https : //api.branch.io/v1/app/key_live_icCccJIpd7GlYY5oOmoEtpafuDiuyXhT \\ \n   - d   {     branch_secret :  secret_live_D3sN7UDL27glpNKZfGPt6BlmKD9txUBp ,     dev_email :  YOUR_EMAIL ,     app_name :  eneff_test_3_updated  }     Response  { \n   alternate_short_url_domain :   eneff-alternate.app.link , \n   always_open_app :   null , \n   android_app :   2 , \n   android_app_links_enabled :   false , \n   android_cd_enabled :   null , \n   android_cd_hashed :   null , \n   android_package_name :   com.eneff.branch.example , \n   android_uri_scheme :   enefftest:// , \n   android_url :   https://www.example.com , \n   app_key :   299552032371528050 , \n   app_name :   eneff_test_3_updated , \n   auto_fetch :   null , \n   blackberry_url :   null , \n   branch_key :   key_live_icCccJIpd7GlYY5oOmoEtpafuDiuyXhT , \n   branch_secret :   secret_live_D3sN7UDL27glpNKZfGPt6BlmKD9txUBp , \n   creation_date :   2016-08-31T15:23:16.518Z , \n   deepview_android :   null , \n   deepview_desktop :   null , \n   deepview_ios :   eneff_test_deepview_5blb , \n   default_desktop_url :   https://www.example.com , \n   default_short_url_domain :   eneff.app.link , \n   desktop_uri_scheme :   null , \n   dev_email :   YOUR_EMAIL , \n   dev_name :   YOUR_NAME , \n   esp_config :   null , \n   fire_url :   null , \n   id :   299552032371528050 , \n   ios_app :   2 , \n   ios_bundle_id :   com.eneff.branch.example , \n   ios_cd_enabled :   null , \n   ios_cd_hashed :   null , \n   ios_store_country :   US , \n   ios_team_id :   PW4Q8885U8 , \n   ios_uri_scheme :   enefftest:// , \n   ios_url :   , \n   map_utm_params :   null , \n   og_app_id :   null , \n   og_description :   branch description updated , \n   og_image_url :   http://lorempixel.com/400/400/ , \n   og_title :   hello , \n   origin :   null , \n   redirect_domains_whitelist :   null , \n   sha256_cert_fingerprints :   null , \n   short_url_domain :   , \n   sitemap_enabled :   null , \n   text_message :   null , \n   universal_linking_enabled :   true , \n   web_url :   https://www.cookies.com , \n   windows_phone_url :   null , \n   zuora_account_id :   null  }     Parameters     Key  Value  Usage  Required      branch_key  string  From your  Branch Settings Dashboard  \u221a    branch_secret  string  From your  Branch Settings Dashboard  \u221a    dev_email  string  The main contact developer email  \u221a    ...  ...  Parameters from  App Create", 
            "title": "App update"
        }, 
        {
            "location": "/pages/apps/api/#api-troubleshooting", 
            "text": "Use your  branch_key  and  branch_secret  from your  Branch Settings Dashboard    Use your  user_id  from your  Branch Account Dashboard    Values have a  255  character max", 
            "title": "API troubleshooting"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/", 
            "text": "Overview\n\n\nBranch makes it simple to enable Universal Links all while greatly improving on them, offering full attribution, supporting edge cases where Universal Links fail (common) and allowing you to deep link when the user doesn't have your app installed.\n\n\n\n\nSetup\n\n\nEnable Universal Links on the Branch dashboard\n\n\n\n\nNavigate to \nLink Settings\n in the Branch Dashboard.\n\n\nCheck the box to \nEnable Universal Links\n from iOS redirects.\n\n\nType in your App\u2019s Bundle Identifier.\n\n\nType in your Apple App Prefix (found by clicking your app on \nthis page\n in Apple's Developer Portal).\n\n\nScroll down and click on the \nSave\n button.\n\n\n\n\n\n\nEnable Associated Domains in Xcode\n\n\n\n\nGo to the \nCapabilities\n tab of your project file.\n\n\nScroll down and enable \nAssociated Domains\n. \n\n\n\n\n\n\nIf you see an error after this step\n\n\n\n\nPlease ensure...\n\n\n\n\nThe right team selected for your Xcode project.\n\n\nThe Bundle Identifier of your Xcode project matches the one used to register the App Identifier with Apple.\n\n\n\n\n\n\nAdd your Branch link domains\n\n\n\n\nGo to the \nLink Settings\n page on the dashboard.\n\n\nScroll down to the \nLink Domain\n area.\n\n\nCopy your domain name.\n\n\nIn the \nDomains\n section, click the \n+\n icon and add the following entries: (making sure that \nxxxx\n matches the subdomain prefix you've been assigned or selected for yourself)\n\n\napplinks:xxxx.app.link\n\n\napplinks:xxxx-alternate.app.link\n\n\napplinks:xxxx.test-app.link\n\n\napplinks:xxxx-alternate.test-app.link\n\n\n\n\n\n\n\n\n\n\n\n\nSupport for legacy links\n\n\nIf the \nDefault domain name\n box shows the legacy \nbnc.lt\n domain, you should use the following entry instead: \napplinks:bnc.lt\n\n\n\n\n\n\nUsing a custom domain or subdomain?\n\n\nIf you use a \ncustom domain or subdomain for your Branch links\n, you should instead add entries for \napplinks:[mycustomdomainorsubdomain]\n and \nXXXX-alternate.app.link\n. If you're unsure of your Branch-assigned app.link subdomain, contact \n, and we can provide it.\n\n\n\n\nAdvanced\n\n\nApps/browsers that support Universal Links\n\n\nUnfortunately Universal Links don't work everywhere yet. We have compiled the Universal Links support status of some of the more popular apps.\n\n\nApps that always work\n\n\nIf you open a Universal Link in one of these apps, it should work correctly all the time.\n\n\n\n\n\n\n\n\nApp/Browser\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nMessages\n\n\nworks\n\n\n\n\n\n\nMail\n\n\nworks\n\n\n\n\n\n\nWhatsApp\n\n\nworks\n\n\n\n\n\n\nGmail\n\n\nworks\n\n\n\n\n\n\nInbox\n\n\nworks\n\n\n\n\n\n\n\n\nApps limited by Apple\n\n\nApple has limited Universal Links in certain situations, apparently to avoid confusing users:\n\n\n\n\nUniversal Links will not work if you paste the link into the browser URL field.\n\n\nUniversal Links work with a user driven \na href=\"...\"\n element click \nacross domains\n. Example: if there is a Universal Link on google.com pointing to bnc.lt, it will open the app.\n\n\nUniversal Links will not work with a user driven \na href=\"...\"\n element click on the \nsame domain\n. Example: if there is a Universal Link on google.com pointing to a different Universal Link on google.com, it will not open the app.\n\n\nUniversal Links cannot be triggered via Javascript (in \nwindow.onload\n or via a \n.click()\n call on an \na\n element), unless it is part of a user action.\n\n\n\n\n\n\n\n\n\n\nApp/Browser\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nSafari\n\n\nworks conditionally\n\n\n\n\n\n\nChrome\n\n\nworks conditionally\n\n\n\n\n\n\n\n\nApps that work sometimes\n\n\nApps with built-in webviews (Google, Twitter, Facebook, Facebook Messenger, WeChat, etc.) work with Universal Links only when a webview is already open. In other words, Universal Links do not work in-app from the feed or main app views.\n\n\nTo work around this limitation, your links must have \ndeepviews\n or something similar enabled, with a call-to-action link/button that has a Universal Link behind it. This way, clicking a link from the app feed will open a webview containing your deepview page, and the user can then click the link/button to launch your app. All of Apple's limitations (in the section above) still apply for the deepview page.\n\n\n\n\n\n\n\n\nApp/Browser\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nGoogle\n\n\nworks conditionally\n\n\n\n\n\n\nFacebook\n\n\nworks conditionally\n\n\n\n\n\n\nFacebook Messenger\n\n\nworks conditionally\n\n\n\n\n\n\nWeChat\n\n\nworks conditionally\n\n\n\n\n\n\nTwitter\n\n\nworks conditionally\n\n\n\n\n\n\nLinkedIn\n\n\nworks conditionally\n\n\n\n\n\n\nAny app using \nSFSafariViewController\n\n\nworks conditionally\n\n\n\n\n\n\n\n\nApps with special cases\n\n\n\n\n\n\n\n\nApp/Browser\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nSlack\n\n\nworks if configured to open links in Safari. Otherwise, works conditionally as in the above section.\n\n\n\n\n\n\n\n\nApps that do not work\n\n\n\n\n\n\n\n\nApp/Browser\n\n\nStatus\n\n\n\n\n\n\n\n\n\n\nPinterest\n\n\nbroken\n\n\n\n\n\n\nInstagram\n\n\nbroken\n\n\n\n\n\n\nTelegram\n\n\nbroken\n\n\n\n\n\n\n\n\nCommon issues that cause Universal Links to fail\n\n\n\n\nAutomated Validation for Your Xcode Project\n\n\nYou can check if your Xcode project is correctly configured by using our \nUniversal Links Validator\n.\n\n\n\n\nAre you testing by manually entering into Safari?\n\n\nUniversal Links don't work properly when entered into Safari. Use Notes or iMessage for testing.\n\n\nAre you wrapping Branch links with another link and redirecting?\n\n\nIn most cases, Universal Links won't open the app when they are \"wrapped\" by click tracking links. Universal links, including Branch links, must be freestanding. If you want Universal Links to work in all situations, do not use other links that redirect to your Branch links.\n\n\nDo your Team ID \n Bundle ID match those on your dashboard?\n\n\nYou can find them in the Dashboard under Settings \n Link Settings, in the iOS section next to \"Enable Universal Links.\" They should match your Team ID and Bundle ID. Team ID can be found here \nhttps://developer.apple.com/membercenter/index.action#accountSummary\n. Your Bundle ID is found in Xcode, in the \nGeneral\n tab for the correct build target. If your Apple App Prefix is different from your Team ID, you should use your App Prefix. Your app prefix can be found from App IDs on Apple's Developer Portal.\n\n\nHave you deleted the app and reinstalled it?\n\n\niOS does not re-scrape the apple-app-site-association file unless you delete and reinstall the app. (The only exception to this is App Store updates. iOS does rescrape on every update. This means that when users update to a version of your app with the applinks entitlement, Universal Links will start working for them.)\n\n\nUniversal Links can be disabled, unfortunately.\n\n\nIf you are successfully taken into your app via a Universal Link, you'll see \"app.link\" (or your domain) and a forward button in the top right corner of the status bar. If you click that button, Apple will no longer activate Universal Links in the future. To re-enable Universal Links, long press on the link in Messages (iOS 9 only due to iMessage revamp in 10) or Notes (iOS 10/9) and choose 'Open in \n'.\n\n\nUsing a custom domain?\n\n\nMake sure it's configured correctly. You can find configuration issues by using our \nUniversal Link Validator\n.\n\n\nThe following error message will appear in your OS-level logs if your domain doesn't have SSL set up properly:\n\n\nSep\n \n21\n \n14\n:\n27\n:\n01\n \nDerricks\n-\niPhone\n \nswcd\n[\n2044\n]\n \nNotice\n:\n \n2015\n-\n09\n-\n21\n \n02\n:\n27\n:\n01.878907\n \nPM\n \n[\nSWC\n]\n \n###\n \nRejecting\n \nURL\n \nhttps://examplecustomdomain.com/apple-app-site-association\n \nfor\n \nauth\n \nmethod\n \nNSURLAuthenticationMethodServerTrust\n:\n \n-\n6754\n/\n0xFFFFE59E\n \nkAuthenticationErr\n\n\n\n\n\nThese logs can be found for physical devices connected to Xcode by navigating to Window \n Devices \n choosing your device and then clicking the \"up\" arrow in the bottom left corner of the main view.\n\n\nIf you're using a custom subdomain, your CNAME should point to \ncustom.bnc.lt\n under \nLink Settings\n in the Branch dashboard.\n\n\nReturn YES to continueUserActivity\n\n\nWhen users enter your app via a Universal Link, we check to see to see if the link URL contains \nbnc.lt\n. If so, \nhandledByBranch\n will return \nYES\n. If not, \nhandledByBranch\n will return \nNO\n. This allows us to explicitly confirm the incoming link is from Branch without making a server call.\n\n\nFor most implementations this will never be an issue, since your deep links will be routed correctly either way. However, if you use a custom link domain \nand\n you rely on \nhandledByBranch\n to return \nYES\n for every incoming Branch-generated Universal Link, you can inform the Branch SDK by following these steps:\n\n\n\n\nIn your \nInfo.plist\n file, create a new key called \nbranch_universal_link_domains\n.\n\n\nAdd your custom domain(s) as a string. \n\n\nSave the file.\n\n\n\n\n\n\nMultiple custom domains\n\n\nIf you have an unusual situation with multiple custom link domains, you may also configure \nbranch_universal_link_domains\n as an array of strings.", 
            "title": "iOS Universal Links"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#overview", 
            "text": "Branch makes it simple to enable Universal Links all while greatly improving on them, offering full attribution, supporting edge cases where Universal Links fail (common) and allowing you to deep link when the user doesn't have your app installed.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#enable-universal-links-on-the-branch-dashboard", 
            "text": "Navigate to  Link Settings  in the Branch Dashboard.  Check the box to  Enable Universal Links  from iOS redirects.  Type in your App\u2019s Bundle Identifier.  Type in your Apple App Prefix (found by clicking your app on  this page  in Apple's Developer Portal).  Scroll down and click on the  Save  button.", 
            "title": "Enable Universal Links on the Branch dashboard"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#enable-associated-domains-in-xcode", 
            "text": "Go to the  Capabilities  tab of your project file.  Scroll down and enable  Associated Domains .     If you see an error after this step   Please ensure...   The right team selected for your Xcode project.  The Bundle Identifier of your Xcode project matches the one used to register the App Identifier with Apple.", 
            "title": "Enable Associated Domains in Xcode"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#add-your-branch-link-domains", 
            "text": "Go to the  Link Settings  page on the dashboard.  Scroll down to the  Link Domain  area.  Copy your domain name.  In the  Domains  section, click the  +  icon and add the following entries: (making sure that  xxxx  matches the subdomain prefix you've been assigned or selected for yourself)  applinks:xxxx.app.link  applinks:xxxx-alternate.app.link  applinks:xxxx.test-app.link  applinks:xxxx-alternate.test-app.link       Support for legacy links  If the  Default domain name  box shows the legacy  bnc.lt  domain, you should use the following entry instead:  applinks:bnc.lt    Using a custom domain or subdomain?  If you use a  custom domain or subdomain for your Branch links , you should instead add entries for  applinks:[mycustomdomainorsubdomain]  and  XXXX-alternate.app.link . If you're unsure of your Branch-assigned app.link subdomain, contact  , and we can provide it.", 
            "title": "Add your Branch link domains"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#appsbrowsers-that-support-universal-links", 
            "text": "Unfortunately Universal Links don't work everywhere yet. We have compiled the Universal Links support status of some of the more popular apps.", 
            "title": "Apps/browsers that support Universal Links"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#apps-that-always-work", 
            "text": "If you open a Universal Link in one of these apps, it should work correctly all the time.     App/Browser  Status      Messages  works    Mail  works    WhatsApp  works    Gmail  works    Inbox  works", 
            "title": "Apps that always work"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#apps-limited-by-apple", 
            "text": "Apple has limited Universal Links in certain situations, apparently to avoid confusing users:   Universal Links will not work if you paste the link into the browser URL field.  Universal Links work with a user driven  a href=\"...\"  element click  across domains . Example: if there is a Universal Link on google.com pointing to bnc.lt, it will open the app.  Universal Links will not work with a user driven  a href=\"...\"  element click on the  same domain . Example: if there is a Universal Link on google.com pointing to a different Universal Link on google.com, it will not open the app.  Universal Links cannot be triggered via Javascript (in  window.onload  or via a  .click()  call on an  a  element), unless it is part of a user action.      App/Browser  Status      Safari  works conditionally    Chrome  works conditionally", 
            "title": "Apps limited by Apple"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#apps-that-work-sometimes", 
            "text": "Apps with built-in webviews (Google, Twitter, Facebook, Facebook Messenger, WeChat, etc.) work with Universal Links only when a webview is already open. In other words, Universal Links do not work in-app from the feed or main app views.  To work around this limitation, your links must have  deepviews  or something similar enabled, with a call-to-action link/button that has a Universal Link behind it. This way, clicking a link from the app feed will open a webview containing your deepview page, and the user can then click the link/button to launch your app. All of Apple's limitations (in the section above) still apply for the deepview page.     App/Browser  Status      Google  works conditionally    Facebook  works conditionally    Facebook Messenger  works conditionally    WeChat  works conditionally    Twitter  works conditionally    LinkedIn  works conditionally    Any app using  SFSafariViewController  works conditionally", 
            "title": "Apps that work sometimes"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#apps-with-special-cases", 
            "text": "App/Browser  Status      Slack  works if configured to open links in Safari. Otherwise, works conditionally as in the above section.", 
            "title": "Apps with special cases"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#apps-that-do-not-work", 
            "text": "App/Browser  Status      Pinterest  broken    Instagram  broken    Telegram  broken", 
            "title": "Apps that do not work"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#common-issues-that-cause-universal-links-to-fail", 
            "text": "Automated Validation for Your Xcode Project  You can check if your Xcode project is correctly configured by using our  Universal Links Validator .", 
            "title": "Common issues that cause Universal Links to fail"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#are-you-testing-by-manually-entering-into-safari", 
            "text": "Universal Links don't work properly when entered into Safari. Use Notes or iMessage for testing.", 
            "title": "Are you testing by manually entering into Safari?"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#are-you-wrapping-branch-links-with-another-link-and-redirecting", 
            "text": "In most cases, Universal Links won't open the app when they are \"wrapped\" by click tracking links. Universal links, including Branch links, must be freestanding. If you want Universal Links to work in all situations, do not use other links that redirect to your Branch links.", 
            "title": "Are you wrapping Branch links with another link and redirecting?"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#do-your-team-id-bundle-id-match-those-on-your-dashboard", 
            "text": "You can find them in the Dashboard under Settings   Link Settings, in the iOS section next to \"Enable Universal Links.\" They should match your Team ID and Bundle ID. Team ID can be found here  https://developer.apple.com/membercenter/index.action#accountSummary . Your Bundle ID is found in Xcode, in the  General  tab for the correct build target. If your Apple App Prefix is different from your Team ID, you should use your App Prefix. Your app prefix can be found from App IDs on Apple's Developer Portal.", 
            "title": "Do your Team ID &amp; Bundle ID match those on your dashboard?"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#have-you-deleted-the-app-and-reinstalled-it", 
            "text": "iOS does not re-scrape the apple-app-site-association file unless you delete and reinstall the app. (The only exception to this is App Store updates. iOS does rescrape on every update. This means that when users update to a version of your app with the applinks entitlement, Universal Links will start working for them.)", 
            "title": "Have you deleted the app and reinstalled it?"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#universal-links-can-be-disabled-unfortunately", 
            "text": "If you are successfully taken into your app via a Universal Link, you'll see \"app.link\" (or your domain) and a forward button in the top right corner of the status bar. If you click that button, Apple will no longer activate Universal Links in the future. To re-enable Universal Links, long press on the link in Messages (iOS 9 only due to iMessage revamp in 10) or Notes (iOS 10/9) and choose 'Open in  '.", 
            "title": "Universal Links can be disabled, unfortunately."
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#using-a-custom-domain", 
            "text": "Make sure it's configured correctly. You can find configuration issues by using our  Universal Link Validator .  The following error message will appear in your OS-level logs if your domain doesn't have SSL set up properly:  Sep   21   14 : 27 : 01   Derricks - iPhone   swcd [ 2044 ]   Notice :   2015 - 09 - 21   02 : 27 : 01.878907   PM   [ SWC ]   ###   Rejecting   URL   https://examplecustomdomain.com/apple-app-site-association   for   auth   method   NSURLAuthenticationMethodServerTrust :   - 6754 / 0xFFFFE59E   kAuthenticationErr   These logs can be found for physical devices connected to Xcode by navigating to Window   Devices   choosing your device and then clicking the \"up\" arrow in the bottom left corner of the main view.  If you're using a custom subdomain, your CNAME should point to  custom.bnc.lt  under  Link Settings  in the Branch dashboard.", 
            "title": "Using a custom domain?"
        }, 
        {
            "location": "/pages/deep-linking/universal-links/#return-yes-to-continueuseractivity", 
            "text": "When users enter your app via a Universal Link, we check to see to see if the link URL contains  bnc.lt . If so,  handledByBranch  will return  YES . If not,  handledByBranch  will return  NO . This allows us to explicitly confirm the incoming link is from Branch without making a server call.  For most implementations this will never be an issue, since your deep links will be routed correctly either way. However, if you use a custom link domain  and  you rely on  handledByBranch  to return  YES  for every incoming Branch-generated Universal Link, you can inform the Branch SDK by following these steps:   In your  Info.plist  file, create a new key called  branch_universal_link_domains .  Add your custom domain(s) as a string.   Save the file.    Multiple custom domains  If you have an unusual situation with multiple custom link domains, you may also configure  branch_universal_link_domains  as an array of strings.", 
            "title": "Return YES to continueUserActivity"
        }, 
        {
            "location": "/pages/deep-linking/android-app-links/", 
            "text": "Overview\n\n\nBranch makes it simple to enable Android App Links all while greatly improving on them, offering full attribution, supporting edge cases where Android App Links fail (common) and allowing you to deep link when the user doesn't have your app installed. Note that Android App Links only work on Android 6+. Don't worry, Branch will handle all the other edge cases.\n\n\nSetup\n\n\nGenerate signing certificate fingerprint\n\n\nStart by generating a SHA256 fingerprint of your app's signing certificate.\n\n\n\n\nNavigate to your keystore file. This is the file that you use to build the debug and production version of your APK file before deploying it.\n\n\nRun this command on it to generate the fingerprint: \nkeytool -list -v -keystore my-release-key.keystore\n\n\nYou'll see a value like \n14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5\n come out the other end. Copy this.\n\n\n\n\nEnable App Links on the Branch dashboard\n\n\n\n\nHead to the \nLink Settings page\n on the Branch dashboard.\n\n\nToggle the \nEnable App Links\n checkbox in the Android section.\n\n\nPaste the copied fingerprint value into the \nSHA256 Cert Fingerprints\n field that appears. \n\n\nScroll down and click \nSave\n.\n\n\n\n\n\n\nUsing multiple fingerprints\n\n\nYou can insert both your debug and production fingerprints for testing. Simply separate them with a comma.\n\n\n\n\nAdd Intent Filter to Manifest\n\n\n\n\nGo to the \nLink Settings\n page on the dashboard.\n\n\nScroll down to the \nLink Domain\n area.\n\n\nCopy your domain name. \n\n\nChoose the \nActivity\n you want to open up when a link is clicked. This is typically your \nSplashActivity\n or a \nBaseActivity\n that all other activities inherit from (and likely the same one you selected in the \nSDK integration guide\n).\n\n\nInside your \nAndroidManifest.xml\n, locate where the selected \nActivity\n is defined.\n\n\nWithin the \nActivity\n definition, insert the intent filter provided below (making sure that \nxxxx\n matches the subdomain prefix you've been assigned or selected for yourself). Be sure to add this as its own separate intent filter.\n\n\n\n\nintent-filter\n \nandroid:autoVerify=\ntrue\n\n    \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n    \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n    \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n    \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nxxxx.app.link\n \n/\n\n    \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nxxxx-alternate.app.link\n \n/\n\n    \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nxxxx.test-app.link\n \n/\n\n    \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nxxxx-alternate.test-app.link\n \n/\n\n\n/intent-filter\n\n\n\n\n\n\n\nUsing a custom domain or subdomain?\n\n\nIf you use a \ncustom domain or subdomain for your Branch links\n, you should also add an entry for:\n\n\ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nmycustomdomainorsubdomain\n \n/", 
            "title": "Android App Links"
        }, 
        {
            "location": "/pages/deep-linking/android-app-links/#overview", 
            "text": "Branch makes it simple to enable Android App Links all while greatly improving on them, offering full attribution, supporting edge cases where Android App Links fail (common) and allowing you to deep link when the user doesn't have your app installed. Note that Android App Links only work on Android 6+. Don't worry, Branch will handle all the other edge cases.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linking/android-app-links/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linking/android-app-links/#generate-signing-certificate-fingerprint", 
            "text": "Start by generating a SHA256 fingerprint of your app's signing certificate.   Navigate to your keystore file. This is the file that you use to build the debug and production version of your APK file before deploying it.  Run this command on it to generate the fingerprint:  keytool -list -v -keystore my-release-key.keystore  You'll see a value like  14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5  come out the other end. Copy this.", 
            "title": "Generate signing certificate fingerprint"
        }, 
        {
            "location": "/pages/deep-linking/android-app-links/#enable-app-links-on-the-branch-dashboard", 
            "text": "Head to the  Link Settings page  on the Branch dashboard.  Toggle the  Enable App Links  checkbox in the Android section.  Paste the copied fingerprint value into the  SHA256 Cert Fingerprints  field that appears.   Scroll down and click  Save .    Using multiple fingerprints  You can insert both your debug and production fingerprints for testing. Simply separate them with a comma.", 
            "title": "Enable App Links on the Branch dashboard"
        }, 
        {
            "location": "/pages/deep-linking/android-app-links/#add-intent-filter-to-manifest", 
            "text": "Go to the  Link Settings  page on the dashboard.  Scroll down to the  Link Domain  area.  Copy your domain name.   Choose the  Activity  you want to open up when a link is clicked. This is typically your  SplashActivity  or a  BaseActivity  that all other activities inherit from (and likely the same one you selected in the  SDK integration guide ).  Inside your  AndroidManifest.xml , locate where the selected  Activity  is defined.  Within the  Activity  definition, insert the intent filter provided below (making sure that  xxxx  matches the subdomain prefix you've been assigned or selected for yourself). Be sure to add this as its own separate intent filter.   intent-filter   android:autoVerify= true \n     action   android:name= android.intent.action.VIEW   / \n     category   android:name= android.intent.category.DEFAULT   / \n     category   android:name= android.intent.category.BROWSABLE   / \n     data   android:scheme= https   android:host= xxxx.app.link   / \n     data   android:scheme= https   android:host= xxxx-alternate.app.link   / \n     data   android:scheme= https   android:host= xxxx.test-app.link   / \n     data   android:scheme= https   android:host= xxxx-alternate.test-app.link   /  /intent-filter    Using a custom domain or subdomain?  If you use a  custom domain or subdomain for your Branch links , you should also add an entry for:  data   android:scheme= https   android:host= mycustomdomainorsubdomain   /", 
            "title": "Add Intent Filter to Manifest"
        }, 
        {
            "location": "/pages/deep-linking/routing/", 
            "text": "Overview\n\n\nWhen a Branch link is opened, either your app launches or users are taken to the App/Play store to download it. Deep links improve this process by routing users directly to specific content after your app launches. With Branch, this still works even if users have to stop and download the app first (a.k.a., \"deferred deep links\").\n\n\nDeep links are an incredibly important part of delivering a high quality user experience. With deep links, you can take users to the exact thing they clicked on or even offer a customized onboarding experience.\n\n\nOption 1: Build custom routing inside the routing callback\n\n\nRoute immediately on app open\n\n\nInside the deep link handler callback that you register in initSession, you will want to examine the params dictionary to determine whether the user opened a Branch link. Below is an example assuming that the links correspond to pictures. Below are some examples from iOS and Android where we're using the \npictureId\n key to route, but you can see more code snippets for \nthe other platforms here\n.\n\n\n\n\n\n\niOS - Objective C\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ndidFinishLaunchingWithOptions:\n(\nNSDictionary\n \n*\n)\nlaunchOptions\n \n{\n\n\n  \n// initialize the session, setup a deep link handler\n\n  \n[[\nBranch\n \ngetInstance\n]\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n\n                          \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n\n    \n// start setting up the view controller hierarchy\n\n    \nUINavigationController\n \n*\nnavC\n \n=\n \n(\nUINavigationController\n \n*\n)\nself\n.\nwindow\n.\nrootViewController\n;\n\n    \nUIStoryboard\n \n*\nstoryboard\n \n=\n \n[\nUIStoryboard\n \nstoryboardWithName\n:\n@\nMain\n \nbundle\n:\nnil\n];\n\n    \nUIViewController\n \n*\nnextVC\n;\n\n\n    \n// If the key \npictureId\n is present in the deep link dictionary\n\n    \n// then load the picture screen with the appropriate picture\n\n    \nNSString\n \n*\npictureId\n \n=\n \n[\nparams\n \nobjectForKey\n:\n@\npictureId\n];\n\n    \nif\n \n(\npictureId\n)\n \n{\n\n      \nnextVC\n \n=\n \n[\nstoryboard\n \ninstantiateViewControllerWithIdentifier\n:\n@\nPicVC\n];\n\n      \n[\nnextVC\n \nsetNextPictureId\n:\npictureId\n];\n\n    \n}\n \nelse\n \n{\n\n      \nnextVC\n \n=\n \n[\nstoryboard\n \ninstantiateViewControllerWithIdentifier\n:\n@\nMainVC\n];\n\n    \n}\n\n\n    \n// navigate!\n\n    \n[\nnavC\n \nsetViewControllers\n:\n@[\nnextVC\n]\n \nanimated\n:\nYES\n];\n\n  \n}];\n\n\n  \nreturn\n \nYES\n;\n\n\n}\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ndidFinishLaunchingWithOptions\n \nlaunchOptions\n:\n \n[\nUIApplicationLaunchOptionsKey\n:\n \nAny\n]?)\n \n-\n \nBool\n \n{\n\n    \nlet\n \nbranch\n:\n \nBranch\n \n=\n \nBranch\n.\ngetInstance\n()\n\n        \nbranch\n.\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n,\n \nandRegisterDeepLinkHandler\n:\n \n{\nparams\n,\n \nerror\n \nin\n\n        \n// If the key \npictureId\n is present in the deep link dictionary\n\n        \nif\n \nerror\n \n==\n \nnil\n \n \nparams\n[\n+clicked_branch_link\n]\n \n!=\n \nnil\n \n \nparams\n[\npictureId\n]\n \n!=\n \nnil\n \n{\n\n            \nprint\n(\nclicked picture link!\n)\n\n            \n// load the view to show the picture\n\n        \n}\n \nelse\n \n{\n\n            \n// load your normal view\n\n        \n}\n\n    \n})\n\n    \nreturn\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n@Override\n\n\npublic\n \nvoid\n \nonStart\n()\n \n{\n\n    \nsuper\n.\nonStart\n();\n\n\n    \nBranch\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n();\n\n\n    \nbranch\n.\ninitSession\n(\nnew\n \nBranchReferralInitListener\n(){\n\n        \n@Override\n\n        \npublic\n \nvoid\n \nonInitFinished\n(\nJSONObject\n \nreferringParams\n,\n \nBranch\n.\nBranchError\n \nerror\n)\n \n{\n\n            \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n                \n// params are the deep linked params associated with the link that the user clicked before showing up\n\n                \n// params will be empty if no data found\n\n                \nString\n \npictureID\n \n=\n \nreferringParams\n.\noptString\n(\npicture_id\n,\n \n);\n\n                \nif\n \n(\npictureID\n.\nequals\n(\n))\n \n{\n\n                    \nstartActivity\n(\nnew\n \nIntent\n(\nthis\n,\n \nHomeActivity\n.\nclass\n));\n\n                \n}\n\n                \nelse\n \n{\n\n                    \nIntent\n \ni\n \n=\n \nnew\n \nIntent\n(\nthis\n,\n \nViewerActivity\n.\nclass\n);\n\n                    \ni\n.\nputExtra\n(\npicture_id\n,\n \npictureID\n);\n\n                    \nstartActivity\n(\ni\n);\n\n                \n}\n\n            \n}\n \nelse\n \n{\n\n                \nLog\n.\ne\n(\nMyApp\n,\n \nerror\n.\ngetMessage\n());\n\n            \n}\n\n        \n}\n\n    \n},\n \nthis\n.\ngetIntent\n().\ngetData\n(),\n \nthis\n);\n\n\n}\n\n\n\n\n\n\n\n\n\nBranch-added parameters\n\n\nIn addition to any custom key/value pairs specified in the link data dictionary, Branch also returns some other useful parameters every time a session is initialized. These parameters will be returned every time \ninitSession\n is called, even if the user has not clicked on a Branch link. Here is a list, and a description of what each represents.\n\n\n\n\n~\n denotes analytics\n\n\n+\n denotes information added by Branch\n\n\n(for the curious, \n$\n denotes reserved keywords used for controlling how the Branch service behaves. Read more about control parameters on the \nConfiguring Links page\n)\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\n+is_first_session\n\n\nDenotes whether this is the first session (install) or any other session (re-install, open)\n\n\n\n\n\n\n+clicked_branch_link\n\n\nDenotes whether or not the user clicked a Branch link that triggered this session\n\n\n\n\n\n\n+match_guaranteed\n\n\nTrue or false as to whether the match was made with 100% accuracy\n\n\n\n\n\n\n+referrer\n\n\nThe referrer for the link click, if a link was clicked\n\n\n\n\n\n\n+click_timestamp\n\n\nEpoch timestamp of when the click occurred\n\n\n\n\n\n\n+url\n\n\nThe full URL of the link that drove the install/open, if present (e.g. yourapp.app.link/abcde12345)\n\n\n\n\n\n\n+phone_number\n\n\nThe phone number of the user, if the user texted himself/herself the app\n\n\n\n\n\n\n~channel\n\n\nThe channel on which the link was shared, specified at link creation time\n\n\n\n\n\n\n~feature\n\n\nThe feature, such as \ninvite\n or \nshare\n, specified at link creation time\n\n\n\n\n\n\n~tags\n\n\nAny tags, specified at link creation time\n\n\n\n\n\n\n~campaign\n\n\nThe campaign the link is associated with, specified at link creation time\n\n\n\n\n\n\n~stage\n\n\nThe stage, specified at link creation time\n\n\n\n\n\n\n~creation_source\n\n\nWhere the link was created ('API', 'Dashboard', 'SDK', 'iOS SDK', 'Android SDK', or 'Web SDK')\n\n\n\n\n\n\n~id\n\n\nAutomatically generated 18 digit ID number for the link that drove the install/open, if present (0 for dynamic and 3P links)\n\n\n\n\n\n\n\n\nAccess deep link parameters later on\n\n\nYou can retrieve the deep link data at any time from the Branch singleton by calling one of the below methods. This would be the route to use if you wanted to deep link the user after prompting them to log in or something. You can see the \ncode snippets for other platforms here\n.\n\n\nGet latest session referring params\n\n\nThis returns the latest set of deep link data from the most recent link that was clicked. If you minimize the app and reopen it, the session will be cleared and so will this data.\n\n\n\n\n\n\niOS - Objective C\n\n\nNSDictionary\n \n*\nparams\n \n=\n \n[[\nBranch\n \ngetInstance\n]\n \ngetLatestReferringParams\n];\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nlet\n \nsessionParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetLatestReferringParams\n()\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nJSONObject\n \nsessionParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetLatestReferringParams\n();\n\n\n\n\n\n\n\n\n\nGet first session referring params\n\n\nThis returns the first set of deep link data that ever referred the user. Once it's been set for a given user, it can never be updated. This is useful for referral programs.\n\n\n\n\n\n\niOS - Objective C\n\n\nNSDictionary\n \n*\nparams\n \n=\n \n[[\nBranch\n \ngetInstance\n]\n \ngetFirstReferringParams\n];\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nlet\n \nfirstParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetFirstReferringParams\n()\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nJSONObject\n \ninstallParams\n \n=\n \nBranch\n.\ngetInstance\n().\ngetFirstReferringParams\n();\n\n\n\n\n\n\n\n\n\nOption 2: Let Branch use your existing deep link routing\n\n\nIf your app already supports deep linking using URI paths, you can populate the \n$deeplink_path\n, \n$ios_deeplink_path\n or \n$android_deeplink_path\n link parameters with the URI path of the content to be displayed within the app. When the Branch SDK receives a link containing one of these parameters it will automatically load the specified URI path.\n\n\n\n\nIncomplete support on iOS\n\n\nUniversal Links\n and \nSpotlight\n do not support deep linking via URI paths. If you use \n$deeplink_path\n or \n$ios_deeplink_path\n, you will need to implement some custom logic. \nClick here for more information\n.\n\n\n\n\nHow to insert custom deep link routes into a Branch link\n\n\nAll of the examples below create links that will cause Branch to display \nmyapp://content/1234\n after launch. Please do not add the URI scheme on the \n$deeplink_path\n parameters; we automatically append the scheme specified in the Link Settings of dashboard.\n\n\n\n\nWhen creating links dynamically\n\n\nIf you're creating a link by appending query parameters, just append the control parameters to the URL. Please make sure to URL encode everything, lest the link will break.\n\n\nhttps://[branchsubdomain]?%24deeplink_path=content%2F1234\n\n\n\n\n\n\n\n\n\nWhen using a mobile SDK\n\n\n\n\n\n\niOS - Objective C\n\n\nBranchLinkProperties\n \n*\nlinkProperties\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlinkProperties\n.\nfeature\n \n=\n \n@\nsharing\n;\n\n\nlinkProperties\n.\nchannel\n \n=\n \n@\nfacebook\n;\n\n\n[\nlinkProperties\n \naddControlParam\n:\n@\n$deeplink_path\n \nwithValue\n:\n@\ncontent/1234\n];\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nlet\n \nlinkProperties\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlinkProperties\n.\nfeature\n \n=\n \nsharing\n\n\nlinkProperties\n.\nchannel\n \n=\n \nfacebook\n\n\nlinkProperties\n.\naddControlParam\n(\n$deeplink_path\n,\n \nwithValue\n:\n \ncontent/1234\n)\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nLinkProperties\n \nlinkProperties\n \n=\n \nnew\n \nLinkProperties\n()\n\n               \n.\nsetChannel\n(\nfacebook\n)\n\n               \n.\nsetFeature\n(\nsharing\n)\n\n               \n.\naddControlParameter\n(\n$deeplink_path\n,\n \ncontent/1234\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen creating Quick Links on the Branch dashboard\n\n\nYou can specify the control parameters for individual Quick Links by inserting the keys and values into the \nDeep Link Data (Advanced)\n section.\n\n\n\n\n\n\nHow to handle URI paths with Universal Links or App Links\n\n\nBecause Universal Links, Spotlight and Android App Links do not use URI schemes for deep link routing. If you populate \n$deeplink_path\n, \n$ios_deeplink_path\n or \n$android_deeplink_path\n with a URI path, you will need to a bit of additional work to ensure that Branch links route according to your original schema.\n\n\n\n\nCall initSession as described in \nthe app configuration steps\n\n\nIn the callback function, add some custom code to read the appropriate \n$deeplink_path\n parameter in the \nparams\n \n\n\nUse this value to call your existing routing logic to route users to the correct place in your app\n\n\n\n\nOption 3: Use Branch's easy config deep link routing\n\n\nAuto-routing in iOS\n\n\nConfigure View Controller to accept deep links\n\n\nOpen the view controller that you want to appear when a user clicks a link. For example, this could be a view to show a product. First, import the Branch framework:\n\n\n\n\n\n\nObjective C\n\n\n#import \nBranch.h\n\n\n\n\n\n\n\n\n\nSwift\n\n\nimport\n \nBranch\n\n\n\n\n\n\n\n\n\nRegister your view controller for the delegate \nBranchDeepLinkingController\n:\n\n\n\n\n\n\nObjective C\n\n\n@interface\n \nExampleDeepLinkingController\n : \nUIViewController\n \nBranchDeepLinkingController\n\n\n\n\n\n\n\n\n\nSwift\n\n\nclass\n \nExampleDeepLinkingController\n:\n \nUIViewController\n,\n \nBranchDeepLinkingController\n \n{\n\n\n\n\n\n\n\n\n\nReceive the delegate method that will be called when the view controller is loaded from a link click:\n\n\n\n\n\n\nObjective C\n\n\n@synthesize\n \ndeepLinkingCompletionDelegate\n;\n\n\n-\n \n(\nvoid\n)\nconfigureControlWithData:\n(\nNSDictionary\n \n*\n)\ndata\n \n{\n\n    \nNSString\n \n*\npictureUrl\n \n=\n \ndata\n[\n@\nproduct_picture\n];\n\n\n    \n// show the picture\n\n    \ndispatch_async\n(\ndispatch_get_global_queue\n(\nDISPATCH_QUEUE_PRIORITY_DEFAULT\n,\n \n0\n),\n \n^\n{\n\n        \nNSData\n \n*\nimageData\n \n=\n \n[\nNSData\n \ndataWithContentsOfURL\n:[\nNSURL\n \nURLWithString\n:\npictureUrl\n]];\n\n        \nUIImage\n \n*\nimage\n \n=\n \n[\nUIImage\n \nimageWithData\n:\nimageData\n];\n\n        \ndispatch_async\n(\ndispatch_get_main_queue\n(),\n \n^\n{\n\n            \nself\n.\nproductImageView\n.\nimage\n \n=\n \nimage\n;\n\n        \n});\n\n    \n});\n\n\n}\n\n\n\n\n\n\n\n\n\nSwift\n\n\nfunc\n \nconfigureControl\n(\nwithData\n \nparams\n:\n \n[\nAnyHashable\n:\n \nAny\n]\n!\n)\n \n{\n\n    \nlet\n \ndict\n \n=\n \nparams\n \nas\n \nDictionary\n\n    \nif\n \ndict\n[\nproduct_picture\n]\n \n!=\n \nnil\n \n{\n\n       \n// show the picture\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nWhat is a link data key?\n\n\nThe example key \nproduct_picture\n is a parameter from the \ndata dictionary\n of the link that was clicked, and would have been defined when the link \nwas created\n.\n\n\n\n\n\n\nObjective C\n\n\n\n\n-\n \n(\nIBAction\n)\nclosePressed\n \n{\n\n    \n[\nself\n.\ndeepLinkingCompletionDelegate\n \ndeepLinkingControllerCompleted\n];\n\n\n}\n\n\n\n\n\n\n\nSwift\n\n\n\n\nvar\n \ndeepLinkingCompletionDelegate\n:\n \nBranchDeepLinkingControllerCompletionDelegate\n?\n\n\nfunc\n \nclosePressed\n()\n \n{\n\n    \nself\n.\ndeepLinkingCompletionDelegate\n!.\ndeepLinkingControllerCompleted\n()\n\n\n}\n\n\n\n\n\nRegister View Controller for deep link routing\n\n\nLastly, you need to tell Branch about the view controller you just configured, and which key it is using from the link's data dictionary.\n\n\n\n\n\n\nObjective C\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n \n \nparams\n)\n \n{\n\n        \n// params are the deep linked params associated with the link that the user clicked -\n was re-directed to this app\n\n        \n// params will be empty if no data found\n\n        \n// ... insert custom logic here ...\n\n        \nprint\n(\n@\nparams: %@\n,\n \nparams\n.\ndescription\n);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\nSwift\n\n\nbranch\n.\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n,\n \ndeepLinkHandler\n:\n \n{\n \nparams\n,\n \nerror\n \nin\n\n    \nif\n \nerror\n \n==\n \nnil\n \n{\n\n        \n// params are the deep linked params associated with the link that the user clicked -\n was re-directed to this app\n\n        \n// params will be empty if no data found\n\n        \n// ... insert custom logic here ...\n\n        \nprint\n(\nparams: %@\n,\n \nparams\n.\ndescription\n)\n\n    \n}\n\n\n})\n\n\n\n\n\n\n\n\n\nRemove it, and insert this snippet in the same place:\n\n\n\n\n\n\nObjective C\n\n\nExampleDeepLinkingController\n \n*\ncontroller\n \n=\n \n[[\nUIStoryboard\n \nstoryboardWithName\n:\n@\nMain\n \nbundle\n:[\nNSBundle\n \nmainBundle\n]]\n \ninstantiateViewControllerWithIdentifier\n:\n@\nDeepLinkingController\n];\n\n\n\n[\nbranch\n \nregisterDeepLinkController\n:\ncontroller\n \nforKey\n:\n@\nproduct_picture\n \nwithPresentation\n:\nBNCViewControllerOptionShow\n];\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nautomaticallyDisplayDeepLinkController\n:\nYES\n];\n\n\n\n\n\n\n\n\n\nSwift\n\n\nvar\n \ncontroller\n \n=\n \nUIStoryboard\n.\ninit\n(\nMain\n,\n \nNSBundle\n.\nmainBundle\n()).\ninstantiateViewControllerWithIdentifier\n(\nDeepLinkingController\n)\n\n\n\nbranch\n.\nregisterDeepLinkController\n(\ncontroller\n,\n \nforKey\n:\n \nproduct_picture\n,\n \nwithPresentation\n:\n \n.\noptionShow\n)\n\n\nbranch\n.\ninitSession\n(\nlaunchOptions\n:\n \nlaunchOptions\n,\n \nautomaticallyDisplayDeepLinkController\n:\n \ntrue\n)\n\n\n\n\n\n\n\n\n\nNow whenever your app launches from a Branch link that has the \nproduct_picture\n key set in its data dictionary, the \nExampleDeepLinkingController\n view controller will be displayed!\n\n\n\n\n\n\n\n\nOption\n\n\nMeaning\n\n\n\n\n\n\n\n\n\n\nBNCViewControllerOptionShow\n\n\nThis option pushes view controller onto the navigation stack in a similar way as the showViewController\n\n\n\n\n\n\nBNCViewControllerOptionPush\n\n\nThis option pushes view controller onto the navigation stack in a similar way as the pushViewController\n\n\n\n\n\n\nBNCViewControllerOptionPresent\n\n\nThis option presents view controller onto the root view controller of window in a similar way as the presentViewController\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nBNCViewControllerOptionShow\n or \nBNCViewControllerOptionPush\n option would only push a view controller if the root view controller of window is of type \nUINavigationViewController\n. Or else, the view controller would be presented by default.\n\n\n\n\nAuto-routing in Android\n\n\nConfigure Activity to accept deep links\n\n\nOpen the Activity that you want to appear when a user clicks a link. For example, this could be an Activity to show a product. Insert the following code snippet to display your content when the Activity is loaded from a link click:\n\n\n@Override\n\n\nprotected\n \nvoid\n \nonResume\n()\n \n{\n\n    \nsuper\n.\nonResume\n();\n\n    \nif\n \n(\nBranch\n.\nisAutoDeepLinkLaunch\n(\nthis\n))\n \n{\n\n        \ntry\n \n{\n\n            \nString\n \nautoDeeplinkedValue\n \n=\n \nBranch\n.\ngetInstance\n().\ngetLatestReferringParams\n().\ngetString\n(\nproduct_picture\n);\n\n            \nlaunch_mode_txt\n.\nsetText\n(\nLaunched by Branch on auto deep linking!\n\n                    \n+\n \n\\n\\n\n \n+\n \nautoDeeplinkedValue\n);\n\n        \n}\n \ncatch\n \n(\nJSONException\n \ne\n)\n \n{\n\n            \ne\n.\nprintStackTrace\n();\n\n        \n}\n\n    \n}\n \nelse\n \n{\n\n        \nlaunch_mode_txt\n.\nsetText\n(\nLaunched by normal application flow\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nWhat is a link data key?\n\n\nThe example key \nproduct_picture\n is a parameter from the \ndata dictionary\n of the link that was clicked, and would have been defined when the link \nwas created\n.\n\n\n\n\nRegister Activity for deep link routing\n\n\nLastly, you need to tell Branch about the Activity you just configured, and which key it is using from the link's data dictionary. In your Manifest file, locate the definition for the Activity above and add this meta-data tag:\n\n\nmeta-data\n \nandroid:name=\nio.branch.sdk.auto_link_keys\n \nandroid:value=\nproduct_picture\n \n/\n\n\n\n\n\nNow whenever your app launches from a Branch link that has the \nproduct_picture\n key set in its data dictionary, this Activity will be displayed!", 
            "title": "In-app deep link routing"
        }, 
        {
            "location": "/pages/deep-linking/routing/#overview", 
            "text": "When a Branch link is opened, either your app launches or users are taken to the App/Play store to download it. Deep links improve this process by routing users directly to specific content after your app launches. With Branch, this still works even if users have to stop and download the app first (a.k.a., \"deferred deep links\").  Deep links are an incredibly important part of delivering a high quality user experience. With deep links, you can take users to the exact thing they clicked on or even offer a customized onboarding experience.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linking/routing/#option-1-build-custom-routing-inside-the-routing-callback", 
            "text": "", 
            "title": "Option 1: Build custom routing inside the routing callback"
        }, 
        {
            "location": "/pages/deep-linking/routing/#route-immediately-on-app-open", 
            "text": "Inside the deep link handler callback that you register in initSession, you will want to examine the params dictionary to determine whether the user opened a Branch link. Below is an example assuming that the links correspond to pictures. Below are some examples from iOS and Android where we're using the  pictureId  key to route, but you can see more code snippets for  the other platforms here .    iOS - Objective C  -   ( BOOL ) application: ( UIApplication   * ) application   didFinishLaunchingWithOptions: ( NSDictionary   * ) launchOptions   { \n\n   // initialize the session, setup a deep link handler \n   [[ Branch   getInstance ]   initSessionWithLaunchOptions : launchOptions \n                           andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n\n     // start setting up the view controller hierarchy \n     UINavigationController   * navC   =   ( UINavigationController   * ) self . window . rootViewController ; \n     UIStoryboard   * storyboard   =   [ UIStoryboard   storyboardWithName : @ Main   bundle : nil ]; \n     UIViewController   * nextVC ; \n\n     // If the key  pictureId  is present in the deep link dictionary \n     // then load the picture screen with the appropriate picture \n     NSString   * pictureId   =   [ params   objectForKey : @ pictureId ]; \n     if   ( pictureId )   { \n       nextVC   =   [ storyboard   instantiateViewControllerWithIdentifier : @ PicVC ]; \n       [ nextVC   setNextPictureId : pictureId ]; \n     }   else   { \n       nextVC   =   [ storyboard   instantiateViewControllerWithIdentifier : @ MainVC ]; \n     } \n\n     // navigate! \n     [ navC   setViewControllers : @[ nextVC ]   animated : YES ]; \n   }]; \n\n   return   YES ;  }     iOS - Swift  func   application ( _   application :   UIApplication ,   didFinishLaunchingWithOptions   launchOptions :   [ UIApplicationLaunchOptionsKey :   Any ]?)   -   Bool   { \n     let   branch :   Branch   =   Branch . getInstance () \n         branch . initSession ( launchOptions :   launchOptions ,   andRegisterDeepLinkHandler :   { params ,   error   in \n         // If the key  pictureId  is present in the deep link dictionary \n         if   error   ==   nil     params [ +clicked_branch_link ]   !=   nil     params [ pictureId ]   !=   nil   { \n             print ( clicked picture link! ) \n             // load the view to show the picture \n         }   else   { \n             // load your normal view \n         } \n     }) \n     return   true  }     Android  @Override  public   void   onStart ()   { \n     super . onStart (); \n\n     Branch   branch   =   Branch . getInstance (); \n\n     branch . initSession ( new   BranchReferralInitListener (){ \n         @Override \n         public   void   onInitFinished ( JSONObject   referringParams ,   Branch . BranchError   error )   { \n             if   ( error   ==   null )   { \n                 // params are the deep linked params associated with the link that the user clicked before showing up \n                 // params will be empty if no data found \n                 String   pictureID   =   referringParams . optString ( picture_id ,   ); \n                 if   ( pictureID . equals ( ))   { \n                     startActivity ( new   Intent ( this ,   HomeActivity . class )); \n                 } \n                 else   { \n                     Intent   i   =   new   Intent ( this ,   ViewerActivity . class ); \n                     i . putExtra ( picture_id ,   pictureID ); \n                     startActivity ( i ); \n                 } \n             }   else   { \n                 Log . e ( MyApp ,   error . getMessage ()); \n             } \n         } \n     },   this . getIntent (). getData (),   this );  }", 
            "title": "Route immediately on app open"
        }, 
        {
            "location": "/pages/deep-linking/routing/#branch-added-parameters", 
            "text": "In addition to any custom key/value pairs specified in the link data dictionary, Branch also returns some other useful parameters every time a session is initialized. These parameters will be returned every time  initSession  is called, even if the user has not clicked on a Branch link. Here is a list, and a description of what each represents.   ~  denotes analytics  +  denotes information added by Branch  (for the curious,  $  denotes reserved keywords used for controlling how the Branch service behaves. Read more about control parameters on the  Configuring Links page )      Parameter  Meaning      +is_first_session  Denotes whether this is the first session (install) or any other session (re-install, open)    +clicked_branch_link  Denotes whether or not the user clicked a Branch link that triggered this session    +match_guaranteed  True or false as to whether the match was made with 100% accuracy    +referrer  The referrer for the link click, if a link was clicked    +click_timestamp  Epoch timestamp of when the click occurred    +url  The full URL of the link that drove the install/open, if present (e.g. yourapp.app.link/abcde12345)    +phone_number  The phone number of the user, if the user texted himself/herself the app    ~channel  The channel on which the link was shared, specified at link creation time    ~feature  The feature, such as  invite  or  share , specified at link creation time    ~tags  Any tags, specified at link creation time    ~campaign  The campaign the link is associated with, specified at link creation time    ~stage  The stage, specified at link creation time    ~creation_source  Where the link was created ('API', 'Dashboard', 'SDK', 'iOS SDK', 'Android SDK', or 'Web SDK')    ~id  Automatically generated 18 digit ID number for the link that drove the install/open, if present (0 for dynamic and 3P links)", 
            "title": "Branch-added parameters"
        }, 
        {
            "location": "/pages/deep-linking/routing/#access-deep-link-parameters-later-on", 
            "text": "You can retrieve the deep link data at any time from the Branch singleton by calling one of the below methods. This would be the route to use if you wanted to deep link the user after prompting them to log in or something. You can see the  code snippets for other platforms here .", 
            "title": "Access deep link parameters later on"
        }, 
        {
            "location": "/pages/deep-linking/routing/#get-latest-session-referring-params", 
            "text": "This returns the latest set of deep link data from the most recent link that was clicked. If you minimize the app and reopen it, the session will be cleared and so will this data.    iOS - Objective C  NSDictionary   * params   =   [[ Branch   getInstance ]   getLatestReferringParams ];     iOS - Swift  let   sessionParams   =   Branch . getInstance (). getLatestReferringParams ()     Android  JSONObject   sessionParams   =   Branch . getInstance (). getLatestReferringParams ();", 
            "title": "Get latest session referring params"
        }, 
        {
            "location": "/pages/deep-linking/routing/#get-first-session-referring-params", 
            "text": "This returns the first set of deep link data that ever referred the user. Once it's been set for a given user, it can never be updated. This is useful for referral programs.    iOS - Objective C  NSDictionary   * params   =   [[ Branch   getInstance ]   getFirstReferringParams ];     iOS - Swift  let   firstParams   =   Branch . getInstance (). getFirstReferringParams ()     Android  JSONObject   installParams   =   Branch . getInstance (). getFirstReferringParams ();", 
            "title": "Get first session referring params"
        }, 
        {
            "location": "/pages/deep-linking/routing/#option-2-let-branch-use-your-existing-deep-link-routing", 
            "text": "If your app already supports deep linking using URI paths, you can populate the  $deeplink_path ,  $ios_deeplink_path  or  $android_deeplink_path  link parameters with the URI path of the content to be displayed within the app. When the Branch SDK receives a link containing one of these parameters it will automatically load the specified URI path.   Incomplete support on iOS  Universal Links  and  Spotlight  do not support deep linking via URI paths. If you use  $deeplink_path  or  $ios_deeplink_path , you will need to implement some custom logic.  Click here for more information .", 
            "title": "Option 2: Let Branch use your existing deep link routing"
        }, 
        {
            "location": "/pages/deep-linking/routing/#how-to-insert-custom-deep-link-routes-into-a-branch-link", 
            "text": "All of the examples below create links that will cause Branch to display  myapp://content/1234  after launch. Please do not add the URI scheme on the  $deeplink_path  parameters; we automatically append the scheme specified in the Link Settings of dashboard.   When creating links dynamically  If you're creating a link by appending query parameters, just append the control parameters to the URL. Please make sure to URL encode everything, lest the link will break.  https://[branchsubdomain]?%24deeplink_path=content%2F1234     When using a mobile SDK    iOS - Objective C  BranchLinkProperties   * linkProperties   =   [[ BranchLinkProperties   alloc ]   init ];  linkProperties . feature   =   @ sharing ;  linkProperties . channel   =   @ facebook ;  [ linkProperties   addControlParam : @ $deeplink_path   withValue : @ content/1234 ];     iOS - Swift  let   linkProperties :   BranchLinkProperties   =   BranchLinkProperties ()  linkProperties . feature   =   sharing  linkProperties . channel   =   facebook  linkProperties . addControlParam ( $deeplink_path ,   withValue :   content/1234 )     Android  LinkProperties   linkProperties   =   new   LinkProperties () \n                . setChannel ( facebook ) \n                . setFeature ( sharing ) \n                . addControlParameter ( $deeplink_path ,   content/1234 );       When creating Quick Links on the Branch dashboard  You can specify the control parameters for individual Quick Links by inserting the keys and values into the  Deep Link Data (Advanced)  section.", 
            "title": "How to insert custom deep link routes into a Branch link"
        }, 
        {
            "location": "/pages/deep-linking/routing/#how-to-handle-uri-paths-with-universal-links-or-app-links", 
            "text": "Because Universal Links, Spotlight and Android App Links do not use URI schemes for deep link routing. If you populate  $deeplink_path ,  $ios_deeplink_path  or  $android_deeplink_path  with a URI path, you will need to a bit of additional work to ensure that Branch links route according to your original schema.   Call initSession as described in  the app configuration steps  In the callback function, add some custom code to read the appropriate  $deeplink_path  parameter in the  params    Use this value to call your existing routing logic to route users to the correct place in your app", 
            "title": "How to handle URI paths with Universal Links or App Links"
        }, 
        {
            "location": "/pages/deep-linking/routing/#option-3-use-branchs-easy-config-deep-link-routing", 
            "text": "", 
            "title": "Option 3: Use Branch's easy config deep link routing"
        }, 
        {
            "location": "/pages/deep-linking/routing/#auto-routing-in-ios", 
            "text": "", 
            "title": "Auto-routing in iOS"
        }, 
        {
            "location": "/pages/deep-linking/routing/#configure-view-controller-to-accept-deep-links", 
            "text": "Open the view controller that you want to appear when a user clicks a link. For example, this could be a view to show a product. First, import the Branch framework:    Objective C  #import  Branch.h     Swift  import   Branch     Register your view controller for the delegate  BranchDeepLinkingController :    Objective C  @interface   ExampleDeepLinkingController  :  UIViewController   BranchDeepLinkingController     Swift  class   ExampleDeepLinkingController :   UIViewController ,   BranchDeepLinkingController   {     Receive the delegate method that will be called when the view controller is loaded from a link click:    Objective C  @synthesize   deepLinkingCompletionDelegate ;  -   ( void ) configureControlWithData: ( NSDictionary   * ) data   { \n     NSString   * pictureUrl   =   data [ @ product_picture ]; \n\n     // show the picture \n     dispatch_async ( dispatch_get_global_queue ( DISPATCH_QUEUE_PRIORITY_DEFAULT ,   0 ),   ^ { \n         NSData   * imageData   =   [ NSData   dataWithContentsOfURL :[ NSURL   URLWithString : pictureUrl ]]; \n         UIImage   * image   =   [ UIImage   imageWithData : imageData ]; \n         dispatch_async ( dispatch_get_main_queue (),   ^ { \n             self . productImageView . image   =   image ; \n         }); \n     });  }     Swift  func   configureControl ( withData   params :   [ AnyHashable :   Any ] ! )   { \n     let   dict   =   params   as   Dictionary \n     if   dict [ product_picture ]   !=   nil   { \n        // show the picture \n     }  }      What is a link data key?  The example key  product_picture  is a parameter from the  data dictionary  of the link that was clicked, and would have been defined when the link  was created .    Objective C   -   ( IBAction ) closePressed   { \n     [ self . deepLinkingCompletionDelegate   deepLinkingControllerCompleted ];  }    Swift   var   deepLinkingCompletionDelegate :   BranchDeepLinkingControllerCompletionDelegate ?  func   closePressed ()   { \n     self . deepLinkingCompletionDelegate !. deepLinkingControllerCompleted ()  }", 
            "title": "Configure View Controller to accept deep links"
        }, 
        {
            "location": "/pages/deep-linking/routing/#register-view-controller-for-deep-link-routing", 
            "text": "Lastly, you need to tell Branch about the view controller you just configured, and which key it is using from the link's data dictionary.    Objective C  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n     if   ( ! error     params )   { \n         // params are the deep linked params associated with the link that the user clicked -  was re-directed to this app \n         // params will be empty if no data found \n         // ... insert custom logic here ... \n         print ( @ params: %@ ,   params . description ); \n     }  }];     Swift  branch . initSession ( launchOptions :   launchOptions ,   deepLinkHandler :   {   params ,   error   in \n     if   error   ==   nil   { \n         // params are the deep linked params associated with the link that the user clicked -  was re-directed to this app \n         // params will be empty if no data found \n         // ... insert custom logic here ... \n         print ( params: %@ ,   params . description ) \n     }  })     Remove it, and insert this snippet in the same place:    Objective C  ExampleDeepLinkingController   * controller   =   [[ UIStoryboard   storyboardWithName : @ Main   bundle :[ NSBundle   mainBundle ]]   instantiateViewControllerWithIdentifier : @ DeepLinkingController ];  [ branch   registerDeepLinkController : controller   forKey : @ product_picture   withPresentation : BNCViewControllerOptionShow ];  [ branch   initSessionWithLaunchOptions : launchOptions   automaticallyDisplayDeepLinkController : YES ];     Swift  var   controller   =   UIStoryboard . init ( Main ,   NSBundle . mainBundle ()). instantiateViewControllerWithIdentifier ( DeepLinkingController )  branch . registerDeepLinkController ( controller ,   forKey :   product_picture ,   withPresentation :   . optionShow )  branch . initSession ( launchOptions :   launchOptions ,   automaticallyDisplayDeepLinkController :   true )     Now whenever your app launches from a Branch link that has the  product_picture  key set in its data dictionary, the  ExampleDeepLinkingController  view controller will be displayed!     Option  Meaning      BNCViewControllerOptionShow  This option pushes view controller onto the navigation stack in a similar way as the showViewController    BNCViewControllerOptionPush  This option pushes view controller onto the navigation stack in a similar way as the pushViewController    BNCViewControllerOptionPresent  This option presents view controller onto the root view controller of window in a similar way as the presentViewController      Note  BNCViewControllerOptionShow  or  BNCViewControllerOptionPush  option would only push a view controller if the root view controller of window is of type  UINavigationViewController . Or else, the view controller would be presented by default.", 
            "title": "Register View Controller for deep link routing"
        }, 
        {
            "location": "/pages/deep-linking/routing/#auto-routing-in-android", 
            "text": "", 
            "title": "Auto-routing in Android"
        }, 
        {
            "location": "/pages/deep-linking/routing/#configure-activity-to-accept-deep-links", 
            "text": "Open the Activity that you want to appear when a user clicks a link. For example, this could be an Activity to show a product. Insert the following code snippet to display your content when the Activity is loaded from a link click:  @Override  protected   void   onResume ()   { \n     super . onResume (); \n     if   ( Branch . isAutoDeepLinkLaunch ( this ))   { \n         try   { \n             String   autoDeeplinkedValue   =   Branch . getInstance (). getLatestReferringParams (). getString ( product_picture ); \n             launch_mode_txt . setText ( Launched by Branch on auto deep linking! \n                     +   \\n\\n   +   autoDeeplinkedValue ); \n         }   catch   ( JSONException   e )   { \n             e . printStackTrace (); \n         } \n     }   else   { \n         launch_mode_txt . setText ( Launched by normal application flow ); \n     }  }    What is a link data key?  The example key  product_picture  is a parameter from the  data dictionary  of the link that was clicked, and would have been defined when the link  was created .", 
            "title": "Configure Activity to accept deep links"
        }, 
        {
            "location": "/pages/deep-linking/routing/#register-activity-for-deep-link-routing", 
            "text": "Lastly, you need to tell Branch about the Activity you just configured, and which key it is using from the link's data dictionary. In your Manifest file, locate the definition for the Activity above and add this meta-data tag:  meta-data   android:name= io.branch.sdk.auto_link_keys   android:value= product_picture   /   Now whenever your app launches from a Branch link that has the  product_picture  key set in its data dictionary, this Activity will be displayed!", 
            "title": "Register Activity for deep link routing"
        }, 
        {
            "location": "/pages/apps/ios-launch/", 
            "text": "Submitting to the App Store\n\n\nAfter integrating the Branch SDK, you need to let Apple know that you use the IDFA. To follow proper protocol when submitting your next release to the App Store, you should:\n\n\n\n\nAnswer \nYes\n to the question \nDoes this app use the Advertising Identifier (IDFA)?\n\n\nCheck the two boxes for:\n\n\nAttribute this app installation to a previously served advertisement\n\n\nAttribute an action taken within this app to a previously served advertisement\n\n\n\n\n\n\n\n\n\n\n\n\nWhy does Branch use the IDFA?\n\n\nBranch uses the IDFA to identify users across our entire partner network, greatly increasing match accuracy rate. You can read more about this on the \nmatching accuracy page\n. You do not need to perform these steps if you installed the Branch framework manually and elected \nnot\n to import \nAdSupport.framework\n or via Cocoapods and chose the Branch/without-IDFA subspec.", 
            "title": "Apple App Store"
        }, 
        {
            "location": "/pages/apps/ios-launch/#submitting-to-the-app-store", 
            "text": "After integrating the Branch SDK, you need to let Apple know that you use the IDFA. To follow proper protocol when submitting your next release to the App Store, you should:   Answer  Yes  to the question  Does this app use the Advertising Identifier (IDFA)?  Check the two boxes for:  Attribute this app installation to a previously served advertisement  Attribute an action taken within this app to a previously served advertisement       Why does Branch use the IDFA?  Branch uses the IDFA to identify users across our entire partner network, greatly increasing match accuracy rate. You can read more about this on the  matching accuracy page . You do not need to perform these steps if you installed the Branch framework manually and elected  not  to import  AdSupport.framework  or via Cocoapods and chose the Branch/without-IDFA subspec.", 
            "title": "Submitting to the App Store"
        }, 
        {
            "location": "/pages/apps/android-launch/", 
            "text": "Submitting to the Play Store\n\n\nIf you'd like Branch to collect the \nGoogle Advertising ID\n for advertising or tracking purposes instead of the Android ID, you must add Google Play Services to your app prior to release. After you complete these steps, Branch will handle the rest!\n\n\n\n\nAdd \ncompile 'com.google.android.gms:play-services-ads:9+'\n or greater version to the dependencies section of your \nbuild.gradle\n file. You might already have it.\n\n\nAdd the following line in your Proguard settings:\n\n\n\n\n-keep class com.google.android.gms.ads.identifier.** { *; }\n\n\n\n\n\n\nWhy does Branch use the GAID?\n\n\nBranch uses the GAID to identify users across our entire partner network, greatly increasing match accuracy rate. You can read more about this on the \nmatching accuracy page\n. You do not need to perform these steps if you elect \nnot\n to import Play Services or the Ads framework.", 
            "title": "Google Play"
        }, 
        {
            "location": "/pages/apps/android-launch/#submitting-to-the-play-store", 
            "text": "If you'd like Branch to collect the  Google Advertising ID  for advertising or tracking purposes instead of the Android ID, you must add Google Play Services to your app prior to release. After you complete these steps, Branch will handle the rest!   Add  compile 'com.google.android.gms:play-services-ads:9+'  or greater version to the dependencies section of your  build.gradle  file. You might already have it.  Add the following line in your Proguard settings:   -keep class com.google.android.gms.ads.identifier.** { *; }   Why does Branch use the GAID?  Branch uses the GAID to identify users across our entire partner network, greatly increasing match accuracy rate. You can read more about this on the  matching accuracy page . You do not need to perform these steps if you elect  not  to import Play Services or the Ads framework.", 
            "title": "Submitting to the Play Store"
        }, 
        {
            "location": "/pages/web/integrate/", 
            "text": "Overview\n\n\n\n\nThe \nBranch Web SDK\n allows you to create and share deep links with a banner, over SMS, or your own methods. It also offers event tracking, access to referrals, and management of credits. The SDK is only ~13K gzipped.\n\n\n\n\nIntegrate Branch\n\n\n\n\n\n\nConfigure Branch\n\n\n\n\n\n\nComplete the \nBasic integration\n within \nConfigure your dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nIntegrate app\n\n\n\n\nComplete \nIntegrate your app\n\n\n\n\n\n\n\n\nInitialize Branch\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n\n  \nmeta\n \nname\n=\nviewport\n \ncontent\n=\nwidth=device-width, initial-scale=1.0\n\n\n  \ntitle\n/\ntitle\n\n  \nscript\n\n    \n// load Branch\n\n\n    \n(\nfunction\n(\nb\n,\nr\n,\na\n,\nn\n,\nc\n,\nh\n,\n_\n,\ns\n,\nd\n,\nk\n){\nif\n(\n!\nb\n[\nn\n]\n||!\nb\n[\nn\n].\n_q\n){\nfor\n(;\ns\n_\n.\nlength\n;)\nc\n(\nh\n,\n_\n[\ns\n++\n]);\nd\n=\nr\n.\ncreateElement\n(\na\n);\nd\n.\nasync\n=\n1\n;\nd\n.\nsrc\n=\nhttps://cdn.branch.io/branch-latest.min.js\n;\nk\n=\nr\n.\ngetElementsByTagName\n(\na\n)[\n0\n];\nk\n.\nparentNode\n.\ninsertBefore\n(\nd\n,\nk\n);\nb\n[\nn\n]\n=\nh\n}})(\nwindow\n,\ndocument\n,\nscript\n,\nbranch\n,\nfunction\n(\nb\n,\nr\n){\nb\n[\nr\n]\n=\nfunction\n(){\nb\n.\n_q\n.\npush\n([\nr\n,\narguments\n])}},{\n_q\n:\n[],\n_v\n:\n1\n},\naddListener applyCode autoAppIndex banner closeBanner closeJourney creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode trackCommerceEvent\n.\nsplit\n(\n \n),\n \n0\n);\n\n\n    \n// init Branch\n\n\n    \nbranch\n.\ninit\n(\nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n);\n\n\n  \n/\nscript\n\n\n/\nhead\n\n\nbody\n\n\n/\nbody\n\n\n/\nhtml\n\n\n\n\n\n\n\nChange \nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n to match your \nBranch Dashboard\n\n\n\n\n\n\n\n\nImplement features\n\n\n\n\n\n\nInitialize Branch features\n\n\n\n\n\n\nLoads Branch into your app\n\n\n\n\n\n\nUses \nBranch init options\n\n\nbranch\n.\ninit\n(\nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n \nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\nvar\n \noptions\n \n=\n \n{\n \nno_journeys\n:\n \ntrue\n \n};\n\n\nbranch\n.\ninit\n(\nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n \noptions\n,\n \nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\n\n\n\n\nReturns the following inside the \ndata\n object\n\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ndata_parsed\n\n\nobject\n. If the user was referred from a link, and the link has associated data, the data is passed in here.\n\n\n\n\n\n\nhas_app\n\n\nboolean\n. Does the user have the app installed already, using Branch's persona data.\n\n\n\n\n\n\nidentity\n\n\noptional\n - \nstring\n. Unique string that identifies the user, if set from \nsetIdentity\n\n\n\n\n\n\nreferring_link\n\n\nstring\n. The referring link clicked, if available.\n\n\n\n\n\n\nreferring_identity\n\n\nstring\n. If the user was referred from a link, and the link was created by a user with an identity, that identity is here.\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep link\n\n\n\n\n\n\nCreates a deep link URL with encapsulated data\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\nvar\n \nlinkData\n \n=\n \n{\n\n  \ncampaign\n:\n \ncontent 123\n,\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \nfeature\n:\n \ndashboard\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\n \ntag1\n,\n \ntag2\n,\n \ntag3\n \n],\n\n  \nalias\n:\n \n,\n\n  \ndata\n:\n \n{\n\n    \ncustom_bool\n:\n \ntrue\n,\n\n    \ncustom_int\n:\n \nDate\n.\nnow\n(),\n\n    \ncustom_string\n:\n \nhello\n,\n\n    \n$og_title\n:\n \nTitle\n,\n\n    \n$og_description\n:\n \nDescription\n,\n\n    \n$og_image_url\n:\nhttp://lorempixel.com/400/400\n\n  \n}\n\n\n};\n\n\n\nbranch\n.\nlink\n(\nlinkData\n,\n \nfunction\n(\nerr\n,\n \nlink\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nlink\n);\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nShare deep link\n\n\n\n\n\n\nWill generate a Branch deep link and tag it with the channel the user selects\n\n\n\n\n\n\nUses \nDeep Link Properties\n\n\n!-- shareable elements --\n\n\nbutton\n \nid\n=\nbutton\ndeep link\n/\nbutton\n\n\na\n \nid\n=\nanchor\n \nhref\n=\n#\ndeep link\n/\na\n\n\n\n\n\nvar\n \nlinkData\n \n=\n \n{\n\n  \ncampaign\n:\n \ncontent 123\n,\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \nfeature\n:\n \ndashboard\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\n \ntag1\n,\n \ntag2\n,\n \ntag3\n \n],\n\n  \nalias\n:\n \n,\n\n  \ndata\n:\n \n{\n\n    \ncustom_bool\n:\n \ntrue\n,\n\n    \ncustom_int\n:\n \nDate\n.\nnow\n(),\n\n    \ncustom_string\n:\n \nhello\n,\n\n    \n$og_title\n:\n \nTitle\n,\n\n    \n$og_description\n:\n \nDescription\n,\n\n    \n$og_image_url\n:\nhttp://lorempixel.com/400/400\n\n  \n}\n\n\n};\n\n\n\nbranch\n.\nlink\n(\nlinkData\n,\n \nfunction\n(\nerr\n,\n \nlink\n)\n \n{\n\n  \n// bind elements\n\n  \ndocument\n.\ngetElementById\n(\nbutton\n).\nonclick\n \n=\n \nfunction\n()\n \n{\n\n    \nwindow\n.\nopen\n(\nlink\n \n||\n \nerr\n);\n\n  \n};\n\n  \ndocument\n.\ngetElementById\n(\nanchor\n).\nhref\n \n=\n \nlink\n \n||\n \nerr\n;\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep link\n\n\n\n\n\n\nRetrieve Branch data from a deep link\n\n\n\n\n\n\nBest practice to receive data from the \nlistener\n (to prevent a race condition)\n\n\n\n\n\n\nValidate with \nTesting read deep link\n\n\n\n\n\n\nListener\n\n\nbranch\n.\ninit\n(\nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n \nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\n\n\n\n\nLatest data\n\n\nbranch\n.\ndata\n(\nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\n\n\n\n\nFirst data\n\n\nbranch\n.\nfirst\n(\nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate Journeys banner\n\n\n\n\n\n\nConverts mobile users to app users\n\n\n\n\n\n\nCreate a \nJourney\n on the \nBranch Dashboard\n\n\n\n\n\n\nValidate by testing your website on a mobile device\n\n\n\n\n\n\nAppend additional deep link data to the Journey button\n\n\n// optional additional deep link data\n\n\nvar\n \nlinkData\n \n=\n \n{\n\n  \ncampaign\n:\n \ncontent 123\n,\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \nfeature\n:\n \ndashboard\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\n \ntag1\n,\n \ntag2\n,\n \ntag3\n \n],\n\n  \nalias\n:\n \n,\n\n  \ndata\n:\n \n{\n\n    \ncustom_bool\n:\n \ntrue\n,\n\n    \ncustom_int\n:\n \nDate\n.\nnow\n(),\n\n    \ncustom_string\n:\n \nhello\n,\n\n    \n$og_title\n:\n \nTitle\n,\n\n    \n$og_description\n:\n \nDescription\n,\n\n    \n$og_image_url\n:\nhttp://lorempixel.com/400/400\n\n  \n}\n\n\n};\n\n\n\nbranch\n.\nsetBranchViewData\n(\nlinkData\n);\n\n\n\n\n\n// close\n\n\nbranch\n.\ncloseJourney\n(\nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n \n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n// reopen\n\n\nbranch\n.\ntrack\n(\npageview\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate text message\n\n\n\n\n\n\nConverts desktop users to app users\n\n\n\n\n\n\nSends a SMS text message with a deep link to a phone number\n\n\n\n\n\n\nFeature has certain \nSMS limits\n\n\n\n\n\n\nValidate with \nBranch Dashboard\n for \n+phone_number\n\n\nvar\n \nphoneNumber\n \n=\n \n9999999999\n \n// +919812345678, +442071234567\n\n\n\nvar\n \nlinkData\n \n=\n \n{\n\n  \ncampaign\n:\n \ncontent 123\n,\n\n  \nchannel\n:\n \nfacebook\n,\n\n  \nfeature\n:\n \ndashboard\n,\n\n  \nstage\n:\n \nnew user\n,\n\n  \ntags\n:\n \n[\n \ntag1\n,\n \ntag2\n,\n \ntag3\n \n],\n\n  \nalias\n:\n \n,\n\n  \ndata\n:\n \n{\n\n    \ncustom_bool\n:\n \ntrue\n,\n\n    \ncustom_int\n:\n \nDate\n.\nnow\n(),\n\n    \ncustom_string\n:\n \nhello\n,\n\n    \n$og_title\n:\n \nTitle\n,\n\n    \n$og_description\n:\n \nDescription\n,\n\n    \n$og_image_url\n:\nhttp://lorempixel.com/400/400\n\n  \n}\n\n\n};\n\n\n\nvar\n \nlinkOptions\n \n=\n \n{\n\n  \nmake_new_link\n:\n \nfalse\n \n// don\nt create a new deep link if one already exists (e.g. _branch_match_id is in the address bar)\n\n\n};\n\n\n\nbranch\n.\nsendSMS\n(\nphoneNumber\n,\n \nlinkData\n,\n \nlinkOptions\n,\n \nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n);\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nHost deep link data\n\n\n\n\nMake it easier for marketers to create deep links\n\n\nUsed for \nJourneys\n, \nDeep Linked Emails\n, \nQuick links\n, and the \nChrome Extension\n\n\nBranch will scrape the web URL for deep link data on link creation\n\n\n\n\nValidate by creating a \nQuick Link\n and fill in \nweb URL\n to your web page\n\n\n\n\n\n\n\n\nExample URL\n\n\nURL data\n\n\nMetatags to add to your site\n\n\n\n\n\n\n\n\n\n\nhttps://shop.com/shoes/brown-loafers\n\n\nproductId=1234, productView=true\n\n\nmeta name=\"branch:deeplink:productId\" content=\"1234\" /\n, \nmeta name=\"branch:deeplink:productView\" content=\"true\" /\n\n\n\n\n\n\nhttps://shop.com/shoes\n\n\ncategoryId=5678\n\n\nmeta name=\"branch:deeplink:categoryId\" content=\"5678\" /\n\n\n\n\n\n\nhttps://shop.com/your-mother-is-great\n\n\nNo corresponding app content (\nopen web\n)\n\n\nmeta name=\"branch:deeplink:$web_only\" content=\"true\" /\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack users\n\n\n\n\n\n\nSets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n  \n\n\nbranch\n.\nsetIdentity\n(\n123456\n);\n\n\n\n\n\nbranch\n.\nsetIdentity\n(\n123456\n,\n \nfunction\n \n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n\n\n});\n\n\n\n\n\n\n\n\n\nRemoves the identity of a user\n\n\nbranch\n.\nlogout\n();\n\n\n\n\n\nbranch\n.\nlogout\n(\nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack events\n\n\n\n\n\n\nRegisters a custom event\n\n\n\n\n\n\nEvents named \nopen\n, \nclose\n, \ninstall\n, and \nreferred session\n are Branch restricted\n\n\n\n\n\n\nBest to \nTrack users\n before \nTrack events\n to associate a custom event to a user\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\nbranch\n.\ntrack\n(\nsignup\n);\n\n\n\n\n\nbranch\n.\ntrack\n(\nsignup\n,\n \n{\n \nmetadata\n:\n \n123\n \n});\n\n\n\n\n\nbranch\n.\ntrack\n(\nsignup\n,\n \n{\n \ncustom\n:\n \n123\n \n},\n \nfunction\n \n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrack commerce\n\n\n\n\n\n\nRegisters a custom commerce event\n\n\n\n\n\n\nValidate with the \nBranch Dashboard\n\n\n// only revenue is required\n\n\nvar\n \ncommerceData\n \n=\n \n{\n\n  \nrevenue\n:\n \n50.0\n,\n\n  \ncurrency\n:\n \nUSD\n,\n\n  \ntransaction_id\n:\n \nfoo-transaction-id\n,\n\n  \nshipping\n:\n \n0.0\n,\n\n  \ntax\n:\n \n5.0\n,\n\n  \naffiliation\n:\n \nfoo-affiliation\n,\n\n  \nproducts\n:\n \n[\n\n    \n{\n\n      \nsku\n:\n \nfoo-sku-1\n,\n\n      \nname\n:\n \nfoo-item-1\n,\n\n      \nprice\n:\n \n45.00\n,\n\n      \nquantity\n:\n \n1\n,\n\n      \nbrand\n:\n \nfoo-brand\n,\n\n      \ncategory\n:\n \nElectronics\n,\n\n      \nvariant\n:\n \nfoo-variant-1\n\n    \n},\n\n    \n{\n\n      \nsku\n:\n \nfoo-sku-2\n,\n\n      \nprice\n:\n \n2.50\n,\n\n      \nquantity\n:\n \n2\n\n    \n}\n\n  \n]\n\n\n};\n\n\n\n// optional\n\n\nvar\n \nmetadata\n \n=\n  \n{\n \n  \nfoo\n:\n \nbar\n \n\n};\n\n\n\nbranch\n.\ntrackCommerceEvent\n(\npurchase\n,\n \ncommerceData\n,\n \nmetadata\n,\n \nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle referrals\n\n\n\n\n\n\nReferral points are obtained from referral rules on the \nBranch Dashboard\n\n\n\n\n\n\nValidate on the \nBranch Dashboard\n\n\n\n\n\n\nReward credits\n\n\n\n\nReferral guide\n\n\n\n\n\n\n\n\nRedeem credits\n\n\nvar\n \namount\n \n=\n \n10\n;\n\n\nvar\n \nbucket\n \n=\n \nthis_bucket\n;\n\n\nbranch\n.\nredeem\n(\namount\n,\n \nbucket\n,\n \nfunction\n \n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\nvar\n \namount\n \n=\n \n10\n;\n\n\nbranch\n.\nredeem\n(\namount\n,\n \nfunction\n \n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\n\n\n\n\nLoad credits\n\n\nbranch\n.\ncredits\n(\namount\n,\n \nfunction\n \n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\n\n\n\n\nLoad history\n\n\nbranch\n.\ncreditHistory\n(\nfunction\n \n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\nvar\n \noptions\n \n=\n \n{\n\n  \nlength\n:\n50\n,\n\n  \nbegin_after_id\n:\n123456789012345\n,\n\n  \nbucket\n:\ndefault\n\n\n};\n\n\nbranch\n.\ncreditHistory\n(\noptions\n,\n \nfunction\n \n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nbucket\n\n\n\n\nThe bucket from which to retrieve credit transactions (63 max characters)\n\n\n\n\n\n\nbegin_after_id\n\n\n\n\nThe credit transaction id of the last item in the previous retrieval\n\n\n\n\n\n\nlength\n\n\n100\n\n\nThe number of credit transactions to retrieve\n\n\n\n\n\n\ndirection\n\n\n0\n\n\nThe order of credit transactions to retrieve (\ndeprecated\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle listeners\n\n\n\n\n\n\nSubscribe and unsubscribe to Branch events\n\n\n// all Branch events\n\n\nbranch\n.\naddListener\n(\nlistener\n);\n\n\n\n\n\nbranch\n.\naddListener\n(\nwillShowBanner\n,\n \nlistener\n);\n\n\n\n\n\nbranch\n.\nremoveListener\n(\nlistener\n);\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nwillShowBanner\n\n\nbanner()\n called, and the smart banner is about to be shown\n\n\n\n\n\n\nwillNotShowBanner\n\n\nbanner()\n called, and the smart banner will not be shown. No more events will be emitted\n\n\n\n\n\n\ndidShowBanner\n\n\nSmart banner animation started and is being shown to the user\n\n\n\n\n\n\nwillCloseBanner\n\n\ncloseBanner()\n called, and the smart banner will close\n\n\n\n\n\n\ndidCloseBanner\n\n\nSmart banner close animation started, and is closing\n\n\n\n\n\n\nwillSendBannerSMS\n\n\nPhone number in correct format, and will attempt to send SMS\n\n\n\n\n\n\nsendBannerSMSError\n\n\nsendSMS()\n error returned\n\n\n\n\n\n\ndidSendBannerSMS\n\n\nSMS successfully sent\n\n\n\n\n\n\ndidDownloadApp\n\n\nUser installed app, and banner text updated\n\n\n\n\n\n\nwillShowJourney\n\n\nJourney is about to be shown.\n\n\n\n\n\n\ndidShowJourney\n\n\nJourney's entrance animation has completed and it is being shown to the user.\n\n\n\n\n\n\nwillNotShowJourney\n\n\nJourney will not be shown and no other events will be emitted.\n\n\n\n\n\n\ndidClickJourneyCTA\n\n\nUser clicked on Journey's CTA button.\n\n\n\n\n\n\ndidClickJourneyClose\n\n\nUser clicked on Journey's close button.\n\n\n\n\n\n\nwillCloseJourney\n\n\nJourney close animation has started.\n\n\n\n\n\n\ndidCloseJourney\n\n\nJourney's close animation has completed and it is no longer visible to the user.\n\n\n\n\n\n\ndidCallJourneyClose\n\n\nEmitted when developer calls branch.closeJourney() to dismiss Journey.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHandle Firebase App Indexing\n\n\n\n\n\n\nInserts Firebase App Indexing tags on your website which will help Google index and surface content from your App to Google Search\n\n\n\n\n\n\nFor example:\n\n\nlink\n \nrel\n=\nalternate\n \nhref\n=\nandroid-app://{androidPackageName}/{androidURL}?{branch_tracking_params_and_additional_deep_link_data}\n/\n\n\nlink\n \nrel\n=\nalternate\n \nhref\n=\nios-app://{iosAppId}/{iosURL}?{branch_tracking_params_and_additional_deep_link_data}\n/\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf optional parameters above are not specified, Branch will try to build Firebase App Indexing tags using your page's App Links tags. Alternatively, if optional parameters are specified but Firebase App Indexing tags already exist on your webpage then Branch tracking params will be appended to the end of these tags and ignore what is passed into \nBranch.autoAppIndex()\n.\n\n\n\n\n\n\nAnalytics related to Google's attempts to index your App's content via this method can be found on your \nBranch Dashboard\n where channel is \nFirebase App Indexing\n and feature is \nAuto App Indexing\n\n\nbranch\n.\nautoAppIndex\n({\n\n    \niosAppId\n:\n123456789\n,\n\n    \niosURL\n:\nexample/home/cupertino/12345\n,\n\n    \nandroidPackageName\n:\ncom.somecompany.app\n,\n\n    \nandroidURL\n:\nexample/home/cupertino/12345\n,\n\n    \ndata\n:\n \n{\n\n      \nwalkScore\n:\n \n65\n,\n \n      \ntransitScore\n:\n \n50\n\n    \n}\n\n\n},\n \nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n\"androidPackageName\"\n\n\nAndroid App's package name\n\n\n\n\n\n\n\"androidURL\"\n\n\nA custom scheme for your Android App such as: \nexample/home/cupertino/12345\n where \nexample\n is the App's URI scheme and \nhome/cupertino/12345\n routes to unique content in the App\n\n\n\n\n\n\n\"iosAppId\"\n\n\niTunes App Store ID for your iOS App\n\n\n\n\n\n\n\"iosURL\"\n\n\nA custom scheme for your iOS App such as: \nexample/home/cupertino/12345\n\n\n\n\n\n\n\"data\"\n\n\nAny additional deep link data that you would like to pass to your App\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nSample testing apps\n\n\n\n\nhttps://cdn.branch.io/example.html\n\n\nhttp://cdn.branch.io/branchster-angular\n\n\n\n\n\n\n\n\nBrowser support\n\n\n\n\n\n\nThe Branch Web SDK requires native browser Javascript and has been tested in all modern browsers with sessionStorage capability. No 3rd party libraries are needed to make use of the SDK as is it 100% native Javascript.\n\n\n\n\n\n\n\n\nChrome\n\n\nFirefox\n\n\nSafari\n\n\nIE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n9, 10, 11\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBower or Npm compatibility\n\n\n\n\nUse \nbower install branch-sdk\n or \nnpm install branch-sdk\n\n\n\n\n\n\n\n\nCommonJS and RequireJS compatibility\n\n\n\n\nAdd \nrequire('branch')\n or \ndefine(['branch'], function(branch) { ... });\n\n\n\n\n\n\n\n\nBranch init options\n\n\n\n\n\n\nProperties which you can pass within \nbranch.initSession()\n\n\n\n\n\n\nUsed for \nInitialize Branch features\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nbranch_match_id\n\n\noptional\n - \nstring\n. The current user's browser-fingerprint-id. The value of this parameter should be the same as the value of ?\nbranch_match_id (automatically appended by Branch after a link click). _Only necessary if ?_branch_match_id is lost due to multiple redirects in your flow\n.\n\n\n\n\n\n\nbranch_view_id\n\n\noptional\n - \nstring\n. If you would like to test how Journeys render on your page before activating them, you can set the value of this parameter to the id of the view you are testing. \nOnly necessary when testing a view related to a Journey\n.\n\n\n\n\n\n\nno_journeys\n\n\noptional\n - \nboolean\n. When true, prevents Journeys from appearing on current page.\n\n\n\n\n\n\ndisable_entry_animation\n\n\noptional\n - \nboolean\n. When true, prevents a Journeys entry animation.\n\n\n\n\n\n\ndisable_exit_animation\n\n\noptional\n - \nboolean\n. When true, prevents a Journeys exit animation.\n\n\n\n\n\n\nopen_app\n\n\noptional\n - \nboolean\n. Whether to try to open the app passively through Journeys (as opposed to opening it upon user clicking); defaults to false.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTesting read deep link\n\n\n\n\n\n\nUsed for \nRead deep link\n\n\n\n\n\n\nMake a deep link redirect to your website \n\n\nhttps://example.app.link/kJNbhZ\n1\nPrF?$fallback_url=https://example.com\n\n\n\n\n\n\n\n\n\nWebsite will open to \n$fallback_url\n with \n_branch_match_id\n\n\nhttps://example.app.link/kJNbhZ1PrF?$fallback_url=https://www.website.com/\n_branch_match_id=418480444086051524\n\n\n\n\n\n\n\n\nRead \n_branch_match_id\n from that \n$fallback_url\n website\n\n\nbranch\n.\ninit\n(\nkey_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt\n,\n \nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n \n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nJourney not sticking to nav\n\n\n\n\nNavigate to \nDashboard Journey Page\n\n\nSelect Journey -\n Edit -\n Configure Views -\n Banner -\n Page Placement\n\n\nBanner Scroll = \nsticky\n\n\nPress \nSave \n Close\n\n\n\n\nAdd the following div to your nav\n\n\ndiv\n \nclass\n=\nbranch-journeys-top\n/\ndiv\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate smart banner\n\n\n\n\n\n\n(\nDeprecated\n) Recommend to use \nCreate Journey banner\n instead\n\n\nvar\n \nlinkData\n \n=\n \n{\n\n  \ncampaign\n:\n \nString\n(\nDate\n.\nnow\n())\n\n\n};\n\n\nvar\n \nbannerData\n \n=\n \n{\n\n  \nicon\n:\n \nhttp://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png\n,\n\n  \ntitle\n:\n \nBranch Demo App\n,\n\n  \ndescription\n:\n \nThe Branch demo app!\n,\n\n  \nrating\n:\n \n5\n,\n                          \n// Displays a star rating out of 5. Supports half stars through increments of .5\n\n  \nreviewCount\n:\n \n1500\n,\n                  \n// Amount of reviews your app has received next to the star rating\n\n  \nopenAppButtonText\n:\n \nOpen\n,\n          \n// Text to show on button if the user has the app installed\n\n  \ndownloadAppButtonText\n:\n \nDownload\n,\n  \n// Text to show on button if the user does not have the app installed\n\n  \nsendLinkText\n:\n \nSend Link\n,\n          \n// Text to show on desktop button to allow users to text themselves the app\n\n  \nphonePreviewText\n:\n \n+44 9999-9999\n,\n  \n// The default phone placeholder is a US format number, localize the placeholder number with a custom placeholder with this option\n\n  \nshowiOS\n:\n \ntrue\n,\n                      \n// Should the banner be shown on iOS devices (both iPhones and iPads)?\n\n  \nshowiPad\n:\n \ntrue\n,\n                     \n// Should the banner be shown on iPads (this overrides showiOS)?\n\n  \nshowAndroid\n:\n \ntrue\n,\n                  \n// Should the banner be shown on Android devices?\n\n  \nshowBlackberry\n:\n \ntrue\n,\n               \n// Should the banner be shown on Blackberry devices?\n\n  \nshowWindowsPhone\n:\n \ntrue\n,\n             \n// Should the banner be shown on Windows Phone devices?\n\n  \nshowKindle\n:\n \ntrue\n,\n                   \n// Should the banner be shown on Kindle devices?\n\n  \nshowDesktop\n:\n \ntrue\n,\n                  \n// Should the banner be shown on desktop devices?\n\n  \niframe\n:\n \ntrue\n,\n                       \n// Show banner in an iframe, recomended to isolate Branch banner CSS\n\n  \ndisableHide\n:\n \nfalse\n,\n                 \n// Should the user have the ability to hide the banner? (show\ns X on left side)\n\n  \nforgetHide\n:\n \nfalse\n,\n                  \n// Should we show the banner after the user closes it? Can be set to true, or an integer to show again after X days\n\n  \nrespectDNT\n:\n \nfalse\n,\n                  \n// Should we skip showing the banner when a user\ns settings show \nDo Not Track\n?\n\n  \nmobileSticky\n:\n \nfalse\n,\n                \n// Determines whether the mobile banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to false *this property only applies when the banner position is \ntop\n\n  \ndesktopSticky\n:\n \ntrue\n,\n                \n// Determines whether the desktop banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to true *this property only applies when the banner position is \ntop\n\n  \nmake_new_link\n:\n \nfalse\n,\n               \n// Should the banner create a new link, even if a link already exists?\n\n  \nopen_app\n:\n \nfalse\n                     \n// Should the banner try to open the app passively (without the user actively clicking) on load?\n\n\n};\n\n\nbranch\n.\nbanner\n(\nbannerData\n,\n \nlinkData\n);\n\n\n\n\n\nbranch\n.\ncloseBanner\n();\n\n\n\n\n\n\n\n\n\n\n\n\n\nCreate call to action\n\n\n\n\n\n\n(\nDeprecated\n) Recommend to use \nShare deep link\n instead\n\n\na\n \nhref\n=\n#\n \nonclick\n=\nbranch.deepviewCta()\ndeep link\n/\na\n\n\nbutton\n \nonclick\n=\nbranch.deepviewCta()\ndeep link\n/\nbutton\n\n\n\n\n\nvar\n \nlinkData\n \n=\n \n{\n\n  \ncampaign\n:\n \nString\n(\nDate\n.\nnow\n())\n\n\n};\n\n\nvar\n \nlinkOptions\n \n=\n \n{\n\n  \nmake_new_link\n:\n \nfalse\n,\n \n// don\nt create a new deep link if one already exists (e.g. _branch_match_id is in the address bar)\n\n  \nopen_app\n:\n \ntrue\n  \n// will attempt to open the app if install (URI Scheme deep linking only - will not work with Safari)\n\n\n};\n\n\nbranch\n.\ndeepview\n(\nlinkData\n,\n \nlinkOptions\n,\n \nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nerr\n,\n \ndata\n);\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo Access-Control Error\n\n\n\n\n\n\nMake sure the Branch key is the same within the deep link and website\n\n\nXMLHttpRequest cannot load https://api.branch.io/v1/open. No \nAccess-Control-Allow-Origin\n header is present on the requested resource. Origin \nnull\n is therefore not allowed access. The response had HTTP status code 400.", 
            "title": "Configure your website"
        }, 
        {
            "location": "/pages/web/integrate/#overview", 
            "text": "The  Branch Web SDK  allows you to create and share deep links with a banner, over SMS, or your own methods. It also offers event tracking, access to referrals, and management of credits. The SDK is only ~13K gzipped.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/web/integrate/#integrate-branch", 
            "text": "", 
            "title": "Integrate Branch"
        }, 
        {
            "location": "/pages/web/integrate/#configure-branch", 
            "text": "Complete the  Basic integration  within  Configure your dashboard", 
            "title": "Configure Branch"
        }, 
        {
            "location": "/pages/web/integrate/#integrate-app", 
            "text": "Complete  Integrate your app", 
            "title": "Integrate app"
        }, 
        {
            "location": "/pages/web/integrate/#initialize-branch", 
            "text": "!doctype html  html  head     meta   name = viewport   content = width=device-width, initial-scale=1.0     title / title \n   script \n     // load Branch       ( function ( b , r , a , n , c , h , _ , s , d , k ){ if ( ! b [ n ] ||! b [ n ]. _q ){ for (; s _ . length ;) c ( h , _ [ s ++ ]); d = r . createElement ( a ); d . async = 1 ; d . src = https://cdn.branch.io/branch-latest.min.js ; k = r . getElementsByTagName ( a )[ 0 ]; k . parentNode . insertBefore ( d , k ); b [ n ] = h }})( window , document , script , branch , function ( b , r ){ b [ r ] = function (){ b . _q . push ([ r , arguments ])}},{ _q : [], _v : 1 }, addListener applyCode autoAppIndex banner closeBanner closeJourney creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode trackCommerceEvent . split (   ),   0 );       // init Branch       branch . init ( key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt );     / script  / head  body  / body  / html    Change  key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt  to match your  Branch Dashboard", 
            "title": "Initialize Branch"
        }, 
        {
            "location": "/pages/web/integrate/#implement-features", 
            "text": "", 
            "title": "Implement features"
        }, 
        {
            "location": "/pages/web/integrate/#initialize-branch-features", 
            "text": "Loads Branch into your app    Uses  Branch init options  branch . init ( key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,   function ( err ,   data )   { \n   console . log ( err ,   data );   });   var   options   =   {   no_journeys :   true   };  branch . init ( key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,   options ,   function ( err ,   data )   { \n   console . log ( err ,   data );   });     Returns the following inside the  data  object       Key  Value      data_parsed  object . If the user was referred from a link, and the link has associated data, the data is passed in here.    has_app  boolean . Does the user have the app installed already, using Branch's persona data.    identity  optional  -  string . Unique string that identifies the user, if set from  setIdentity    referring_link  string . The referring link clicked, if available.    referring_identity  string . If the user was referred from a link, and the link was created by a user with an identity, that identity is here.", 
            "title": "Initialize Branch features"
        }, 
        {
            "location": "/pages/web/integrate/#create-deep-link", 
            "text": "Creates a deep link URL with encapsulated data    Uses  Deep Link Properties    Validate with the  Branch Dashboard  var   linkData   =   { \n   campaign :   content 123 , \n   channel :   facebook , \n   feature :   dashboard , \n   stage :   new user , \n   tags :   [   tag1 ,   tag2 ,   tag3   ], \n   alias :   , \n   data :   { \n     custom_bool :   true , \n     custom_int :   Date . now (), \n     custom_string :   hello , \n     $og_title :   Title , \n     $og_description :   Description , \n     $og_image_url : http://lorempixel.com/400/400 \n   }  };  branch . link ( linkData ,   function ( err ,   link )   { \n   console . log ( link );  });", 
            "title": "Create deep link"
        }, 
        {
            "location": "/pages/web/integrate/#share-deep-link", 
            "text": "Will generate a Branch deep link and tag it with the channel the user selects    Uses  Deep Link Properties  !-- shareable elements --  button   id = button deep link / button  a   id = anchor   href = # deep link / a   var   linkData   =   { \n   campaign :   content 123 , \n   channel :   facebook , \n   feature :   dashboard , \n   stage :   new user , \n   tags :   [   tag1 ,   tag2 ,   tag3   ], \n   alias :   , \n   data :   { \n     custom_bool :   true , \n     custom_int :   Date . now (), \n     custom_string :   hello , \n     $og_title :   Title , \n     $og_description :   Description , \n     $og_image_url : http://lorempixel.com/400/400 \n   }  };  branch . link ( linkData ,   function ( err ,   link )   { \n   // bind elements \n   document . getElementById ( button ). onclick   =   function ()   { \n     window . open ( link   ||   err ); \n   }; \n   document . getElementById ( anchor ). href   =   link   ||   err ;  });", 
            "title": "Share deep link"
        }, 
        {
            "location": "/pages/web/integrate/#read-deep-link", 
            "text": "Retrieve Branch data from a deep link    Best practice to receive data from the  listener  (to prevent a race condition)    Validate with  Testing read deep link    Listener  branch . init ( key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,   function ( err ,   data )   { \n   console . log ( err ,   data );   });     Latest data  branch . data ( function ( err ,   data )   { \n   console . log ( err ,   data );   });     First data  branch . first ( function ( err ,   data )   { \n   console . log ( err ,   data );   });", 
            "title": "Read deep link"
        }, 
        {
            "location": "/pages/web/integrate/#create-journeys-banner", 
            "text": "Converts mobile users to app users    Create a  Journey  on the  Branch Dashboard    Validate by testing your website on a mobile device    Append additional deep link data to the Journey button  // optional additional deep link data  var   linkData   =   { \n   campaign :   content 123 , \n   channel :   facebook , \n   feature :   dashboard , \n   stage :   new user , \n   tags :   [   tag1 ,   tag2 ,   tag3   ], \n   alias :   , \n   data :   { \n     custom_bool :   true , \n     custom_int :   Date . now (), \n     custom_string :   hello , \n     $og_title :   Title , \n     $og_description :   Description , \n     $og_image_url : http://lorempixel.com/400/400 \n   }  };  branch . setBranchViewData ( linkData );   // close  branch . closeJourney ( function ( err ,   data )   {  \n   console . log ( err ,   data );   });  // reopen  branch . track ( pageview );", 
            "title": "Create Journeys banner"
        }, 
        {
            "location": "/pages/web/integrate/#create-text-message", 
            "text": "Converts desktop users to app users    Sends a SMS text message with a deep link to a phone number    Feature has certain  SMS limits    Validate with  Branch Dashboard  for  +phone_number  var   phoneNumber   =   9999999999   // +919812345678, +442071234567  var   linkData   =   { \n   campaign :   content 123 , \n   channel :   facebook , \n   feature :   dashboard , \n   stage :   new user , \n   tags :   [   tag1 ,   tag2 ,   tag3   ], \n   alias :   , \n   data :   { \n     custom_bool :   true , \n     custom_int :   Date . now (), \n     custom_string :   hello , \n     $og_title :   Title , \n     $og_description :   Description , \n     $og_image_url : http://lorempixel.com/400/400 \n   }  };  var   linkOptions   =   { \n   make_new_link :   false   // don t create a new deep link if one already exists (e.g. _branch_match_id is in the address bar)  };  branch . sendSMS ( phoneNumber ,   linkData ,   linkOptions ,   function ( err ,   data )   { \n   console . log ( err );  });", 
            "title": "Create text message"
        }, 
        {
            "location": "/pages/web/integrate/#host-deep-link-data", 
            "text": "Make it easier for marketers to create deep links  Used for  Journeys ,  Deep Linked Emails ,  Quick links , and the  Chrome Extension  Branch will scrape the web URL for deep link data on link creation   Validate by creating a  Quick Link  and fill in  web URL  to your web page     Example URL  URL data  Metatags to add to your site      https://shop.com/shoes/brown-loafers  productId=1234, productView=true  meta name=\"branch:deeplink:productId\" content=\"1234\" / ,  meta name=\"branch:deeplink:productView\" content=\"true\" /    https://shop.com/shoes  categoryId=5678  meta name=\"branch:deeplink:categoryId\" content=\"5678\" /    https://shop.com/your-mother-is-great  No corresponding app content ( open web )  meta name=\"branch:deeplink:$web_only\" content=\"true\" /", 
            "title": "Host deep link data"
        }, 
        {
            "location": "/pages/web/integrate/#track-users", 
            "text": "Sets the identity of a user (email, ID, UUID, etc) for events, deep links, and referrals    Validate with the  Branch Dashboard     branch . setIdentity ( 123456 );   branch . setIdentity ( 123456 ,   function   ( err ,   data )   { \n   console . log ( err ,   data );  });     Removes the identity of a user  branch . logout ();   branch . logout ( function ( err ,   data )   { \n   console . log ( err ,   data );  });", 
            "title": "Track users"
        }, 
        {
            "location": "/pages/web/integrate/#track-events", 
            "text": "Registers a custom event    Events named  open ,  close ,  install , and  referred session  are Branch restricted    Best to  Track users  before  Track events  to associate a custom event to a user    Validate with the  Branch Dashboard  branch . track ( signup );   branch . track ( signup ,   {   metadata :   123   });   branch . track ( signup ,   {   custom :   123   },   function   ( err ,   data )   { \n   console . log ( err ,   data );   });", 
            "title": "Track events"
        }, 
        {
            "location": "/pages/web/integrate/#track-commerce", 
            "text": "Registers a custom commerce event    Validate with the  Branch Dashboard  // only revenue is required  var   commerceData   =   { \n   revenue :   50.0 , \n   currency :   USD , \n   transaction_id :   foo-transaction-id , \n   shipping :   0.0 , \n   tax :   5.0 , \n   affiliation :   foo-affiliation , \n   products :   [ \n     { \n       sku :   foo-sku-1 , \n       name :   foo-item-1 , \n       price :   45.00 , \n       quantity :   1 , \n       brand :   foo-brand , \n       category :   Electronics , \n       variant :   foo-variant-1 \n     }, \n     { \n       sku :   foo-sku-2 , \n       price :   2.50 , \n       quantity :   2 \n     } \n   ]  };  // optional  var   metadata   =    {  \n   foo :   bar   };  branch . trackCommerceEvent ( purchase ,   commerceData ,   metadata ,   function ( err ,   data )   { \n   console . log ( err ,   data );   });", 
            "title": "Track commerce"
        }, 
        {
            "location": "/pages/web/integrate/#handle-referrals", 
            "text": "Referral points are obtained from referral rules on the  Branch Dashboard    Validate on the  Branch Dashboard    Reward credits   Referral guide     Redeem credits  var   amount   =   10 ;  var   bucket   =   this_bucket ;  branch . redeem ( amount ,   bucket ,   function   ( err ,   data )   { \n   console . log ( err ,   data );   });   var   amount   =   10 ;  branch . redeem ( amount ,   function   ( err ,   data )   { \n   console . log ( err ,   data );   });     Load credits  branch . credits ( amount ,   function   ( err ,   data )   { \n   console . log ( err ,   data );   });     Load history  branch . creditHistory ( function   ( err ,   data )   { \n   console . log ( err ,   data );   });   var   options   =   { \n   length : 50 , \n   begin_after_id : 123456789012345 , \n   bucket : default  };  branch . creditHistory ( options ,   function   ( err ,   data )   { \n   console . log ( err ,   data );   });      Key  Default  Usage      bucket   The bucket from which to retrieve credit transactions (63 max characters)    begin_after_id   The credit transaction id of the last item in the previous retrieval    length  100  The number of credit transactions to retrieve    direction  0  The order of credit transactions to retrieve ( deprecated )", 
            "title": "Handle referrals"
        }, 
        {
            "location": "/pages/web/integrate/#handle-listeners", 
            "text": "Subscribe and unsubscribe to Branch events  // all Branch events  branch . addListener ( listener );   branch . addListener ( willShowBanner ,   listener );   branch . removeListener ( listener );      Key  Usage      willShowBanner  banner()  called, and the smart banner is about to be shown    willNotShowBanner  banner()  called, and the smart banner will not be shown. No more events will be emitted    didShowBanner  Smart banner animation started and is being shown to the user    willCloseBanner  closeBanner()  called, and the smart banner will close    didCloseBanner  Smart banner close animation started, and is closing    willSendBannerSMS  Phone number in correct format, and will attempt to send SMS    sendBannerSMSError  sendSMS()  error returned    didSendBannerSMS  SMS successfully sent    didDownloadApp  User installed app, and banner text updated    willShowJourney  Journey is about to be shown.    didShowJourney  Journey's entrance animation has completed and it is being shown to the user.    willNotShowJourney  Journey will not be shown and no other events will be emitted.    didClickJourneyCTA  User clicked on Journey's CTA button.    didClickJourneyClose  User clicked on Journey's close button.    willCloseJourney  Journey close animation has started.    didCloseJourney  Journey's close animation has completed and it is no longer visible to the user.    didCallJourneyClose  Emitted when developer calls branch.closeJourney() to dismiss Journey.", 
            "title": "Handle listeners"
        }, 
        {
            "location": "/pages/web/integrate/#handle-firebase-app-indexing", 
            "text": "Inserts Firebase App Indexing tags on your website which will help Google index and surface content from your App to Google Search    For example:  link   rel = alternate   href = android-app://{androidPackageName}/{androidURL}?{branch_tracking_params_and_additional_deep_link_data} /  link   rel = alternate   href = ios-app://{iosAppId}/{iosURL}?{branch_tracking_params_and_additional_deep_link_data} /       If optional parameters above are not specified, Branch will try to build Firebase App Indexing tags using your page's App Links tags. Alternatively, if optional parameters are specified but Firebase App Indexing tags already exist on your webpage then Branch tracking params will be appended to the end of these tags and ignore what is passed into  Branch.autoAppIndex() .    Analytics related to Google's attempts to index your App's content via this method can be found on your  Branch Dashboard  where channel is  Firebase App Indexing  and feature is  Auto App Indexing  branch . autoAppIndex ({ \n     iosAppId : 123456789 , \n     iosURL : example/home/cupertino/12345 , \n     androidPackageName : com.somecompany.app , \n     androidURL : example/home/cupertino/12345 , \n     data :   { \n       walkScore :   65 ,  \n       transitScore :   50 \n     }  },   function ( err ,   data )   { \n   console . log ( err ,   data );   });      Key  Usage      \"androidPackageName\"  Android App's package name    \"androidURL\"  A custom scheme for your Android App such as:  example/home/cupertino/12345  where  example  is the App's URI scheme and  home/cupertino/12345  routes to unique content in the App    \"iosAppId\"  iTunes App Store ID for your iOS App    \"iosURL\"  A custom scheme for your iOS App such as:  example/home/cupertino/12345    \"data\"  Any additional deep link data that you would like to pass to your App", 
            "title": "Handle Firebase App Indexing"
        }, 
        {
            "location": "/pages/web/integrate/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/web/integrate/#sample-testing-apps", 
            "text": "https://cdn.branch.io/example.html  http://cdn.branch.io/branchster-angular", 
            "title": "Sample testing apps"
        }, 
        {
            "location": "/pages/web/integrate/#browser-support", 
            "text": "The Branch Web SDK requires native browser Javascript and has been tested in all modern browsers with sessionStorage capability. No 3rd party libraries are needed to make use of the SDK as is it 100% native Javascript.     Chrome  Firefox  Safari  IE         9, 10, 11", 
            "title": "Browser support"
        }, 
        {
            "location": "/pages/web/integrate/#bower-or-npm-compatibility", 
            "text": "Use  bower install branch-sdk  or  npm install branch-sdk", 
            "title": "Bower or Npm compatibility"
        }, 
        {
            "location": "/pages/web/integrate/#commonjs-and-requirejs-compatibility", 
            "text": "Add  require('branch')  or  define(['branch'], function(branch) { ... });", 
            "title": "CommonJS and RequireJS compatibility"
        }, 
        {
            "location": "/pages/web/integrate/#branch-init-options", 
            "text": "Properties which you can pass within  branch.initSession()    Used for  Initialize Branch features     Key  Value      branch_match_id  optional  -  string . The current user's browser-fingerprint-id. The value of this parameter should be the same as the value of ? branch_match_id (automatically appended by Branch after a link click). _Only necessary if ?_branch_match_id is lost due to multiple redirects in your flow .    branch_view_id  optional  -  string . If you would like to test how Journeys render on your page before activating them, you can set the value of this parameter to the id of the view you are testing.  Only necessary when testing a view related to a Journey .    no_journeys  optional  -  boolean . When true, prevents Journeys from appearing on current page.    disable_entry_animation  optional  -  boolean . When true, prevents a Journeys entry animation.    disable_exit_animation  optional  -  boolean . When true, prevents a Journeys exit animation.    open_app  optional  -  boolean . Whether to try to open the app passively through Journeys (as opposed to opening it upon user clicking); defaults to false.", 
            "title": "Branch init options"
        }, 
        {
            "location": "/pages/web/integrate/#testing-read-deep-link", 
            "text": "Used for  Read deep link    Make a deep link redirect to your website   https://example.app.link/kJNbhZ 1 PrF?$fallback_url=https://example.com     Website will open to  $fallback_url  with  _branch_match_id  https://example.app.link/kJNbhZ1PrF?$fallback_url=https://www.website.com/ _branch_match_id=418480444086051524    Read  _branch_match_id  from that  $fallback_url  website  branch . init ( key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt ,   function ( err ,   data )   { \n   console . log ( err ,   data );   });", 
            "title": "Testing read deep link"
        }, 
        {
            "location": "/pages/web/integrate/#journey-not-sticking-to-nav", 
            "text": "Navigate to  Dashboard Journey Page  Select Journey -  Edit -  Configure Views -  Banner -  Page Placement  Banner Scroll =  sticky  Press  Save   Close   Add the following div to your nav  div   class = branch-journeys-top / div", 
            "title": "Journey not sticking to nav"
        }, 
        {
            "location": "/pages/web/integrate/#create-smart-banner", 
            "text": "( Deprecated ) Recommend to use  Create Journey banner  instead  var   linkData   =   { \n   campaign :   String ( Date . now ())  };  var   bannerData   =   { \n   icon :   http://icons.iconarchive.com/icons/wineass/ios7-redesign/512/Appstore-icon.png , \n   title :   Branch Demo App , \n   description :   The Branch demo app! , \n   rating :   5 ,                            // Displays a star rating out of 5. Supports half stars through increments of .5 \n   reviewCount :   1500 ,                    // Amount of reviews your app has received next to the star rating \n   openAppButtonText :   Open ,            // Text to show on button if the user has the app installed \n   downloadAppButtonText :   Download ,    // Text to show on button if the user does not have the app installed \n   sendLinkText :   Send Link ,            // Text to show on desktop button to allow users to text themselves the app \n   phonePreviewText :   +44 9999-9999 ,    // The default phone placeholder is a US format number, localize the placeholder number with a custom placeholder with this option \n   showiOS :   true ,                        // Should the banner be shown on iOS devices (both iPhones and iPads)? \n   showiPad :   true ,                       // Should the banner be shown on iPads (this overrides showiOS)? \n   showAndroid :   true ,                    // Should the banner be shown on Android devices? \n   showBlackberry :   true ,                 // Should the banner be shown on Blackberry devices? \n   showWindowsPhone :   true ,               // Should the banner be shown on Windows Phone devices? \n   showKindle :   true ,                     // Should the banner be shown on Kindle devices? \n   showDesktop :   true ,                    // Should the banner be shown on desktop devices? \n   iframe :   true ,                         // Show banner in an iframe, recomended to isolate Branch banner CSS \n   disableHide :   false ,                   // Should the user have the ability to hide the banner? (show s X on left side) \n   forgetHide :   false ,                    // Should we show the banner after the user closes it? Can be set to true, or an integer to show again after X days \n   respectDNT :   false ,                    // Should we skip showing the banner when a user s settings show  Do Not Track ? \n   mobileSticky :   false ,                  // Determines whether the mobile banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to false *this property only applies when the banner position is  top \n   desktopSticky :   true ,                  // Determines whether the desktop banner will be set `position: fixed;` (sticky) or `position: absolute;`, defaults to true *this property only applies when the banner position is  top \n   make_new_link :   false ,                 // Should the banner create a new link, even if a link already exists? \n   open_app :   false                       // Should the banner try to open the app passively (without the user actively clicking) on load?  };  branch . banner ( bannerData ,   linkData );   branch . closeBanner ();", 
            "title": "Create smart banner"
        }, 
        {
            "location": "/pages/web/integrate/#create-call-to-action", 
            "text": "( Deprecated ) Recommend to use  Share deep link  instead  a   href = #   onclick = branch.deepviewCta() deep link / a  button   onclick = branch.deepviewCta() deep link / button   var   linkData   =   { \n   campaign :   String ( Date . now ())  };  var   linkOptions   =   { \n   make_new_link :   false ,   // don t create a new deep link if one already exists (e.g. _branch_match_id is in the address bar) \n   open_app :   true    // will attempt to open the app if install (URI Scheme deep linking only - will not work with Safari)  };  branch . deepview ( linkData ,   linkOptions ,   function ( err ,   data )   { \n   console . log ( err ,   data );  });", 
            "title": "Create call to action"
        }, 
        {
            "location": "/pages/web/integrate/#no-access-control-error", 
            "text": "Make sure the Branch key is the same within the deep link and website  XMLHttpRequest cannot load https://api.branch.io/v1/open. No  Access-Control-Allow-Origin  header is present on the requested resource. Origin  null  is therefore not allowed access. The response had HTTP status code 400.", 
            "title": "No Access-Control Error"
        }, 
        {
            "location": "/pages/links/integrate/", 
            "text": "Understand deep linking\n\n\n\n\n\n\nDefault link behavior\n\n\n\n\n\n\nYour app is not installed\n\n\n\n\n\n\nUser \nclicks\n on a Branch deep link\n\n\n\n\n\n\nDevice \nnavigates\n to the \nfallback\n (e.g. an app store or website)\n\n\n\n\n\n\nUser \ninstalls\n and \nopens\n your app\n\n\n\n\n\n\nBranch passes deep link \ndata\n into your app\n\n\n\n\n\n\n\n\n\n\nYour app is installed\n\n\n\n\n\n\nUser \nclicks\n on a Branch deep link\n\n\n\n\n\n\nDevice \nopens\n your app or navigates to \nexpected link behavior\n\n\n\n\n\n\nBranch passes deep link \ndata\n into your app\n\n\n\n\n\n\n\n\n\n\nExpected link behavior\n\n\n\n\n\n\nExpected link behavior is dependent on whether or not the app supports deep linking\n\n\n\n\n\n\n*Able to force app open\n using \n$uri_redirect_mode\n or enabling a \nDeepview\n\n\n\n\n\n\n\n\nApp\n\n\niOS\n\n\nNotes\n\n\nAndroid\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nFacebook Newsfeed\n\n\nFallback\n\n\n*Able to force app open\n\n\nApp\n\n\n\n\n\n\n\n\nFacebook Browser\n\n\nApp\n\n\n\n\nApp\n\n\n\n\n\n\n\n\nFacebook Messenger\n\n\nFallback\n\n\n*Able to force app open\n\n\nApp\n\n\n\n\n\n\n\n\nFacebook Messenger browser\n\n\nApp\n\n\n\n\nApp\n\n\n\n\n\n\n\n\nInstagram\n\n\nFallback\n\n\n*Able to force app open\n\n\nApp\n\n\n\n\n\n\n\n\nSnapchat\n\n\nFallback\n\n\n*Able to force app open\n\n\nApp\n\n\n\n\n\n\n\n\nTwitter\n\n\nFallback\n\n\n*Able to force app open\n\n\nApp\n\n\n\n\n\n\n\n\nPinterest\n\n\nFallback\n\n\n\n\nFallback\n\n\n\n\n\n\n\n\nChrome browser\n\n\nApp\n\n\n\n\nApp\n\n\n\n\n\n\n\n\nSafari browser\n\n\nApp\n\n\n\n\n\n\n\n\n\n\n\n\nFirefox browser\n\n\nFallback\n\n\n\n\nApp\n\n\n\n\n\n\n\n\nUC browser\n\n\n\n\n\n\nApp\n\n\n\n\n\n\n\n\nNaver browser\n\n\n\n\n\n\nApp\n\n\n\n\n\n\n\n\nKakao browser\n\n\n\n\n\n\nApp\n\n\n\n\n\n\n\n\nOpera browser\n\n\nApp\n\n\n\n\nApp\n\n\n\n\n\n\n\n\nGhostery browser\n\n\nApp\n\n\n\n\nFallback\n\n\nQuery strings must be encoded ($ = %24)\n\n\n\n\n\n\nSafari address bar\n\n\nFallback\n\n\nApp open blocked by Apple\n\n\n\n\n\n\n\n\n\n\nChrome address bar\n\n\nFallback\n\n\n\n\nFallback\n\n\nDeep link data will not pass into the app\n\n\n\n\n\n\nFirefox address bar\n\n\nFallback\n\n\n\n\nApp\n\n\n\n\n\n\n\n\nHangouts\n\n\nApp\n\n\n\n\nApp\n\n\n\n\n\n\n\n\niMessage\n\n\nApp\n\n\n\n\n\n\n\n\n\n\n\n\nSlack\n\n\nApp\n\n\nMust configure Slack to open links with Safari\n\n\nApp\n\n\n\n\n\n\n\n\nWeChat\n\n\nFallback\n\n\nCustomize \nWeChat fallback urls\n\n\nFallback\n\n\nCustomize \nWeChat fallback urls\n\n\n\n\n\n\nWhatsApp\n\n\nApp\n\n\napp.link\n require https/http to be clickable\n\n\nApp\n\n\napp.link\n require https/http to be clickable\n\n\n\n\n\n\nLINE\n\n\nFallback\n\n\n*Able to force app open\n\n\nApp\n\n\n\n\n\n\n\n\nApple Mail\n\n\nApp\n\n\n\n\n\n\n\n\n\n\n\n\nGmail\n\n\nApp\n\n\n\n\nApp\n\n\n\n\n\n\n\n\nYahoo Mail\n\n\nFallback\n\n\n*Able to force app open\n\n\nApp\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom link behavior\n\n\n\n\n\n\nPass data from link to app\n\n\n\n\n\n\nAdd \nlink data\n to each deep link\n\n\n\n\n\n\nAdd key-values pairs to your \nQuick Links\n\n\n\n\n\n\nAppend query strings \nhttps://example.app.link/fzmLEhobLD?$custom_data=123\nhello=world\n\n\n\n\n\n\n\n\n\n\nFallback to a specific URL\n\n\n\n\n\n\nDetermine where a deep link will navigate to if either\n\n\n\n\n\n\nYour app is not installed\n\n\n\n\n\n\n[or]\n Another app prevent links from deep linking outside their app\n\n\n\n\n\n\n\n\n\n\nFallback overrides \n(ordered by precedence)\n\n\n\n\nAdd query string \nhttps://example.app.link?$ios_url=https://example.com\n\n\nAdd link data \n$ios_url = 'https://example.com'\n (\ndocs\n)\n\n\nAdd link data \n$fallback_url = 'https://example.com'\n (\ndocs\n)\n\n\nAdd link data for a deep view \n$ios_deepview = 'deepviewId'\n  (\ndocs\n)\n\n\nEnable a \nDeep View\n globally on the \nBranch Dashboard\n\n\nAdd \niOS/Android Custom URL\n on the \nBranch Dashboard\n\n\nAdd \nDefault URL\n (\n$fallback_url\n) on the \nBranch Dashboard\n\n\n\n\n\n\n\n\n\n\n\n\nOpen web instead of app\n\n\n\n\nYour app is not installed\n\n\nDevice \nnavigates\n to the \nfallback\n (e.g. an app store or website)\n\n\n\n\n\n\nYour app is installed\n\n\niOS:\n need to override \nUniversal Links\n\n\nAdd \n$web_only = true\n (\ndocs\n)\n\n\nAdd redirect \n$ios_url = 'https://google.com'\n (\ndocs\n)\n\n\n[or]\n Append \n/e/\n to the deep link\n\n\ne.g. \nhttps://example.app.link/fzmLEhobLD\n -\n \nhttps://example.app.link/e/fzmLEhobLD\n\n\n\n\n\n\n\n\n\n\nAndroid:\n need to override \nApp Links\n\n\nUncheck \nAlways Open App\n, \nEnable App Links\n and then hit \nSave\n the \nBranch Dashboard\n\n\nAdd redirect \n$android_url = 'https://google.com'\n (\ndocs\n)\n\n\nAdd a broken URI Scheme with \n$android_deeplink_path = 'random'\n (\ndocs\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSocial link behavior\n\n\n\n\nUse \nOG Tags\n to display content as a preview card in Facebook, Twitter, Pinterest, iMessage, etc.\n\n\nBasics are \n$og_title\n, \n$og_description\n, and \n$og_image_url\n\n\n\n\n\n\nUse \nDeep Views\n to display content as a website\n\n\nIncreases \ninstall attribution\n\n\nCompletes deep linking experience in \ncertain apps\n\n\n\n\n\n\n\n\n\n\n\n\nCreate deep links\n\n\n\n\n\n\nShort links\n\n\n\n\nShort links are the most common deep link\n\n\nShort links encapsulate \nlink data\n inside them on link creation\n\n\ne.g. existing link \nhttps://example.app.link/fzmLEhobLD\n\n\n\n\n\n\nShort links can have additional data appended to them\n\n\ne.g. dynamic link \nhttps://example.app.link/fzmLEhobLD?content_id=123\n\n\n\n\n\n\nMethods of creating short links\n\n\nUse \nQuick Links\n for fast link creation and easy tracking\n\n\nUse our \nApp SDK\n to create and share links within your app\n\n\nUse our \nWeb SDK\n to create to links convert web to app users\n\n\nUse our \nHTTP API\n to programmatically create links from your server\n\n\nUse our \nChrome Extension\n to generate links from your browser\n\n\n\n\n\n\n\n\n\n\n\n\nLong links\n\n\n\n\nLong links can be created without a network call to Branch\n\n\nLong links need \nlink data\n to be added as a query string. Be sure to URI encode any urls in the link.\n\n\ne.g. existing link \nhttps://example.app.link/fzmLEhobLD?foo=bar\nbaz=456\n$fallback_url=https%3A%2F%2Fbranch.io%2F\n\n\ne.g. dynamic link \nhttps://example.app.link/?foo=bar\nbaz=456\n$fallback_url=https%3A%2F%2Fbranch.io%2F\n\n\n\n\n\n\nLong links need a \n/a/\n and a \nBranch Key\n if you use a \ncustom link domain\n\n\ne.g. existing link \nhttps://link.example.com/5NPh/p4M09KRLrD?foo=bar\nbaz=456\n$fallback_url=https%3A%2F%2Fbranch.io%2F\n\n\ne.g. dynamic link \nhttps://link.example.com/a/key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt?foo=bar\nbaz=456\n$fallback_url=https%3A%2F%2Fbranch.io%2F\n\n\n\n\n\n\nLong links need a \n/a/\n and a \nBranch Key\n if you use a \nbnc.lt\n\n\ne.g. existing link \nhttps://bnc.lt/5NPh/p4M09KRLrD?foo=bar\nbaz=456\n$fallback_url=https%3A%2F%2Fbranch.io%2F\n\n\ne.g. dynamic link \nhttps://bnc.lt/a/key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt?foo=bar\nbaz=456\n$fallback_url=https%3A%2F%2Fbranch.io%2F\n\n\n\n\n\n\n\n\n\n\n\n\nConfigure deep links\n\n\n\n\n\n\nAnalytical labels\n\n\n\n\n\n\nThese labels allow you to filter and organize your deep links\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nchannel\n\n\n\n\nUse channel to tag the route that your link reaches users. For example, tag links with \n'Facebook'\n or \n'LinkedIn'\n to help track clicks and installs through those paths separately\n\n\n\n\n\n\nfeature\n\n\n\n\nThis is the feature of your app that the link might be associated with. For example, if you had built a referral program, you would label links with the feature 'referral'\n\n\n\n\n\n\ncampaign\n\n\n\n\nUse this field to organize the links by actual campaign. For example, if you launched a new feature or product and want to run a campaign around that\n\n\n\n\n\n\nstage\n\n\n\n\nUse this to categorize the progress or category of a user when the link was generated. For example, if you had an invite system accessible on level 1, level 3 and 5, you could differentiate links generated at each level with this parameter\n\n\n\n\n\n\ntags\n\n\n\n\nThis is a free form entry with unlimited values \n['string']\n. Use it to organize your link data with labels that don't fit within the bounds of the above\n\n\n\n\n\n\nalias\n\n\n\n\nSpecify a link alias to replace of the standard encoded short URL (e.g. \nhttps://example.app.link/aQXXDHaxKF\n -\n \nhttps://example.app.link/youralias\n). Link aliases must be unique (a \n409 error\n will occur if you create an alias already taken). Appending a \n/\n will break the alias. \nbnc.lt\n link domain alias links are incompatible with Universal Links and Spotlight.\n\n\n\n\n\n\ntype\n\n\n0\n\n\nMust be an \nint\n. Set to \n1\n to limit deep link to a single use. Set to \n2\n to make the link show up under \nQuick Links\n while adding \n$marketing_title\n to \ndata\n. Does not work with the Native SDKs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom data\n\n\n\n\n\n\nPass any custom data to be read inside your app\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nrandom\n\n\n123\n\n\nAny key-value pair\n\n\n\n\n\n\ncustom_data\n\n\ntrue\n\n\nAny key-value pair\n\n\n\n\n\n\nany_value\n\n\n{ 'random': 'dictionary' }\n\n\nAny key-value pair\n\n\n\n\n\n\nlook_at\n\n\n[1,2,3,4,5,6]\n\n\nAny key-value pair\n\n\n\n\n\n\nnav_here\n\n\ncontent/123\n\n\nAny key-value pair\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRedirections\n\n\n\n\nNavigate to different locations based on device information\n\n\n\n\nNavigation URLs must be websites, not deep links\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$fallback_url\n\n\n\n\nChange the redirect endpoint for all platforms - so you don't have to enable it by platform. Note that Branch will forward all robots to this URL, which \noverrides any OG tags\n entered in the link.  System-wide Default URL (set in Link Settings)\n\n\n\n\n\n\n$fallback_url_xx\n\n\n\n\nChange the redirect endpoint for all platforms based on a \nlower-case Alpha-2 country code\n. For example, \n$fallback_url_de=\"...\"\n would redirect Germany deep link clicks. You should also set \n$fallback_url\n to act as the global redirect in addition to the country-specifc ones.\n\n\n\n\n\n\n$desktop_url\n\n\n\n\nChange the redirect endpoint on desktops Text-Me-The-App page (set in Link Settings)\n\n\n\n\n\n\n$ios_url\n\n\n\n\nChange the redirect endpoint for iOS  App Store page for your app (set in Link Settings)\n\n\n\n\n\n\n$ipad_url\n\n\n\n\nChange the redirect endpoint for iPads \n$ios_url\n value\n\n\n\n\n\n\n$android_url\n\n\n\n\nChange the redirect endpoint for Android Play Store page for your app (set in Link Settings)\n\n\n\n\n\n\n$samsung_url\n\n\n\n\nRedirect to Samsung Galaxy Store on Samsung devices. Only link level control. Format should be \nhttp://www.samsungapps.com/appquery/appDetail.as?appId=YOUR.PACKAGE.NAME\n\n\n\n\n\n\n$windows_phone_url\n\n\n\n\nChange the redirect endpoint for Windows OS Windows Phone default URL (set in Link Settings)\n\n\n\n\n\n\n$blackberry_url\n\n\n\n\nChange the redirect endpoint for Blackberry OS  BlackBerry default URL (set in Link Settings)\n\n\n\n\n\n\n$fire_url\n\n\n\n\nChange the redirect endpoint for Amazon Fire OS Fire default URL (set in Link Settings)\n\n\n\n\n\n\n$ios_wechat_url\n\n\n\n\nChange the redirect endpoint for WeChat on iOS devices \n$ios_url\n value\n\n\n\n\n\n\n$android_wechat_url\n\n\n\n\nChange the redirect endpoint for WeChat on Android devices  \n$android_url\n value\n\n\n\n\n\n\n$web_only\n\n\nfalse\n\n\nForce to open the \n$fallback_url\n instead of the app\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nForced redirections\n\n\n\n\n\n\nPrevent error messages from other apps when Branch deep links are clicked\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$uri_redirect_mode\n\n\n0\n\n\nThis is the default value that yields the standard behavior where we don't try to open the app if the user can see an error.\n\n\n\n\n\n\n$uri_redirect_mode\n\n\n1\n\n\nSmart redirect mode. Same behavior as 0 until we know the user has the app installed through Branch persona data. In that case, force URI schemes to open the app.\n\n\n\n\n\n\n$uri_redirect_mode\n\n\n2\n\n\nForceful redirect mode. Always try to force open the app, even if it risks showing an \nerror message\n when the app is not installed.\n\n\n\n\n\n\n\n\n\n\n\n\nSupported Apps\n\n\n\n\nFacebook newsfeed iOS\n\n\nInstagram iOS\n\n\nTwitter iOS\n\n\nSafari iOS\n\n\nFirefox iOS \n Android\n\n\n\n\n\n\n\n\n\n\n\n\nDeep linking\n\n\n\n\n\n\nNavigate to different locations based on device information\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$deeplink_path\n\n\nopen?link_click_id=1234\n\n\nSet the deep link path for all platforms - so you don't have to enable it by platform. When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within\n\n\n\n\n\n\n$android_deeplink_path\n\n\n\n\nSet the deep link path for Android apps When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within\n\n\n\n\n\n\n$ios_deeplink_path\n\n\n\n\nSet the deep link path for iOS apps. When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within\n\n\n\n\n\n\n$match_duration\n\n\n7200\n\n\nLets you control the snapshotting match timeout (the time that a click will wait for an app open to match) also known as attribution window. Specified in seconds\n\n\n\n\n\n\n$always_deeplink\n\n\ntrue\n\n\nSet to \nfalse\n to make links always fall back to your mobile site. Does not apply to Universal Links or Android App Links.\n\n\n\n\n\n\n$ios_redirect_timeout\n\n\n750\n\n\nControl the timeout that the client-side JS waits after trying to open up the app before redirecting to the App Store. Specified in milliseconds\n\n\n\n\n\n\n$android_redirect_timeout\n\n\n750\n\n\nControl the timeout that the client side JS waits after trying to open up the app before redirecting to the Play Store. Specified in milliseconds\n\n\n\n\n\n\n$custom_sms_text\n\n\n\n\nText for SMS link sent for desktop clicks to this link. Must contain \n{{ link }}\n Value of Text me the app page in Settings\n\n\n\n\n\n\n$marketing_title\n\n\n\n\nSet the marketing title for the deep link in the \nQuick Links\n when creating links from the API with \ntype\n = \n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nContent\n\n\n\n\n\n\nHandle content properties\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$publicly_indexable\n\n\n1\n\n\nCannot modify here. Needs to be set by the Branch Universal Object\n\n\n\n\n\n\n$keywords\n\n\n\n\nKeywords for which this content should be discovered by. Just assign an array of strings with the keywords you'd like to use\n\n\n\n\n\n\n$canonical_identifier\n\n\n\n\nThis is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities\n\n\n\n\n\n\n$exp_date\n\n\n0\n\n\nThe date when the content will not longer be available or valid. The value must be an epoch timestamp in milliseconds (e.g. \n1512000420\n) within the Branch Universal Object. The click will be attributed, but the install/open will not be\n\n\n\n\n\n\n$content_type\n\n\n\n\nThis is a label for the type of content present. Apple recommends that you use uniform type identifier as described here\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDeepview\n\n\n\n\n\n\nEnable / control \nactive deepview\n properties\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$ios_deepview\n\n\ndefault_template\n\n\nThe name of the deepview template to use for iOS\n\n\n\n\n\n\n$android_deepview\n\n\ndefault_template\n\n\nThe name of the deepview template to use for Android\n\n\n\n\n\n\n$desktop_deepview\n\n\ndefault_template\n\n\nThe name of the deepview template to use for the Desktop\n\n\n\n\n\n\n\n\n\n\n\n\nControl \npassive deepview\n templates\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\n$ios_passive_deepview\n\n\nThe name of the template to use for iOS.\n\n\ndefault_template\n\n\n\n\n\n\n$android_passive_deepview\n\n\nThe name of the template to use for Android.\n\n\ndefault_template\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Graph\n\n\n\n\n\n\nHandle Facebook properties\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$og_title\n\n\nSet on dashboard\n\n\nSet the title of the link as it will be seen in social media displays\n\n\n\n\n\n\n$og_description\n\n\nSet on dashboard\n\n\nSet the description of the link as it will be seen in social media displays\n\n\n\n\n\n\n$og_image_url\n\n\nSet on dashboard\n\n\nSet the image of the link as it will be seen in social media displays\n\n\n\n\n\n\n$og_image_width\n\n\n\n\nSet the image's width in pixels for social media displays\n\n\n\n\n\n\n$og_image_height\n\n\n\n\nSet the image's height in pixels for social media displays\n\n\n\n\n\n\n$og_video\n\n\n\n\nSet a video as it will be seen in social media displays\n\n\n\n\n\n\n$og_url\n\n\n\n\nSet the base URL of the link as it will be seen in social media displays\n\n\n\n\n\n\n$og_type\n\n\n\n\nSet the type of custom card format link as it will be seen in social media displays. Don't set this property when sharing deep links on Facebook\n\n\n\n\n\n\n$og_redirect\n\n\n\n\n(Advanced, not recommended) Set a custom URL that we redirect the social media robots to in order to retrieve all the appropriate tags\n\n\n\n\n\n\n$og_app_id\n\n\nSet on dashboard\n\n\n(Rarely used) Sets the app id tag\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTwitter\n\n\n\n\n\n\nHandle Twitter properties\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$twitter_card\n\n\n\n\nSet the Twitter card type of the link (e.g. \nplayer\n) (you must whitelist your deep link with the \nTwitter Card Validator\n\n\n\n\n\n\n$twitter_title\n\n\nSet on dashboard\n\n\nSet the title of the Twitter card\n\n\n\n\n\n\n$twitter_description\n\n\nSet on dashboard\n\n\nSet the description of the Twitter card\n\n\n\n\n\n\n$twitter_image_url\n\n\nSet on dashboard\n\n\nSet the image URL for the Twitter card\n\n\n\n\n\n\n$twitter_site\n\n\n\n\nSet the site for Twitter\n\n\n\n\n\n\n$twitter_app_country\n\n\n\n\nSet the app country for the app card\n\n\n\n\n\n\n$twitter_player\n\n\n\n\nSet the video player's URL. Defaults to the value of \n$og_video\n.\n\n\n\n\n\n\n$twitter_player_width\n\n\n\n\nSet the player's width in pixels\n\n\n\n\n\n\n$twitter_player_height\n\n\n\n\nSet the player's height in pixels\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Tags\n\n\n\n\n\n\nHandle custom meta tags\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n$custom_meta_tags\n\n\nValid stringified JSON dictionary of the tags\u2019 keys and values\n\n\n\n\n\n\n\n\n\n\n\n\nValid dictionary example: \"{\\\"twitter:player:stream\\\": \\\"\nhttps://branch.io\n\\\"}\". This will result in the following meta tag: \nmeta property=\"twitter:player:stream\" content=\"https://branch.io\" /\n\n\n\n\nIf you create the link via the Dashboard, don\u2019t worry about stringifying the dictionary. It will be done automatically.\n\n\napple_touch_icon is a special key in the dictionary. If you set it, we will add a \nlink rel=\"apple-touch-icon\" href=\"\nurl\n\" /\n tag to the scraped HTML page. This will allow you to show a custom icon for previews in iMessage, Safari Bookmarks, Slack, etc.\n\n\n\n\n\n\n\n\nUniversal Object\n\n\n\n\n\n\nProperties for the Branch Universal Object within your \napp\n integration\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\nLink Property\n\n\n\n\n\n\n\n\n\n\ncanonicalIdentifier\n\n\n\n\n(Required)\n This is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities\n\n\n$canonical_identifier\n\n\n\n\n\n\ncanonicalUrl\n\n\n\n\nThe canonical URL, used for SEO purposes\n\n\n$canonical_url\n\n\n\n\n\n\ntitle\n\n\n\n\nThe name for the piece of content\n\n\n$og_title\n\n\n\n\n\n\ncontentDescription\n\n\n\n\nA description for the content\n\n\n$og_description\n\n\n\n\n\n\ncontentImageUrl\n\n\n\n\nThe image URL for the content. Must be an absolute path\n\n\n$og_image_url\n\n\n\n\n\n\nprice\n\n\n\n\nThe price of the item\n\n\n$amount\n\n\n\n\n\n\ncurrency\n\n\n\n\nThe currency representing the price in ISO 4217 currency code\n\n\n$currency\n\n\n\n\n\n\ncontentIndexingMode\n\n\n\"public\"\n\n\nCan be set to either \n\"public\"\n or \n\"private\"\n. Public indicates that you'd like this content to be discovered by other apps.\n\n\n$publicly_indexable\n\n\n\n\n\n\ncontentMetadata\n\n\n\n\nAny custom key-value data e.g. \n{ \"custom\": \"data\" }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBest practices for the Branch Universal Object\n\n\n\n\nDo\n\n\nSet the \ncanonicalIdentifier\n to a unique, de-duped value across instances of the app\n\n\nEnsure that the \ntitle\n, \ncontentDescription\n and \nimageUrl\n properly represent the object\n\n\nInitialize the Branch Universal Object and call userCompletedAction with the \nBranchEvent.VIEW\n (\n[buo registerView]\n for objective-C and \nbuo.registerView()\n for swift) on page load\n\n\nCall showShareSheet and createShortLink later in the life cycle, when the user takes an action that needs a link\n\n\nCall the additional object events (purchase, share completed, etc) when the corresponding user action is taken\n\n\n\n\n\n\nDo not\n\n\nSet the same \ntitle\n, \ncontentDescription\n and \nimageUrl\n across all objects\n\n\nWait to initialize the object and register views until the user goes to share\n\n\nWait to initialize the object until you conveniently need a link\n\n\nCreate many objects at once and register views in a \nfor\n loop.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead deep links\n\n\n\n\n\n\nDeep link data gets sent from your link to your \napp\n or \nwebsite\n integration\n\n\n\n\n\n\nData structure\n\n\n\n\n\n\nExample deep link data structure\n\n\n{\n\n  \nidentity_id\n:\n \n427469360685348303\n,\n\n  \nlink\n:\n \nhttps://example.app.link?%24identity_id=427469360685348303\n,\n\n  \nsession_id\n:\n \n429691081177874743\n,\n\n  \ndata\n:\n \n{\n\n    \n$canonical_identifier\n:\n \nitem/1503684554354.28\n,\n\n    \n$desktop_url\n:\n \nhttp://example.com/home\n,\n\n    \n$exp_date\n:\n \n0\n,\n\n    \n$identity_id\n:\n \n427469360685348303\n,\n\n    \n$og_description\n:\n \nMy Content Description\n,\n\n    \n$og_image_url\n:\n \nhttp://lorempixel.com/200/200/\n,\n\n    \n$og_title\n:\n \n46D6D28E-0390-40E4-A856-BD74F34D24C8\n,\n\n    \n$publicly_indexable\n:\n \n1\n,\n\n    \n+click_timestamp\n:\n \n1503684563\n,\n\n    \n+clicked_branch_link\n:\n \ntrue\n,\n\n    \n+is_first_session\n:\n \nfalse\n,\n\n    \n+match_guaranteed\n:\n \ntrue\n,\n\n    \ncustom\n:\n \nblue\n,\n\n    \nrandom\n:\n \nFE848A5B-78F7-42EC-A253-9F795FE91692\n,\n\n    \nadded\n:\n \n1503684554354.33\n,\n\n    \n~campaign\n:\n \nnew launch\n,\n\n    \n~channel\n:\n \nfacebook\n,\n\n    \n~creation_source\n:\n \n3\n,\n\n    \n~feature\n:\n \nsharing\n,\n\n    \n~id\n:\n \n429691043152332059\n,\n\n    \n~referring_link\n:\n \nhttps://example.app.link/X7OsnWv9TF\n,\n\n    \n~stage\n:\n \nnew person\n,\n\n    \n~tags\n:\n \n[\n\n      \none\n,\n\n      \ntwo\n\n    \n]\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nReserved prefixes\n\n\n\n\n\n\nBranch adds additional properties to your deep link data to explain the link\n\n\n\n\n\n\n\n\nPrefix\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n$\n\n\nBranch reserved keyword\n\n\n\n\n\n\n~\n\n\nBranch analytical data\n\n\n\n\n\n\n+\n\n\nBranch added values\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCallback values\n\n\n\n\n\n\nAdditional properties read from the \ninitSession\n within your \napp\n and \nwebsite\n integrations\n\n\n\n\n\n\n\n\nKey\n\n\nDefault\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\n~id\n\n\n\n\nAutomatically generated 18 digit ID number for the link that drove the install/open, if present (0 for dynamic and 3P links)\n\n\n\n\n\n\n~referring_link\n\n\n\n\nThe referring link that drove the install/open, if present\n\n\n\n\n\n\n~creation_source\n\n\n\n\nWhere the link was created (\n0\n API\u2028, \n1\n Quick Link, \n2\n SDK, \n3\n iOS SDK\u2028, \n4\n Android SDK\u2028, \n5\n Web SDK, \n6\n A links, \n7\n Dynamic, \n8\n Third party)\n\n\n\n\n\n\n+match_guaranteed\n\n\n\n\nIf the match was made with 100% accuracy\n\n\n\n\n\n\n+referrer\n\n\n\n\nThe referrer for the link click, if a link was clicked\n\n\n\n\n\n\n+phone_number\n\n\n\n\nThe phone number of the user, if the user texted himself/herself the app\n\n\n\n\n\n\n+is_first_session\n\n\nfalse\n\n\ntrue\n if first session (install), \nfalse\n if any other session (open)\n\n\n\n\n\n\n+clicked_branch_link\n\n\nfalse\n\n\nWhether or not the user clicked a Branch link that triggered this session\n\n\n\n\n\n\n+non_branch_link\n\n\n\n\nApp was opened from a non Branch link (third party, invalid Branch deep link, or Branch key mismatch)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nDeep links do not open app\n\n\n\n\nMake sure you are clicking on a deep link (e.g. \nhttps://example.app.link/fzmLEhobLD\n)\n\n\nMake sure you are not pasting a deep link in the address bar (in most cases, deep links must be clicked on)\n\n\nMake sure the deep link is not wrapped (e.g. \nhttp://bit.ly/2yz3b8D\n instead of \nhttps://example.app.link/fzmLEhobLD\n)\n\n\nMake sure you have \nconfigure your dashboard\n and \nconfigure your app\n\n\nMake sure the \nBranch key\n \nin your app\n matches the \nBranch key\n \nin your deep link\n\n\nMake sure you have not \ndisabled universal linking on iOS\n\n\nMake sure you understand the \nexpected behavior of deep links\n\n\nMake sure the deep link domain matches your \nlink domain\n (e.g. link domain = \nexample.app.link\n, deep link = \nhttps://example.app.link/fzmLEhobLD\n)\n\n\n\n\n\n\n\n\nView deep link data\n\n\n\n\nAdd \n?debug=1\n to the end of your deep link\n\n\nFor example: \nhttps://example.app.link/aQXXDHaxKF?debug=1\n\n\n\n\n\n\n\n\nView deep link stats\n\n\n\n\nAdd \n?stats=1\n to the end of your deep link\n\n\nFor example: \nhttps://example.app.link/aQXXDHaxKF?stats=1", 
            "title": "Create deep links"
        }, 
        {
            "location": "/pages/links/integrate/#understand-deep-linking", 
            "text": "", 
            "title": "Understand deep linking"
        }, 
        {
            "location": "/pages/links/integrate/#default-link-behavior", 
            "text": "", 
            "title": "Default link behavior"
        }, 
        {
            "location": "/pages/links/integrate/#your-app-is-not-installed", 
            "text": "User  clicks  on a Branch deep link    Device  navigates  to the  fallback  (e.g. an app store or website)    User  installs  and  opens  your app    Branch passes deep link  data  into your app", 
            "title": "Your app is not installed"
        }, 
        {
            "location": "/pages/links/integrate/#your-app-is-installed", 
            "text": "User  clicks  on a Branch deep link    Device  opens  your app or navigates to  expected link behavior    Branch passes deep link  data  into your app", 
            "title": "Your app is installed"
        }, 
        {
            "location": "/pages/links/integrate/#expected-link-behavior", 
            "text": "Expected link behavior is dependent on whether or not the app supports deep linking    *Able to force app open  using  $uri_redirect_mode  or enabling a  Deepview     App  iOS  Notes  Android  Notes      Facebook Newsfeed  Fallback  *Able to force app open  App     Facebook Browser  App   App     Facebook Messenger  Fallback  *Able to force app open  App     Facebook Messenger browser  App   App     Instagram  Fallback  *Able to force app open  App     Snapchat  Fallback  *Able to force app open  App     Twitter  Fallback  *Able to force app open  App     Pinterest  Fallback   Fallback     Chrome browser  App   App     Safari browser  App       Firefox browser  Fallback   App     UC browser    App     Naver browser    App     Kakao browser    App     Opera browser  App   App     Ghostery browser  App   Fallback  Query strings must be encoded ($ = %24)    Safari address bar  Fallback  App open blocked by Apple      Chrome address bar  Fallback   Fallback  Deep link data will not pass into the app    Firefox address bar  Fallback   App     Hangouts  App   App     iMessage  App       Slack  App  Must configure Slack to open links with Safari  App     WeChat  Fallback  Customize  WeChat fallback urls  Fallback  Customize  WeChat fallback urls    WhatsApp  App  app.link  require https/http to be clickable  App  app.link  require https/http to be clickable    LINE  Fallback  *Able to force app open  App     Apple Mail  App       Gmail  App   App     Yahoo Mail  Fallback  *Able to force app open  App", 
            "title": "Expected link behavior"
        }, 
        {
            "location": "/pages/links/integrate/#custom-link-behavior", 
            "text": "", 
            "title": "Custom link behavior"
        }, 
        {
            "location": "/pages/links/integrate/#pass-data-from-link-to-app", 
            "text": "Add  link data  to each deep link    Add key-values pairs to your  Quick Links    Append query strings  https://example.app.link/fzmLEhobLD?$custom_data=123 hello=world", 
            "title": "Pass data from link to app"
        }, 
        {
            "location": "/pages/links/integrate/#fallback-to-a-specific-url", 
            "text": "Determine where a deep link will navigate to if either    Your app is not installed    [or]  Another app prevent links from deep linking outside their app      Fallback overrides  (ordered by precedence)   Add query string  https://example.app.link?$ios_url=https://example.com  Add link data  $ios_url = 'https://example.com'  ( docs )  Add link data  $fallback_url = 'https://example.com'  ( docs )  Add link data for a deep view  $ios_deepview = 'deepviewId'   ( docs )  Enable a  Deep View  globally on the  Branch Dashboard  Add  iOS/Android Custom URL  on the  Branch Dashboard  Add  Default URL  ( $fallback_url ) on the  Branch Dashboard", 
            "title": "Fallback to a specific URL"
        }, 
        {
            "location": "/pages/links/integrate/#open-web-instead-of-app", 
            "text": "Your app is not installed  Device  navigates  to the  fallback  (e.g. an app store or website)    Your app is installed  iOS:  need to override  Universal Links  Add  $web_only = true  ( docs )  Add redirect  $ios_url = 'https://google.com'  ( docs )  [or]  Append  /e/  to the deep link  e.g.  https://example.app.link/fzmLEhobLD  -   https://example.app.link/e/fzmLEhobLD      Android:  need to override  App Links  Uncheck  Always Open App ,  Enable App Links  and then hit  Save  the  Branch Dashboard  Add redirect  $android_url = 'https://google.com'  ( docs )  Add a broken URI Scheme with  $android_deeplink_path = 'random'  ( docs )", 
            "title": "Open web instead of app"
        }, 
        {
            "location": "/pages/links/integrate/#social-link-behavior", 
            "text": "Use  OG Tags  to display content as a preview card in Facebook, Twitter, Pinterest, iMessage, etc.  Basics are  $og_title ,  $og_description , and  $og_image_url    Use  Deep Views  to display content as a website  Increases  install attribution  Completes deep linking experience in  certain apps", 
            "title": "Social link behavior"
        }, 
        {
            "location": "/pages/links/integrate/#create-deep-links", 
            "text": "", 
            "title": "Create deep links"
        }, 
        {
            "location": "/pages/links/integrate/#short-links", 
            "text": "Short links are the most common deep link  Short links encapsulate  link data  inside them on link creation  e.g. existing link  https://example.app.link/fzmLEhobLD    Short links can have additional data appended to them  e.g. dynamic link  https://example.app.link/fzmLEhobLD?content_id=123    Methods of creating short links  Use  Quick Links  for fast link creation and easy tracking  Use our  App SDK  to create and share links within your app  Use our  Web SDK  to create to links convert web to app users  Use our  HTTP API  to programmatically create links from your server  Use our  Chrome Extension  to generate links from your browser", 
            "title": "Short links"
        }, 
        {
            "location": "/pages/links/integrate/#long-links", 
            "text": "Long links can be created without a network call to Branch  Long links need  link data  to be added as a query string. Be sure to URI encode any urls in the link.  e.g. existing link  https://example.app.link/fzmLEhobLD?foo=bar baz=456 $fallback_url=https%3A%2F%2Fbranch.io%2F  e.g. dynamic link  https://example.app.link/?foo=bar baz=456 $fallback_url=https%3A%2F%2Fbranch.io%2F    Long links need a  /a/  and a  Branch Key  if you use a  custom link domain  e.g. existing link  https://link.example.com/5NPh/p4M09KRLrD?foo=bar baz=456 $fallback_url=https%3A%2F%2Fbranch.io%2F  e.g. dynamic link  https://link.example.com/a/key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt?foo=bar baz=456 $fallback_url=https%3A%2F%2Fbranch.io%2F    Long links need a  /a/  and a  Branch Key  if you use a  bnc.lt  e.g. existing link  https://bnc.lt/5NPh/p4M09KRLrD?foo=bar baz=456 $fallback_url=https%3A%2F%2Fbranch.io%2F  e.g. dynamic link  https://bnc.lt/a/key_live_kaFuWw8WvY7yn1d9yYiP8gokwqjV0Swt?foo=bar baz=456 $fallback_url=https%3A%2F%2Fbranch.io%2F", 
            "title": "Long links"
        }, 
        {
            "location": "/pages/links/integrate/#configure-deep-links", 
            "text": "", 
            "title": "Configure deep links"
        }, 
        {
            "location": "/pages/links/integrate/#analytical-labels", 
            "text": "These labels allow you to filter and organize your deep links     Key  Default  Usage      channel   Use channel to tag the route that your link reaches users. For example, tag links with  'Facebook'  or  'LinkedIn'  to help track clicks and installs through those paths separately    feature   This is the feature of your app that the link might be associated with. For example, if you had built a referral program, you would label links with the feature 'referral'    campaign   Use this field to organize the links by actual campaign. For example, if you launched a new feature or product and want to run a campaign around that    stage   Use this to categorize the progress or category of a user when the link was generated. For example, if you had an invite system accessible on level 1, level 3 and 5, you could differentiate links generated at each level with this parameter    tags   This is a free form entry with unlimited values  ['string'] . Use it to organize your link data with labels that don't fit within the bounds of the above    alias   Specify a link alias to replace of the standard encoded short URL (e.g.  https://example.app.link/aQXXDHaxKF  -   https://example.app.link/youralias ). Link aliases must be unique (a  409 error  will occur if you create an alias already taken). Appending a  /  will break the alias.  bnc.lt  link domain alias links are incompatible with Universal Links and Spotlight.    type  0  Must be an  int . Set to  1  to limit deep link to a single use. Set to  2  to make the link show up under  Quick Links  while adding  $marketing_title  to  data . Does not work with the Native SDKs.", 
            "title": "Analytical labels"
        }, 
        {
            "location": "/pages/links/integrate/#custom-data", 
            "text": "Pass any custom data to be read inside your app     Key  Value  Usage      random  123  Any key-value pair    custom_data  true  Any key-value pair    any_value  { 'random': 'dictionary' }  Any key-value pair    look_at  [1,2,3,4,5,6]  Any key-value pair    nav_here  content/123  Any key-value pair", 
            "title": "Custom data"
        }, 
        {
            "location": "/pages/links/integrate/#redirections", 
            "text": "Navigate to different locations based on device information   Navigation URLs must be websites, not deep links     Key  Default  Usage      $fallback_url   Change the redirect endpoint for all platforms - so you don't have to enable it by platform. Note that Branch will forward all robots to this URL, which  overrides any OG tags  entered in the link.  System-wide Default URL (set in Link Settings)    $fallback_url_xx   Change the redirect endpoint for all platforms based on a  lower-case Alpha-2 country code . For example,  $fallback_url_de=\"...\"  would redirect Germany deep link clicks. You should also set  $fallback_url  to act as the global redirect in addition to the country-specifc ones.    $desktop_url   Change the redirect endpoint on desktops Text-Me-The-App page (set in Link Settings)    $ios_url   Change the redirect endpoint for iOS  App Store page for your app (set in Link Settings)    $ipad_url   Change the redirect endpoint for iPads  $ios_url  value    $android_url   Change the redirect endpoint for Android Play Store page for your app (set in Link Settings)    $samsung_url   Redirect to Samsung Galaxy Store on Samsung devices. Only link level control. Format should be  http://www.samsungapps.com/appquery/appDetail.as?appId=YOUR.PACKAGE.NAME    $windows_phone_url   Change the redirect endpoint for Windows OS Windows Phone default URL (set in Link Settings)    $blackberry_url   Change the redirect endpoint for Blackberry OS  BlackBerry default URL (set in Link Settings)    $fire_url   Change the redirect endpoint for Amazon Fire OS Fire default URL (set in Link Settings)    $ios_wechat_url   Change the redirect endpoint for WeChat on iOS devices  $ios_url  value    $android_wechat_url   Change the redirect endpoint for WeChat on Android devices   $android_url  value    $web_only  false  Force to open the  $fallback_url  instead of the app", 
            "title": "Redirections"
        }, 
        {
            "location": "/pages/links/integrate/#forced-redirections", 
            "text": "Prevent error messages from other apps when Branch deep links are clicked     Key  Value  Usage      $uri_redirect_mode  0  This is the default value that yields the standard behavior where we don't try to open the app if the user can see an error.    $uri_redirect_mode  1  Smart redirect mode. Same behavior as 0 until we know the user has the app installed through Branch persona data. In that case, force URI schemes to open the app.    $uri_redirect_mode  2  Forceful redirect mode. Always try to force open the app, even if it risks showing an  error message  when the app is not installed.       Supported Apps   Facebook newsfeed iOS  Instagram iOS  Twitter iOS  Safari iOS  Firefox iOS   Android", 
            "title": "Forced redirections"
        }, 
        {
            "location": "/pages/links/integrate/#deep-linking", 
            "text": "Navigate to different locations based on device information     Key  Default  Usage      $deeplink_path  open?link_click_id=1234  Set the deep link path for all platforms - so you don't have to enable it by platform. When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within    $android_deeplink_path   Set the deep link path for Android apps When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within    $ios_deeplink_path   Set the deep link path for iOS apps. When the Branch SDK receives a link with this parameter set, it will automatically load the custom URI path contained within    $match_duration  7200  Lets you control the snapshotting match timeout (the time that a click will wait for an app open to match) also known as attribution window. Specified in seconds    $always_deeplink  true  Set to  false  to make links always fall back to your mobile site. Does not apply to Universal Links or Android App Links.    $ios_redirect_timeout  750  Control the timeout that the client-side JS waits after trying to open up the app before redirecting to the App Store. Specified in milliseconds    $android_redirect_timeout  750  Control the timeout that the client side JS waits after trying to open up the app before redirecting to the Play Store. Specified in milliseconds    $custom_sms_text   Text for SMS link sent for desktop clicks to this link. Must contain  {{ link }}  Value of Text me the app page in Settings    $marketing_title   Set the marketing title for the deep link in the  Quick Links  when creating links from the API with  type  =  2", 
            "title": "Deep linking"
        }, 
        {
            "location": "/pages/links/integrate/#content", 
            "text": "Handle content properties     Key  Default  Usage      $publicly_indexable  1  Cannot modify here. Needs to be set by the Branch Universal Object    $keywords   Keywords for which this content should be discovered by. Just assign an array of strings with the keywords you'd like to use    $canonical_identifier   This is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities    $exp_date  0  The date when the content will not longer be available or valid. The value must be an epoch timestamp in milliseconds (e.g.  1512000420 ) within the Branch Universal Object. The click will be attributed, but the install/open will not be    $content_type   This is a label for the type of content present. Apple recommends that you use uniform type identifier as described here", 
            "title": "Content"
        }, 
        {
            "location": "/pages/links/integrate/#deepview", 
            "text": "Enable / control  active deepview  properties     Key  Default  Usage      $ios_deepview  default_template  The name of the deepview template to use for iOS    $android_deepview  default_template  The name of the deepview template to use for Android    $desktop_deepview  default_template  The name of the deepview template to use for the Desktop       Control  passive deepview  templates     Key  Value  Default      $ios_passive_deepview  The name of the template to use for iOS.  default_template    $android_passive_deepview  The name of the template to use for Android.  default_template", 
            "title": "Deepview"
        }, 
        {
            "location": "/pages/links/integrate/#open-graph", 
            "text": "Handle Facebook properties     Key  Default  Usage      $og_title  Set on dashboard  Set the title of the link as it will be seen in social media displays    $og_description  Set on dashboard  Set the description of the link as it will be seen in social media displays    $og_image_url  Set on dashboard  Set the image of the link as it will be seen in social media displays    $og_image_width   Set the image's width in pixels for social media displays    $og_image_height   Set the image's height in pixels for social media displays    $og_video   Set a video as it will be seen in social media displays    $og_url   Set the base URL of the link as it will be seen in social media displays    $og_type   Set the type of custom card format link as it will be seen in social media displays. Don't set this property when sharing deep links on Facebook    $og_redirect   (Advanced, not recommended) Set a custom URL that we redirect the social media robots to in order to retrieve all the appropriate tags    $og_app_id  Set on dashboard  (Rarely used) Sets the app id tag", 
            "title": "Open Graph"
        }, 
        {
            "location": "/pages/links/integrate/#twitter", 
            "text": "Handle Twitter properties     Key  Default  Usage      $twitter_card   Set the Twitter card type of the link (e.g.  player ) (you must whitelist your deep link with the  Twitter Card Validator    $twitter_title  Set on dashboard  Set the title of the Twitter card    $twitter_description  Set on dashboard  Set the description of the Twitter card    $twitter_image_url  Set on dashboard  Set the image URL for the Twitter card    $twitter_site   Set the site for Twitter    $twitter_app_country   Set the app country for the app card    $twitter_player   Set the video player's URL. Defaults to the value of  $og_video .    $twitter_player_width   Set the player's width in pixels    $twitter_player_height   Set the player's height in pixels", 
            "title": "Twitter"
        }, 
        {
            "location": "/pages/links/integrate/#custom-tags", 
            "text": "Handle custom meta tags     Key  Value      $custom_meta_tags  Valid stringified JSON dictionary of the tags\u2019 keys and values       Valid dictionary example: \"{\\\"twitter:player:stream\\\": \\\" https://branch.io \\\"}\". This will result in the following meta tag:  meta property=\"twitter:player:stream\" content=\"https://branch.io\" /   If you create the link via the Dashboard, don\u2019t worry about stringifying the dictionary. It will be done automatically.  apple_touch_icon is a special key in the dictionary. If you set it, we will add a  link rel=\"apple-touch-icon\" href=\" url \" /  tag to the scraped HTML page. This will allow you to show a custom icon for previews in iMessage, Safari Bookmarks, Slack, etc.", 
            "title": "Custom Tags"
        }, 
        {
            "location": "/pages/links/integrate/#universal-object", 
            "text": "Properties for the Branch Universal Object within your  app  integration     Key  Default  Usage  Link Property      canonicalIdentifier   (Required)  This is the unique identifier for content that will help Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities  $canonical_identifier    canonicalUrl   The canonical URL, used for SEO purposes  $canonical_url    title   The name for the piece of content  $og_title    contentDescription   A description for the content  $og_description    contentImageUrl   The image URL for the content. Must be an absolute path  $og_image_url    price   The price of the item  $amount    currency   The currency representing the price in ISO 4217 currency code  $currency    contentIndexingMode  \"public\"  Can be set to either  \"public\"  or  \"private\" . Public indicates that you'd like this content to be discovered by other apps.  $publicly_indexable    contentMetadata   Any custom key-value data e.g.  { \"custom\": \"data\" }        Best practices for the Branch Universal Object   Do  Set the  canonicalIdentifier  to a unique, de-duped value across instances of the app  Ensure that the  title ,  contentDescription  and  imageUrl  properly represent the object  Initialize the Branch Universal Object and call userCompletedAction with the  BranchEvent.VIEW  ( [buo registerView]  for objective-C and  buo.registerView()  for swift) on page load  Call showShareSheet and createShortLink later in the life cycle, when the user takes an action that needs a link  Call the additional object events (purchase, share completed, etc) when the corresponding user action is taken    Do not  Set the same  title ,  contentDescription  and  imageUrl  across all objects  Wait to initialize the object and register views until the user goes to share  Wait to initialize the object until you conveniently need a link  Create many objects at once and register views in a  for  loop.", 
            "title": "Universal Object"
        }, 
        {
            "location": "/pages/links/integrate/#read-deep-links", 
            "text": "Deep link data gets sent from your link to your  app  or  website  integration", 
            "title": "Read deep links"
        }, 
        {
            "location": "/pages/links/integrate/#data-structure", 
            "text": "Example deep link data structure  { \n   identity_id :   427469360685348303 , \n   link :   https://example.app.link?%24identity_id=427469360685348303 , \n   session_id :   429691081177874743 , \n   data :   { \n     $canonical_identifier :   item/1503684554354.28 , \n     $desktop_url :   http://example.com/home , \n     $exp_date :   0 , \n     $identity_id :   427469360685348303 , \n     $og_description :   My Content Description , \n     $og_image_url :   http://lorempixel.com/200/200/ , \n     $og_title :   46D6D28E-0390-40E4-A856-BD74F34D24C8 , \n     $publicly_indexable :   1 , \n     +click_timestamp :   1503684563 , \n     +clicked_branch_link :   true , \n     +is_first_session :   false , \n     +match_guaranteed :   true , \n     custom :   blue , \n     random :   FE848A5B-78F7-42EC-A253-9F795FE91692 , \n     added :   1503684554354.33 , \n     ~campaign :   new launch , \n     ~channel :   facebook , \n     ~creation_source :   3 , \n     ~feature :   sharing , \n     ~id :   429691043152332059 , \n     ~referring_link :   https://example.app.link/X7OsnWv9TF , \n     ~stage :   new person , \n     ~tags :   [ \n       one , \n       two \n     ] \n   }  }", 
            "title": "Data structure"
        }, 
        {
            "location": "/pages/links/integrate/#reserved-prefixes", 
            "text": "Branch adds additional properties to your deep link data to explain the link     Prefix  Usage      $  Branch reserved keyword    ~  Branch analytical data    +  Branch added values", 
            "title": "Reserved prefixes"
        }, 
        {
            "location": "/pages/links/integrate/#callback-values", 
            "text": "Additional properties read from the  initSession  within your  app  and  website  integrations     Key  Default  Usage      ~id   Automatically generated 18 digit ID number for the link that drove the install/open, if present (0 for dynamic and 3P links)    ~referring_link   The referring link that drove the install/open, if present    ~creation_source   Where the link was created ( 0  API\u2028,  1  Quick Link,  2  SDK,  3  iOS SDK\u2028,  4  Android SDK\u2028,  5  Web SDK,  6  A links,  7  Dynamic,  8  Third party)    +match_guaranteed   If the match was made with 100% accuracy    +referrer   The referrer for the link click, if a link was clicked    +phone_number   The phone number of the user, if the user texted himself/herself the app    +is_first_session  false  true  if first session (install),  false  if any other session (open)    +clicked_branch_link  false  Whether or not the user clicked a Branch link that triggered this session    +non_branch_link   App was opened from a non Branch link (third party, invalid Branch deep link, or Branch key mismatch)", 
            "title": "Callback values"
        }, 
        {
            "location": "/pages/links/integrate/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/links/integrate/#deep-links-do-not-open-app", 
            "text": "Make sure you are clicking on a deep link (e.g.  https://example.app.link/fzmLEhobLD )  Make sure you are not pasting a deep link in the address bar (in most cases, deep links must be clicked on)  Make sure the deep link is not wrapped (e.g.  http://bit.ly/2yz3b8D  instead of  https://example.app.link/fzmLEhobLD )  Make sure you have  configure your dashboard  and  configure your app  Make sure the  Branch key   in your app  matches the  Branch key   in your deep link  Make sure you have not  disabled universal linking on iOS  Make sure you understand the  expected behavior of deep links  Make sure the deep link domain matches your  link domain  (e.g. link domain =  example.app.link , deep link =  https://example.app.link/fzmLEhobLD )", 
            "title": "Deep links do not open app"
        }, 
        {
            "location": "/pages/links/integrate/#view-deep-link-data", 
            "text": "Add  ?debug=1  to the end of your deep link  For example:  https://example.app.link/aQXXDHaxKF?debug=1", 
            "title": "View deep link data"
        }, 
        {
            "location": "/pages/links/integrate/#view-deep-link-stats", 
            "text": "Add  ?stats=1  to the end of your deep link  For example:  https://example.app.link/aQXXDHaxKF?stats=1", 
            "title": "View deep link stats"
        }, 
        {
            "location": "/pages/dashboard/analytics/", 
            "text": "Understand tracking\n\n\n\n\n\n\nAnalytical behavior\n\n\n\n\nWhenever a user \nclicks\n on a deep link and \nopens\n the app\n\n\nThis triggers an \ninstall\n or an \nopen\n (\nre-open\n)\n\n\ninstalls\n represent Branch recognizing the app_id and device_id for the first time\n\n\ninstalls\n represent new app users and the success rate of your Branch deep links\n\n\ninstalls\n do \nnot\n represent App Store downloads\n\n\nnon-Branch installs\n are installs outside of Branch deep link clicks\n\n\nopens\n are non-installs\n\n\nIf a user uninstalls and reinstalls the app, this will be an \nopen\n because Branch recognizes the device\n\n\nIf a user has the app and clicks a Branch deep link, this will be an \nopen\n because the user is not new\n\n\n\n\n\n\n\n\n\n\n\n\nDashboard behavior\n\n\n\n\nThe \nBranch Dashboard\n is a great tool for measuring growth and engagement of your app\n\n\nBranch tracks \nclick\n, \ninstalls\n, and \nopens\n (\nre-opens\n) for both Branch related events and non-Branch related events\n\n\nThe values of the dropdowns are limited to the data within the \ndate range\n\n\nThe \ndate range\n filters for any any events (e.g. \nclicks\n, \ninstalls\n, \npurchases\n) in the selected date range. For example, this means the dashboard will show all attributed \npurchases\n that occurred during the selected date range, regardless of the date of click that lead to those purchases.\n\n\nUntracked\n means this metric is non-Branch related (e.g. installs that don't come from Branch deep links)\n\n\nUnique\n are the same unique user/browser based off fingerprint id and the time frame\n\n\nUnspecified\n means that this metric does not have the selected filter (e.g. the Campaign field for the deep link is blank)\n\n\n\n\n\n\n\n\nCommon Analytics Objectives\n\n\n\n\n\n\nUser value attribution\n\n\n\n\nMeasure app growth through automatic \nevent tracking\n and \nuser identity\n tracking\n\n\nUse \nConfigure you app\n to send events and user information (\nemail\n, \nID\n, \nUUID\n, etc) from your app to the \nBranch dashboard\n\n\nThe \nidentity\n is retroactively associate any previously recorded events\n\n\nDefine all the custom events (\nsignups\n, \npurchases\n, \nshares\n, etc.) you want to track\n\n\n\n\nBranch automatically creates certain events whenever a user accesses your site or your app:\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ninstall\n\n\nTriggered the first time a user launches your app\n\n\n\n\n\n\nopen\n\n\nTriggered whenever the app becomes active (includes reinstalls)\n\n\n\n\n\n\nreferred session\n\n\nTriggered in addition to install, open or web session start if a user comes from a Branch link\n\n\n\n\n\n\nweb session start\n\n\nTriggered when the user views a webpage using the Branch Web SDK.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrowth attribution\n\n\n\n\nYou can measure your app growth in the \nDashboard\n through automatic event tracking and user identity tracking.\n\n\n\n\nYou can also define as many custom events (signups, purchases, shares, etc.) as you wish - see the \nUser Value Attribution\n guide for more on tracking custom events. You can see these events as they occur on the Live View \n Events page.\n\n\n\n\n\n\nYou can measure your app growth in the \nDashboard\n through automatic event tracking and user identity tracking.\n\n\n\n\n\n\nYou can also define as many custom events (signups, purchases, shares, etc.) as you wish - see the \nUser Value Attribution\n guide for more on tracking custom events. You can see these events as they occur on the Live View \n Events page.\n\n\n\n\n\n\nYou must \nidentify your users\n in order for the \nUser ID\n column to be populated. The \nBranch ID\n refers to the internal Branch ID associated with that user. The \nDeveloper ID\n is the value you assign when you set the identity\n\n\n\n\n\n\nYou must \nsetting identities\n within your app\n\n\n\n\n\n\nMeasuring influencers\nThe \nAnalytics\n page on the dashboard will show you who is driving the most new signups.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDashboard pages\n\n\n\n\n\n\nSummary\n\n\n\n\nThe \nDashboard Summary\n shows a high level overview of the success of your deep linking\n\n\nView \nInstalls\n which show both Branch and non-Branch installs\n\n\nView \nClick flow\n to discover where your deep links are being clicked at\n\n\nView \nJourneys\n to see you Journey funnel from \nview\n to \nclick\n to either \ninstall\n or \nopen\n \n\n\nView \nDeepviews\n to see you Deepview funnel from \nview\n to \nclick\n to either \ninstall\n or \nopen\n \n\n\nNote \nDashboard behavior\n\n\n\n\n\n\n\n\nJourney Banners\n\n\n\n\nThe \nDashboard Journey\n allows you to create, configure, and add a banner to your website to convert mobile users to app users\n\n\nFind more information in \nJourney app banners\n and \nJourney Amp banners\n\n\n\n\n\n\n\n\nDeepview Preview\n\n\n\n\nThe \nDashboard Preview\n is a content preview for your app to increase app install conversion\n\n\nFind more information in \nDeepviews\n\n\nDeepviews also help deep links work in all platforms \nSupported Platforms\n\n\n\n\n\n\n\n\nDesktop SMS\n\n\n\n\nThe \nDashboard Text Me The App\n allows you to send a deep link with in a text message to users to convert desktop users to app users\n\n\nFind more information in \nText Me The App\n\n\n\n\n\n\n\n\nAds\n\n\n\n\nDashboard Ads\n allows you to easily integrate Branch deep links with your email providers\n\n\nFind more information in \nAds\n\n\n\n\n\n\n\n\nEmails\n\n\n\n\nDashboard Emails\n allows you to easily integrate Branch deep links with your email providers\n\n\nFind more information in \nEmails\n\n\n\n\n\n\n\n\nOrganic Search\n\n\n\n\nDashboard Organic Search\n shows you how your deep links and content are being scraped by search engines\n\n\nUse \napp indexing\n within your app to enable\n\n\nValidate with the \nApp indexing validator\n\n\n\n\n\n\n\n\nReferrals\n\n\n\n\n\n\nDashboard Referrals\n allows you to track referrals between users\n\n\n\n\n\n\nThe dashboard updates every 4 hours\n\n\n\n\n\n\nImplementing\n\n\n\n\nReferrer has their \nidentity set\n\n\nReferrer \ncreates\n a deep link\n\n\nReferrer \nshares\n the deep link\n\n\nReferee \nclicks\n on the deep link\n\n\nReferee has their \nidentity set\n\n\nReferee triggers a \ncustom event\n\n\nThe custom event triggers a \nReward rule\n to assign referral points\n\n\n\n\n\n\n\n\nTroubleshooting\n\n\n\n\nThe Referrer and Referee are connected by the \ndeep link\n\n\nReferring points happen whenever the \ncustom event\n occurs in the app which triggers the \nreferral rule\n\n\nIt is best to assign referring points on a \ncustom event\n rather than Branch events (install and open) to prevent referral abuse\n\n\nMake sure you set the identity of both the referrer and referee to prevent anonymous users from showing up in your \nReferral analytics\n\n\nReferrals are based on a \nsession\n, not a device. If a user closes and opens the app before triggering the referral rule, then the referral points will not be delivered\n\n\nIf your referrals are based on custom install event, then you will need to uninstall the app and \nsimulate a Branch install\n to test referrals\n\n\nA \nReward rule\n with \nAll acting users\n will trigger credits even if a referral did not happen. To only reward credits on a referral, use \nReferring users\n or \nReferred acting users\n\n\n\n\n\n\n\n\nTracking\n\n\n\n\nUse the \nReferral analytics\n\n\nUse the \nLiveView export\n to get data as a \n.csv\n\n\nCreate a \nWebhook\n to send data to your server\n\n\n\n\n\n\n\n\nQuerying\n\n\n\n\nQuery the events export the custom referral event that triggered the referral rule\n\n\nThe \ndeveloper identity\n of this event is your referee\n\n\nThe \nsession referring developer identity\n is your referrer\n\n\n\n\n\n\n\n\n\n\n\n\nQuick Links\n\n\n\n\nDashboard Quick Links\n allows you to quickly create deep links and track their analytics in the dashboard\n\n\nUse the \nClick Link\n button in the header to generate a quick link\n\n\nUse the \nEvent\n dropdown to see a funnel of your analytics to a \ncustom event\n inside your app\n\n\nUse the \nExport\n button to get a email with a \n.csv\n of your quick link data\n\n\nUse the \nBulk Create Links\n to upload a \n.csv\n file with deep link to be created\n\n\nUse the \n...\n button to \nEdit\n, \nView stats\n, \nDebug\n, \nDuplicate\n, or \nArchive\n quick links\n\n\n\n\n\n\n\n\nLink Settings\n\n\n\n\nDashboard Link Settings\n allow you to make configurations to your default link behavior\n\n\nFind more information in \nConfigure your dashboard\n\n\n\n\n\n\n\n\nSources\n\n\n\n\nDashboard Sources\n display \nclicks\n, \ninstalls\n, \nsessions\n, and \ncustom events\n per \nanalytical label\n\n\nUpdates every 1.5 hours\n\n\nUse the \nEvent\n dropdown to see a funnel of your analytics to a \ncustom event\n inside your app\n\n\nUse the \nExport\n button to get a email with a \n.csv\n of your source data\n\n\nUse the \nSlice by platform\n to remove robot traffic from your analytics\n\n\nUse the \nfilter\n dropdowns to limit data \n\n\n\n\n\n\n\n\nContent\n\n\n\n\nDashboard Content\n tracks the attribution per content\n\n\nUpdates every 1.5 hours\n\n\nContent is tracked whenever deep links are shared (clicks which lead to open/installs)\n\n\nEach content must be meaningful unique attributes\n\n\n$deeplink_path\n\n\n$desktop_url\n\n\n$canonical_identifier\n\n\n$og_title\n + \n$og_description\n + \n$og_image_url\n\n\n(not all required. ordered by precedence)\n\n\n\n\n\n\n\n\n\n\n\n\nData Integrations\n\n\n\n\nDashboard Integrations\n allows you to create data integrations to send Branch data to third party vendors\n\n\nFind more information in \nData Integrations\n\n\n\n\n\n\n\n\nWebhooks\n\n\n\n\nDashboard Webhooks\n allows you to create webhooks to send Branch data to your servers\n\n\nFind more information in \nWebhooks\n\n\nBest to test with \nLiveview\n\n\n\n\n\n\n\n\nLiveView\n\n\n\n\nDashboard Liveview\n allows you to view real time data for everything related to Branch\n\n\nExport\n and filter liveview data based on \nLinks\n, \nClicks\n, \nIdentities\n, \nEvents\n, \nCredits\n, \nContent\n, and \nCommerce\n\n\n\n\n\n\n\n\nAccount settings\n\n\n\n\nDashboard Account Setting\n is where you find your \nBranch Keys\n, \nUser information\n, \nBilling\n, and \nTeam\n\n\nFind more information in \nConfigure your dashboard", 
            "title": "Dashboard analytics"
        }, 
        {
            "location": "/pages/dashboard/analytics/#understand-tracking", 
            "text": "", 
            "title": "Understand tracking"
        }, 
        {
            "location": "/pages/dashboard/analytics/#analytical-behavior", 
            "text": "Whenever a user  clicks  on a deep link and  opens  the app  This triggers an  install  or an  open  ( re-open )  installs  represent Branch recognizing the app_id and device_id for the first time  installs  represent new app users and the success rate of your Branch deep links  installs  do  not  represent App Store downloads  non-Branch installs  are installs outside of Branch deep link clicks  opens  are non-installs  If a user uninstalls and reinstalls the app, this will be an  open  because Branch recognizes the device  If a user has the app and clicks a Branch deep link, this will be an  open  because the user is not new", 
            "title": "Analytical behavior"
        }, 
        {
            "location": "/pages/dashboard/analytics/#dashboard-behavior", 
            "text": "The  Branch Dashboard  is a great tool for measuring growth and engagement of your app  Branch tracks  click ,  installs , and  opens  ( re-opens ) for both Branch related events and non-Branch related events  The values of the dropdowns are limited to the data within the  date range  The  date range  filters for any any events (e.g.  clicks ,  installs ,  purchases ) in the selected date range. For example, this means the dashboard will show all attributed  purchases  that occurred during the selected date range, regardless of the date of click that lead to those purchases.  Untracked  means this metric is non-Branch related (e.g. installs that don't come from Branch deep links)  Unique  are the same unique user/browser based off fingerprint id and the time frame  Unspecified  means that this metric does not have the selected filter (e.g. the Campaign field for the deep link is blank)", 
            "title": "Dashboard behavior"
        }, 
        {
            "location": "/pages/dashboard/analytics/#common-analytics-objectives", 
            "text": "", 
            "title": "Common Analytics Objectives"
        }, 
        {
            "location": "/pages/dashboard/analytics/#user-value-attribution", 
            "text": "Measure app growth through automatic  event tracking  and  user identity  tracking  Use  Configure you app  to send events and user information ( email ,  ID ,  UUID , etc) from your app to the  Branch dashboard  The  identity  is retroactively associate any previously recorded events  Define all the custom events ( signups ,  purchases ,  shares , etc.) you want to track   Branch automatically creates certain events whenever a user accesses your site or your app:     Key  Value      install  Triggered the first time a user launches your app    open  Triggered whenever the app becomes active (includes reinstalls)    referred session  Triggered in addition to install, open or web session start if a user comes from a Branch link    web session start  Triggered when the user views a webpage using the Branch Web SDK.", 
            "title": "User value attribution"
        }, 
        {
            "location": "/pages/dashboard/analytics/#growth-attribution", 
            "text": "You can measure your app growth in the  Dashboard  through automatic event tracking and user identity tracking.   You can also define as many custom events (signups, purchases, shares, etc.) as you wish - see the  User Value Attribution  guide for more on tracking custom events. You can see these events as they occur on the Live View   Events page.    You can measure your app growth in the  Dashboard  through automatic event tracking and user identity tracking.    You can also define as many custom events (signups, purchases, shares, etc.) as you wish - see the  User Value Attribution  guide for more on tracking custom events. You can see these events as they occur on the Live View   Events page.    You must  identify your users  in order for the  User ID  column to be populated. The  Branch ID  refers to the internal Branch ID associated with that user. The  Developer ID  is the value you assign when you set the identity    You must  setting identities  within your app    Measuring influencers\nThe  Analytics  page on the dashboard will show you who is driving the most new signups.", 
            "title": "Growth attribution"
        }, 
        {
            "location": "/pages/dashboard/analytics/#dashboard-pages", 
            "text": "", 
            "title": "Dashboard pages"
        }, 
        {
            "location": "/pages/dashboard/analytics/#summary", 
            "text": "The  Dashboard Summary  shows a high level overview of the success of your deep linking  View  Installs  which show both Branch and non-Branch installs  View  Click flow  to discover where your deep links are being clicked at  View  Journeys  to see you Journey funnel from  view  to  click  to either  install  or  open    View  Deepviews  to see you Deepview funnel from  view  to  click  to either  install  or  open    Note  Dashboard behavior", 
            "title": "Summary"
        }, 
        {
            "location": "/pages/dashboard/analytics/#journey-banners", 
            "text": "The  Dashboard Journey  allows you to create, configure, and add a banner to your website to convert mobile users to app users  Find more information in  Journey app banners  and  Journey Amp banners", 
            "title": "Journey Banners"
        }, 
        {
            "location": "/pages/dashboard/analytics/#deepview-preview", 
            "text": "The  Dashboard Preview  is a content preview for your app to increase app install conversion  Find more information in  Deepviews  Deepviews also help deep links work in all platforms  Supported Platforms", 
            "title": "Deepview Preview"
        }, 
        {
            "location": "/pages/dashboard/analytics/#desktop-sms", 
            "text": "The  Dashboard Text Me The App  allows you to send a deep link with in a text message to users to convert desktop users to app users  Find more information in  Text Me The App", 
            "title": "Desktop SMS"
        }, 
        {
            "location": "/pages/dashboard/analytics/#ads", 
            "text": "Dashboard Ads  allows you to easily integrate Branch deep links with your email providers  Find more information in  Ads", 
            "title": "Ads"
        }, 
        {
            "location": "/pages/dashboard/analytics/#emails", 
            "text": "Dashboard Emails  allows you to easily integrate Branch deep links with your email providers  Find more information in  Emails", 
            "title": "Emails"
        }, 
        {
            "location": "/pages/dashboard/analytics/#organic-search", 
            "text": "Dashboard Organic Search  shows you how your deep links and content are being scraped by search engines  Use  app indexing  within your app to enable  Validate with the  App indexing validator", 
            "title": "Organic Search"
        }, 
        {
            "location": "/pages/dashboard/analytics/#referrals", 
            "text": "Dashboard Referrals  allows you to track referrals between users    The dashboard updates every 4 hours", 
            "title": "Referrals"
        }, 
        {
            "location": "/pages/dashboard/analytics/#implementing", 
            "text": "Referrer has their  identity set  Referrer  creates  a deep link  Referrer  shares  the deep link  Referee  clicks  on the deep link  Referee has their  identity set  Referee triggers a  custom event  The custom event triggers a  Reward rule  to assign referral points", 
            "title": "Implementing"
        }, 
        {
            "location": "/pages/dashboard/analytics/#troubleshooting", 
            "text": "The Referrer and Referee are connected by the  deep link  Referring points happen whenever the  custom event  occurs in the app which triggers the  referral rule  It is best to assign referring points on a  custom event  rather than Branch events (install and open) to prevent referral abuse  Make sure you set the identity of both the referrer and referee to prevent anonymous users from showing up in your  Referral analytics  Referrals are based on a  session , not a device. If a user closes and opens the app before triggering the referral rule, then the referral points will not be delivered  If your referrals are based on custom install event, then you will need to uninstall the app and  simulate a Branch install  to test referrals  A  Reward rule  with  All acting users  will trigger credits even if a referral did not happen. To only reward credits on a referral, use  Referring users  or  Referred acting users", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/dashboard/analytics/#tracking", 
            "text": "Use the  Referral analytics  Use the  LiveView export  to get data as a  .csv  Create a  Webhook  to send data to your server", 
            "title": "Tracking"
        }, 
        {
            "location": "/pages/dashboard/analytics/#querying", 
            "text": "Query the events export the custom referral event that triggered the referral rule  The  developer identity  of this event is your referee  The  session referring developer identity  is your referrer", 
            "title": "Querying"
        }, 
        {
            "location": "/pages/dashboard/analytics/#quick-links", 
            "text": "Dashboard Quick Links  allows you to quickly create deep links and track their analytics in the dashboard  Use the  Click Link  button in the header to generate a quick link  Use the  Event  dropdown to see a funnel of your analytics to a  custom event  inside your app  Use the  Export  button to get a email with a  .csv  of your quick link data  Use the  Bulk Create Links  to upload a  .csv  file with deep link to be created  Use the  ...  button to  Edit ,  View stats ,  Debug ,  Duplicate , or  Archive  quick links", 
            "title": "Quick Links"
        }, 
        {
            "location": "/pages/dashboard/analytics/#link-settings", 
            "text": "Dashboard Link Settings  allow you to make configurations to your default link behavior  Find more information in  Configure your dashboard", 
            "title": "Link Settings"
        }, 
        {
            "location": "/pages/dashboard/analytics/#sources", 
            "text": "Dashboard Sources  display  clicks ,  installs ,  sessions , and  custom events  per  analytical label  Updates every 1.5 hours  Use the  Event  dropdown to see a funnel of your analytics to a  custom event  inside your app  Use the  Export  button to get a email with a  .csv  of your source data  Use the  Slice by platform  to remove robot traffic from your analytics  Use the  filter  dropdowns to limit data", 
            "title": "Sources"
        }, 
        {
            "location": "/pages/dashboard/analytics/#content", 
            "text": "Dashboard Content  tracks the attribution per content  Updates every 1.5 hours  Content is tracked whenever deep links are shared (clicks which lead to open/installs)  Each content must be meaningful unique attributes  $deeplink_path  $desktop_url  $canonical_identifier  $og_title  +  $og_description  +  $og_image_url  (not all required. ordered by precedence)", 
            "title": "Content"
        }, 
        {
            "location": "/pages/dashboard/analytics/#data-integrations", 
            "text": "Dashboard Integrations  allows you to create data integrations to send Branch data to third party vendors  Find more information in  Data Integrations", 
            "title": "Data Integrations"
        }, 
        {
            "location": "/pages/dashboard/analytics/#webhooks", 
            "text": "Dashboard Webhooks  allows you to create webhooks to send Branch data to your servers  Find more information in  Webhooks  Best to test with  Liveview", 
            "title": "Webhooks"
        }, 
        {
            "location": "/pages/dashboard/analytics/#liveview", 
            "text": "Dashboard Liveview  allows you to view real time data for everything related to Branch  Export  and filter liveview data based on  Links ,  Clicks ,  Identities ,  Events ,  Credits ,  Content , and  Commerce", 
            "title": "LiveView"
        }, 
        {
            "location": "/pages/dashboard/analytics/#account-settings", 
            "text": "Dashboard Account Setting  is where you find your  Branch Keys ,  User information ,  Billing , and  Team  Find more information in  Configure your dashboard", 
            "title": "Account settings"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/", 
            "text": "People-Based Attribution\n\n\nOverview\n\n\nBranch is introducing a new and improved analytics platform for you to preview.\n\n\nWhile the most visible impact of this change is our new and visually improved Summary Graph, it is important to understand that we have fundamentally changed the underlying model we use for counting events. This is the result of consistent feedback from Branch partners who have requested we provide deeper insights and clarity around campaigns powered by Branch links. As you want to understand the events associated with clicks on Branch links beyond the course of one user session and across all types of Branch links, we developed a new attribution engine to accurately attribute user events across interaction platforms and across channels.\n\n\nThe biggest change is that we decoupled deep linking and attribution. Now you can measure the impact of events that are not directly associated with the user session in which the click occurred and this means you will now see different numbers on your Branch dashboard.\n\n\nIn some cases, a user may click a link and only open the app several hours or days later. With this new analytics platform, we are still able to attribute both the open and any subsequent events, even though we did not deep link the user.\nAlso and from now on, anytime you analyze data in the Branch dashboard, or export it out, you will see consistency in naming across all our reports and products, for all events.\n\n\nThis document highlights each of the section where you can expect to see differences between our old analytics and new People-Based Attribution.\n\n\n\n\nNo changes required\n\n\nWe've changed the entire back-end of analytics without requiring any code or implementation changes on your end.\n\n\n\n\nData Mapping\n\n\nFrom now, Branch provides you a well defined standard to keep track of and categorize events.\n\n\nThis is different than previous behavior from when you integrated the Branch SDK. Once you created and clicked links, we automatically tracked clicks, installs, opens, and web session starts and pageviews (if you installed the web SDK). If you enabled Deepviews or Journeys, we counted clicks when a click didn't actually occur, such as when a Deepview displayed, a Journey automatically opened the app without any physical click. This caused confusion on our dashboard, as users would noticed clicks occurring without anyone ever clicking a link! Fortunately, thanks to a well-defined standard and categorization of events, this will no longer be the case.\n\n\nBelow is the new classification of events. Think of when you track when a user adds payment info, and initiates a purchase, and finally completes a purchase: those are all \ncommerce\n events. Similarly, we now have \ncontent\n events and \nuser lifecycle\n events.\n\n\n\n\nimpression\n\n\nclick\n\n\nBranch CTA view\n\n\nweb to app auto redirect\n\n\nSMS sent\n\n\ninstall\n\n\nopen\n\n\nreinstall\n\n\npageview\n\n\nweb session start\n\n\ncommerce event\n\n\ncontent event\n\n\nuser lifecycle event\n\n\ncustom event\n\n\n\n\nWhat's changed?\n\n\nDeep Linking\n\n\nThe biggest change is the analytics associated with deep linking. Previously, when a user clicked your Branch links, and installed within a two hour window, they were deep linked \nand\n attributed. This means that their first time experience included your deep linked data, and we counted an install. If they installed four hours after clicking instead of two, they would not receive deep link data, and we would \nnot\n attribute this user's install.\n\n\nNow, we've separated this concept. Deep linking windows remain two hours, but attribution windows are adjustable. Going with the previous example, if someone clicks your link, and installs the app after 4 hours, they will \nnot\n receive deep link data, but will be counted as an install.\n\n\nNote: no code changes are needed, and if you want to change the deep linking window, you can do so. Read the \nattribution window\n section for more information.\n\n\nAttribution Windows\n\n\nNow that deep linking and attribution analytics are separate, we have attribution windows for analytics. As a reminder, an attribution window simply defines the window of time for  when an eligible attribution or deep link can occur. In order to make changes, navigate to the \nlink settings\n page, and scroll down to \"Attribution Window\".\n\n\n\n\n\n\n\n\nDeep Linking Duration\n refers to the duration of time someone is eligible to receive deep link data. This includes anyone clicking a Branch link, or being automatically redirected to the app through a Branch Web SDK call. Measured in minutes.\n\n\n\n\n\n\nClick to x\n refers to events that occur after someone clicks a Branch link. If someone clicks and installs from a link, and comes back 10 days later to purchase, we would count that as a conversion, and it would surface in our dashboard. Measured in days.\n\n\n\n\n\n\nImpression to x\n refers to events that occur after someone views a Branch impression link. Measured in days.\n\n\n\n\n\n\nUsing the default value of 2 hours for deep linking and attribution under the old system, and 2 hours for deep linking with 7 days for install attribution, here's what you can expect.\n\n\n\n\n\nUnique behavior\n\n\nWe now default every visualization in the dashboard to be unique. This means that if you are testing Branch links, and click a link 5 times, we will display that as one click. This applies to events as well. This applies to all events, as well.\n\n\nSelect visualizations also allow you to see total (i.e. non-unique) numbers as well. If you'd like to see total numbers on a visualization that does not support it, you can also export raw data.\n\n\nCutoff date\n\n\nAs far as the deployment of People-Based Attribution, we created our cut off date on October 14th 2017 and we kept the old and new analytical systems running in parallel since then and will continue to do this for a short while. This mean you can query data from any time before October 14th up until October 14th with old analytics. You can query data from October 14th onwards with both analytics. But if you wanted to do reports across this line, say, October 13th to October 15th, you would need two separate queries.\n\n\nDifferences From Cutoff Date\n\n\nIf you are tracking Purchase events, and want to see unique values for Purchases before the cut off date of October 14th 2017, those values will display as 0. This is because the Purchase event hasn't stored unique counts before October 14th. However, we are now storing this information since then.\n\n\nChanges to the Branch Dashboard\n\n\nBranch Summary Analytics\n\n\nThis section covers the changes found on the main page of the Branch \ndashboard\n.  \n\n\nInstall Summary Section\n\n\nThis is the first chart found on the main page. This chart surfaces install counts for your app using the new People-Based Analytics.\n\n\n\n\nold\n\n\n\n\nnew\n\n\nChanges\n\n\nWe've removed the pie chart from the old visualizations; this is simply removing a chart, not removing any data. You can see the same breakdowns by campaign, channel, etc on the new install summary chart, making the pie chart redundant. (See also this article on why \npie charts\n are misleading.)\n\n\nThis new install summary chart by default shows Branch only installs, that are powered by the new attribution \nwindows\n. If you want to see all installs, and not just Branch driven installs, simply click \nShow All Installs\n. You will likely notice a higher number of installs driven by Branch--this is because we have a bigger window to count an install.\n\n\nFiltering is improved on this chart, as you can add additional query logic by clicking \nAdd Compare\n and \nAdd Filter\n. Previously, you could only filter by one dimension, and now you can filter with more dimensions, with more comparisons.\n\n\nClick Flow Section\n\n\nThis section is visually the same, but different in terms of \nhow\n clicks are tracked. First, we only track unique person clicks, so if you click the same link on your device 5 times, this chart will only reflect one click. Mobile deepview views or SMS sents do not count as clicks in this chart.\n\n\nQuick Link Analytics\n\n\nJust like click flow analytics, this section is visually the same, but clicks are tracked differently. These clicks are tracked by unique counts, and follow the model where only a click is counted when someone physically taps a link. Mobile deepview views or SMS sents do not count as clicks in this chart. The data can be exported.\n\n\nSource Analytics\n\n\nVisually, you will see the query selector that is present on Install Summary. This is the same component, and it will let you drill down and add filtering logic across all events, not just installs. This data is unique as well, and can be exported.\n\n\nJourneys\n\n\nJourneys data has also changed substantially. Previously, Journeys only included paid Journeys. Now it includes all of our Web SDK's web-to-app offerings. So it also includes analytics from the .banner() and .deepview() functions.\n\n\nUniversal Ads\n\n\nUniversal Ads were introduced using the new People-Based Analytics platform, so there is no expected change. The data is unique as well, and can be exported.\n\n\nChanges to exported data\n\n\nLiveview\n\n\nLiveview hasn't changed much, but we've introduced an improved CSV export that reflects these new data models.\n\n\nData Integrations\n\n\nData Integrations now mirrors the UI of our ads flow. The data we send is also utilizing the new mechanism of attribution, meaning we will send data within a proper attribution window instead of the same session. This means more of your attributed data will make it across automatically.\n\n\nWebhooks\n\n\nWebhooks, like data integratons, is no longer session based. This means we will send more webhooks to you automatically. This update hasn't completed yet.\n\n\nChanges to Install, Re-installs, and Opens\n\n\nPrior to the rollout of People-Based Attribution, Branch classified \u201cre-installs\u201d as opens. With People-Based Attribution, we now split out re-installs from opens. As a result, we can show you installs vs reinstalls vs opens.\n\n\nOur SDK uses an identifier, which we persist between app opens, to know whether the app was previously installed. This identifier is for internal use only. When an app is first installed, this identifier is not yet stored on the device. Then our SDK makes a request to our install endpoint. On our backend, Branch determines whether this is an install, a reinstall, or in some cases, an open. Then it returns this identifier. The SDK persists this identifier, and all future requests will be made to our servers with it present.\n\n\nOverall, how does Branch determine whether an app open is an install, reinstall, or open?\n\n\nWhen Branch first launched, every partner who integrated the Branch SDK saw Branch measure an artificially high number of installs. As an example, if a user had an app installed on their phone before without the Branch SDK, and then upgraded to a version of the app that had the Branch SDK, Branch would count this upgrade as an install, even though the user had the app previously. Branch attempted to solve for this use case.\n\n\nBranch introduced a field to the SDK, called \u201cupdate\u201d, which used complex, OS-specific logic. The SDK indicated, based on either OS-provided methods or traces left by the file system, whether this particular install or open was actually just an update. In other words, the app was already installed, but the user just updated what version of the app they had. If the SDK indicated that for this particular app session, the app was updated, we would not count an install, but rather an open.\n\n\nNow, how does Branch translate this update, within the context of installs, opens, and reinstalls?\n\n\nIf we see the flag \u201cupdate\u201d sent by the SDK set to \u201cfresh install\u201d (this is set to an enum value of \n0\n in our SDK logs), then we know that the user was not updating the app. In this case, it\u2019s either an install or a reinstall. Given this information, our backend must decide between install and reinstall. Our backend performs a lookup to our People Based Attribution database and finds whether this device, using the device identifier, ever had the app installed. If so, we count this as a re-install, instead of an install. If the app was never installed on this device, we track an install.\n\n\nIf we see the flag \u201cupdate\u201d sent by the SDK set to \u201cjust updated\u201d (this is an enum value of \n2\n in our SDK logs), then we know that the user updated the app, as opposed to freshly installing. This event is not tracked as an install. This event is tracked as an open.\n\n\nWith the introduction and adoption of iOS 11, we uncovered an intermittent issue with install tracking. It appears that on newer versions of the OS, app installs have been inconsistently counted as opens rather than fresh installs. The logic causing this was intended to detect when apps had been installed on a device prior to the Branch SDK being integrated and to register opens instead of installs, as described above. However, as more devices have updated to newer versions of iOS, install discrepancies have increased and we believe this logic is the cause. In response, we have removed this logic.\n\n\nThe resultant impact for apps using Branch for over three months is that installs should increase to reflect correct numbers, starting January 5th. There should be no adverse impact. Partners who have newly integrated the Branch SDK will notice a large spike of installs when first releasing the SDK but no impact beyond that.\n\n\nFAQ\n\n\nData Speed\n\n\nThis new People-Based Analytics platform introduces a slight delay compared to the old dashboard analytics, and it may now take a few minutes for events to appear. We're continually improving the speed and plan to significantly decrease the delay in Q1 2018.\n\n\nUnique Counts\n\n\nOne thing to be aware of is that unique counts may be within a 4% window of error across the dashboard. For example, if you have 100 total clicks, and 90 were truly unique, it's possible that the dashboard could report within 4% of that 90 number. If you want true uniques, you can export raw data and de-dupe across events.\n\n\nOne consequence of this is that if you compare by different dimensions and sum the results, the total may not add up. As an example, if you compare all attributed installs by campaign and by channel (careful: be sure to include where the install is attributed and campaign/channel is null), then the totals may not line up. They should be nearly identical, varying \nat most\n by 4%. \n\n\nDiffering Installs\n\n\nAs part of People-Based Attribution, your install numbers will likely not line up one to one. What this means is that if you see 200 Branch driven installs on the old Analytics Platform, it's ok to see 190 Branch driven installs (or even 210) on the same day. This is due to the way we have fundamentally changed the way we count attributions.\n\n\nSome installs on the old analytics platform were actually \"reinstalls\", but were not counted as such, which would be one reason why installs are lower. Some campaigns will count higher installs, because they may be clicked on a variety of browsers and platforms, and Branch is able to connect those touch points to accurately count an install.\n\n\nIf the difference in numbers is still concerning, reach out to your Branch account manager, or send us a message at \n\n\nNew Dashboard Accounts\n\n\nAccounts created on or after December 15th, 2017 (UTC time zone) will run exclusively on the People-Based Attribution platform.\n\n\nSupport\n\n\nDiscrepancies\n\n\nSDK Version\n\n\nWhile different install numbers are to be expected, there may be some discrepancies not related to the new attribution platform counting methodologies. You may notice numbers are off if you are on version 0.12.4 or below on the iOS SDK. If that is the case, please upgrade to the latest version of the SDK, or at least 0.12.5. There is no cut off for Android.", 
            "title": "New Dashboard Analytics"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#people-based-attribution", 
            "text": "", 
            "title": "People-Based Attribution"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#overview", 
            "text": "Branch is introducing a new and improved analytics platform for you to preview.  While the most visible impact of this change is our new and visually improved Summary Graph, it is important to understand that we have fundamentally changed the underlying model we use for counting events. This is the result of consistent feedback from Branch partners who have requested we provide deeper insights and clarity around campaigns powered by Branch links. As you want to understand the events associated with clicks on Branch links beyond the course of one user session and across all types of Branch links, we developed a new attribution engine to accurately attribute user events across interaction platforms and across channels.  The biggest change is that we decoupled deep linking and attribution. Now you can measure the impact of events that are not directly associated with the user session in which the click occurred and this means you will now see different numbers on your Branch dashboard.  In some cases, a user may click a link and only open the app several hours or days later. With this new analytics platform, we are still able to attribute both the open and any subsequent events, even though we did not deep link the user.\nAlso and from now on, anytime you analyze data in the Branch dashboard, or export it out, you will see consistency in naming across all our reports and products, for all events.  This document highlights each of the section where you can expect to see differences between our old analytics and new People-Based Attribution.   No changes required  We've changed the entire back-end of analytics without requiring any code or implementation changes on your end.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#data-mapping", 
            "text": "From now, Branch provides you a well defined standard to keep track of and categorize events.  This is different than previous behavior from when you integrated the Branch SDK. Once you created and clicked links, we automatically tracked clicks, installs, opens, and web session starts and pageviews (if you installed the web SDK). If you enabled Deepviews or Journeys, we counted clicks when a click didn't actually occur, such as when a Deepview displayed, a Journey automatically opened the app without any physical click. This caused confusion on our dashboard, as users would noticed clicks occurring without anyone ever clicking a link! Fortunately, thanks to a well-defined standard and categorization of events, this will no longer be the case.  Below is the new classification of events. Think of when you track when a user adds payment info, and initiates a purchase, and finally completes a purchase: those are all  commerce  events. Similarly, we now have  content  events and  user lifecycle  events.   impression  click  Branch CTA view  web to app auto redirect  SMS sent  install  open  reinstall  pageview  web session start  commerce event  content event  user lifecycle event  custom event", 
            "title": "Data Mapping"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#whats-changed", 
            "text": "", 
            "title": "What's changed?"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#deep-linking", 
            "text": "The biggest change is the analytics associated with deep linking. Previously, when a user clicked your Branch links, and installed within a two hour window, they were deep linked  and  attributed. This means that their first time experience included your deep linked data, and we counted an install. If they installed four hours after clicking instead of two, they would not receive deep link data, and we would  not  attribute this user's install.  Now, we've separated this concept. Deep linking windows remain two hours, but attribution windows are adjustable. Going with the previous example, if someone clicks your link, and installs the app after 4 hours, they will  not  receive deep link data, but will be counted as an install.  Note: no code changes are needed, and if you want to change the deep linking window, you can do so. Read the  attribution window  section for more information.", 
            "title": "Deep Linking"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#attribution-windows", 
            "text": "Now that deep linking and attribution analytics are separate, we have attribution windows for analytics. As a reminder, an attribution window simply defines the window of time for  when an eligible attribution or deep link can occur. In order to make changes, navigate to the  link settings  page, and scroll down to \"Attribution Window\".     Deep Linking Duration  refers to the duration of time someone is eligible to receive deep link data. This includes anyone clicking a Branch link, or being automatically redirected to the app through a Branch Web SDK call. Measured in minutes.    Click to x  refers to events that occur after someone clicks a Branch link. If someone clicks and installs from a link, and comes back 10 days later to purchase, we would count that as a conversion, and it would surface in our dashboard. Measured in days.    Impression to x  refers to events that occur after someone views a Branch impression link. Measured in days.    Using the default value of 2 hours for deep linking and attribution under the old system, and 2 hours for deep linking with 7 days for install attribution, here's what you can expect.", 
            "title": "Attribution Windows"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#unique-behavior", 
            "text": "We now default every visualization in the dashboard to be unique. This means that if you are testing Branch links, and click a link 5 times, we will display that as one click. This applies to events as well. This applies to all events, as well.  Select visualizations also allow you to see total (i.e. non-unique) numbers as well. If you'd like to see total numbers on a visualization that does not support it, you can also export raw data.", 
            "title": "Unique behavior"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#cutoff-date", 
            "text": "As far as the deployment of People-Based Attribution, we created our cut off date on October 14th 2017 and we kept the old and new analytical systems running in parallel since then and will continue to do this for a short while. This mean you can query data from any time before October 14th up until October 14th with old analytics. You can query data from October 14th onwards with both analytics. But if you wanted to do reports across this line, say, October 13th to October 15th, you would need two separate queries.", 
            "title": "Cutoff date"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#differences-from-cutoff-date", 
            "text": "If you are tracking Purchase events, and want to see unique values for Purchases before the cut off date of October 14th 2017, those values will display as 0. This is because the Purchase event hasn't stored unique counts before October 14th. However, we are now storing this information since then.", 
            "title": "Differences From Cutoff Date"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#changes-to-the-branch-dashboard", 
            "text": "", 
            "title": "Changes to the Branch Dashboard"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#branch-summary-analytics", 
            "text": "This section covers the changes found on the main page of the Branch  dashboard .", 
            "title": "Branch Summary Analytics"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#install-summary-section", 
            "text": "This is the first chart found on the main page. This chart surfaces install counts for your app using the new People-Based Analytics.   old   new  Changes  We've removed the pie chart from the old visualizations; this is simply removing a chart, not removing any data. You can see the same breakdowns by campaign, channel, etc on the new install summary chart, making the pie chart redundant. (See also this article on why  pie charts  are misleading.)  This new install summary chart by default shows Branch only installs, that are powered by the new attribution  windows . If you want to see all installs, and not just Branch driven installs, simply click  Show All Installs . You will likely notice a higher number of installs driven by Branch--this is because we have a bigger window to count an install.  Filtering is improved on this chart, as you can add additional query logic by clicking  Add Compare  and  Add Filter . Previously, you could only filter by one dimension, and now you can filter with more dimensions, with more comparisons.", 
            "title": "Install Summary Section"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#click-flow-section", 
            "text": "This section is visually the same, but different in terms of  how  clicks are tracked. First, we only track unique person clicks, so if you click the same link on your device 5 times, this chart will only reflect one click. Mobile deepview views or SMS sents do not count as clicks in this chart.", 
            "title": "Click Flow Section"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#quick-link-analytics", 
            "text": "Just like click flow analytics, this section is visually the same, but clicks are tracked differently. These clicks are tracked by unique counts, and follow the model where only a click is counted when someone physically taps a link. Mobile deepview views or SMS sents do not count as clicks in this chart. The data can be exported.", 
            "title": "Quick Link Analytics"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#source-analytics", 
            "text": "Visually, you will see the query selector that is present on Install Summary. This is the same component, and it will let you drill down and add filtering logic across all events, not just installs. This data is unique as well, and can be exported.", 
            "title": "Source Analytics"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#journeys", 
            "text": "Journeys data has also changed substantially. Previously, Journeys only included paid Journeys. Now it includes all of our Web SDK's web-to-app offerings. So it also includes analytics from the .banner() and .deepview() functions.", 
            "title": "Journeys"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#universal-ads", 
            "text": "Universal Ads were introduced using the new People-Based Analytics platform, so there is no expected change. The data is unique as well, and can be exported.", 
            "title": "Universal Ads"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#changes-to-exported-data", 
            "text": "", 
            "title": "Changes to exported data"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#liveview", 
            "text": "Liveview hasn't changed much, but we've introduced an improved CSV export that reflects these new data models.", 
            "title": "Liveview"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#data-integrations", 
            "text": "Data Integrations now mirrors the UI of our ads flow. The data we send is also utilizing the new mechanism of attribution, meaning we will send data within a proper attribution window instead of the same session. This means more of your attributed data will make it across automatically.", 
            "title": "Data Integrations"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#webhooks", 
            "text": "Webhooks, like data integratons, is no longer session based. This means we will send more webhooks to you automatically. This update hasn't completed yet.", 
            "title": "Webhooks"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#changes-to-install-re-installs-and-opens", 
            "text": "Prior to the rollout of People-Based Attribution, Branch classified \u201cre-installs\u201d as opens. With People-Based Attribution, we now split out re-installs from opens. As a result, we can show you installs vs reinstalls vs opens.  Our SDK uses an identifier, which we persist between app opens, to know whether the app was previously installed. This identifier is for internal use only. When an app is first installed, this identifier is not yet stored on the device. Then our SDK makes a request to our install endpoint. On our backend, Branch determines whether this is an install, a reinstall, or in some cases, an open. Then it returns this identifier. The SDK persists this identifier, and all future requests will be made to our servers with it present.  Overall, how does Branch determine whether an app open is an install, reinstall, or open?  When Branch first launched, every partner who integrated the Branch SDK saw Branch measure an artificially high number of installs. As an example, if a user had an app installed on their phone before without the Branch SDK, and then upgraded to a version of the app that had the Branch SDK, Branch would count this upgrade as an install, even though the user had the app previously. Branch attempted to solve for this use case.  Branch introduced a field to the SDK, called \u201cupdate\u201d, which used complex, OS-specific logic. The SDK indicated, based on either OS-provided methods or traces left by the file system, whether this particular install or open was actually just an update. In other words, the app was already installed, but the user just updated what version of the app they had. If the SDK indicated that for this particular app session, the app was updated, we would not count an install, but rather an open.  Now, how does Branch translate this update, within the context of installs, opens, and reinstalls?  If we see the flag \u201cupdate\u201d sent by the SDK set to \u201cfresh install\u201d (this is set to an enum value of  0  in our SDK logs), then we know that the user was not updating the app. In this case, it\u2019s either an install or a reinstall. Given this information, our backend must decide between install and reinstall. Our backend performs a lookup to our People Based Attribution database and finds whether this device, using the device identifier, ever had the app installed. If so, we count this as a re-install, instead of an install. If the app was never installed on this device, we track an install.  If we see the flag \u201cupdate\u201d sent by the SDK set to \u201cjust updated\u201d (this is an enum value of  2  in our SDK logs), then we know that the user updated the app, as opposed to freshly installing. This event is not tracked as an install. This event is tracked as an open.  With the introduction and adoption of iOS 11, we uncovered an intermittent issue with install tracking. It appears that on newer versions of the OS, app installs have been inconsistently counted as opens rather than fresh installs. The logic causing this was intended to detect when apps had been installed on a device prior to the Branch SDK being integrated and to register opens instead of installs, as described above. However, as more devices have updated to newer versions of iOS, install discrepancies have increased and we believe this logic is the cause. In response, we have removed this logic.  The resultant impact for apps using Branch for over three months is that installs should increase to reflect correct numbers, starting January 5th. There should be no adverse impact. Partners who have newly integrated the Branch SDK will notice a large spike of installs when first releasing the SDK but no impact beyond that.", 
            "title": "Changes to Install, Re-installs, and Opens"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#data-speed", 
            "text": "This new People-Based Analytics platform introduces a slight delay compared to the old dashboard analytics, and it may now take a few minutes for events to appear. We're continually improving the speed and plan to significantly decrease the delay in Q1 2018.", 
            "title": "Data Speed"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#unique-counts", 
            "text": "One thing to be aware of is that unique counts may be within a 4% window of error across the dashboard. For example, if you have 100 total clicks, and 90 were truly unique, it's possible that the dashboard could report within 4% of that 90 number. If you want true uniques, you can export raw data and de-dupe across events.  One consequence of this is that if you compare by different dimensions and sum the results, the total may not add up. As an example, if you compare all attributed installs by campaign and by channel (careful: be sure to include where the install is attributed and campaign/channel is null), then the totals may not line up. They should be nearly identical, varying  at most  by 4%.", 
            "title": "Unique Counts"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#differing-installs", 
            "text": "As part of People-Based Attribution, your install numbers will likely not line up one to one. What this means is that if you see 200 Branch driven installs on the old Analytics Platform, it's ok to see 190 Branch driven installs (or even 210) on the same day. This is due to the way we have fundamentally changed the way we count attributions.  Some installs on the old analytics platform were actually \"reinstalls\", but were not counted as such, which would be one reason why installs are lower. Some campaigns will count higher installs, because they may be clicked on a variety of browsers and platforms, and Branch is able to connect those touch points to accurately count an install.  If the difference in numbers is still concerning, reach out to your Branch account manager, or send us a message at", 
            "title": "Differing Installs"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#new-dashboard-accounts", 
            "text": "Accounts created on or after December 15th, 2017 (UTC time zone) will run exclusively on the People-Based Attribution platform.", 
            "title": "New Dashboard Accounts"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#discrepancies", 
            "text": "", 
            "title": "Discrepancies"
        }, 
        {
            "location": "/pages/dashboard/unified-analytics/#sdk-version", 
            "text": "While different install numbers are to be expected, there may be some discrepancies not related to the new attribution platform counting methodologies. You may notice numbers are off if you are on version 0.12.4 or below on the iOS SDK. If that is the case, please upgrade to the latest version of the SDK, or at least 0.12.5. There is no cut off for Android.", 
            "title": "SDK Version"
        }, 
        {
            "location": "/pages/dashboard/timezone/", 
            "text": "Dashboard Analytics Time Zone\n\n\nThe dashboard's time zone ensures that data in the Branch dashboard is always presented consistently, no matter where in the world you may be when viewing your data. International teams can settle upon a fixed time zone and see Branch data in that time zone.\n\n\nThe time zone setting also allows you to import data from third parties, like Facebook and Google, and ensure that Branch data matches up with external sources.\n\n\nSetting or changing time zone\n\n\nThe time zone can be set in \nAccount Settings\n. \n\n\n\n\nSelect your time zone from the dropdown\n\n\nScroll down until you see the \nSave Settings\n button. Click \nSave Settings\n to save your time zone.\n\n\n\n\n\n\nChanging time zone\n\n\nBranch allows you to change your time zone. Changing your time zone will take effect after a page refresh, and will set your dashboard to use your new time zone. \nHowever\n we do not recommend changing time zone unless you have to, as it can cause discrepancies between previously exported data and the data in your dashboard. In the future, changing time zone may not be possible as we may store data in your specified time zone.", 
            "title": "Time zone support"
        }, 
        {
            "location": "/pages/dashboard/timezone/#dashboard-analytics-time-zone", 
            "text": "The dashboard's time zone ensures that data in the Branch dashboard is always presented consistently, no matter where in the world you may be when viewing your data. International teams can settle upon a fixed time zone and see Branch data in that time zone.  The time zone setting also allows you to import data from third parties, like Facebook and Google, and ensure that Branch data matches up with external sources.", 
            "title": "Dashboard Analytics Time Zone"
        }, 
        {
            "location": "/pages/dashboard/timezone/#setting-or-changing-time-zone", 
            "text": "The time zone can be set in  Account Settings .    Select your time zone from the dropdown  Scroll down until you see the  Save Settings  button. Click  Save Settings  to save your time zone.    Changing time zone  Branch allows you to change your time zone. Changing your time zone will take effect after a page refresh, and will set your dashboard to use your new time zone.  However  we do not recommend changing time zone unless you have to, as it can cause discrepancies between previously exported data and the data in your dashboard. In the future, changing time zone may not be possible as we may store data in your specified time zone.", 
            "title": "Setting or changing time zone"
        }, 
        {
            "location": "/pages/web/deep-views/", 
            "text": "Overview\n\n\nA Deepview is a mobile web splash page, hosted by Branch, that gives a preview of the in-app content behind a given Branch link. When a visitor opens one of your Branch links and does not have your app installed, you can show them a Deepview instead of sending them directly to the App/Play Store.\n\n\nDeepviews are discoverable in all search portals (Google, Apple Spotlight, Bing, etc), opening up new mechanisms for people to find your app, and drive much higher conversions to install than sending visitors to the App/Play Store directly. Here's an example flow:\n\n\n\n\n\n\nIntended for apps without a mobile website\n\n\nIf you already have a mobile website with content, \nJourneys\n is better suited.\n\n\n\n\nSetup\n\n\nEnable Deepviews\n\n\n\n\nHead to the \nDeepviews configuration page\n on the Branch dashboard.\n\n\nDeepviews are configured separately for visitors on each platform (iOS, Android, and desktop). Select the platforms you want and click \nEnable\n.\n\n\n\n\n\n\n\n\nWarning\n\n\nIf you enable desktop Deepviews, they will override any \nText-Me-The-App\n page you have configured.\n\n\n\n\n\n\nChanging the app icon\n\n\nIf we pulled the wrong app icon, you can upload a new one in the \nSocial Media Display Customization\n section of the \ndashboard Settings\n.\n\n\n\n\nView Analytics\n\n\nBranch lets you track the flow of users through Deepviews. You can find this information on the \nsummary page\n of the Branch dashboard.\n\n\n\n\nThere are various metrics to understand when deep linking from your mobile website.\n\n\n\n\nViews:\n a user viewed the mobile site.\n\n\nClicks:\n a user clicked on the Deepview CTA\n\n\nInstalls:\n a user installed the app for the first time\n\n\nUpgrades:\n a user re-opened or upgraded the app from a previous version\n\n\n\n\nOnly users who do not have the app will go through this flow. You can view the total counts and conversion rate from each step on this chart.\n\n\nAdvanced\n\n\nCustomizing Deepviews\n\n\nThe default Deepview template simply displays the content from three of the link's \ncontrol parameters\n. You can specify the content of these parameters when creating your link to control what will display in that link\u2019s Deepview. If nothing is set for a particular link, we will gracefully fall back to the OG values set for your entire app in \nSettings \n Link Settings \n Social Media Display Customization.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n$og_title\n\n\nThe title you'd like to appear on the deepview\n\n\n\n\n\n\n$og_description\n\n\nThe description you'd like to appear on the deepview\n\n\n\n\n\n\n$og_image_url\n\n\nThe URL for the image you'd like to appear on the deepview\n\n\n\n\n\n\n\n\n\n\nHosting your own OG tags\n\n\nIf you want to use OG tags you host elsewhere, leave these parameters empty and specify a \n$desktop_url\n control parameter when you create the link. Branch will perform a one-time scrape to populate the Deepview using the OG tags from the URL you specify.\n\n\n\n\nIf you're creating a link by appending query parameters, just append the parameters to the URL. Please make sure to URL encode everything, lest the link will break.\n\n\nhttps://[branchsubdomain]?%24og_title=MyApp%20is%20disrupting%20apps\n$og_image_url=http%3A%2F%2Fmyapp.com%2Fimage.png\n\n\n\n\n\nWhen you create links via a mobile SDK, you simply need to set the OG tag parameters. Below are few examples, but you can \nsee every platform here\n.\n\n\n\n\n\n\niOS - Objective C\n\n\nBranchUniversalObject\n \n*\nbranchUniversalObject\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nitem/12345\n];\n\n\n// Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \n@\nMy Content Title\n;\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \n@\nMy Content Description\n;\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \n@\nhttps://example.com/mycontent-12345.png\n;\n\n\n\n// Add any additional custom OG tags here\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\n$og_video\n \nvalue\n:\n@\nhttp://mysite/video.mpg\n];\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/12345\n)\n\n\n// Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \nMy Content Title\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \nMy Content Description\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \nhttps://example.com/mycontent-12345.png\n\n\n\n// Add any additional custom OG tags here\n\n\nbranchUniversalObject\n.\naddMetadataKey\n(\n$og_video\n,\n \nvalue\n:\n \nhttp://mysite/video.mpg\n)\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n \nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n                \n.\nsetCanonicalIdentifier\n(\nitem/12345\n)\n\n\n// Facebook OG tags -- This will overwrite any defaults you have set on the Branch Dashboard\n\n                \n.\nsetTitle\n(\nMy Content Title\n)\n\n                \n.\nsetContentDescription\n(\nMy Content Description\n)\n\n                \n.\nsetContentImageUrl\n(\nhttps://example.com/mycontent-12345.png\n)\n\n\n\n// Add any additional custom OG tags here\n\n                \n.\nsetContentMetadata\n(\nnew\n \nContentMetadata\n().\naddCustomMetadata\n(\n$og_video\n,\n \nhttp://mysite/video.mpg\n));\n\n\n\n\n\n\n\n\n\nEdit the Title, Description and Image URL in the \nSocial Media\n section.\n\n\n\n\nNote:\n the \nDeep Link\n section accepts most link control parameters, but \n$og_title\n, \n$og_description\n and \n$og_image_url\n \ncannot\n be specified there.\n\n\nEnable per-link Deepviews\n\n\nIf you don't want to enable Deepviews globally, you can do it for each platform on a per link basis by inserting custom link control parameters \nlink control parameters\n.\n\n\nEnable Desktop Deepviews by appending query parameters:\n\n\nhttps://[branchsubdomain]?%24desktop_deepview=default_template\n%24ios_deepview=default_template\n\n\n\n\n\nEnable iOS and Android Deepviews through the SDK. Below are few examples, but you can \nsee every platform here\n\n\n\n\n\n\niOS - Objective C\n\n\nBranchLinkProperties\n \n*\nlinkProperties\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlinkProperties\n.\nfeature\n \n=\n \n@\nsharing\n;\n\n\nlinkProperties\n.\nchannel\n \n=\n \n@\nfacebook\n;\n\n\n[\nlinkProperties\n \naddControlParam\n:\n@\n$ios_deepview\n \nwithValue\n:\n@\ndefault_template\n];\n\n\n[\nlinkProperties\n \naddControlParam\n:\n@\n$android_deepview\n \nwithValue\n:\n@\ndefault_template\n];\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nlet\n \nlinkProperties\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlinkProperties\n.\nfeature\n \n=\n \nsharing\n\n\nlinkProperties\n.\nchannel\n \n=\n \nfacebook\n\n\nlinkProperties\n.\naddControlParam\n(\n$ios_deepview\n,\n \nwithValue\n:\n \ndefault_template\n)\n\n\nlinkProperties\n.\naddControlParam\n(\n$android_deepview\n,\n \nwithValue\n:\n \ndefault_template\n)\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nLinkProperties linkProperties = new LinkProperties()\n               .setChannel(\nfacebook\n)\n               .setFeature(\nsharing\n)\n               .addControlParameter(\n$ios_deepview\n, \ndefault_template\n)\n               .addControlParameter(\n$android_deepview\n, \ndefault_template\n);\n\n\n\n\n\n\n\n\nFinally, enable Deepviews for an individual link on the \nMarketing dashboard\n by selecting Deepviews as a redirect option under the second page.\n\n\n\n\nDisable per-link Deepviews\n\n\nIf you've enabled Deepviews globally, it's likely that you'll want to disable them now and again for specific use cases. To do so, just follow the instructions for \nenabling Deepviews for one link\n and set one or more of the key values to \nfalse\n.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n$ios_deepview\n\n\nfalse\n\n\n\n\n\n\n$android_deepview\n\n\nfalse\n\n\n\n\n\n\n$desktop_deepview\n\n\nfalse\n\n\n\n\n\n\n\n\nWhen creating Quick Links on the Branch dashboard\n\n\nYou can disable Deepviews for an individual link on the \nMarketing dashboard\n by selecting Deepviews as a redirect option in Configure Options \n Redirects and setting it to false.\n\n\n\n\nCreate New Deepview Templates\n\n\nYou can create new Deepview templates using the \nDeepviews configuration page\n on the Branch dashboard, either by duplicating the default Branch Public Template, or by creating a new one from scratch. New Deepview templates are shared between all platforms (iOS, Android, and desktop), and cannot be deleted after creation.\n\n\n\n\nThe Deepview editing screen contains two tabs: \nBasic\n and \nEditor\n.\n\n\nBasic\n\n\nThe Basic tab displays your new template, and allows you to modify the default fallback OG tags used if none are specified for a link.\n\n\n\n\nDeepview Settings\n\n\n\n\n\n\n\n\nSetting\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nTitle\n\n\nInternal name for your reference\n\n\n\n\n\n\nKey\n\n\nThe value that you will reference when creating a link. E.g., \n$ios_deepview: [key]\n\n\n\n\n\n\n\n\nApp Settings\n\n\n\n\nThese fields are duplicates of the \nSocial Media\n section of your app's \nmain link settings page\n. Any updates will be applied in both locations.\n\n\n\n\n\n\n\n\n\n\nSetting\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nOG Title\n\n\nDefault value used if \n$og_title\n is not specified for a link.\n\n\n\n\n\n\nOG Description\n\n\nDefault value used if \n$og_description\n is not specified for a link.\n\n\n\n\n\n\nOG Image Url\n\n\nDefault value used if \n$og_image_url\n is not specified for a link.\n\n\n\n\n\n\n\n\nEdit Deepview Templates\n\n\nYou can use the Deepview editor to edit created templates. You cannot edit pre-created templates. The Editor tab allows you to edit the raw HTML and CSS for your template. The rendered template will update as you modify the markup.\n\n\n\n\n\n\nJavascript not allowed\n\n\nBefore rendering the template, we sanitize the markup of Javascript for security reasons. This includes script tags and event attributes on tags.\n\n\n\n\nInject Other Data Into Deepviews\n\n\nBy customizing your Deepview template, you have the ability to pass through other parameters from your link's \ndata dictionary\n.\n\n\nHere's a full list of liquid available tags:\n\n\napp\n\n\nThis is the App object, which contains app data not specific to any link. This will allow you to surface information like your app name or other properties. You can surface this object in your Deepview like so:\n\n\n{{\napp\n}}\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\napp.branch_key\n\n\nYour Branch key from \nSettings\n.\n\n\n\n\n\n\napp.name\n\n\nThe name of your app from \nSettings\n.\n\n\n\n\n\n\napp.og_title\n\n\nThe \nLink Title\n set in the \nSocial Media Display Customization\n section of your app's \nLink Settings\n.\n\n\n\n\n\n\napp.og_description\n\n\nThe \nDescription\n set in the \nSocial Media Display Customization\n section of your app's \nLink Settings\n.\n\n\n\n\n\n\napp.og_image_url\n\n\nThe \nThumbnail Image\n set in the \nSocial Media Display Customization\n section of your app's \nLink Settings\n.\n\n\n\n\n\n\n\n\n\n\nIf you want to show your app's name inside a Deepview, you would expose it like so: \nh1\nGet {% raw %}{{app.name}}{% endraw %}\n/h1\n\n\n\n\nlink data\n\n\nLink Object, which contains all of your link's parameters, including your deep link values from the data dictionary. See the \nConfiguring Links\n page for more information. You can surface this object in your Deepview like so:\n\n\n{{\nlink_data\n}}\n\n\n\n\n\n\n\nIf you want to expose a key value pair of \n'welcome_message' : 'Welcome to my App'\n, you would do the following: \nh1\n{% raw %}{{link_data.welcome_message}}{% endraw %}\n/h1\n, and this would render \nWelcome to my App\n.\n\n\n\n\naction\n\n\nThe URL of the Branch link itself. If you create a new call to action in your Deepview, use this. You can surface this object in your Deepview like so:\n\n\n{{\naction\n}}\n\n\n\n\n\n\n\nCreate a new call to action link: \na href=\"{% raw %}{{action}}{% endraw %}\"\nClick\n/a\n.\n\n\n\n\nGlossary\n\n\nActive Deepviews\n\n\nActive deepviews should only show when the app is \nnot\n installed (or when direct deep linking doesn't work like in the Facebook webview), and pause on the deepview page. These let the user preview the content, ultimately deciding if they want to install the app. The user must click the call-to-action of \nGet The App\n in order to be sent to the appropriate App or Play Store page.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nDefault Template\n\n\n\n\n\n\n\n\n\n\n$ios_deepview\n\n\nThe name of the template to use for iOS.\n\n\ndefault_template\n\n\n\n\n\n\n$android_deepview\n\n\nThe name of the template to use for Android.\n\n\ndefault_template\n\n\n\n\n\n\n$desktop_deepview\n\n\nThe name of the template to use for the desktop.\n\n\ndefault_template\n\n\n\n\n\n\n\n\nPassive Deepviews\n\n\nPassive deepviews should also only appear when the app is \nnot\n installed, but instead of pausing on the deepview page, they will attempt to redirect to the App/Play Store immediately without the user taking action. These should be used when you don't want a blank white screen to be left in a browser after the user clicks a link to go install your app. Note that these are automatically enabled in Safari iOS 10.3 and Facebook iOS webviews if you're attempting to redirect to your Store page.\n\n\nTo disable passive deepviews, simply set the value to \nfalse\n in the link data.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\n$ios_passive_deepview\n\n\nThe name of the template to use for iOS.\n\n\ndefault_template\n\n\n\n\n\n\n$android_passive_deepview\n\n\nThe name of the template to use for Android.\n\n\ndefault_template\n\n\n\n\n\n\n\n\nTo enable another template as the default passive deepview, select the 'Set as Passive Default' option. You can also change the template \non a link level\n by providing the template name in the \ncontrol parameters\n. If you're creating a link by appending query parameters, you simply need to append the parameters to the URL. Please make sure to URL encode everything, lest the link will break.", 
            "title": "Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#overview", 
            "text": "A Deepview is a mobile web splash page, hosted by Branch, that gives a preview of the in-app content behind a given Branch link. When a visitor opens one of your Branch links and does not have your app installed, you can show them a Deepview instead of sending them directly to the App/Play Store.  Deepviews are discoverable in all search portals (Google, Apple Spotlight, Bing, etc), opening up new mechanisms for people to find your app, and drive much higher conversions to install than sending visitors to the App/Play Store directly. Here's an example flow:    Intended for apps without a mobile website  If you already have a mobile website with content,  Journeys  is better suited.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/web/deep-views/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/web/deep-views/#enable-deepviews", 
            "text": "Head to the  Deepviews configuration page  on the Branch dashboard.  Deepviews are configured separately for visitors on each platform (iOS, Android, and desktop). Select the platforms you want and click  Enable .     Warning  If you enable desktop Deepviews, they will override any  Text-Me-The-App  page you have configured.    Changing the app icon  If we pulled the wrong app icon, you can upload a new one in the  Social Media Display Customization  section of the  dashboard Settings .", 
            "title": "Enable Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#view-analytics", 
            "text": "Branch lets you track the flow of users through Deepviews. You can find this information on the  summary page  of the Branch dashboard.   There are various metrics to understand when deep linking from your mobile website.   Views:  a user viewed the mobile site.  Clicks:  a user clicked on the Deepview CTA  Installs:  a user installed the app for the first time  Upgrades:  a user re-opened or upgraded the app from a previous version   Only users who do not have the app will go through this flow. You can view the total counts and conversion rate from each step on this chart.", 
            "title": "View Analytics"
        }, 
        {
            "location": "/pages/web/deep-views/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/web/deep-views/#customizing-deepviews", 
            "text": "The default Deepview template simply displays the content from three of the link's  control parameters . You can specify the content of these parameters when creating your link to control what will display in that link\u2019s Deepview. If nothing is set for a particular link, we will gracefully fall back to the OG values set for your entire app in  Settings   Link Settings   Social Media Display Customization.     Key  Value      $og_title  The title you'd like to appear on the deepview    $og_description  The description you'd like to appear on the deepview    $og_image_url  The URL for the image you'd like to appear on the deepview      Hosting your own OG tags  If you want to use OG tags you host elsewhere, leave these parameters empty and specify a  $desktop_url  control parameter when you create the link. Branch will perform a one-time scrape to populate the Deepview using the OG tags from the URL you specify.   If you're creating a link by appending query parameters, just append the parameters to the URL. Please make sure to URL encode everything, lest the link will break.  https://[branchsubdomain]?%24og_title=MyApp%20is%20disrupting%20apps $og_image_url=http%3A%2F%2Fmyapp.com%2Fimage.png   When you create links via a mobile SDK, you simply need to set the OG tag parameters. Below are few examples, but you can  see every platform here .    iOS - Objective C  BranchUniversalObject   * branchUniversalObject   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ item/12345 ];  // Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard  branchUniversalObject . title   =   @ My Content Title ;  branchUniversalObject . contentDescription   =   @ My Content Description ;  branchUniversalObject . imageUrl   =   @ https://example.com/mycontent-12345.png ;  // Add any additional custom OG tags here  [ branchUniversalObject   addMetadataKey : @ $og_video   value : @ http://mysite/video.mpg ];     iOS - Swift  let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   item/12345 )  // Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard  branchUniversalObject . title   =   My Content Title  branchUniversalObject . contentDescription   =   My Content Description  branchUniversalObject . imageUrl   =   https://example.com/mycontent-12345.png  // Add any additional custom OG tags here  branchUniversalObject . addMetadataKey ( $og_video ,   value :   http://mysite/video.mpg )     Android    BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n                 . setCanonicalIdentifier ( item/12345 )  // Facebook OG tags -- This will overwrite any defaults you have set on the Branch Dashboard \n                 . setTitle ( My Content Title ) \n                 . setContentDescription ( My Content Description ) \n                 . setContentImageUrl ( https://example.com/mycontent-12345.png )  // Add any additional custom OG tags here \n                 . setContentMetadata ( new   ContentMetadata (). addCustomMetadata ( $og_video ,   http://mysite/video.mpg ));     Edit the Title, Description and Image URL in the  Social Media  section.   Note:  the  Deep Link  section accepts most link control parameters, but  $og_title ,  $og_description  and  $og_image_url   cannot  be specified there.", 
            "title": "Customizing Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#enable-per-link-deepviews", 
            "text": "If you don't want to enable Deepviews globally, you can do it for each platform on a per link basis by inserting custom link control parameters  link control parameters .  Enable Desktop Deepviews by appending query parameters:  https://[branchsubdomain]?%24desktop_deepview=default_template %24ios_deepview=default_template   Enable iOS and Android Deepviews through the SDK. Below are few examples, but you can  see every platform here    iOS - Objective C  BranchLinkProperties   * linkProperties   =   [[ BranchLinkProperties   alloc ]   init ];  linkProperties . feature   =   @ sharing ;  linkProperties . channel   =   @ facebook ;  [ linkProperties   addControlParam : @ $ios_deepview   withValue : @ default_template ];  [ linkProperties   addControlParam : @ $android_deepview   withValue : @ default_template ];     iOS - Swift  let   linkProperties :   BranchLinkProperties   =   BranchLinkProperties ()  linkProperties . feature   =   sharing  linkProperties . channel   =   facebook  linkProperties . addControlParam ( $ios_deepview ,   withValue :   default_template )  linkProperties . addControlParam ( $android_deepview ,   withValue :   default_template )     Android  LinkProperties linkProperties = new LinkProperties()\n               .setChannel( facebook )\n               .setFeature( sharing )\n               .addControlParameter( $ios_deepview ,  default_template )\n               .addControlParameter( $android_deepview ,  default_template );    Finally, enable Deepviews for an individual link on the  Marketing dashboard  by selecting Deepviews as a redirect option under the second page.", 
            "title": "Enable per-link Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#disable-per-link-deepviews", 
            "text": "If you've enabled Deepviews globally, it's likely that you'll want to disable them now and again for specific use cases. To do so, just follow the instructions for  enabling Deepviews for one link  and set one or more of the key values to  false .     Key  Value      $ios_deepview  false    $android_deepview  false    $desktop_deepview  false     When creating Quick Links on the Branch dashboard  You can disable Deepviews for an individual link on the  Marketing dashboard  by selecting Deepviews as a redirect option in Configure Options   Redirects and setting it to false.", 
            "title": "Disable per-link Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#create-new-deepview-templates", 
            "text": "You can create new Deepview templates using the  Deepviews configuration page  on the Branch dashboard, either by duplicating the default Branch Public Template, or by creating a new one from scratch. New Deepview templates are shared between all platforms (iOS, Android, and desktop), and cannot be deleted after creation.   The Deepview editing screen contains two tabs:  Basic  and  Editor .  Basic  The Basic tab displays your new template, and allows you to modify the default fallback OG tags used if none are specified for a link.   Deepview Settings     Setting  Usage      Title  Internal name for your reference    Key  The value that you will reference when creating a link. E.g.,  $ios_deepview: [key]     App Settings   These fields are duplicates of the  Social Media  section of your app's  main link settings page . Any updates will be applied in both locations.      Setting  Usage      OG Title  Default value used if  $og_title  is not specified for a link.    OG Description  Default value used if  $og_description  is not specified for a link.    OG Image Url  Default value used if  $og_image_url  is not specified for a link.", 
            "title": "Create New Deepview Templates"
        }, 
        {
            "location": "/pages/web/deep-views/#edit-deepview-templates", 
            "text": "You can use the Deepview editor to edit created templates. You cannot edit pre-created templates. The Editor tab allows you to edit the raw HTML and CSS for your template. The rendered template will update as you modify the markup.    Javascript not allowed  Before rendering the template, we sanitize the markup of Javascript for security reasons. This includes script tags and event attributes on tags.", 
            "title": "Edit Deepview Templates"
        }, 
        {
            "location": "/pages/web/deep-views/#inject-other-data-into-deepviews", 
            "text": "By customizing your Deepview template, you have the ability to pass through other parameters from your link's  data dictionary .  Here's a full list of liquid available tags:  app  This is the App object, which contains app data not specific to any link. This will allow you to surface information like your app name or other properties. You can surface this object in your Deepview like so:  {{ app }}      Key  Usage      app.branch_key  Your Branch key from  Settings .    app.name  The name of your app from  Settings .    app.og_title  The  Link Title  set in the  Social Media Display Customization  section of your app's  Link Settings .    app.og_description  The  Description  set in the  Social Media Display Customization  section of your app's  Link Settings .    app.og_image_url  The  Thumbnail Image  set in the  Social Media Display Customization  section of your app's  Link Settings .      If you want to show your app's name inside a Deepview, you would expose it like so:  h1 Get {% raw %}{{app.name}}{% endraw %} /h1   link data  Link Object, which contains all of your link's parameters, including your deep link values from the data dictionary. See the  Configuring Links  page for more information. You can surface this object in your Deepview like so:  {{ link_data }}    If you want to expose a key value pair of  'welcome_message' : 'Welcome to my App' , you would do the following:  h1 {% raw %}{{link_data.welcome_message}}{% endraw %} /h1 , and this would render  Welcome to my App .   action  The URL of the Branch link itself. If you create a new call to action in your Deepview, use this. You can surface this object in your Deepview like so:  {{ action }}    Create a new call to action link:  a href=\"{% raw %}{{action}}{% endraw %}\" Click /a .", 
            "title": "Inject Other Data Into Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#glossary", 
            "text": "", 
            "title": "Glossary"
        }, 
        {
            "location": "/pages/web/deep-views/#active-deepviews", 
            "text": "Active deepviews should only show when the app is  not  installed (or when direct deep linking doesn't work like in the Facebook webview), and pause on the deepview page. These let the user preview the content, ultimately deciding if they want to install the app. The user must click the call-to-action of  Get The App  in order to be sent to the appropriate App or Play Store page.     Key  Value  Default Template      $ios_deepview  The name of the template to use for iOS.  default_template    $android_deepview  The name of the template to use for Android.  default_template    $desktop_deepview  The name of the template to use for the desktop.  default_template", 
            "title": "Active Deepviews"
        }, 
        {
            "location": "/pages/web/deep-views/#passive-deepviews", 
            "text": "Passive deepviews should also only appear when the app is  not  installed, but instead of pausing on the deepview page, they will attempt to redirect to the App/Play Store immediately without the user taking action. These should be used when you don't want a blank white screen to be left in a browser after the user clicks a link to go install your app. Note that these are automatically enabled in Safari iOS 10.3 and Facebook iOS webviews if you're attempting to redirect to your Store page.  To disable passive deepviews, simply set the value to  false  in the link data.     Key  Value  Default      $ios_passive_deepview  The name of the template to use for iOS.  default_template    $android_passive_deepview  The name of the template to use for Android.  default_template     To enable another template as the default passive deepview, select the 'Set as Passive Default' option. You can also change the template  on a link level  by providing the template name in the  control parameters . If you're creating a link by appending query parameters, you simply need to append the parameters to the URL. Please make sure to URL encode everything, lest the link will break.", 
            "title": "Passive Deepviews"
        }, 
        {
            "location": "/pages/web/journeys/", 
            "text": "Overview\n\n\nOn a daily basis, Google Search drives \nmore app installs\n than all of Facebook's paid install products combined. Converting your mobile web visitors into native app users is one of the most effective acquisition channels available, and Branch's Journeys App Banners platform makes this easy.\n\n\n\n\n\n\nCustomizable presentation.\n WYSIWYG designer for smart banner or full-page interstitial, with more coming soon.\n\n\nPowerful targeting rules.\n Want to show your Journey only visitors without your app installed already? All iOS users from Japan? Just users viewing your checkout page? Android users who have visited your website twice AND purchased something using your app? The possibilities are infinite.\n\n\nAMP-compatible.\n You can convert mobile search traffic to your app by \nshowing Journeys on AMP pages\n.\n\n\nRun A/B tests.\n Design multiple campaign versions to see which converts most effectively.\n\n\nOptimized user experience.\n If installed, your app will open and users can be routed directly to the content they expect. If not, the App/Play store will open and users can still be routed directly to the content they expect after installing.\n\n\nComprehensive analytics.\n Measure the downstream performance and retention of every Journeys campaign.\n\n\n\n\n\n\nJourneys is a paid product\n\n\nJourneys introduces many more advanced features on top of the basic smart app banner functionality, but \nyou can still create an Android and iOS smart app banner for free if your MAU are under 20k\n. After 20k MAU, we'd ask that you pay a small fee for use. Premium-only advanced features (including the option to run multiple Journeys simultaneously) are available through a 14 day trial.\n\n\n\n\n\n\nPre-reqs\n\n\nYou should integrate the Branch SDK into your app and configure deep link routing for deferred deep linking and attribution before implementing Journeys.\n\n\n\n\nSetup\n\n\n\n\nInclude your alternate domain for Universal Links\n\n\nJourneys uses your alternate domain for Universal Links. Make sure you include your \nxxxx-alternate.app.link\n domain in your \nAssociated Domains\n. If you use a custom domain or subdomain for your Branch links, you should instead add entries for \napplinks:[mycustomdomainorsubdomain]\n and \nXXXX-alternate.app.link\n. If you\u2019re unsure of your Branch-assigned app.link subdomain, \ncontact support\n, and we can provide it.\n\n\n\n\nAdd the Branch Web SDK to your site\n\n\nAdd the following code somewhere inside the \nhead\n/head\n tags on your website. More information about this SDK can be found in the \nGithub README\n.\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\n(\nfunction\n(\nb\n,\nr\n,\na\n,\nn\n,\nc\n,\nh\n,\n_\n,\ns\n,\nd\n,\nk\n){\nif\n(\n!\nb\n[\nn\n]\n||!\nb\n[\nn\n].\n_q\n){\nfor\n(;\ns\n_\n.\nlength\n;)\nc\n(\nh\n,\n_\n[\ns\n++\n]);\nd\n=\nr\n.\ncreateElement\n(\na\n);\nd\n.\nasync\n=\n1\n;\nd\n.\nsrc\n=\nhttps://cdn.branch.io/branch-latest.min.js\n;\nk\n=\nr\n.\ngetElementsByTagName\n(\na\n)[\n0\n];\nk\n.\nparentNode\n.\ninsertBefore\n(\nd\n,\nk\n);\nb\n[\nn\n]\n=\nh\n}})(\nwindow\n,\ndocument\n,\nscript\n,\nbranch\n,\nfunction\n(\nb\n,\nr\n){\nb\n[\nr\n]\n=\nfunction\n(){\nb\n.\n_q\n.\npush\n([\nr\n,\narguments\n])}},{\n_q\n:\n[],\n_v\n:\n1\n},\naddListener applyCode banner closeBanner creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode\n.\nsplit\n(\n \n),\n \n0\n);\n\n\nbranch\n.\ninit\n(\nYOUR-BRANCH-KEY\n);\n\n\n/\nscript\n\n\n\n\n\n\n\nWarning\n\n\nBe sure to replace \nYOUR-BRANCH-KEY\n with your Branch Key inside the \ninit()\n call. You can find your Branch Key on the Dashboard\u2019s \nSettings\n page.\n\n\n\n\nDeep linking from the banner or interstitial\n\n\nLike all Branch deep links, you can pass custom parameters by specifying keys in the link's \ndata dictionary\n. This is useful if you are showing the Smart Banner on a website page with equivalent in-app content, because you can route directly to that content in your app.\n\n\nThis example will take the visitor straight to a picture with id \u201c12345\u201d after installing and opening the app.\n\n\nbranch\n.\nsetBranchViewData\n({\n\n    \ndata\n:\n \n{\n\n        \n$deeplink_path\n:\n \npicture/12345\n,\n\n        \npicture_id\n:\n \n12345\n,\n\n        \nuser_id\n:\n \n45123\n\n    \n}\n\n\n});\n\n\n\n\n\nAlternatively, you can dynamically specify the deep link path depending on which website page is loaded.\n\n\nbranch\n.\nsetBranchViewData\n({\n\n    \ndata\n:\n \n{\n\n        \n$deeplink_path\n:\n \nwindow\n.\nlocation\n.\npathname\n \n+\n \nwindow\n.\nlocation\n.\nsearch\n \n+\n \nwindow\n.\nlocation\n.\nhash\n,\n\n        \nuser_id\n:\n \n45123\n\n    \n}\n\n\n});\n\n\n\n\n\nIf a user is referred to a page running Journeys via a Branch link, then referring link data will be passed into the Journeys call-to-action by default. If you\u2019re using setBranchViewData() to specify link data for Journeys on that page, the only data from setBranchViewData() that will be used are \ndynamic Journeys layout parameters\n; all other data in that call will be ignored, unless \nmake_new_link\n is set to \ntrue\n in \nbranch.init()\n. You can find more information \nhere\n.\n\n\nCreate Journey banner or interstitial\n\n\n\n\nHead to the \nJourneys page\n on the Branch dashboard.\n\n\nClick the \nCreate New Journey\n button to get started.\n\n\n\n\n\n\n\n\nIn the \nJourney Name:\n field, enter a name to use for internal reference (this will never be shown to your users).\n\n\n\n\n\n\nSelect audience\n\n\nYou can customize the audience that will see your Journey by choosing the target platform, device, and region.\n\n\nFor example, if you have users in many countries, you can create a separate Journey for each localization and use audience targeting rules to make sure users see the appropriate one.\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nPlatform\n\n\nBranch currently offers Journeys on one platform: \nMobile web\n. This will display for mobile users on your website. \nMore options coming soon.\n\n\n\n\n\n\nDevices\n\n\nWhich devices would you like to target? For example, if you only have an iOS app, then you might want to show a Journey only to users viewing your mobile website on iOS.\n\n\n\n\n\n\nRegions\n\n\nSelect one or more countries in which to display your Journey. Defaults to \nShow to All Regions\n\n\n\n\n\n\nAdditional Filters\n\n\nRead about advanced filtering criteria \nhere\n.\n\n\n\n\n\n\n\n\nSelect and style the banner or interstitial\n\n\n\n\nFirst, click the \nSelect a Template\n button. \n\n\nNext, click to select the type of template that you want to show. There are three template options:\n\n\nSmart Banner at bottom of screen.\n\n\nSmart Banner at top of screen\n\n\nFull Screen Interstitial (SEO friendly!)\n\n\nThe fourth option shown is an alternate preconfiguration of the full screen interstitial\n\n\n\n\n\n\nClick \nCustomize\n to make changes to the template.\n\n\nIn the \nCustomize Template\n heading, you may edit the the name to use for internal reference.\n\n\nClick any object in the preview to edit it. To see documentation on all customization options, \nclick here\n.\n\n\nWhen finished, click \nSave \n Close\n button to continue.\n\n\n\n\nNote about generic deep linking params\n If you are running a generic download campaign or a site-wide discount offer, your users would go to the same place inside your app regardless of where they originated on your website. You can configure this destination by setting \nDeep Link Data\n for the \nButton\n element when you \ncustomize your template options\n.\n\n\nValidate \n Test\n\n\nThis screen allows you to preview your Journey variations, and is where you can perform final validation and testing on your Journey before publishing it.\n\n\n\n\nPreview\n\n\nUse the dropdown menu to switch between your Journey variations.\n\n\n\n\nTo preview your Journey in your live, production website, enter your website URL in the \nTest on your mobile device\n field, and press the copy button. \nThe URL you enter must have the Branch Web SDK integrated and be using your Branch Key.\n\n\n\n\n\n\nHow does this work?\n\n\nThe Branch SDK integrated into your website listens for a unique, one-time URL parameter that is generated by the preview tool. It looks something like \n_branch_view_id=296449069883323397\n. When this parameter is detected, the SDK loads a temporary preview of that specific Journey. This parameter is only valid for your Branch Key, and will not work on any other website even if the Branch SDK is integrated.\n\n\n\n\nValidation\n\n\n\n\nThere are a number of errors and warnings you may encounter.\n\n\nWeb SDK errors\n\n\nYou must have the web SDK installed on your website to run a Journey.\n\n\nApp SDK warnings\n\n\nIf you choose to target iOS or Android users but haven\u2019t integrated those SDKs, your Journeys will still show on the correct devices and direct users to your app. However, you won\u2019t be able to get any install or event attribution for your Journeys, and you will not be able to deep link users to content inside your app. Be sure to integrate the Branch SDK into your app.\n\n\nAudience rule warnings\n\n\nYou will see a warning if your audience rules do not add up to 100%. If less than 100%, the remainder will see whatever is normal behavior for your website. Your Journey will still run.\n\n\nPremium account warnings\n\n\nIf you have built a Journey that includes premium-only functionality, you will see a warning, as certain features are only available by purchasing.\n\n\nManaging your Journeys App Banners\n\n\nThe \nJourneys Manager\n is your homepage for all of the personalized experiences create. You can turn Journeys on and off, clone them, or view performance.\n\n\n\n\nA Journey can have one of four states:\n\n\n\n\n\n\n\n\nState\n\n\nMeaning\n\n\nNext Stage\n\n\n\n\n\n\n\n\n\n\nDraft\n\n\nNot yet published, still editable\n\n\nActive\n\n\n\n\n\n\nActive\n\n\nLive for your users, read-only\n\n\nStopped\n\n\n\n\n\n\nStopped\n\n\nNot live for your users, read-only\n\n\nActive\n or \nArchived\n\n\n\n\n\n\nArchived\n\n\nNot live for your users, hidden from default manager view\n\n\nnone\n\n\n\n\n\n\n\n\nYou can activate a journey directly from the creation flow, or from \nStart\n in the Actions menus in the Journeys Manager.\n\n\n\n\n\n\nEditing a live Journey\n\n\nTo prevent corruption of historical analytics data, Journeys cannot be edited once they leave \nDraft\n status. However, you can \nClone\n a Journey and make changes to the new copy.\n\n\n\n\nPrioritizing Journeys\n\n\nThe Journeys Priority View allows you to set the priority of multiple Journeys when they \noverlap\n. They \noverlap\n when a single person is eligible to see multiple Journeys. You can prioritize the Journey that should show ahead of any others.\n\n\nLet's say you have two Journeys that may reach the same audience.\n\n\n\n\nA half page interstitial that promotes an offer on your \"Shoes\" category page.\n\n\nA smart banner that should show for all visitors.\n\n\n\n\nIn general, you'd like the interstitial to show ahead of the smart banner on the \"Shoes\" category page (where both audience segments overlap).\n\n\nTo prioritize Journeys, switch to the Priority View by clicking on the toggle.\n\n\n\n\nYou're now in Priority View.\n\n\n\n\nDrag and drop Journeys in the order you'd like them to show. The lower numbers mean higher priority (i.e. a Journey with priority 1 is going to show ahead of a Journey with priority 2).\n\n\n\n\n\n\n\n\nClick the \nSave\n button.\n\n\n\n\n\n\n\n\nYour Journeys have now been prioritized.\n\n\n\n\n\n\n\n\nCaution\n\n\nWhen you save Journeys priorities, \nALL\n Journeys will be prioritized in the order they appear in the table.\n\n\n\n\nFor more detailed Journeys prioritization questions, visit our \nAdvanced section\n.\n\n\nVisualizing Journeys performance\n\n\nAnalytics \n attribution\n\n\nJourneys map to \nstandard Branch analytics labels\n:\n\n\n\n\nAll Journeys: \nfeature\n = \njourneys\n\n\nEach Journey: \ncampaign\n = \n[Journey Name]\n\n\nIndividual Templates: \ntags\n = \n[Template Name]\n (+ any additional tags you specify during configuration)\n\n\n\n\nYou can access your Journey\u2019s performance by selecting \nView Performance\n from the actions menu in the Journeys Manager.\n\n\n\n\nUsing Source Analytics\n\n\nYou can also access Journeys analytics by selecting the above filters from the \nSource Analytics\n page of the Branch dashboard.\n\n\n\n\nTo compare all of your Journeys\n\n\n\n\nFilter by \nfeature\n = \njourneys\n\n\n\n\nTo compare variations within one Journey\n\n\n\n\nFilter by \nfeature\n = \njourneys\n\n\nFilter by \ncampaign\n = \n[Journey Name]\n\n\n\n\n\n\nAttribute Journeys events to referring links\n\n\nBy default, when users arrive on a page running Journeys via a Branch link, then any interaction with the Journey (click/install/re-open) will be attributed to the referring Branch link, rather than to the Journey. \nLearn how\n to attribute this data to the Journey instead.\n\n\n\n\nAdvanced\n\n\nAdvanced audience rules\n\n\nYou can target users on a more granular level - based on behavior like where they came from, whether they already have your app installed, and what they\u2019ve done on your website or in your app. We've created a bunch of great examples on the \nnext tab\n.\n\n\n\n\nHas completed event\n\n\nIf you have \ncustom event tracking\n set up, you can target users based on events that you define. For instance, you might want to show a Journey to users who have completed a purchase within the last week, or who add an item to their shopping cart more than three times.\n\n\n\n\n\nIs viewing a page url\n\n\nYou can define which subsets of your website the Journey will appear. For example, maybe you have a page \nyoursite.com/settings\n and \nyoursite.com/products/1234\n. You could fill in \nproducts\n here and only users visiting a URL with that substring present would see the Journey.\n\n\nHas visited web\n\n\nHere, you can use website visits to determine who to target. For instance, you might decide that someone who visits your site five times is ready to see a Journey with some extra incentive to open the app.\n\n\nHas visited the app\n\n\nSimilar to visited web, you can target users by number of app visits. For example, someone who has visited the app two times and opens up the mobile web could be lured back into the app with a Journey.\n\n\nHas the app installed\n\n\nYou might choose to only show a Journey that asks a user to open the app to those that already have it installed.\n\n\nHas clicked on ad\n\n\nA user is grouped into \"Has clicked on Ad\" when they've clicked a link from \nDeep Linked Feeds\n.\n\n\nUse this to target users who have been part of an ad campaign to improve your ROI; maybe with a specific call to action to open the app and buy something if they've also never made a purchase in the app.\n\n\nThe technical definition is that they've clicked on a link with an Ad Network's custom \n$3p\n value in link data, but you just need to consider the way the link is created - in this case, through Deep Linked Feeds.\n\n\nHas clicked on email\n\n\nA user is grouped into \"Has clicked on Email\" when they've clicked a link from \nDeep Linked Email\n.\n\n\nUse this to target users who have been part of an email campaign; maybe with a specific call to action to get them download the app if they don't have it and they've landed on mobile web.\n\n\nThe technical definition is that they've clicked on a link with an Email Service Provider's custom \n$3p\n value in link data, but you just need to consider the way the link is created - in this case, through a Deep Linked Email integration.\n\n\nIs viewing a page with metadata key\n\n\nUse this filter to target users viewing web pages with certain metadata specified. This data can be specified in HTML \nmeta\n tags on a webpage, passed in as options in the \ninit()\n call that you use to initialize the Branch web SDK, or passed in using the \ntrack()\n call in Branch\u2019s web SDK. Note that if you opt to use HTML \nmeta\n tags, your tags should be formatted as \nBranch hosted deep link data\n.\n\n\nFor example, you could target users on pages containing the metadata key \u201cfoo\u201d and value \u201cbar\u201d by adding this tag to the page\u2019s HTML: \nmeta name=\"branch:deeplink:foo\" content=\"bar\" /\n\n\nOr by initializing Branch\u2019s web SDK with the following options object:\n\n\nbranch\n.\ninit\n(\n \nBRANCH_KEY\n,\n\n    \n{\n\n        \nmetadata\n \n:\n \n{\n\n            \nfoo\n \n:\n \nbar\n\n        \n}\n\n    \n}\n\n\n);\n\n\n\n\n\nOr, finally, by using the track() call to \nprogrammatically trigger a Journey to show\n:\n\n\nbranch\n.\ntrack\n(\n\u2018\npageview\n\u2019\n,\n\n    \n{\n\n        \n\u2018\nfoo\n\u2019\n \n:\n \n\u2018\nbar\n\u2019\n\n    \n}\n\n\n);\n\n\n\n\n\nOnce metadata has been specified on a page in any or all of the three locations specified above, you can target users on that page using the \u201cIs viewing a page with metadata key\u201d audience filter. If metadata with the same key has been specified in either \ninit()\n or \ntrack()\n \nand\n in an HTML \nmeta\n tag, the metadata passed into either \ninit()\n or \ntrack()\n will take precedence.\n\n\nSet up split testing\n\n\nNote that if you are planning on just using the free banner, you can skip this section. This feature allows you to run A/B tests by designing multiple templates and assigning a percentage of your audience to each one.\n\n\n\n\nClick the \nAdd Variation\n button to add another design variation. \n\n\nTo remove an unwanted variation, click the \n-\n button. \n\n\nUse the percentage fields to control the ratio of your audience that will see each variation.\n\n\n\n\n\n\nVariation Display Limitations\n\n\nYou may have up to three variations in each Journey. Your total percentage allocation must not equal more than \n100%\n. Your total percentage allocation may be \nless\n than \n100%\n. In this situation, the remainder of your audience will be shown your standard website without a Journey. This allows you to A/B test against your non-Journeys website experience.\n\n\n\n\nAuto-open\n\n\nYou can auto-open the app for users have your app installed with Journeys. You can find this setting by selecting the CTA in the template editor:\n\n\n\n\nWhen this box is checked, if a user views this Journey variation on your website and they have the app installed, the app will automatically open without them clicking.\n\n\n\n\nAs opening the app automatically is the best user experience in most cases, this is checked by default for all new templates. \n\n\n\n\nWeb SDK open app setting\n\n\nIf you use the open_app setting within the web SDK, this setting will still work for old Journeys (older than 10/25). For all new Journeys, the template setting will take precedence.\n\n\n\n\n\n\nOpen app behavior in in-app webviews\n\n\nPlease avoid using the Branch Web SDK on webpages inside of native webviews. The Branch Web SDK's auto-open can cause unexpected user experiences.\n\n\n\n\nAuto-open the app on iOS\n\n\nThe auto-open setting in the template editor will work on iOS Chrome and Android. Because auto-open is powered by URI schemes and these can lead to error messages on iOS Safari for users without your app, this is not enabled on iOS by default. \n\n\nIf you would like the app to open automatically on iOS Safari as well, you'll need to use a setting called \n$uri_redirect_mode\n. Since Branch has a massive pool of cookies tied to device identifiers, we know if your app is installed when the user clicks a link. We use this intelligence to determine when to use URI schemes. If we have the history that the user installed your app, we\u2019ll use URI schemes to open up the app. \n\n\nYou can \nreach out to support\n to enable this behavior across all your links, or set it just for Journeys in the web SDK:\n\n\nscript\n \ntype=\ntext/javascript\n\n// load the Branch web lib\n(function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s\n_.length\n;)c(h,_[s++]);\nd=\nr.createElement(a);d.async=1;d.src=\nbuild.min.js\n;k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,\nscript\n,\nbranch\n,function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},\naddListener\n \napplyCode\n \nbanner\n \ncloseBanner\n \ncreditHistory\n \ncredits\n \ndata\n \ndeepview\n \ndeepviewCta\n \nfirst\n \ngetCode\n \ninit\n \nlink\n \nlogout\n \nredeem\n \nreferrals\n \nremoveListener\n \nsendSMS\n \nsetBranchViewData\n \nsetIdentity\n \ntrack\n \nvalidateCode\n.split(\n \n),\n \n0);\n\n\n//\n \ninit\n \nBranch\n \nand\n \npass\n \nin\n \nyour\n \npreference\n \nto\n \nopen\n \nthe\n \napp\n\n\nbranch.init(\nBRANCH_KEY\n);\n\n\n//\n \nTrigger\n \nyour\n \nJourneys\n \nbanner\n \nto\n \nuse\n \nthe\n \ncorrect\n \nredirect\n \nmode\n\n\nbranch.setBranchViewData({\n\n        \n$uri_redirect_mode\n:\n \n1\n\n\n});\n\n\n/script\n\n\n\n\n\nOr, set it for individual templates by adding deep link data \n$uri_redirect_mode:1\n:\n\n\n\n\nRead our blog\n to learn more about the challenges of URI schemes on iOS and the URI redirect mode feature.\n\n\nPreserve or discard referring link data\n\n\nBy default, when users arrive on a page running Journeys via a Branch link and \nmake_new_link\n is not set to \ntrue\n, then any interaction with the Journey (click/install/re-open) will be attributed to the referring Branch link, rather than to the Journey. If \nmake_new_link\n is set to \ntrue\n, the same events will be attributed to the Journey, instead.\n\n\nThis can help you collect data on how the referring links are contributing to app growth/engagement, even when users aren\u2019t installing from those links directly. For example, if a user clicked a Branch link on Facebook, landed on your website, and installed from a Journey, this would allow you to attribute the install to the link on Facebook. If the original link was also configured to deep link into your app, that deep link would be preserved, too.\n\n\nBranch will pass the referring link into Journeys by default. In order to discard referring link data, include the \nmake_new_link\n flag, with a value of  \ntrue\n, into the options during initialization:\n\n\nbranch\n.\ninit\n(\n \nBRANCH_KEY\n,\n\n    \n{\n\n        \nmake_new_link\n \n:\n \ntrue\n\n    \n}\n\n\n);\n\n\n\n\n\nPrioritization\n\n\nWhen do my Journeys prioritization rules apply?\n\n\nPrioritization only takes effect when two Journeys are overlapping. If you have a Journey targeting iOS users and a Journey targeting Android users, the prioritization won't matter. If you update the Journey targeting iOS to now target iOS and Android users, the higher priority Journey will show to Android users.\n\n\nWhat happens if a user dismisses a banner or interstitial?\n\n\nAssuming it fits your audience rule, your highest priority Journey is shown. If that Journey is dismissed, no other Journeys will show to respect the user's preference for not seeing a Journey when those rules are applied. To maximize Journey visibility, make your interstitial rules narrow (for example, showing on specific URLs) and your banner rules broad.\n\n\nWhy do I have to prioritize Stopped and Draft Journeys?\n\n\nWe ask you to prioritize all non-Archived Journeys because Journeys can be set live from \nDraft\n or \nStopped\n mode.\n\n\nWhat happens if I have some Journeys with priorities set and some without?\n\n\nWe recommend setting priority for all Journeys. All new Journeys you create will automatically have the lowest priority assigned to them, as well as \nDraft\n or \nStopped\n Journeys \nwithout priority\n that are set live (Journeys with priority will not have their priority changed unless you explicitly set them). If you don't set a priority for all your Journeys, then any matching Journey (i.e. Journey passing the audience filter you set) without priority will be picked at random to show.\n\n\nScheduling\n\n\nYou can set a time when your Journey will become active and be visible to your users and/or a time when it will no longer be displayed. You can also schedule Journeys on a recurring basis. \n\n\nYou can access this feature from the \nValidate \n Test\n step or directly from the action menu on the Journeys manager page.\n\n\n\n\n\n\nExample: Scheduling a Journey\n\n\nImagine you want to show your users a Journey during the month of November that advertises a 25% sale if they download your app. You can set it to start at 12 AM on November 1st, and end at 12 AM on December 1st:\n\n\n\n\n\n\n\n\nExample: Recurring Schedules\n\n\nImagine you have a show that airs from 9-10 PM every Sunday, and you want to encourage users to view the episode in-app during that time. You can set a start time of 9 PM on the upcoming Sunday, set a stop time of 10 PM that same day, and then set it to repeat weekly:\n\n\n\n\n\n\nScheduling FAQ\n\n\n\n\nWhen does my scheduled Journey become active or stopped?\n\n   There can be up to a 5 minute delay between a scheduled time and your Journey becoming active or stopped.\n\n\nHow do I set an end date for a Journey with a recurring schedule?\n\n   This is not supported with scheduling at this time. To do this, set a start and stop time for your Journey and add your repeat rules. When you want the Journey to stop for good, stop it from the action menu or Edit Schedule \n Delete.\n\n\n\n\nDynamic Journeys layout customization\n\n\nWe now support the use case where you can customize the appearance of a Journey depending on which link referred the web session. So, you can create a Branch link with a set of defined keys and values that will change properties such as the title or images when the user is referred to your website from this link.\n\n\n\n\n\n\n\n\nLink Data Key\n\n\nValue\n\n\nExample Value\n\n\n\n\n\n\n\n\n\n\n$journeys_button_get_has_app\n\n\nThe call to action button when the app is currently installed\n\n\n\"Open App\"\n\n\n\n\n\n\n$journeys_button_get_no_app\n\n\nThe call to action button when the app is \nnot\n currently installed\n\n\n\"Install App\"\n\n\n\n\n\n\n$journeys_title\n\n\nThe title or main text of your Journey\n\n\n\"Download Appsolutely today\"\n\n\n\n\n\n\n$journeys_description\n\n\nThis is the description or subtitle in the frame\n\n\n\"This app is disrupting apps\"\n\n\n\n\n\n\n$journeys_icon_image_url\n\n\nThe app icon displayed in the layout\n\n\n\"\nhttps://mysite.com/image.png\n)\"\n\n\n\n\n\n\n\n\nNote that not all template support all override keys. For example, the floating button does not support title, description or icon image url. If a template is to be rendered and the key you've specified does not exist, we'll simply ignore it while rendering the template.\n\n\nClientside Javascript Journeys controls\n\n\nThere are a number of clientside APIs to help you build quality user experiences. See below:\n\n\nUse Javascript to block a Journey from showing\n\n\nYou can prevent Journeys from showing on a certain page by inserting \nno_journeys\n with the value of \ntrue\n into the options during initialization.\n\n\nscript\n \ntype=\ntext/javascript\n\n// load the Branch SDK file\nbranch.init(\nBRANCH_KEY\n,\n    {\n      \nno_journeys\n: true\n    }\n);\n\n/script\n\n\n\n\n\nClosing a Journey Programmatically\n\n\nJourneys include a close button the user can click, but you may want to close the Journey with a timeout, or via some other user interaction with your web app.\nIn this case, closing the Journey is very simple by calling:\n\n\nbranch\n.\ncloseJourney\n(\nfunction\n(\nerr\n)\n \n{\n \nconsole\n.\nlog\n(\nerr\n);\n \n});\n\n\n\n\n\nTrigger a Journey to Show by Firing an Event\n\n\nIf you block or programatically close a Journey via one the calls above, then you can trigger a Journey to show by firing the following event:\n\n\nbranch\n.\ntrack\n(\npageview\n);\n\n\n\n\n\nNote:\n If a user has closed a Journey in the past, then firing the aforementioned event will not override a user's preference.\n\n\nDisable Journeys Animations\n\n\nYou can disable Journeys animations on a page by setting two flags - \ndisable_entry_animation\n and \ndisable_exit_animation\n - when you\u2019re calling either init() or track() with Branch\u2019s Web SDK.\n\n\nJourneys animations can be disabled in order to reduce the amount of time it takes to load a Journey on a page. They can also be disabled in order to improve Journeys UX on single-page web apps, where Journeys animations can be jarring. When switching between multiple Journeys on a single-page web app, remember to use \nsetBranchViewData()\n to change the link behind the CTA.\n\n\nTo disable animations during initialization, insert \ndisable_entry_animation\n and/or \ndisable_exit_animation\n, with values of \ntrue\n, into the options:\n\n\nbranch\n.\ninit\n(\n\u2018\nBRANCH_KEY\n\u2019\n,\n\n    \n{\n\n        \n\u2018\ndisable_entry_animation\n\u2019\n \n:\n \ntrue\n,\n\n        \n\u2018\ndisable_exit_animation\n\u2019\n \n:\n \ntrue\n\n    \n}\n\n\n);\n\n\n\n\n\nTo disable animations using track(), insert \ndisable_entry_animation\n and/or \ndisable_exit_animation\n, with values of \ntrue\n, into the event metadata:\n\n\nbranch\n.\ntrack\n(\n\n    \n\u2018\npageview\n\u2019\n,\n\n    \n{},\n\n    \n{\n\n        \n\u2018\ndisable_entry_animation\n\u2019\n \n:\n \ntrue\n,\n\n        \n\u2018\ndisable_exit_animation\n\u2019\n \n:\n \ntrue\n\n    \n}\n\n\n);\n\n\n\n\n\nListen to Journeys lifecycle events\n\n\nYou can easily listen to Journeys lifecycle events by registering listener functions like so:\n\n\nvar\n \nlistener\n \n=\n \nfunction\n(\nevent\n)\n \n{\n \nconsole\n.\nlog\n(\nevent\n);\n \n}\n\n\n\n// Specify an event to listen for\n\n\nbranch\n.\naddListener\n(\nwillShowJourney\n,\n \nlistener\n);\n\n\n\n// Listen for all events\n\n\nbranch\n.\naddListener\n(\nlistener\n);\n\n\n\n\n\n\n\n\n\n\n\nListener Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwillShowJourney\n\n\nJourney is about to be shown.\n\n\n\n\n\n\ndidShowJourney\n\n\nJourney's entrance animation has completed and it is being shown to the user.\n\n\n\n\n\n\nwillNotShowJourney\n\n\nJourney will not be shown and no other events will be emitted.\n\n\n\n\n\n\ndidClickJourneyCTA\n\n\nUser clicked on Journey's CTA button.\n\n\n\n\n\n\ndidClickJourneyClose\n\n\nUser clicked on Journey's close button.\n\n\n\n\n\n\nwillCloseJourney\n\n\nJourney close animation has started.\n\n\n\n\n\n\ndidCloseJourney\n\n\nJourney's close animation has completed and it is no longer visible to the user.\n\n\n\n\n\n\n\n\nJourneys text localization\n\n\nJourneys now has an entire localization framework. Due to the complexity of this offering, we're not exposing it directly to partners. Please reach out to your account manager or \n to receive access to this functionality.\n\n\nCSS Editor\n\n\nIf you have an upgraded premium account, you may also modify your CSS code directly in addition to using the WYSIWYG View Editor. To do so, go to the \nConfigure Views\n step, click to edit a template, and then select the \nCSS Editor\n tab on the \nCustomize Template\n screen.\n\n\n\n\nCustom fonts with Journeys\n\n\n1) Go to \nGoogle Fonts\n and select a font.\n\n\n\n\n2) Add to CSS EDITOR in Journeys. Please note: trailing semicolon on @import line is important. It's always good to have a fallback web font in case the google font fails to load.\n\n\n\n\nTemplate customization options\n\n\nThe customization options available depend on the template chosen:\n\n\n\n\nSmart Banner\n\n\nFull Screen Interstitial\n\n\nHalf Page Interstitial\n\n\nFloating Button\n\n\n\n\nSmart Banner\n\n\nThe available configuration options are identical for banners at both the top and the bottom of the screen.\n\n\nBackground\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nText Color\n\n\nSpecify the text color for elements without a specific setting. \nNot currently used\n\n\n\n\n\n\nBackground Color\n\n\nSet the background color of the banner\n\n\n\n\n\n\n\n\nTitle\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nFormatting Bar\n\n\nWYSIWYG styling for title text\n\n\n\n\n\n\nTitle\n\n\nThe text of the title. Maximum 35 characters\n\n\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nFormatting Bar\n\n\nWYSIWYG styling for description text\n\n\n\n\n\n\nDescription\n\n\nThe text of the description. Maximum 60 characters, will wrap to two lines\n\n\n\n\n\n\n\n\nRating\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nFormatting Bar\n\n\nWYSIWYG styling for rating stars. Primarily useful for changing color\n\n\n\n\n\n\nRating Star Count\n\n\nThe number of stars of your App/Play Store rating average. We encourage you to be honest!\n\n\n\n\n\n\n\n\nReviews\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nFormatting Bar\n\n\nWYSIWYG styling for reviews count\n\n\n\n\n\n\nReviews\n\n\nThe number of reviews of your app on the App/Play Store. We encourage you to be honest!\n\n\n\n\n\n\n\n\nButton\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nText Color\n\n\nChange the color of the button text and button outline\n\n\n\n\n\n\nBackground Color\n\n\nChange the color of the button background\n\n\n\n\n\n\nButton Text\n\n\nChange the text shown when the app is installed and not installed.\n\n\n\n\n\n\nChannel\n\n\nSet the \nChannel\n for the Branch link attached to the button. For example, \nwebsite\n\n\n\n\n\n\nTags\n\n\nSet the \nTags\n for the Branch link attached to the button. For example, \npurchase\n and \nfall-sale\n\n\n\n\n\n\nDeep Link Data\n\n\nInsert deep link data and advanced link control parameters. Can contain any \nBranch link parameter\n\n\n\n\n\n\n\n\nDismiss\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nDismiss Period\n\n\nControl how long the banner should be hidden once dismissed by the user. Options are \n1 day\n, \n1 week\n, \n1 month\n, \nNever Again\n, and \nCustom\n\n\n\n\n\n\n\n\nApp Icon\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nApp Icon\n\n\nEnter the URL for your app icon, or upload an image\n\n\n\n\n\n\n\n\nFull screen interstitial\n\n\nBackground\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nText Color\n\n\nSpecify the text color for elements without a specific setting. \nNot currently used\n\n\n\n\n\n\nBackground Color\n\n\nSet the background color of the interstitial\n\n\n\n\n\n\nBackground\n\n\nEnter the URL for your background graphic, or upload an image\n\n\n\n\n\n\nImage Position\n\n\nControl the vertical alignment of the background graphic\n\n\n\n\n\n\nContent Position\n\n\nControl the vertical alignment of the content block\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImage Position\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nTop\n\n\nPin to top of screen, scale to full screen width\n\n\n\n\n\n\nCenter\n\n\nPin to middle of screen, scale to full screen width\n\n\n\n\n\n\nBottom\n\n\nPin to bottom of screen, scale to full screen width\n\n\n\n\n\n\nCover\n\n\nAnchor to top of screen, scale to fill entire screen\n\n\n\n\n\n\n\n\nThe content block contains everything except for the background image. Dimensions \nwithin\n this block are preset and cannot be modified.\n\n\n\n\n\n\n\n\nContent Position\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nTop\n\n\nPin to top of screen\n\n\n\n\n\n\nCenter\n\n\nPin to center of 'safe' screen height (accounting for browser controls and device dimensions)\n\n\n\n\n\n\nBottom\n\n\nPin to bottom of 'safe' screen height (accounting for browser controls and device dimensions)\n\n\n\n\n\n\nCustom\n\n\nPosition by relative percentage. Be sure to test for appropriate real-world alignment\n\n\n\n\n\n\n\n\nTitle\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nFormatting Bar\n\n\nWYSIWYG styling for title text\n\n\n\n\n\n\nTitle\n\n\nThe text of the title. Maximum 35 characters, will wrap to multiple lines\n\n\n\n\n\n\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nFormatting Bar\n\n\nWYSIWYG styling for description text\n\n\n\n\n\n\nDescription\n\n\nThe text of the description. Maximum 60 characters, will wrap to multiple lines\n\n\n\n\n\n\n\n\nButton\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nText Color\n\n\nChange the color of the button text and button outline\n\n\n\n\n\n\nBackground Color\n\n\nChange the color of the button background\n\n\n\n\n\n\nButton Text\n\n\nChange the text shown when the app is installed and not installed.\n\n\n\n\n\n\nChannel\n\n\nSet the \nChannel\n for the Branch link attached to the button. For example, \nwebsite\n\n\n\n\n\n\nTags\n\n\nSet the \nTags\n for the Branch link attached to the button. For example, \npurchase\n and \nfall-sale\n\n\n\n\n\n\nDeep Link Data\n\n\nInsert deep link data and advanced link control parameters. Can contain any \nBranch link parameter\n\n\n\n\n\n\n\n\nDismiss\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nDismiss Text\n\n\nText to show users wanting to continue to your mobile website instead of downloading the app.\n\n\n\n\n\n\nDismiss Period\n\n\nControl how long before the same visitor should see the Journey again. Options are \n1 day\n, \n1 week\n, \n1 month\n, \nNever Again\n, and \nCustom\n\n\n\n\n\n\n\n\nPremium journeys functionality\n\n\nAll Journeys features are available to upgraded apps, and are charged per event with a 14 day free trial. Visit \nthis page\n for full pricing information.\n\n\nLimitations for apps with free accounts\n\n\n\n\nAny number of Journeys may be created in \nDraft\n mode using all features.\n\n\nAn invitation to upgrade will be displayed when premium-only functionality is enabled\n\n\nOnly a single Journey using the Smart Banner template (either top or bottom position) may be \nActive\n at any one time.\n\n\nTo enable a different Journey, the currently active Journey must first be put into \nStopped\n mode.\n\n\nAny Journey using premium-only features cannot be placed into \nActive\n mode until the app has been upgraded.\n\n\n\n\nWeb to app routing without Journeys\n\n\nIf you maintain a mobile website, Branch allows you to deep link mobile visitors directly into your app, or easily and automatically give them the option of downloading it.\n\n\nOpen app if installed\n\n\nAdd the following code somewhere inside the \nhead\n/head\n tags on your website and customize the \nlink parameters\n to suit your needs.\n\n\n\n\nProtip\n\n\nWhat this script does is move a lot of the Branch redirection logic to the Javascript on your own page, effectively 'clicking a Branch link' on page load.\n\n\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\n// load the Branch SDK file\n\n\n(\nfunction\n(\nb\n,\nr\n,\na\n,\nn\n,\nc\n,\nh\n,\n_\n,\ns\n,\nd\n,\nk\n){\nif\n(\n!\nb\n[\nn\n]\n||!\nb\n[\nn\n].\n_q\n){\nfor\n(;\ns\n_\n.\nlength\n;)\nc\n(\nh\n,\n_\n[\ns\n++\n]);\nd\n=\nr\n.\ncreateElement\n(\na\n);\nd\n.\nasync\n=\n1\n;\nd\n.\nsrc\n=\nhttps://cdn.branch.io/branch-latest.min.js\n;\nk\n=\nr\n.\ngetElementsByTagName\n(\na\n)[\n0\n];\nk\n.\nparentNode\n.\ninsertBefore\n(\nd\n,\nk\n);\nb\n[\nn\n]\n=\nh\n}})(\nwindow\n,\ndocument\n,\nscript\n,\nbranch\n,\nfunction\n(\nb\n,\nr\n){\nb\n[\nr\n]\n=\nfunction\n(){\nb\n.\n_q\n.\npush\n([\nr\n,\narguments\n])}},{\n_q\n:\n[],\n_v\n:\n1\n},\naddListener applyCode banner closeBanner creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode\n.\nsplit\n(\n \n),\n \n0\n);\n\n\nbranch\n.\ninit\n(\nYOUR-BRANCH-KEY\n);\n\n\n// define the deepview structure\n\n\nbranch\n.\ndeepview\n(\n\n    \n{\n\n      \nchannel\n:\n \nmobile_web\n,\n\n      \nfeature\n:\n \ndeepview\n,\n\n      \ndata\n \n:\n \n{\n\n        \n$deeplink_path\n:\n \npage/1234\n,\n\n        \nuser_profile\n:\n \n7890\n,\n\n        \npage_id\n:\n \n1234\n,\n\n        \ncustom_data\n:\n \n1234\n\n      \n}\n\n    \n},\n\n    \n{\n\n      \nopen_app\n:\n \ntrue\n  \n// If true, Branch attempts to open your app immediately when the page loads. If false, users will need to press a button. Defaults to true\n\n    \n}\n\n\n);\n\n\n/script\n\n\n\n\n\n\n\nWarning\n\n\nBe sure to replace \nYOUR-BRANCH-KEY\n with your Branch Key inside the \ninit()\n call. You can find your Branch Key on the Dashboard\u2019s \nSettings\n page.\n\n\n\n\nAdd an install call to action\n\n\nTrigger the \nbranch.deepviewCta()\n function with a button or hyperlink on your page. Executing this function (whether by button, link, or some other method) 'clicks' the link you defined using \nbranch.deepview()\n above.\n\n\n\n\n\n\n\n\nPlatform\n\n\nResult of Call To Action\n\n\n\n\n\n\n\n\n\n\nMobile, app installed\n\n\nOpen app, deep link directly to content. This is a failsafe action in case the 'link click' on page load didn't fire correctly.\n\n\n\n\n\n\nMobile, app NOT installed\n\n\nOpen App Store or Play Store page for your app, deep link directly to content after download.\n\n\n\n\n\n\nDesktop\n\n\nRedirect to \n$desktop_url\n specified in the \ndeepview()\n call, or fall back to your default web url from \nLink Settings\n.\n\n\n\n\n\n\n\n\nHere's how to add a simple hyperlink call to action:\n\n\na\n \nid\n=\ndownloadapp\n \nonclick\n=\nbranch.deepviewCta()\nView this in app\n/\na\n\n\n\n\n\nTroubleshooting\n\n\nCalls to [branchsubdomain] blocked\n\n\n\n\nProtip\n\n\nClick here\n to read about the value to use for \n[branchsubdomain]\n.\n\n\n\n\nPlease make sure to add \n[branchsubdomain]\n to the CSP header for your pages. We've seen some browsers that attempt to block it outright. You can deliver this in an HTTP header from your web server or you can add a simple metatag to your site like so:\n\n\nmeta\n \nhttp-equiv\n=\nContent-Security-Policy\n \ncontent\n=\ndefault-src https://[branchsubdomain]; child-src \nnone\n; object-src \nnone\n\n\n\n\n\nNon-mobile optimized sites\n\n\nIf you're not using a mobile viewport tag (\nmeta name=\"viewport\" content=\"width=device-width initial-scale=1, maximum-scale=1, user-scalable=no\"\n) because your site isn't mobile optimized, Journeys will look shrunken and weird. Don't worry, we have you covered:\n\n\n\n\ndesign the banner as you would like it to look on your site\n\n\nGo to the CSS editor and scroll to the bottom of the CSS code\n\n\nAdd two properties to the #branch-banner selector\n\n\nheight: 228;\n\n\nzoom: 3;\n\n\n\n\n\n\n\n\nThe image will not look scaled properly in the editor view. This is because the dashboard is mobile optimized. Use the preview test link on the validation page to make sure the banner looks right\n\n\nJourney not sticking to nav\n\n\n\n\nNavigate to \nDashboard Journey Page\n\n\nSelect Journey -\n Edit -\n Configure Views -\n Banner -\n Page Placement\n\n\nBanner Scroll = \nsticky\n\n\nPress \nSave \n Close\n\n\n\n\nAdd the following div to your nav\n\n\ndiv\n \nclass\n=\nbranch-journeys-top\n/\ndiv\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\nExample audiences\n\n\nThe Journeys audience tool is extremely powerful, but sometimes a few examples can help kickstart your creative juices. Here are are a couple common audience use cases to help you get started.\n\n\n\n\nNew users\n\n\nLoyal users\n\n\nRetargeting users who have taken some action\n\n\nUsers from Google (for SEO)\n\n\niOS users from English-speaking countries\n\n\n\n\nAll of these examples require you to configure advanced audience rules, which is a premium feature. You can add any set of complex rules using the following button:\n\n\n\n\nNew Users\n\n\nIn this example, you'll configure an audience to target people who have visited your site \nless than 3 times\n historically. Anyone who had visited more than this will be excluded. First, you'll add a new rule for \nHas visted web\n in the advanced section.\n\n\n\n\nNext, you'll choose the \nLess than or equal to\n in the middle section:\n\n\n\n\nFinally, you'll enter 2 in the last part to indicate you want to target people who have visited less than 3 times historically.\n\n\n\n\nSave and continue!\n\n\nLoyal Users\n\n\nIn this example, you'll configure an audience to target people who have visited your site \nmore than 4 times\n historically. Anyone who had visited less than this will be excluded. First, you'll add a new rule for \nHas visted web\n in the advanced section.\n\n\n\n\nNext, you'll choose the \nMore than or equal to\n in the middle section:\n\n\n\n\nFinally, you'll enter 5 in the last part to indicate you want to target people who have visited more than 4 times historically.\n\n\n\n\nSave and continue!\n\n\nRetargeting Users\n\n\nIn this example, you'll configure an audience to target people who have completed some action on your site in a past or current session. For example, if a user had added something to their cart or had previously completed a purchase. You can retarget these users with a custom call to action to download. We'll use a generic event called \nMyAction\n in the example. First, you'll add a new rule for \nHas completed event\n in the advanced section.\n\n\n\n\nIn this next dropdown, you'll choose the custom event to retarget from. Here, we'll use a generic event called \nMyAction\n but you would select \nPurchase\n or something more meaningful to your use case.\n\n\n\n\nNext, you'll choose the \nMore than or equal to\n in the middle section:\n\n\n\n\nFinally, you'll enter 3 in the last part to indicate you want to target people who have completed \nMyAction\n more than 2 times historically.\n\n\n\n\nSave and continue!\n\n\nSEO Friendly\n\n\nGoogle has recently announced that it will begin punishing sites that show a full page interstitial when a user comes from search. Because of this, you'll likely need to treat Google search traffic differently than traffic that comes from any other source. In this example, you'll set up an audience specific to users who come from Google. First, you'll add a new rule for \nCame directly from a url\n in the advanced section.\n\n\n\n\nNext, you'll choose the \nstarts with\n in the middle section to match a substring:\n\n\n\n\nFinally, you'll enter \ngoogle.com\n to target users who came from Google search (where the referrer starts with google.com):\n\n\n\n\nAlternatively, you can target users who did NOT come from Google search (where the referrer doesn't start with google.com):\n\n\n\n\nExample: English speaking iOS users\n\n\nIn this example, you'll restrict the audience to users in countries where English is the native language who are on the iOS operating system. Note that this is not in the advanced audience section, but rather in the top section. First, select \niOS\n of the mobile OS checkboxes.\n\n\n\n\nNext, go through and choose the following countries: \nUnited States\n, \nCanada\n, \nUnited Kingdom\n and \nAustralia\n.\n\n\n\n\nSave and continue!", 
            "title": "Journeys App Banners"
        }, 
        {
            "location": "/pages/web/journeys/#overview", 
            "text": "On a daily basis, Google Search drives  more app installs  than all of Facebook's paid install products combined. Converting your mobile web visitors into native app users is one of the most effective acquisition channels available, and Branch's Journeys App Banners platform makes this easy.    Customizable presentation.  WYSIWYG designer for smart banner or full-page interstitial, with more coming soon.  Powerful targeting rules.  Want to show your Journey only visitors without your app installed already? All iOS users from Japan? Just users viewing your checkout page? Android users who have visited your website twice AND purchased something using your app? The possibilities are infinite.  AMP-compatible.  You can convert mobile search traffic to your app by  showing Journeys on AMP pages .  Run A/B tests.  Design multiple campaign versions to see which converts most effectively.  Optimized user experience.  If installed, your app will open and users can be routed directly to the content they expect. If not, the App/Play store will open and users can still be routed directly to the content they expect after installing.  Comprehensive analytics.  Measure the downstream performance and retention of every Journeys campaign.    Journeys is a paid product  Journeys introduces many more advanced features on top of the basic smart app banner functionality, but  you can still create an Android and iOS smart app banner for free if your MAU are under 20k . After 20k MAU, we'd ask that you pay a small fee for use. Premium-only advanced features (including the option to run multiple Journeys simultaneously) are available through a 14 day trial.    Pre-reqs  You should integrate the Branch SDK into your app and configure deep link routing for deferred deep linking and attribution before implementing Journeys.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/web/journeys/#setup", 
            "text": "Include your alternate domain for Universal Links  Journeys uses your alternate domain for Universal Links. Make sure you include your  xxxx-alternate.app.link  domain in your  Associated Domains . If you use a custom domain or subdomain for your Branch links, you should instead add entries for  applinks:[mycustomdomainorsubdomain]  and  XXXX-alternate.app.link . If you\u2019re unsure of your Branch-assigned app.link subdomain,  contact support , and we can provide it.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/web/journeys/#add-the-branch-web-sdk-to-your-site", 
            "text": "Add the following code somewhere inside the  head /head  tags on your website. More information about this SDK can be found in the  Github README .  script   type = text/javascript  ( function ( b , r , a , n , c , h , _ , s , d , k ){ if ( ! b [ n ] ||! b [ n ]. _q ){ for (; s _ . length ;) c ( h , _ [ s ++ ]); d = r . createElement ( a ); d . async = 1 ; d . src = https://cdn.branch.io/branch-latest.min.js ; k = r . getElementsByTagName ( a )[ 0 ]; k . parentNode . insertBefore ( d , k ); b [ n ] = h }})( window , document , script , branch , function ( b , r ){ b [ r ] = function (){ b . _q . push ([ r , arguments ])}},{ _q : [], _v : 1 }, addListener applyCode banner closeBanner creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode . split (   ),   0 );  branch . init ( YOUR-BRANCH-KEY );  / script    Warning  Be sure to replace  YOUR-BRANCH-KEY  with your Branch Key inside the  init()  call. You can find your Branch Key on the Dashboard\u2019s  Settings  page.", 
            "title": "Add the Branch Web SDK to your site"
        }, 
        {
            "location": "/pages/web/journeys/#deep-linking-from-the-banner-or-interstitial", 
            "text": "Like all Branch deep links, you can pass custom parameters by specifying keys in the link's  data dictionary . This is useful if you are showing the Smart Banner on a website page with equivalent in-app content, because you can route directly to that content in your app.  This example will take the visitor straight to a picture with id \u201c12345\u201d after installing and opening the app.  branch . setBranchViewData ({ \n     data :   { \n         $deeplink_path :   picture/12345 , \n         picture_id :   12345 , \n         user_id :   45123 \n     }  });   Alternatively, you can dynamically specify the deep link path depending on which website page is loaded.  branch . setBranchViewData ({ \n     data :   { \n         $deeplink_path :   window . location . pathname   +   window . location . search   +   window . location . hash , \n         user_id :   45123 \n     }  });   If a user is referred to a page running Journeys via a Branch link, then referring link data will be passed into the Journeys call-to-action by default. If you\u2019re using setBranchViewData() to specify link data for Journeys on that page, the only data from setBranchViewData() that will be used are  dynamic Journeys layout parameters ; all other data in that call will be ignored, unless  make_new_link  is set to  true  in  branch.init() . You can find more information  here .", 
            "title": "Deep linking from the banner or interstitial"
        }, 
        {
            "location": "/pages/web/journeys/#create-journey-banner-or-interstitial", 
            "text": "Head to the  Journeys page  on the Branch dashboard.  Click the  Create New Journey  button to get started.     In the  Journey Name:  field, enter a name to use for internal reference (this will never be shown to your users).", 
            "title": "Create Journey banner or interstitial"
        }, 
        {
            "location": "/pages/web/journeys/#select-audience", 
            "text": "You can customize the audience that will see your Journey by choosing the target platform, device, and region.  For example, if you have users in many countries, you can create a separate Journey for each localization and use audience targeting rules to make sure users see the appropriate one.      Option  Description      Platform  Branch currently offers Journeys on one platform:  Mobile web . This will display for mobile users on your website.  More options coming soon.    Devices  Which devices would you like to target? For example, if you only have an iOS app, then you might want to show a Journey only to users viewing your mobile website on iOS.    Regions  Select one or more countries in which to display your Journey. Defaults to  Show to All Regions    Additional Filters  Read about advanced filtering criteria  here .", 
            "title": "Select audience"
        }, 
        {
            "location": "/pages/web/journeys/#select-and-style-the-banner-or-interstitial", 
            "text": "First, click the  Select a Template  button.   Next, click to select the type of template that you want to show. There are three template options:  Smart Banner at bottom of screen.  Smart Banner at top of screen  Full Screen Interstitial (SEO friendly!)  The fourth option shown is an alternate preconfiguration of the full screen interstitial    Click  Customize  to make changes to the template.  In the  Customize Template  heading, you may edit the the name to use for internal reference.  Click any object in the preview to edit it. To see documentation on all customization options,  click here .  When finished, click  Save   Close  button to continue.   Note about generic deep linking params  If you are running a generic download campaign or a site-wide discount offer, your users would go to the same place inside your app regardless of where they originated on your website. You can configure this destination by setting  Deep Link Data  for the  Button  element when you  customize your template options .", 
            "title": "Select and style the banner or interstitial"
        }, 
        {
            "location": "/pages/web/journeys/#validate-test", 
            "text": "This screen allows you to preview your Journey variations, and is where you can perform final validation and testing on your Journey before publishing it.", 
            "title": "Validate &amp; Test"
        }, 
        {
            "location": "/pages/web/journeys/#preview", 
            "text": "Use the dropdown menu to switch between your Journey variations.   To preview your Journey in your live, production website, enter your website URL in the  Test on your mobile device  field, and press the copy button.  The URL you enter must have the Branch Web SDK integrated and be using your Branch Key.    How does this work?  The Branch SDK integrated into your website listens for a unique, one-time URL parameter that is generated by the preview tool. It looks something like  _branch_view_id=296449069883323397 . When this parameter is detected, the SDK loads a temporary preview of that specific Journey. This parameter is only valid for your Branch Key, and will not work on any other website even if the Branch SDK is integrated.", 
            "title": "Preview"
        }, 
        {
            "location": "/pages/web/journeys/#validation", 
            "text": "There are a number of errors and warnings you may encounter.", 
            "title": "Validation"
        }, 
        {
            "location": "/pages/web/journeys/#web-sdk-errors", 
            "text": "You must have the web SDK installed on your website to run a Journey.", 
            "title": "Web SDK errors"
        }, 
        {
            "location": "/pages/web/journeys/#app-sdk-warnings", 
            "text": "If you choose to target iOS or Android users but haven\u2019t integrated those SDKs, your Journeys will still show on the correct devices and direct users to your app. However, you won\u2019t be able to get any install or event attribution for your Journeys, and you will not be able to deep link users to content inside your app. Be sure to integrate the Branch SDK into your app.", 
            "title": "App SDK warnings"
        }, 
        {
            "location": "/pages/web/journeys/#audience-rule-warnings", 
            "text": "You will see a warning if your audience rules do not add up to 100%. If less than 100%, the remainder will see whatever is normal behavior for your website. Your Journey will still run.", 
            "title": "Audience rule warnings"
        }, 
        {
            "location": "/pages/web/journeys/#premium-account-warnings", 
            "text": "If you have built a Journey that includes premium-only functionality, you will see a warning, as certain features are only available by purchasing.", 
            "title": "Premium account warnings"
        }, 
        {
            "location": "/pages/web/journeys/#managing-your-journeys-app-banners", 
            "text": "The  Journeys Manager  is your homepage for all of the personalized experiences create. You can turn Journeys on and off, clone them, or view performance.   A Journey can have one of four states:     State  Meaning  Next Stage      Draft  Not yet published, still editable  Active    Active  Live for your users, read-only  Stopped    Stopped  Not live for your users, read-only  Active  or  Archived    Archived  Not live for your users, hidden from default manager view  none     You can activate a journey directly from the creation flow, or from  Start  in the Actions menus in the Journeys Manager.    Editing a live Journey  To prevent corruption of historical analytics data, Journeys cannot be edited once they leave  Draft  status. However, you can  Clone  a Journey and make changes to the new copy.", 
            "title": "Managing your Journeys App Banners"
        }, 
        {
            "location": "/pages/web/journeys/#prioritizing-journeys", 
            "text": "The Journeys Priority View allows you to set the priority of multiple Journeys when they  overlap . They  overlap  when a single person is eligible to see multiple Journeys. You can prioritize the Journey that should show ahead of any others.  Let's say you have two Journeys that may reach the same audience.   A half page interstitial that promotes an offer on your \"Shoes\" category page.  A smart banner that should show for all visitors.   In general, you'd like the interstitial to show ahead of the smart banner on the \"Shoes\" category page (where both audience segments overlap).  To prioritize Journeys, switch to the Priority View by clicking on the toggle.   You're now in Priority View.   Drag and drop Journeys in the order you'd like them to show. The lower numbers mean higher priority (i.e. a Journey with priority 1 is going to show ahead of a Journey with priority 2).     Click the  Save  button.     Your Journeys have now been prioritized.     Caution  When you save Journeys priorities,  ALL  Journeys will be prioritized in the order they appear in the table.   For more detailed Journeys prioritization questions, visit our  Advanced section .", 
            "title": "Prioritizing Journeys"
        }, 
        {
            "location": "/pages/web/journeys/#visualizing-journeys-performance", 
            "text": "", 
            "title": "Visualizing Journeys performance"
        }, 
        {
            "location": "/pages/web/journeys/#analytics-attribution", 
            "text": "Journeys map to  standard Branch analytics labels :   All Journeys:  feature  =  journeys  Each Journey:  campaign  =  [Journey Name]  Individual Templates:  tags  =  [Template Name]  (+ any additional tags you specify during configuration)   You can access your Journey\u2019s performance by selecting  View Performance  from the actions menu in the Journeys Manager.", 
            "title": "Analytics &amp; attribution"
        }, 
        {
            "location": "/pages/web/journeys/#using-source-analytics", 
            "text": "You can also access Journeys analytics by selecting the above filters from the  Source Analytics  page of the Branch dashboard.", 
            "title": "Using Source Analytics"
        }, 
        {
            "location": "/pages/web/journeys/#to-compare-all-of-your-journeys", 
            "text": "Filter by  feature  =  journeys", 
            "title": "To compare all of your Journeys"
        }, 
        {
            "location": "/pages/web/journeys/#to-compare-variations-within-one-journey", 
            "text": "Filter by  feature  =  journeys  Filter by  campaign  =  [Journey Name]    Attribute Journeys events to referring links  By default, when users arrive on a page running Journeys via a Branch link, then any interaction with the Journey (click/install/re-open) will be attributed to the referring Branch link, rather than to the Journey.  Learn how  to attribute this data to the Journey instead.", 
            "title": "To compare variations within one Journey"
        }, 
        {
            "location": "/pages/web/journeys/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/web/journeys/#advanced-audience-rules", 
            "text": "You can target users on a more granular level - based on behavior like where they came from, whether they already have your app installed, and what they\u2019ve done on your website or in your app. We've created a bunch of great examples on the  next tab .", 
            "title": "Advanced audience rules"
        }, 
        {
            "location": "/pages/web/journeys/#has-completed-event", 
            "text": "If you have  custom event tracking  set up, you can target users based on events that you define. For instance, you might want to show a Journey to users who have completed a purchase within the last week, or who add an item to their shopping cart more than three times.", 
            "title": "Has completed event"
        }, 
        {
            "location": "/pages/web/journeys/#is-viewing-a-page-url", 
            "text": "You can define which subsets of your website the Journey will appear. For example, maybe you have a page  yoursite.com/settings  and  yoursite.com/products/1234 . You could fill in  products  here and only users visiting a URL with that substring present would see the Journey.", 
            "title": "Is viewing a page url"
        }, 
        {
            "location": "/pages/web/journeys/#has-visited-web", 
            "text": "Here, you can use website visits to determine who to target. For instance, you might decide that someone who visits your site five times is ready to see a Journey with some extra incentive to open the app.", 
            "title": "Has visited web"
        }, 
        {
            "location": "/pages/web/journeys/#has-visited-the-app", 
            "text": "Similar to visited web, you can target users by number of app visits. For example, someone who has visited the app two times and opens up the mobile web could be lured back into the app with a Journey.", 
            "title": "Has visited the app"
        }, 
        {
            "location": "/pages/web/journeys/#has-the-app-installed", 
            "text": "You might choose to only show a Journey that asks a user to open the app to those that already have it installed.", 
            "title": "Has the app installed"
        }, 
        {
            "location": "/pages/web/journeys/#has-clicked-on-ad", 
            "text": "A user is grouped into \"Has clicked on Ad\" when they've clicked a link from  Deep Linked Feeds .  Use this to target users who have been part of an ad campaign to improve your ROI; maybe with a specific call to action to open the app and buy something if they've also never made a purchase in the app.  The technical definition is that they've clicked on a link with an Ad Network's custom  $3p  value in link data, but you just need to consider the way the link is created - in this case, through Deep Linked Feeds.", 
            "title": "Has clicked on ad"
        }, 
        {
            "location": "/pages/web/journeys/#has-clicked-on-email", 
            "text": "A user is grouped into \"Has clicked on Email\" when they've clicked a link from  Deep Linked Email .  Use this to target users who have been part of an email campaign; maybe with a specific call to action to get them download the app if they don't have it and they've landed on mobile web.  The technical definition is that they've clicked on a link with an Email Service Provider's custom  $3p  value in link data, but you just need to consider the way the link is created - in this case, through a Deep Linked Email integration.", 
            "title": "Has clicked on email"
        }, 
        {
            "location": "/pages/web/journeys/#is-viewing-a-page-with-metadata-key", 
            "text": "Use this filter to target users viewing web pages with certain metadata specified. This data can be specified in HTML  meta  tags on a webpage, passed in as options in the  init()  call that you use to initialize the Branch web SDK, or passed in using the  track()  call in Branch\u2019s web SDK. Note that if you opt to use HTML  meta  tags, your tags should be formatted as  Branch hosted deep link data .  For example, you could target users on pages containing the metadata key \u201cfoo\u201d and value \u201cbar\u201d by adding this tag to the page\u2019s HTML:  meta name=\"branch:deeplink:foo\" content=\"bar\" /  Or by initializing Branch\u2019s web SDK with the following options object:  branch . init (   BRANCH_KEY , \n     { \n         metadata   :   { \n             foo   :   bar \n         } \n     }  );   Or, finally, by using the track() call to  programmatically trigger a Journey to show :  branch . track ( \u2018 pageview \u2019 , \n     { \n         \u2018 foo \u2019   :   \u2018 bar \u2019 \n     }  );   Once metadata has been specified on a page in any or all of the three locations specified above, you can target users on that page using the \u201cIs viewing a page with metadata key\u201d audience filter. If metadata with the same key has been specified in either  init()  or  track()   and  in an HTML  meta  tag, the metadata passed into either  init()  or  track()  will take precedence.", 
            "title": "Is viewing a page with metadata key"
        }, 
        {
            "location": "/pages/web/journeys/#set-up-split-testing", 
            "text": "Note that if you are planning on just using the free banner, you can skip this section. This feature allows you to run A/B tests by designing multiple templates and assigning a percentage of your audience to each one.   Click the  Add Variation  button to add another design variation.   To remove an unwanted variation, click the  -  button.   Use the percentage fields to control the ratio of your audience that will see each variation.    Variation Display Limitations  You may have up to three variations in each Journey. Your total percentage allocation must not equal more than  100% . Your total percentage allocation may be  less  than  100% . In this situation, the remainder of your audience will be shown your standard website without a Journey. This allows you to A/B test against your non-Journeys website experience.", 
            "title": "Set up split testing"
        }, 
        {
            "location": "/pages/web/journeys/#auto-open", 
            "text": "You can auto-open the app for users have your app installed with Journeys. You can find this setting by selecting the CTA in the template editor:   When this box is checked, if a user views this Journey variation on your website and they have the app installed, the app will automatically open without them clicking.   As opening the app automatically is the best user experience in most cases, this is checked by default for all new templates.    Web SDK open app setting  If you use the open_app setting within the web SDK, this setting will still work for old Journeys (older than 10/25). For all new Journeys, the template setting will take precedence.    Open app behavior in in-app webviews  Please avoid using the Branch Web SDK on webpages inside of native webviews. The Branch Web SDK's auto-open can cause unexpected user experiences.", 
            "title": "Auto-open"
        }, 
        {
            "location": "/pages/web/journeys/#auto-open-the-app-on-ios", 
            "text": "The auto-open setting in the template editor will work on iOS Chrome and Android. Because auto-open is powered by URI schemes and these can lead to error messages on iOS Safari for users without your app, this is not enabled on iOS by default.   If you would like the app to open automatically on iOS Safari as well, you'll need to use a setting called  $uri_redirect_mode . Since Branch has a massive pool of cookies tied to device identifiers, we know if your app is installed when the user clicks a link. We use this intelligence to determine when to use URI schemes. If we have the history that the user installed your app, we\u2019ll use URI schemes to open up the app.   You can  reach out to support  to enable this behavior across all your links, or set it just for Journeys in the web SDK:  script   type= text/javascript \n// load the Branch web lib\n(function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s _.length ;)c(h,_[s++]); d= r.createElement(a);d.async=1;d.src= build.min.js ;k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document, script , branch ,function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1}, addListener   applyCode   banner   closeBanner   creditHistory   credits   data   deepview   deepviewCta   first   getCode   init   link   logout   redeem   referrals   removeListener   sendSMS   setBranchViewData   setIdentity   track   validateCode .split(   ),   0);  //   init   Branch   and   pass   in   your   preference   to   open   the   app  branch.init( BRANCH_KEY );  //   Trigger   your   Journeys   banner   to   use   the   correct   redirect   mode  branch.setBranchViewData({ \n         $uri_redirect_mode :   1  });  /script   Or, set it for individual templates by adding deep link data  $uri_redirect_mode:1 :   Read our blog  to learn more about the challenges of URI schemes on iOS and the URI redirect mode feature.", 
            "title": "Auto-open the app on iOS"
        }, 
        {
            "location": "/pages/web/journeys/#preserve-or-discard-referring-link-data", 
            "text": "By default, when users arrive on a page running Journeys via a Branch link and  make_new_link  is not set to  true , then any interaction with the Journey (click/install/re-open) will be attributed to the referring Branch link, rather than to the Journey. If  make_new_link  is set to  true , the same events will be attributed to the Journey, instead.  This can help you collect data on how the referring links are contributing to app growth/engagement, even when users aren\u2019t installing from those links directly. For example, if a user clicked a Branch link on Facebook, landed on your website, and installed from a Journey, this would allow you to attribute the install to the link on Facebook. If the original link was also configured to deep link into your app, that deep link would be preserved, too.  Branch will pass the referring link into Journeys by default. In order to discard referring link data, include the  make_new_link  flag, with a value of   true , into the options during initialization:  branch . init (   BRANCH_KEY , \n     { \n         make_new_link   :   true \n     }  );", 
            "title": "Preserve or discard referring link data"
        }, 
        {
            "location": "/pages/web/journeys/#prioritization", 
            "text": "", 
            "title": "Prioritization"
        }, 
        {
            "location": "/pages/web/journeys/#when-do-my-journeys-prioritization-rules-apply", 
            "text": "Prioritization only takes effect when two Journeys are overlapping. If you have a Journey targeting iOS users and a Journey targeting Android users, the prioritization won't matter. If you update the Journey targeting iOS to now target iOS and Android users, the higher priority Journey will show to Android users.", 
            "title": "When do my Journeys prioritization rules apply?"
        }, 
        {
            "location": "/pages/web/journeys/#what-happens-if-a-user-dismisses-a-banner-or-interstitial", 
            "text": "Assuming it fits your audience rule, your highest priority Journey is shown. If that Journey is dismissed, no other Journeys will show to respect the user's preference for not seeing a Journey when those rules are applied. To maximize Journey visibility, make your interstitial rules narrow (for example, showing on specific URLs) and your banner rules broad.", 
            "title": "What happens if a user dismisses a banner or interstitial?"
        }, 
        {
            "location": "/pages/web/journeys/#why-do-i-have-to-prioritize-stopped-and-draft-journeys", 
            "text": "We ask you to prioritize all non-Archived Journeys because Journeys can be set live from  Draft  or  Stopped  mode.", 
            "title": "Why do I have to prioritize Stopped and Draft Journeys?"
        }, 
        {
            "location": "/pages/web/journeys/#what-happens-if-i-have-some-journeys-with-priorities-set-and-some-without", 
            "text": "We recommend setting priority for all Journeys. All new Journeys you create will automatically have the lowest priority assigned to them, as well as  Draft  or  Stopped  Journeys  without priority  that are set live (Journeys with priority will not have their priority changed unless you explicitly set them). If you don't set a priority for all your Journeys, then any matching Journey (i.e. Journey passing the audience filter you set) without priority will be picked at random to show.", 
            "title": "What happens if I have some Journeys with priorities set and some without?"
        }, 
        {
            "location": "/pages/web/journeys/#scheduling", 
            "text": "You can set a time when your Journey will become active and be visible to your users and/or a time when it will no longer be displayed. You can also schedule Journeys on a recurring basis.   You can access this feature from the  Validate   Test  step or directly from the action menu on the Journeys manager page.    Example: Scheduling a Journey  Imagine you want to show your users a Journey during the month of November that advertises a 25% sale if they download your app. You can set it to start at 12 AM on November 1st, and end at 12 AM on December 1st:     Example: Recurring Schedules  Imagine you have a show that airs from 9-10 PM every Sunday, and you want to encourage users to view the episode in-app during that time. You can set a start time of 9 PM on the upcoming Sunday, set a stop time of 10 PM that same day, and then set it to repeat weekly:", 
            "title": "Scheduling"
        }, 
        {
            "location": "/pages/web/journeys/#scheduling-faq", 
            "text": "When does my scheduled Journey become active or stopped? \n   There can be up to a 5 minute delay between a scheduled time and your Journey becoming active or stopped.  How do I set an end date for a Journey with a recurring schedule? \n   This is not supported with scheduling at this time. To do this, set a start and stop time for your Journey and add your repeat rules. When you want the Journey to stop for good, stop it from the action menu or Edit Schedule   Delete.", 
            "title": "Scheduling FAQ"
        }, 
        {
            "location": "/pages/web/journeys/#dynamic-journeys-layout-customization", 
            "text": "We now support the use case where you can customize the appearance of a Journey depending on which link referred the web session. So, you can create a Branch link with a set of defined keys and values that will change properties such as the title or images when the user is referred to your website from this link.     Link Data Key  Value  Example Value      $journeys_button_get_has_app  The call to action button when the app is currently installed  \"Open App\"    $journeys_button_get_no_app  The call to action button when the app is  not  currently installed  \"Install App\"    $journeys_title  The title or main text of your Journey  \"Download Appsolutely today\"    $journeys_description  This is the description or subtitle in the frame  \"This app is disrupting apps\"    $journeys_icon_image_url  The app icon displayed in the layout  \" https://mysite.com/image.png )\"     Note that not all template support all override keys. For example, the floating button does not support title, description or icon image url. If a template is to be rendered and the key you've specified does not exist, we'll simply ignore it while rendering the template.", 
            "title": "Dynamic Journeys layout customization"
        }, 
        {
            "location": "/pages/web/journeys/#clientside-javascript-journeys-controls", 
            "text": "There are a number of clientside APIs to help you build quality user experiences. See below:", 
            "title": "Clientside Javascript Journeys controls"
        }, 
        {
            "location": "/pages/web/journeys/#use-javascript-to-block-a-journey-from-showing", 
            "text": "You can prevent Journeys from showing on a certain page by inserting  no_journeys  with the value of  true  into the options during initialization.  script   type= text/javascript \n// load the Branch SDK file\nbranch.init( BRANCH_KEY ,\n    {\n       no_journeys : true\n    }\n); /script", 
            "title": "Use Javascript to block a Journey from showing"
        }, 
        {
            "location": "/pages/web/journeys/#closing-a-journey-programmatically", 
            "text": "Journeys include a close button the user can click, but you may want to close the Journey with a timeout, or via some other user interaction with your web app.\nIn this case, closing the Journey is very simple by calling:  branch . closeJourney ( function ( err )   {   console . log ( err );   });", 
            "title": "Closing a Journey Programmatically"
        }, 
        {
            "location": "/pages/web/journeys/#trigger-a-journey-to-show-by-firing-an-event", 
            "text": "If you block or programatically close a Journey via one the calls above, then you can trigger a Journey to show by firing the following event:  branch . track ( pageview );   Note:  If a user has closed a Journey in the past, then firing the aforementioned event will not override a user's preference.", 
            "title": "Trigger a Journey to Show by Firing an Event"
        }, 
        {
            "location": "/pages/web/journeys/#disable-journeys-animations", 
            "text": "You can disable Journeys animations on a page by setting two flags -  disable_entry_animation  and  disable_exit_animation  - when you\u2019re calling either init() or track() with Branch\u2019s Web SDK.  Journeys animations can be disabled in order to reduce the amount of time it takes to load a Journey on a page. They can also be disabled in order to improve Journeys UX on single-page web apps, where Journeys animations can be jarring. When switching between multiple Journeys on a single-page web app, remember to use  setBranchViewData()  to change the link behind the CTA.  To disable animations during initialization, insert  disable_entry_animation  and/or  disable_exit_animation , with values of  true , into the options:  branch . init ( \u2018 BRANCH_KEY \u2019 , \n     { \n         \u2018 disable_entry_animation \u2019   :   true , \n         \u2018 disable_exit_animation \u2019   :   true \n     }  );   To disable animations using track(), insert  disable_entry_animation  and/or  disable_exit_animation , with values of  true , into the event metadata:  branch . track ( \n     \u2018 pageview \u2019 , \n     {}, \n     { \n         \u2018 disable_entry_animation \u2019   :   true , \n         \u2018 disable_exit_animation \u2019   :   true \n     }  );", 
            "title": "Disable Journeys Animations"
        }, 
        {
            "location": "/pages/web/journeys/#listen-to-journeys-lifecycle-events", 
            "text": "You can easily listen to Journeys lifecycle events by registering listener functions like so:  var   listener   =   function ( event )   {   console . log ( event );   }  // Specify an event to listen for  branch . addListener ( willShowJourney ,   listener );  // Listen for all events  branch . addListener ( listener );      Listener Name  Description      willShowJourney  Journey is about to be shown.    didShowJourney  Journey's entrance animation has completed and it is being shown to the user.    willNotShowJourney  Journey will not be shown and no other events will be emitted.    didClickJourneyCTA  User clicked on Journey's CTA button.    didClickJourneyClose  User clicked on Journey's close button.    willCloseJourney  Journey close animation has started.    didCloseJourney  Journey's close animation has completed and it is no longer visible to the user.", 
            "title": "Listen to Journeys lifecycle events"
        }, 
        {
            "location": "/pages/web/journeys/#journeys-text-localization", 
            "text": "Journeys now has an entire localization framework. Due to the complexity of this offering, we're not exposing it directly to partners. Please reach out to your account manager or   to receive access to this functionality.", 
            "title": "Journeys text localization"
        }, 
        {
            "location": "/pages/web/journeys/#css-editor", 
            "text": "If you have an upgraded premium account, you may also modify your CSS code directly in addition to using the WYSIWYG View Editor. To do so, go to the  Configure Views  step, click to edit a template, and then select the  CSS Editor  tab on the  Customize Template  screen.", 
            "title": "CSS Editor"
        }, 
        {
            "location": "/pages/web/journeys/#custom-fonts-with-journeys", 
            "text": "1) Go to  Google Fonts  and select a font.   2) Add to CSS EDITOR in Journeys. Please note: trailing semicolon on @import line is important. It's always good to have a fallback web font in case the google font fails to load.", 
            "title": "Custom fonts with Journeys"
        }, 
        {
            "location": "/pages/web/journeys/#template-customization-options", 
            "text": "The customization options available depend on the template chosen:   Smart Banner  Full Screen Interstitial  Half Page Interstitial  Floating Button", 
            "title": "Template customization options"
        }, 
        {
            "location": "/pages/web/journeys/#smart-banner", 
            "text": "The available configuration options are identical for banners at both the top and the bottom of the screen.", 
            "title": "Smart Banner"
        }, 
        {
            "location": "/pages/web/journeys/#background", 
            "text": "Option  Usage      Text Color  Specify the text color for elements without a specific setting.  Not currently used    Background Color  Set the background color of the banner", 
            "title": "Background"
        }, 
        {
            "location": "/pages/web/journeys/#title", 
            "text": "Option  Usage      Formatting Bar  WYSIWYG styling for title text    Title  The text of the title. Maximum 35 characters", 
            "title": "Title"
        }, 
        {
            "location": "/pages/web/journeys/#description", 
            "text": "Option  Usage      Formatting Bar  WYSIWYG styling for description text    Description  The text of the description. Maximum 60 characters, will wrap to two lines", 
            "title": "Description"
        }, 
        {
            "location": "/pages/web/journeys/#rating", 
            "text": "Option  Usage      Formatting Bar  WYSIWYG styling for rating stars. Primarily useful for changing color    Rating Star Count  The number of stars of your App/Play Store rating average. We encourage you to be honest!", 
            "title": "Rating"
        }, 
        {
            "location": "/pages/web/journeys/#reviews", 
            "text": "Option  Usage      Formatting Bar  WYSIWYG styling for reviews count    Reviews  The number of reviews of your app on the App/Play Store. We encourage you to be honest!", 
            "title": "Reviews"
        }, 
        {
            "location": "/pages/web/journeys/#button", 
            "text": "Option  Usage      Text Color  Change the color of the button text and button outline    Background Color  Change the color of the button background    Button Text  Change the text shown when the app is installed and not installed.    Channel  Set the  Channel  for the Branch link attached to the button. For example,  website    Tags  Set the  Tags  for the Branch link attached to the button. For example,  purchase  and  fall-sale    Deep Link Data  Insert deep link data and advanced link control parameters. Can contain any  Branch link parameter", 
            "title": "Button"
        }, 
        {
            "location": "/pages/web/journeys/#dismiss", 
            "text": "Option  Usage      Dismiss Period  Control how long the banner should be hidden once dismissed by the user. Options are  1 day ,  1 week ,  1 month ,  Never Again , and  Custom", 
            "title": "Dismiss"
        }, 
        {
            "location": "/pages/web/journeys/#app-icon", 
            "text": "Option  Usage      App Icon  Enter the URL for your app icon, or upload an image", 
            "title": "App Icon"
        }, 
        {
            "location": "/pages/web/journeys/#full-screen-interstitial", 
            "text": "", 
            "title": "Full screen interstitial"
        }, 
        {
            "location": "/pages/web/journeys/#background_1", 
            "text": "Option  Usage      Text Color  Specify the text color for elements without a specific setting.  Not currently used    Background Color  Set the background color of the interstitial    Background  Enter the URL for your background graphic, or upload an image    Image Position  Control the vertical alignment of the background graphic    Content Position  Control the vertical alignment of the content block        Image Position  Usage      Top  Pin to top of screen, scale to full screen width    Center  Pin to middle of screen, scale to full screen width    Bottom  Pin to bottom of screen, scale to full screen width    Cover  Anchor to top of screen, scale to fill entire screen     The content block contains everything except for the background image. Dimensions  within  this block are preset and cannot be modified.     Content Position  Usage      Top  Pin to top of screen    Center  Pin to center of 'safe' screen height (accounting for browser controls and device dimensions)    Bottom  Pin to bottom of 'safe' screen height (accounting for browser controls and device dimensions)    Custom  Position by relative percentage. Be sure to test for appropriate real-world alignment", 
            "title": "Background"
        }, 
        {
            "location": "/pages/web/journeys/#title_1", 
            "text": "Option  Usage      Formatting Bar  WYSIWYG styling for title text    Title  The text of the title. Maximum 35 characters, will wrap to multiple lines", 
            "title": "Title"
        }, 
        {
            "location": "/pages/web/journeys/#description_1", 
            "text": "Option  Usage      Formatting Bar  WYSIWYG styling for description text    Description  The text of the description. Maximum 60 characters, will wrap to multiple lines", 
            "title": "Description"
        }, 
        {
            "location": "/pages/web/journeys/#button_1", 
            "text": "Option  Usage      Text Color  Change the color of the button text and button outline    Background Color  Change the color of the button background    Button Text  Change the text shown when the app is installed and not installed.    Channel  Set the  Channel  for the Branch link attached to the button. For example,  website    Tags  Set the  Tags  for the Branch link attached to the button. For example,  purchase  and  fall-sale    Deep Link Data  Insert deep link data and advanced link control parameters. Can contain any  Branch link parameter", 
            "title": "Button"
        }, 
        {
            "location": "/pages/web/journeys/#dismiss_1", 
            "text": "Option  Usage      Dismiss Text  Text to show users wanting to continue to your mobile website instead of downloading the app.    Dismiss Period  Control how long before the same visitor should see the Journey again. Options are  1 day ,  1 week ,  1 month ,  Never Again , and  Custom", 
            "title": "Dismiss"
        }, 
        {
            "location": "/pages/web/journeys/#premium-journeys-functionality", 
            "text": "All Journeys features are available to upgraded apps, and are charged per event with a 14 day free trial. Visit  this page  for full pricing information.", 
            "title": "Premium journeys functionality"
        }, 
        {
            "location": "/pages/web/journeys/#limitations-for-apps-with-free-accounts", 
            "text": "Any number of Journeys may be created in  Draft  mode using all features.  An invitation to upgrade will be displayed when premium-only functionality is enabled  Only a single Journey using the Smart Banner template (either top or bottom position) may be  Active  at any one time.  To enable a different Journey, the currently active Journey must first be put into  Stopped  mode.  Any Journey using premium-only features cannot be placed into  Active  mode until the app has been upgraded.", 
            "title": "Limitations for apps with free accounts"
        }, 
        {
            "location": "/pages/web/journeys/#web-to-app-routing-without-journeys", 
            "text": "If you maintain a mobile website, Branch allows you to deep link mobile visitors directly into your app, or easily and automatically give them the option of downloading it.", 
            "title": "Web to app routing without Journeys"
        }, 
        {
            "location": "/pages/web/journeys/#open-app-if-installed", 
            "text": "Add the following code somewhere inside the  head /head  tags on your website and customize the  link parameters  to suit your needs.   Protip  What this script does is move a lot of the Branch redirection logic to the Javascript on your own page, effectively 'clicking a Branch link' on page load.   script   type = text/javascript  // load the Branch SDK file  ( function ( b , r , a , n , c , h , _ , s , d , k ){ if ( ! b [ n ] ||! b [ n ]. _q ){ for (; s _ . length ;) c ( h , _ [ s ++ ]); d = r . createElement ( a ); d . async = 1 ; d . src = https://cdn.branch.io/branch-latest.min.js ; k = r . getElementsByTagName ( a )[ 0 ]; k . parentNode . insertBefore ( d , k ); b [ n ] = h }})( window , document , script , branch , function ( b , r ){ b [ r ] = function (){ b . _q . push ([ r , arguments ])}},{ _q : [], _v : 1 }, addListener applyCode banner closeBanner creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode . split (   ),   0 );  branch . init ( YOUR-BRANCH-KEY );  // define the deepview structure  branch . deepview ( \n     { \n       channel :   mobile_web , \n       feature :   deepview , \n       data   :   { \n         $deeplink_path :   page/1234 , \n         user_profile :   7890 , \n         page_id :   1234 , \n         custom_data :   1234 \n       } \n     }, \n     { \n       open_app :   true    // If true, Branch attempts to open your app immediately when the page loads. If false, users will need to press a button. Defaults to true \n     }  );  /script    Warning  Be sure to replace  YOUR-BRANCH-KEY  with your Branch Key inside the  init()  call. You can find your Branch Key on the Dashboard\u2019s  Settings  page.", 
            "title": "Open app if installed"
        }, 
        {
            "location": "/pages/web/journeys/#add-an-install-call-to-action", 
            "text": "Trigger the  branch.deepviewCta()  function with a button or hyperlink on your page. Executing this function (whether by button, link, or some other method) 'clicks' the link you defined using  branch.deepview()  above.     Platform  Result of Call To Action      Mobile, app installed  Open app, deep link directly to content. This is a failsafe action in case the 'link click' on page load didn't fire correctly.    Mobile, app NOT installed  Open App Store or Play Store page for your app, deep link directly to content after download.    Desktop  Redirect to  $desktop_url  specified in the  deepview()  call, or fall back to your default web url from  Link Settings .     Here's how to add a simple hyperlink call to action:  a   id = downloadapp   onclick = branch.deepviewCta() View this in app / a", 
            "title": "Add an install call to action"
        }, 
        {
            "location": "/pages/web/journeys/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/web/journeys/#calls-to-branchsubdomain-blocked", 
            "text": "Protip  Click here  to read about the value to use for  [branchsubdomain] .   Please make sure to add  [branchsubdomain]  to the CSP header for your pages. We've seen some browsers that attempt to block it outright. You can deliver this in an HTTP header from your web server or you can add a simple metatag to your site like so:  meta   http-equiv = Content-Security-Policy   content = default-src https://[branchsubdomain]; child-src  none ; object-src  none", 
            "title": "Calls to [branchsubdomain] blocked"
        }, 
        {
            "location": "/pages/web/journeys/#non-mobile-optimized-sites", 
            "text": "If you're not using a mobile viewport tag ( meta name=\"viewport\" content=\"width=device-width initial-scale=1, maximum-scale=1, user-scalable=no\" ) because your site isn't mobile optimized, Journeys will look shrunken and weird. Don't worry, we have you covered:   design the banner as you would like it to look on your site  Go to the CSS editor and scroll to the bottom of the CSS code  Add two properties to the #branch-banner selector  height: 228;  zoom: 3;     The image will not look scaled properly in the editor view. This is because the dashboard is mobile optimized. Use the preview test link on the validation page to make sure the banner looks right", 
            "title": "Non-mobile optimized sites"
        }, 
        {
            "location": "/pages/web/journeys/#journey-not-sticking-to-nav", 
            "text": "Navigate to  Dashboard Journey Page  Select Journey -  Edit -  Configure Views -  Banner -  Page Placement  Banner Scroll =  sticky  Press  Save   Close   Add the following div to your nav  div   class = branch-journeys-top / div", 
            "title": "Journey not sticking to nav"
        }, 
        {
            "location": "/pages/web/journeys/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/pages/web/journeys/#example-audiences", 
            "text": "The Journeys audience tool is extremely powerful, but sometimes a few examples can help kickstart your creative juices. Here are are a couple common audience use cases to help you get started.   New users  Loyal users  Retargeting users who have taken some action  Users from Google (for SEO)  iOS users from English-speaking countries   All of these examples require you to configure advanced audience rules, which is a premium feature. You can add any set of complex rules using the following button:", 
            "title": "Example audiences"
        }, 
        {
            "location": "/pages/web/journeys/#new-users", 
            "text": "In this example, you'll configure an audience to target people who have visited your site  less than 3 times  historically. Anyone who had visited more than this will be excluded. First, you'll add a new rule for  Has visted web  in the advanced section.   Next, you'll choose the  Less than or equal to  in the middle section:   Finally, you'll enter 2 in the last part to indicate you want to target people who have visited less than 3 times historically.   Save and continue!", 
            "title": "New Users"
        }, 
        {
            "location": "/pages/web/journeys/#loyal-users", 
            "text": "In this example, you'll configure an audience to target people who have visited your site  more than 4 times  historically. Anyone who had visited less than this will be excluded. First, you'll add a new rule for  Has visted web  in the advanced section.   Next, you'll choose the  More than or equal to  in the middle section:   Finally, you'll enter 5 in the last part to indicate you want to target people who have visited more than 4 times historically.   Save and continue!", 
            "title": "Loyal Users"
        }, 
        {
            "location": "/pages/web/journeys/#retargeting-users", 
            "text": "In this example, you'll configure an audience to target people who have completed some action on your site in a past or current session. For example, if a user had added something to their cart or had previously completed a purchase. You can retarget these users with a custom call to action to download. We'll use a generic event called  MyAction  in the example. First, you'll add a new rule for  Has completed event  in the advanced section.   In this next dropdown, you'll choose the custom event to retarget from. Here, we'll use a generic event called  MyAction  but you would select  Purchase  or something more meaningful to your use case.   Next, you'll choose the  More than or equal to  in the middle section:   Finally, you'll enter 3 in the last part to indicate you want to target people who have completed  MyAction  more than 2 times historically.   Save and continue!", 
            "title": "Retargeting Users"
        }, 
        {
            "location": "/pages/web/journeys/#seo-friendly", 
            "text": "Google has recently announced that it will begin punishing sites that show a full page interstitial when a user comes from search. Because of this, you'll likely need to treat Google search traffic differently than traffic that comes from any other source. In this example, you'll set up an audience specific to users who come from Google. First, you'll add a new rule for  Came directly from a url  in the advanced section.   Next, you'll choose the  starts with  in the middle section to match a substring:   Finally, you'll enter  google.com  to target users who came from Google search (where the referrer starts with google.com):   Alternatively, you can target users who did NOT come from Google search (where the referrer doesn't start with google.com):", 
            "title": "SEO Friendly"
        }, 
        {
            "location": "/pages/web/journeys/#example-english-speaking-ios-users", 
            "text": "In this example, you'll restrict the audience to users in countries where English is the native language who are on the iOS operating system. Note that this is not in the advanced audience section, but rather in the top section. First, select  iOS  of the mobile OS checkboxes.   Next, go through and choose the following countries:  United States ,  Canada ,  United Kingdom  and  Australia .   Save and continue!", 
            "title": "Example: English speaking iOS users"
        }, 
        {
            "location": "/pages/web/amp-journeys/", 
            "text": "Overview\n\n\nAccelerated Mobile Pages (AMP)\n are a way to build pages that serve static content so that they load in Google search results much faster. Google uses AMP to quickly serve content on mobile devices without users having to click through to a website to view the content, and AMP pages often appear at the top of mobile search results.\n\n\nAMP pages by design make it difficult for users to go anywhere except back to Google search, and difficult for you to convert users to your website or your app. With AMP-compatible Journeys, you can convert mobile web traffic from Google search results to your app and take advantage of extra traffic from AMP pages. Select Journeys templates can be shown on your AMP-compatible website.\n\n\n\n\nPre-reqs\n\n\n\n\nTo host AMP Journeys and show in Google search as an AMP page, your webpage must be \nAMP\n-compatible.\n\n\nJourneys uses your alternate domain for Universal Links. Make sure you include your \nxxxx-alternate.app.link\n domain in your \nAssociated Domains\n. If you\u2019re unsure of your Branch-assigned app.link subdomain, \ncontact support\n\n\n\n\n\n\nSetup\n\n\nAdd the Branch AMP SDK to your site\n\n\nThe AMP SDK consists of 2-3 snippets that you can insert into your AMP page.\n\n\nAdd the following snippet between the AMP page\u2019s \nhead\n/head\n tags\n\n\n   \nstyle\n \namp-custom\n#\nbranch-amp-journey\n{\nbottom\n:\n0\n;\nleft\n:\n0\n;\nwidth\n:\n100\n%\n;\nheight\n:\n77\npx\n;\nposition\n:\nfixed\n;}.\nhideme\n{\nwidth\n:\n100\n%\n;\nheight\n:\n77\npx\n;\nleft\n:\n24\npx\n;\nbackground-color\n:\nnone\n;\nposition\n:\nfixed\n;}.\nclose\n{\nwidth\n:\n24\npx\n;\nheight\n:\n100\n%\n;\nleft\n:\n0\n;\nz-index\n:\n10000\n;\nbackground-color\n:\nnone\n;\nposition\n:\nfixed\n;}.\nbranch-amp-journey-inner\n{\nposition\n:\nrelative\n;\nwidth\n:\n100\n%\n;\nheight\n:\n100\n%\n;\nz-index\n:\n9999\n;}.\ndonotdisplay\n{\ndisplay\n:\nnone\n;}\n/\nstyle\n\n\n\n\n\nModify the following snippet to include your domain instead of \nDOMAIN_HERE\n and your Branch key instead of \nBRANCH_KEY_HERE\n - in both the \namp-list\n tag and the \namp-iframe\n tag. You can find these in \nLink Settings\n and \nAccount Settings\n.\n\n\namp-list\n \ntabindex=\n0\n \nrole=\n \non=\ntap:branch-amp-journey.hide\n \nid=\nbranch-amp-journey\n \nsrc=\nhttps://DOMAIN-HERE/branch-amp-journeys-pre?branch_key=BRANCH_KEY_HERE\n__aj_cid=CLIENT_ID(_s)\n__amp_viewer=VIEWER\n__aj_source_url=SOURCE_URL\n__aj_canonical_url=CANONICAL_URL\n__aj_v=1.0.0\n \nlayout=\nfixed-height\n \nheight=\n77px\ntemplate\n \ntype=\namp-mustache\n \nid=\njourney-template\na\n \nclass=\nclose\n \non=\ntap:branch-amp-journey.hide\n/a\ndiv\n \nclass=\nhideme\n \n/div\namp-iframe\n \nclass=\nbranch-amp-journey-inner \n{{\ndo_not_display\n}}\n \nlayout=\nfixed-height\n \nheight=\n77px\n \nresizable\n \nsrc=\nhttps://DOMAIN-HERE/branch-amp-journeys?branch_key=BRANCH_KEY_HERE\n__aj_cid=\n{{\n__aj_cid\n}}\n__aj_source_url=\n{{\n__aj_source_url\n}}\n__aj_canonical_url=\n{{\n__aj_canonical_url\n}}\n_audience_rule_id=\n{{\n_audience_rule_id\n}}\n_branch_view_id=\n{{\n_branch_view_id\n}}\n__aj_v=1.0.0\n \nsandbox=\nallow-scripts allow-top-navigation allow-same-origin\n \nframeborder=\n0\ndiv\n \noverflow\n/div\n/amp-iframe\n/template\n/amp-list\n\n\n\nThen add the modified snippet between the \nbody\n/body\n tags of your AMP page, preferably near or at the bottom.\n\n\nFinally, if you do not already have the following AMP scripts on your page, add them between the AMP page's \nhead\n/head\n tags:\n\nscript\n \nasync\n \nsrc=\nhttps://cdn.ampproject.org/v0/amp-list-0.1.js\n \ncustom-element=\namp-list\n/script\nscript\n \nasync\n \nsrc=\nhttps://cdn.ampproject.org/v0/amp-mustache-0.1.js\n \ncustom-template=\namp-mustache\n/script\nscript\n \nasync\n \nsrc=\nhttps://cdn.ampproject.org/v0/amp-iframe-0.1.js\n \ncustom-element=\namp-iframe\n/script\n\n\n\n\n\n\nInclude canonical URL for SEO and deep linking\n\n\nGoogle recommends\n that on your AMP page, you include a reference to the canonical URL of the non-AMP page with the same content. For example, you should include a tag like this in the \nhead\n/head\n section of your AMP page: \nlink rel=\"canonical\" href=\"https://example.com/article.html\"\n. This helps make your AMP page discoverable, and likely helps ensure that SEO information is shared between these two pages. Additionally, Branch automatically embeds the canonical URL in the Journey link data, leading to better identification of content and the ability to use this key for deep linking.\n\n\n\n\nTarget AMP Web in your audience\n\n\nAMP Journeys can be created as part of the normal \nJourneys creation flow\n. You can target users on AMP pages by checking the box \nAMP Web\n on the Select Audience step:\n\n\n\n\nSee the \nJourneys Guide\n for more information on selecting your audience.\n\n\nSelect an AMP-compatible template\n\n\nOnce you have your audience selected, you can configure your templates. Currently, only \nBranch Standard Banner Bottom\n is supported on AMP because Google requires that banners not show in the top 75% of an AMP page. Over time, Branch will add support for more Journeys templates.\n\n\nWhen you click \nSelect Template\n from the \nConfigure Views\n step, the \nstandard bottom banner\n view type should already be selected, showing you the Journeys templates that are compatible with AMP:\n\n\n\n\nHover over the template and click \nCreate\n.\n\n\nValidate \n Test your AMP Journey\n\n\nOn the \nValidate \n Test\n step, you will see AMP-specific messages if you have targeted \nAMP Web\n users on the \nSelect Audience\n step.\n\n\n\n\nThe selected template is not AMP-compatible\n\n\nIf Branch has detected that you have selected a template that is not compatible with AMP, you will see an error on the \nValidate \n Test\n step. \nSee which templates are currently compatible\n.\n\n\nTrack Analytics\n\n\nAnalytics for AMP Journeys works the \nsame way as for regular Journeys\n, in that you can see clicks, opens, installs, and custom events tied to your Journey by clicking \nView Performance\n from the actions menu for your AMP Journey.\n\n\n\n\nAdvanced\n\n\nTargeting Audiences with a URL\n\n\nWith AMP, Google will serve your page from the Google AMP cache. This means that the URL that serves your AMP page will look something like \nhttps://www.google.com/amp/s/www.example.com/amp/doc.html\n. However, Branch passes through your original source URL, and this is what you should use for audience targeting. For the advanced audience filter \nIs viewing a page URL\n, you'll want to use the original URL where you host the AMP page. In this example, that would be \nhttps://www.example.com/amp/doc.html\n.\n\n\nDeep linking with AMP\n\n\nYou can [configure links] with deep link data on AMP in two ways:\n\n\n\n\nAdd query parameters to your Branch link in the AMP SDK\n\n\nAdd deep link data to a Journey in the dashboard\n\n\n\n\n\n\nUse $canonical_url for deep linking\n\n\nAMP Journeys, along with regular Journeys and the Quick Link Creator, automatically embeds \n$canonical_url\n in your link data based on meta tags on your web or AMP page. If you use this key to route to specific content in your app, you do not have to add anything extra for AMP.\n\n\n\n\nAdd query parameters in the AMP SDK\n\n\nTo deep link to specific content in your app, you can add query parameters to your Branch link within the \namp-iframe\n. Here is what the \namp-iframe\n looks like without any query parameters:\n\n\namp-iframe\n \nclass=\nbranch-amp-journey-inner \n{{\ndo_not_display\n}}\n \nlayout=\nfixed-height\n \nheight=\n77px\n \nresizable\n \nsrc=\nhttps://DOMAIN-HERE/branch-amp-journeys?branch_key=BRANCH_KEY_HERE\n__aj_cid=\n{{\n__aj_cid\n}}\n__aj_source_url=\n{{\n__aj_source_url\n}}\n__aj_canonical_url=\n{{\n__aj_canonical_url\n}}\n_audience_rule_id=\n{{\n_audience_rule_id\n}}\n_branch_view_id=\n{{\n_branch_view_id\n}}\n__aj_v=1.0.0\n \nsandbox=\nallow-scripts allow-top-navigation allow-same-origin\n \nframeborder=\n0\ndiv\n \noverflow\n/div\n/amp-iframe\n\n\n\n\n\nIf your deep linking keys were \nproductId\n and \ncategory\n, for example, you would add \nproductId=1234\ncategory=shoes\n to your \namp-iframe\n like this:\n\n\namp-iframe\n \nclass=\nbranch-amp-journey-inner \n{{\ndo_not_display\n}}\n \nlayout=\nfixed-height\n \nheight=\n77px\n \nresizable\n \nsrc=\nhttps://DOMAIN-HERE/branch-amp-journeys?branch_key=BRANCH_KEY_HERE\n__aj_cid=\n{{\n__aj_cid\n}}\n__aj_source_url=\n{{\n__aj_source_url\n}}\n__aj_canonical_url=\n{{\n__aj_canonical_url\n}}\n_audience_rule_id=\n{{\n_audience_rule_id\n}}\n_branch_view_id=\n{{\n_branch_view_id\n}}\n__aj_v=1.0.0\nproductId=1234\ncategory=shoes\n \nsandbox=\nallow-scripts allow-top-navigation allow-same-origin\n \nframeborder=\n0\ndiv\n \noverflow\n/div\n/amp-iframe\n\n\n\n\n\nIf you are generating AMP pages programmatically, it makes sense to generate these keys as query params at the same time.\n\n\nDynamic layout customization\n\n\nYou can customize the appearance of a Journey dynamically using query parameters on your \namp-iframe\n link. These are the fields currently supported for dynamic layout customization on AMP:\n\n\n\n\n\n\n\n\nLink Data Key\n\n\nValue\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n$journeys_button_get_has_app\n\n\nThe call to action button when the app is currently installed\n\n\n$journeys_button_get_has_app=Download\n\n\n\n\n\n\n$journeys_button_get_no_app\n\n\nThe call to action button when the app is \nnot\n currently installed\n\n\n$journeys_button_get_no_app=Read\n\n\n\n\n\n\n$journeys_description\n\n\nThis is the description or subtitle in the frame\n\n\n$journeys_description=Continue+reading+in+the+app.\n\n\n\n\n\n\n\n\nAdd deep link data in the Journeys dashboard\n\n\nYou can also add deep link data to a Journey in the dashboard. In the \nCustomize Template\n screen, click the button and add your key:value pairs in the deep link data fields. For example if your deep linking key was \nproductId\n:\n\n\n\n\nSupport\n\n\nAMP-specific Restrictions\n\n\nBecause javascript is limited on AMP and cookies are restricted on both AMP and iOS, AMP Journeys does not support all of standard Journeys functionality. The following Journeys features are affected:\n\n\n\n\nEvent-based audience rules work within AMP only or after a Branch link click on an AMP page. \nRead more\n.\n\n\nOnly templates on the bottom of the page and equal to 76px in height show on AMP. \nRead more\n.\n\n\nDismiss period\n is not supported - after dismiss, Journeys will show again during the next AMP session.\n\n\nClient-side javascript controls\n are not supported.\n\n\nAuto-opening the app with open_app: true is not supported.\n\n\nDeep linking with setBranchViewData\n is not supported. \nLearn how\n you can deep link to content from AMP pages.\n\n\nIf your site uses a template engine like Jinja that looks for and replaces liquid tags (ex: {{ yourObject }}), then you should confirm that it does not remove Branch tags on render. For Jinja specifically, you should wrap the Branch code on your AMP page with raw tags:\n\n{% raw %}\n\namp-list\n \ntabindex=\n0\n \nrole=\n \non=\ntap:branch-amp-journey.hide\n \nid=\nbranch-amp-journey\n \nsrc=\nhttps://DOMAIN-HERE/branch-amp-journeys-pre?branch_key=BRANCH_KEY_HERE\n_aj_cid=CLIENT_ID(_s)\namp_viewer=VIEWER\naj_source_url=SOURCE_URL\naj_canonical_url=CANONICAL_URL\naj_v=1.0.0\n \nlayout=\nfixed-height\n \nheight=\n77px\ntemplate\n \ntype=\namp-mustache\n \nid=\njourney-template\na\n \nclass=\nclose\n \non=\ntap:branch-amp-journey.hide\n/a\ndiv\n \nclass=\nhideme\n \n/div\namp-iframe\n \nclass=\nbranch-amp-journey-inner\u00a0do_not_display\n \nlayout=\nfixed-height\n \nheight=\n77px\n \nresizable\n \nsrc=\nhttps://DOMAIN-HERE/branch-amp-journeys?branch_key=BRANCH_KEY_HERE\naj_cid=aj_cid\naj_source_url=aj_source_url\naj_canonical_url=aj_canonical_url\n_audience_rule_id=_audience_rule_id\n_branch_view_id=_branch_view_id\n_aj_v=1.0.0\n \nsandbox=\nallow-scripts allow-top-navigation allow-same-origin\n \nframeborder=\n0\ndiv\n \noverflow\n/div\n/amp-iframe\n/template\n/amp-list\n\n{% endraw %}\n\n\n\n\n\nTargeting Limitations\n\n\nBecause cookies are restricted on both AMP and iOS, event-based audience rules on AMP Journeys are cookie-restricted. Practically, this means that targeting works \nonly within AMP\n for the following rules:\n\n\n\n\nHas completed event\n\n\nHas visited web\n\n\nHas visited the app\n\n\nHas the app installed\n\n\n\n\nOnce a user has clicked a Branch link outside of AMP, event-based audience rules will adhere to the regular web cookie for that user, and will work across AMP and non-AMP web.\n\n\nBanner Limitations\n\n\nFor the time being, only banners of a fixed height and placement (bottom of the page) are compatible with AMP. This includes \nBranch Banner Bottom\n, or other custom banners with page placement on the bottom of the page and height of 76px.", 
            "title": "AMP Journeys"
        }, 
        {
            "location": "/pages/web/amp-journeys/#overview", 
            "text": "Accelerated Mobile Pages (AMP)  are a way to build pages that serve static content so that they load in Google search results much faster. Google uses AMP to quickly serve content on mobile devices without users having to click through to a website to view the content, and AMP pages often appear at the top of mobile search results.  AMP pages by design make it difficult for users to go anywhere except back to Google search, and difficult for you to convert users to your website or your app. With AMP-compatible Journeys, you can convert mobile web traffic from Google search results to your app and take advantage of extra traffic from AMP pages. Select Journeys templates can be shown on your AMP-compatible website.   Pre-reqs   To host AMP Journeys and show in Google search as an AMP page, your webpage must be  AMP -compatible.  Journeys uses your alternate domain for Universal Links. Make sure you include your  xxxx-alternate.app.link  domain in your  Associated Domains . If you\u2019re unsure of your Branch-assigned app.link subdomain,  contact support", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/web/amp-journeys/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/web/amp-journeys/#add-the-branch-amp-sdk-to-your-site", 
            "text": "The AMP SDK consists of 2-3 snippets that you can insert into your AMP page.  Add the following snippet between the AMP page\u2019s  head /head  tags      style   amp-custom # branch-amp-journey { bottom : 0 ; left : 0 ; width : 100 % ; height : 77 px ; position : fixed ;}. hideme { width : 100 % ; height : 77 px ; left : 24 px ; background-color : none ; position : fixed ;}. close { width : 24 px ; height : 100 % ; left : 0 ; z-index : 10000 ; background-color : none ; position : fixed ;}. branch-amp-journey-inner { position : relative ; width : 100 % ; height : 100 % ; z-index : 9999 ;}. donotdisplay { display : none ;} / style   Modify the following snippet to include your domain instead of  DOMAIN_HERE  and your Branch key instead of  BRANCH_KEY_HERE  - in both the  amp-list  tag and the  amp-iframe  tag. You can find these in  Link Settings  and  Account Settings .  amp-list   tabindex= 0   role=   on= tap:branch-amp-journey.hide   id= branch-amp-journey   src= https://DOMAIN-HERE/branch-amp-journeys-pre?branch_key=BRANCH_KEY_HERE __aj_cid=CLIENT_ID(_s) __amp_viewer=VIEWER __aj_source_url=SOURCE_URL __aj_canonical_url=CANONICAL_URL __aj_v=1.0.0   layout= fixed-height   height= 77px template   type= amp-mustache   id= journey-template a   class= close   on= tap:branch-amp-journey.hide /a div   class= hideme   /div amp-iframe   class= branch-amp-journey-inner  {{ do_not_display }}   layout= fixed-height   height= 77px   resizable   src= https://DOMAIN-HERE/branch-amp-journeys?branch_key=BRANCH_KEY_HERE __aj_cid= {{ __aj_cid }} __aj_source_url= {{ __aj_source_url }} __aj_canonical_url= {{ __aj_canonical_url }} _audience_rule_id= {{ _audience_rule_id }} _branch_view_id= {{ _branch_view_id }} __aj_v=1.0.0   sandbox= allow-scripts allow-top-navigation allow-same-origin   frameborder= 0 div   overflow /div /amp-iframe /template /amp-list  \nThen add the modified snippet between the  body /body  tags of your AMP page, preferably near or at the bottom.  Finally, if you do not already have the following AMP scripts on your page, add them between the AMP page's  head /head  tags: script   async   src= https://cdn.ampproject.org/v0/amp-list-0.1.js   custom-element= amp-list /script script   async   src= https://cdn.ampproject.org/v0/amp-mustache-0.1.js   custom-template= amp-mustache /script script   async   src= https://cdn.ampproject.org/v0/amp-iframe-0.1.js   custom-element= amp-iframe /script    Include canonical URL for SEO and deep linking  Google recommends  that on your AMP page, you include a reference to the canonical URL of the non-AMP page with the same content. For example, you should include a tag like this in the  head /head  section of your AMP page:  link rel=\"canonical\" href=\"https://example.com/article.html\" . This helps make your AMP page discoverable, and likely helps ensure that SEO information is shared between these two pages. Additionally, Branch automatically embeds the canonical URL in the Journey link data, leading to better identification of content and the ability to use this key for deep linking.", 
            "title": "Add the Branch AMP SDK to your site"
        }, 
        {
            "location": "/pages/web/amp-journeys/#target-amp-web-in-your-audience", 
            "text": "AMP Journeys can be created as part of the normal  Journeys creation flow . You can target users on AMP pages by checking the box  AMP Web  on the Select Audience step:   See the  Journeys Guide  for more information on selecting your audience.", 
            "title": "Target AMP Web in your audience"
        }, 
        {
            "location": "/pages/web/amp-journeys/#select-an-amp-compatible-template", 
            "text": "Once you have your audience selected, you can configure your templates. Currently, only  Branch Standard Banner Bottom  is supported on AMP because Google requires that banners not show in the top 75% of an AMP page. Over time, Branch will add support for more Journeys templates.  When you click  Select Template  from the  Configure Views  step, the  standard bottom banner  view type should already be selected, showing you the Journeys templates that are compatible with AMP:   Hover over the template and click  Create .", 
            "title": "Select an AMP-compatible template"
        }, 
        {
            "location": "/pages/web/amp-journeys/#validate-test-your-amp-journey", 
            "text": "On the  Validate   Test  step, you will see AMP-specific messages if you have targeted  AMP Web  users on the  Select Audience  step.", 
            "title": "Validate &amp; Test your AMP Journey"
        }, 
        {
            "location": "/pages/web/amp-journeys/#the-selected-template-is-not-amp-compatible", 
            "text": "If Branch has detected that you have selected a template that is not compatible with AMP, you will see an error on the  Validate   Test  step.  See which templates are currently compatible .", 
            "title": "The selected template is not AMP-compatible"
        }, 
        {
            "location": "/pages/web/amp-journeys/#track-analytics", 
            "text": "Analytics for AMP Journeys works the  same way as for regular Journeys , in that you can see clicks, opens, installs, and custom events tied to your Journey by clicking  View Performance  from the actions menu for your AMP Journey.", 
            "title": "Track Analytics"
        }, 
        {
            "location": "/pages/web/amp-journeys/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/web/amp-journeys/#targeting-audiences-with-a-url", 
            "text": "With AMP, Google will serve your page from the Google AMP cache. This means that the URL that serves your AMP page will look something like  https://www.google.com/amp/s/www.example.com/amp/doc.html . However, Branch passes through your original source URL, and this is what you should use for audience targeting. For the advanced audience filter  Is viewing a page URL , you'll want to use the original URL where you host the AMP page. In this example, that would be  https://www.example.com/amp/doc.html .", 
            "title": "Targeting Audiences with a URL"
        }, 
        {
            "location": "/pages/web/amp-journeys/#deep-linking-with-amp", 
            "text": "You can [configure links] with deep link data on AMP in two ways:   Add query parameters to your Branch link in the AMP SDK  Add deep link data to a Journey in the dashboard    Use $canonical_url for deep linking  AMP Journeys, along with regular Journeys and the Quick Link Creator, automatically embeds  $canonical_url  in your link data based on meta tags on your web or AMP page. If you use this key to route to specific content in your app, you do not have to add anything extra for AMP.", 
            "title": "Deep linking with AMP"
        }, 
        {
            "location": "/pages/web/amp-journeys/#add-query-parameters-in-the-amp-sdk", 
            "text": "To deep link to specific content in your app, you can add query parameters to your Branch link within the  amp-iframe . Here is what the  amp-iframe  looks like without any query parameters:  amp-iframe   class= branch-amp-journey-inner  {{ do_not_display }}   layout= fixed-height   height= 77px   resizable   src= https://DOMAIN-HERE/branch-amp-journeys?branch_key=BRANCH_KEY_HERE __aj_cid= {{ __aj_cid }} __aj_source_url= {{ __aj_source_url }} __aj_canonical_url= {{ __aj_canonical_url }} _audience_rule_id= {{ _audience_rule_id }} _branch_view_id= {{ _branch_view_id }} __aj_v=1.0.0   sandbox= allow-scripts allow-top-navigation allow-same-origin   frameborder= 0 div   overflow /div /amp-iframe   If your deep linking keys were  productId  and  category , for example, you would add  productId=1234 category=shoes  to your  amp-iframe  like this:  amp-iframe   class= branch-amp-journey-inner  {{ do_not_display }}   layout= fixed-height   height= 77px   resizable   src= https://DOMAIN-HERE/branch-amp-journeys?branch_key=BRANCH_KEY_HERE __aj_cid= {{ __aj_cid }} __aj_source_url= {{ __aj_source_url }} __aj_canonical_url= {{ __aj_canonical_url }} _audience_rule_id= {{ _audience_rule_id }} _branch_view_id= {{ _branch_view_id }} __aj_v=1.0.0 productId=1234 category=shoes   sandbox= allow-scripts allow-top-navigation allow-same-origin   frameborder= 0 div   overflow /div /amp-iframe   If you are generating AMP pages programmatically, it makes sense to generate these keys as query params at the same time.", 
            "title": "Add query parameters in the AMP SDK"
        }, 
        {
            "location": "/pages/web/amp-journeys/#dynamic-layout-customization", 
            "text": "You can customize the appearance of a Journey dynamically using query parameters on your  amp-iframe  link. These are the fields currently supported for dynamic layout customization on AMP:     Link Data Key  Value  Example      $journeys_button_get_has_app  The call to action button when the app is currently installed  $journeys_button_get_has_app=Download    $journeys_button_get_no_app  The call to action button when the app is  not  currently installed  $journeys_button_get_no_app=Read    $journeys_description  This is the description or subtitle in the frame  $journeys_description=Continue+reading+in+the+app.", 
            "title": "Dynamic layout customization"
        }, 
        {
            "location": "/pages/web/amp-journeys/#add-deep-link-data-in-the-journeys-dashboard", 
            "text": "You can also add deep link data to a Journey in the dashboard. In the  Customize Template  screen, click the button and add your key:value pairs in the deep link data fields. For example if your deep linking key was  productId :", 
            "title": "Add deep link data in the Journeys dashboard"
        }, 
        {
            "location": "/pages/web/amp-journeys/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/web/amp-journeys/#amp-specific-restrictions", 
            "text": "Because javascript is limited on AMP and cookies are restricted on both AMP and iOS, AMP Journeys does not support all of standard Journeys functionality. The following Journeys features are affected:   Event-based audience rules work within AMP only or after a Branch link click on an AMP page.  Read more .  Only templates on the bottom of the page and equal to 76px in height show on AMP.  Read more .  Dismiss period  is not supported - after dismiss, Journeys will show again during the next AMP session.  Client-side javascript controls  are not supported.  Auto-opening the app with open_app: true is not supported.  Deep linking with setBranchViewData  is not supported.  Learn how  you can deep link to content from AMP pages.  If your site uses a template engine like Jinja that looks for and replaces liquid tags (ex: {{ yourObject }}), then you should confirm that it does not remove Branch tags on render. For Jinja specifically, you should wrap the Branch code on your AMP page with raw tags: {% raw %} amp-list   tabindex= 0   role=   on= tap:branch-amp-journey.hide   id= branch-amp-journey   src= https://DOMAIN-HERE/branch-amp-journeys-pre?branch_key=BRANCH_KEY_HERE _aj_cid=CLIENT_ID(_s) amp_viewer=VIEWER aj_source_url=SOURCE_URL aj_canonical_url=CANONICAL_URL aj_v=1.0.0   layout= fixed-height   height= 77px template   type= amp-mustache   id= journey-template a   class= close   on= tap:branch-amp-journey.hide /a div   class= hideme   /div amp-iframe   class= branch-amp-journey-inner\u00a0do_not_display   layout= fixed-height   height= 77px   resizable   src= https://DOMAIN-HERE/branch-amp-journeys?branch_key=BRANCH_KEY_HERE aj_cid=aj_cid aj_source_url=aj_source_url aj_canonical_url=aj_canonical_url _audience_rule_id=_audience_rule_id _branch_view_id=_branch_view_id _aj_v=1.0.0   sandbox= allow-scripts allow-top-navigation allow-same-origin   frameborder= 0 div   overflow /div /amp-iframe /template /amp-list \n{% endraw %}", 
            "title": "AMP-specific Restrictions"
        }, 
        {
            "location": "/pages/web/amp-journeys/#targeting-limitations", 
            "text": "Because cookies are restricted on both AMP and iOS, event-based audience rules on AMP Journeys are cookie-restricted. Practically, this means that targeting works  only within AMP  for the following rules:   Has completed event  Has visited web  Has visited the app  Has the app installed   Once a user has clicked a Branch link outside of AMP, event-based audience rules will adhere to the regular web cookie for that user, and will work across AMP and non-AMP web.", 
            "title": "Targeting Limitations"
        }, 
        {
            "location": "/pages/web/amp-journeys/#banner-limitations", 
            "text": "For the time being, only banners of a fixed height and placement (bottom of the page) are compatible with AMP. This includes  Branch Banner Bottom , or other custom banners with page placement on the bottom of the page and height of 76px.", 
            "title": "Banner Limitations"
        }, 
        {
            "location": "/pages/web/text-me-the-app/", 
            "text": "Overview\n\n\nWhen users click your links on desktop, they have the option to text themselves a link to download your app. We provide this by default on every Branch link, but you can also create your own fully-branded Text Me The App page.\n\n\n\n\nLeft: Branch default. Right: a customized version.\n\n\nThis document will cover how to create a custom Text Me The App page, as well as a general FAQ for this product.\n\n\nUsage Policies\n\n\nBranch reserves the right to limit your use of the Text Me The App service and charge for SMS costs at its own discretion. To understand Branch's policies in this regard, please contact your Branch Account Manager or \n at any time for assistance.\n\n\nSetup\n\n\nIf you don't want to use Branch's default Text Me The App Page or show a desktop deepview, follow these instructions. This will let you customize a Text Me The App page using Branch.\n\n\nSet Destination URL\n\n\n\n\nVisit the \nDesktop SMS\n page on the Branch dashboard.\n\n\nSelect \nCustom Landing Page with SMS\n, after you toggle to \nOn\n.\n\n\nEnter the destination URL.\n\n\n\n\n\n\n\n\nMake sure you can access this page\n\n\nBecause you will be making changes to this URL, be sure you have access to the page and can make changes to its HTML.\n\n\n\n\nInsert SendSMS() snippet into your page\n\n\nWhen you have set your destination URL from the previous step, go to that page and edit the HTML. Paste the following code snippet into it; this is a fully-functional web page that you can use as a template for your Text Me The App page.\n\n\n!DOCTYPE HTML\n\n\nhtml\n \nlang\n=\nen-US\n\n\nhead\n\n\nmeta\n \ncharset\n=\nUTF-8\n\n    \nscript\n \ntype\n=\ntext/javascript\n\n        \n(\nfunction\n(\nb\n,\nr\n,\na\n,\nn\n,\nc\n,\nh\n,\n_\n,\ns\n,\nd\n,\nk\n){\nif\n(\n!\nb\n[\nn\n]\n||!\nb\n[\nn\n].\n_q\n){\nfor\n(;\ns\n_\n.\nlength\n;)\nc\n(\nh\n,\n_\n[\ns\n++\n]);\nd\n=\nr\n.\ncreateElement\n(\na\n);\nd\n.\nasync\n=\n1\n;\nd\n.\nsrc\n=\nhttps://cdn.branch.io/branch-latest.min.js\n;\nk\n=\nr\n.\ngetElementsByTagName\n(\na\n)[\n0\n];\nk\n.\nparentNode\n.\ninsertBefore\n(\nd\n,\nk\n);\nb\n[\nn\n]\n=\nh\n}})(\nwindow\n,\ndocument\n,\nscript\n,\nbranch\n,\nfunction\n(\nb\n,\nr\n){\nb\n[\nr\n]\n=\nfunction\n(){\nb\n.\n_q\n.\npush\n([\nr\n,\narguments\n])}},{\n_q\n:\n[],\n_v\n:\n1\n},\naddListener applyCode banner closeBanner creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode\n.\nsplit\n(\n \n),\n \n0\n);\n\n\n        \nbranch\n.\ninit\n(\nYOUR-BRANCH-KEY\n);\n\n            \nfunction\n \nsendSMS\n(\nform\n)\n \n{\n\n                \nvar\n \nphone\n \n=\n \nform\n.\nphone\n.\nvalue\n;\n\n                \nvar\n \nlinkData\n \n=\n \n{\n\n                    \ntags\n:\n \n[],\n\n                    \nchannel\n:\n \nWebsite\n,\n\n                    \nfeature\n:\n \nTextMeTheApp\n,\n\n                    \ndata\n:\n \n{\n\n                        \nfoo\n:\n \nbar\n\n                    \n}\n\n                \n};\n\n                \nvar\n \noptions\n \n=\n \n{};\n\n                \nvar\n \ncallback\n \n=\n \nfunction\n(\nerr\n,\n \nresult\n)\n \n{\n\n                    \nif\n \n(\nerr\n)\n \n{\n\n                        \nalert\n(\nSorry, something went wrong.\n);\n\n                    \n}\n\n                    \nelse\n \n{\n\n                        \nalert\n(\nSMS sent!\n);\n\n                    \n}\n\n                \n};\n\n                \nbranch\n.\nsendSMS\n(\nphone\n,\n \nlinkData\n,\n \noptions\n,\n \ncallback\n);\n\n                \nform\n.\nphone\n.\nvalue\n \n=\n \n;\n\n            \n}\n\n    \n/\nscript\n\n\n/\nhead\n\n\nbody\n\n        Send SMS\n        \nform\n \nonsubmit\n=\nsendSMS(this); return false;\n\n            \ninput\n \nid\n=\nphone\n \nname\n=\nphone\n \ntype\n=\ntel\n \nplaceholder\n=\n(650) 123-4567\n \n/\n\n            \nbr\n/\n\n            \ninput\n \ntype\n=\nsubmit\n/\n\n        \n/\nform\n\n    \n/\nbody\n\n\n/\nhtml\n\n\n\n\n\nAnd that's it. From here, you can customize the HTML and CSS, and Branch will take care of the rest. If you want to further customize the page or SMS message itself, read further.\n\n\nAdvanced\n\n\nUse your own SMS service\n\n\nBranch uses Twilio to provide your users the ability to text themselves the app for free, but you can roll your own SMS service by using the following basic logic:\n\n\n\n\nDoes \n~referring_link\n exist? (a.k.a. did the user end up on this Text Me The App page because of a Branch link?) If so, use this link when sending the SMS.\n\n\nIf not (\n~referring_link\n is null), generate a new Branch link by making a call to the Web SDK's \nlink()\n method. Use this link when sending the SMS.\n\n\n\n\nThe \n~referring_link\n parameter is returned in the Web SDK's init() callback, buried in the referring link data. See the code below:\n\n\nbranch\n.\ninit\n(\nYOUR-BRANCH-KEY\n,\n \nfunction\n(\nerr\n,\n \ndata\n)\n \n{\n\n    \nif\n \n(\ndata\n.\ndata\n[\n~referring_link\n])\n \n{\n\n        \nconsole\n.\nlog\n(\ndata.data[\n~referring_link\n]:\n,\n \ndata\n.\ndata\n[\n~referring_link\n]);\n\n    \n}\n\n\n});\n\n\n\n\n\nUse a custom form with SendSMS()\n\n\nIf you have an existing form for users to input their phone number, you can put our Text Me The App behind it. Add the following code somewhere inside the \nhead\n/head\n tags on your website.\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\nfunction\n \nsendSMS\n(\nform\n)\n \n{\n\n  \nbranch\n.\nsendSMS\n(\n\n    \nphone\n: \nform.phone.text\n,\n\n    \n{\n\n      \nchannel\n:\n \nWebsite\n,\n\n      \nfeature\n:\n \nText-Me-The-App\n,\n\n      \ndata\n:\n \n{\n\n        \nfoo\n:\n \nbar\n\n      \n}\n\n    \n},\n\n    \n{\n \nmake_new_link\n: \nfalse\n \n},\n \n// Default: false. If set to true, sendSMS will generate a new link even if one already exists.\n\n    \nfunction\n(\nerr\n)\n \n{\n \nconsole\n.\nlog\n(\nerr\n);\n \n}\n\n  \n);\n\n\n}\n\n\n/script\n\n\n\n\n\nCall sendSMS when someone enters something into your form.\n\n\nCustomize SMS message content\n\n\nThe default text for SMS messages is \"Click here to download [App Name] {{ link }}\".\n\n\nIf you want to customize this, Branch allows you to set a default for all messages, or customize the message for each link.\n\n\nCustomize all messages\n\n\nYou can create your own custom default message that will be sent if the specific link someone clicks doesn't have a customized message itself. Navigate back to the Desktop SMS page on the \nBranch dashboard\n. You should see the following section below.\n\n\n\n\nEditing this field will modify \nall\n SMS messages sent.\n\n\nCustom link-specific messages\n\n\nIf you don't want to edit the global SMS text, you can define a special SMS message for each individual link. Whether you want to switch the language of a message for a different region or include device specific date, you can specify the message in the \nDeep Link Data\n section at the bottom of the link editing screen.\n\n\n\n\nUse the \n$custom_sms_text\n parameter and then enter your custom message in the value section. Make sure to include the \n{{ link }}\n tag in your custom message! Read the following scenario below to see this in action.\n\n\nThe developer of FlowerPower wants to customize the SMS messages based on the country of the recipient. For each Branch link, they would specify in the deep link data a different custom message.\n\n\nFor ads in France:\n\nCliquez pour t\u00e9l\u00e9charger FlowerPower ici {{ link }}\n\n\nFor ads in Spain:\n\nHaz click aqu\u00ed para descargar FlowerPower {{ link }}\n\n\nFor ads in Germany:\n\nKlicken Sie auf das FlowerPower hier herunterladen {{ link }}\n\n\nUse liquid tags to further customize messages\n\n\nYou can access almost any value of your link's parameters by using liquid tags. The customization options are only limited to your imagination.\n\n\n\n\nThe tag \n{{ link }}\n is replaced with your Branch link\n\n\n{{ link.channel }}\n and \n{{ link.campaign }}\n output the channel and campaign, if these were set when creating the link.\n\n\n{{ link.data.key }}\n will output a parameter of your link's data dictionary, where \nkey\n is the name of the parameter\n\n\n\n\nHere's an example to illustrate this scenario.\n\n\nDmitri is creating Branch links to deep link to each of the different flowers in his app FlowerPower. He creates each link with a key/value pair of the key \nflower\n and the flower name, e.g. \nFlower : Rose\n, \nFlower : Tulip\n. He wants to customize his SMS messages based on name of the flower, so he sets his custom link messages as:\n\n\n{{ link.data.flower }}\ns on the mind? Click here to buy some for your home! \n{{ link }}\n\n\n\n\nGlossary\n\n\nSendSMS() parameters\n\n\nThe \nsendSMS()\n method requires a phone number and \nlink parameters\n. You may optionally specify configuration options and a callback.\n\n\nbranch\n.\nsendSMS\n(\n\n    \nphone\n,\n\n    \nlinkData\n,\n\n    \noptions\n,\n\n    \ncallback\n \n(\nerr\n,\n \ndata\n)\n\n\n);\n\n\n\n\n\nYour call to this method, once filled in with the user's phone number, could look like the following:\n\n\nbranch\n.\nsendSMS\n(\n\n    \nphone\n:\n \n9999999999\n,\n\n    \n{\n\n        \ntags\n:\n \n[\ntag1\n,\n \ntag2\n],\n\n        \nchannel\n:\n \nfacebook\n,\n\n        \nfeature\n:\n \ndashboard\n,\n\n        \nstage\n:\n \nnew user\n,\n\n        \ndata\n:\n \n{\n\n            \nfoo\n:\n \nbar\n\n        \n}\n\n    \n},\n\n    \n{\n \nmake_new_link\n:\n \nfalse\n \n},\n \n// Default: false. If set to true, sendSMS will generate a new link even if one already exists.\n\n    \nfunction\n(\nerr\n)\n \n{\n \nconsole\n.\nlog\n(\nerr\n);\n \n}\n\n\n});\n\n\n\n\n\nSetting default replacement values for liquid tags\n\n\nIf a specific tag isn't always going to be filled, you can use a \n|\n character to specify a default to fallback on if the tag is missing from your link dictionary.\n\n\nE.g. \n{{ link.data.author | default:\"Alex\" }}\n\n\nIf the \nlink.data.author\n information isn't found, the tag will just be replaced with \nAlex\n instead of being replaced by an empty string.\n\n\nFAQ\n\n\nWhat are the SMS rate limits?\n\n\nWe enforce the following rate limits when sending SMS through Branch:\n\n\n\n\n5 texts to the same number within an hour.\n\n\n100 texts from the same IP within an hour.\n\n\n\n\nCan I use this service for international phone numbers?\n\n\nYes. Branch uses Twilio to send SMS messages, which means SMS will be delivered all around the world. However, please note that the number the SMS has to be delivered to, must be in the same country the SMS is being sent from.\n\n\nI've sent myself multiple texts just now and only received the first few, what's going on?\n\n\nThis occurs when a carrier filters you SMS out due to spam. We try our hardest to rate limit a specific user, however, if bypassed, carriers may block your SMS. The reason is that carriers will aggressively block content if it's similar and repeatedly sent to the same number. The solution is to wait 24-48 hours.\n\n\nHow come my (non US) phone number isn't working?\n\n\nWith full numbers, you are required to use \"+\" and the country code. If you know your users are only in a certain country, you can automatically prepend \"+\" and the country code so that they only need to enter their regular number. To do this, you must create a custom text-me-the-app page. Then, you can alter the code snippet in \nstep 2\n with the following:\n\n\n    \nvar\n \nphone\n \n=\n \n+91\n \n+\n \nform\n.\nphone\n.\nvalue\n;\n\n\n\n\n\nIn the example above, \"+91\" is the code for the country your users are based in.\n\n\nWhy have the SMS links sent from Text Me The App expired?\n\n\nA: All links links generated from the Text Me the App feature will expire after 7 days.", 
            "title": "Text Me The App"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#overview", 
            "text": "When users click your links on desktop, they have the option to text themselves a link to download your app. We provide this by default on every Branch link, but you can also create your own fully-branded Text Me The App page.   Left: Branch default. Right: a customized version.  This document will cover how to create a custom Text Me The App page, as well as a general FAQ for this product.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#usage-policies", 
            "text": "Branch reserves the right to limit your use of the Text Me The App service and charge for SMS costs at its own discretion. To understand Branch's policies in this regard, please contact your Branch Account Manager or   at any time for assistance.", 
            "title": "Usage Policies"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#setup", 
            "text": "If you don't want to use Branch's default Text Me The App Page or show a desktop deepview, follow these instructions. This will let you customize a Text Me The App page using Branch.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#set-destination-url", 
            "text": "Visit the  Desktop SMS  page on the Branch dashboard.  Select  Custom Landing Page with SMS , after you toggle to  On .  Enter the destination URL.     Make sure you can access this page  Because you will be making changes to this URL, be sure you have access to the page and can make changes to its HTML.", 
            "title": "Set Destination URL"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#insert-sendsms-snippet-into-your-page", 
            "text": "When you have set your destination URL from the previous step, go to that page and edit the HTML. Paste the following code snippet into it; this is a fully-functional web page that you can use as a template for your Text Me The App page.  !DOCTYPE HTML  html   lang = en-US  head  meta   charset = UTF-8 \n     script   type = text/javascript \n         ( function ( b , r , a , n , c , h , _ , s , d , k ){ if ( ! b [ n ] ||! b [ n ]. _q ){ for (; s _ . length ;) c ( h , _ [ s ++ ]); d = r . createElement ( a ); d . async = 1 ; d . src = https://cdn.branch.io/branch-latest.min.js ; k = r . getElementsByTagName ( a )[ 0 ]; k . parentNode . insertBefore ( d , k ); b [ n ] = h }})( window , document , script , branch , function ( b , r ){ b [ r ] = function (){ b . _q . push ([ r , arguments ])}},{ _q : [], _v : 1 }, addListener applyCode banner closeBanner creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode . split (   ),   0 ); \n\n         branch . init ( YOUR-BRANCH-KEY ); \n             function   sendSMS ( form )   { \n                 var   phone   =   form . phone . value ; \n                 var   linkData   =   { \n                     tags :   [], \n                     channel :   Website , \n                     feature :   TextMeTheApp , \n                     data :   { \n                         foo :   bar \n                     } \n                 }; \n                 var   options   =   {}; \n                 var   callback   =   function ( err ,   result )   { \n                     if   ( err )   { \n                         alert ( Sorry, something went wrong. ); \n                     } \n                     else   { \n                         alert ( SMS sent! ); \n                     } \n                 }; \n                 branch . sendSMS ( phone ,   linkData ,   options ,   callback ); \n                 form . phone . value   =   ; \n             } \n     / script  / head  body \n        Send SMS\n         form   onsubmit = sendSMS(this); return false; \n             input   id = phone   name = phone   type = tel   placeholder = (650) 123-4567   / \n             br / \n             input   type = submit / \n         / form \n     / body  / html   And that's it. From here, you can customize the HTML and CSS, and Branch will take care of the rest. If you want to further customize the page or SMS message itself, read further.", 
            "title": "Insert SendSMS() snippet into your page"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#use-your-own-sms-service", 
            "text": "Branch uses Twilio to provide your users the ability to text themselves the app for free, but you can roll your own SMS service by using the following basic logic:   Does  ~referring_link  exist? (a.k.a. did the user end up on this Text Me The App page because of a Branch link?) If so, use this link when sending the SMS.  If not ( ~referring_link  is null), generate a new Branch link by making a call to the Web SDK's  link()  method. Use this link when sending the SMS.   The  ~referring_link  parameter is returned in the Web SDK's init() callback, buried in the referring link data. See the code below:  branch . init ( YOUR-BRANCH-KEY ,   function ( err ,   data )   { \n     if   ( data . data [ ~referring_link ])   { \n         console . log ( data.data[ ~referring_link ]: ,   data . data [ ~referring_link ]); \n     }  });", 
            "title": "Use your own SMS service"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#use-a-custom-form-with-sendsms", 
            "text": "If you have an existing form for users to input their phone number, you can put our Text Me The App behind it. Add the following code somewhere inside the  head /head  tags on your website.  script   type = text/javascript  function   sendSMS ( form )   { \n   branch . sendSMS ( \n     phone :  form.phone.text , \n     { \n       channel :   Website , \n       feature :   Text-Me-The-App , \n       data :   { \n         foo :   bar \n       } \n     }, \n     {   make_new_link :  false   },   // Default: false. If set to true, sendSMS will generate a new link even if one already exists. \n     function ( err )   {   console . log ( err );   } \n   );  }  /script   Call sendSMS when someone enters something into your form.", 
            "title": "Use a custom form with SendSMS()"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#customize-sms-message-content", 
            "text": "The default text for SMS messages is \"Click here to download [App Name] {{ link }}\".  If you want to customize this, Branch allows you to set a default for all messages, or customize the message for each link.", 
            "title": "Customize SMS message content"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#customize-all-messages", 
            "text": "You can create your own custom default message that will be sent if the specific link someone clicks doesn't have a customized message itself. Navigate back to the Desktop SMS page on the  Branch dashboard . You should see the following section below.   Editing this field will modify  all  SMS messages sent.", 
            "title": "Customize all messages"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#custom-link-specific-messages", 
            "text": "If you don't want to edit the global SMS text, you can define a special SMS message for each individual link. Whether you want to switch the language of a message for a different region or include device specific date, you can specify the message in the  Deep Link Data  section at the bottom of the link editing screen.   Use the  $custom_sms_text  parameter and then enter your custom message in the value section. Make sure to include the  {{ link }}  tag in your custom message! Read the following scenario below to see this in action.  The developer of FlowerPower wants to customize the SMS messages based on the country of the recipient. For each Branch link, they would specify in the deep link data a different custom message.  For ads in France: Cliquez pour t\u00e9l\u00e9charger FlowerPower ici {{ link }}  For ads in Spain: Haz click aqu\u00ed para descargar FlowerPower {{ link }}  For ads in Germany: Klicken Sie auf das FlowerPower hier herunterladen {{ link }}", 
            "title": "Custom link-specific messages"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#use-liquid-tags-to-further-customize-messages", 
            "text": "You can access almost any value of your link's parameters by using liquid tags. The customization options are only limited to your imagination.   The tag  {{ link }}  is replaced with your Branch link  {{ link.channel }}  and  {{ link.campaign }}  output the channel and campaign, if these were set when creating the link.  {{ link.data.key }}  will output a parameter of your link's data dictionary, where  key  is the name of the parameter   Here's an example to illustrate this scenario.  Dmitri is creating Branch links to deep link to each of the different flowers in his app FlowerPower. He creates each link with a key/value pair of the key  flower  and the flower name, e.g.  Flower : Rose ,  Flower : Tulip . He wants to customize his SMS messages based on name of the flower, so he sets his custom link messages as:  {{ link.data.flower }} s on the mind? Click here to buy some for your home!  {{ link }}", 
            "title": "Use liquid tags to further customize messages"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#glossary", 
            "text": "", 
            "title": "Glossary"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#sendsms-parameters", 
            "text": "The  sendSMS()  method requires a phone number and  link parameters . You may optionally specify configuration options and a callback.  branch . sendSMS ( \n     phone , \n     linkData , \n     options , \n     callback   ( err ,   data )  );   Your call to this method, once filled in with the user's phone number, could look like the following:  branch . sendSMS ( \n     phone :   9999999999 , \n     { \n         tags :   [ tag1 ,   tag2 ], \n         channel :   facebook , \n         feature :   dashboard , \n         stage :   new user , \n         data :   { \n             foo :   bar \n         } \n     }, \n     {   make_new_link :   false   },   // Default: false. If set to true, sendSMS will generate a new link even if one already exists. \n     function ( err )   {   console . log ( err );   }  });", 
            "title": "SendSMS() parameters"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#setting-default-replacement-values-for-liquid-tags", 
            "text": "If a specific tag isn't always going to be filled, you can use a  |  character to specify a default to fallback on if the tag is missing from your link dictionary.  E.g.  {{ link.data.author | default:\"Alex\" }}  If the  link.data.author  information isn't found, the tag will just be replaced with  Alex  instead of being replaced by an empty string.", 
            "title": "Setting default replacement values for liquid tags"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#what-are-the-sms-rate-limits", 
            "text": "We enforce the following rate limits when sending SMS through Branch:   5 texts to the same number within an hour.  100 texts from the same IP within an hour.", 
            "title": "What are the SMS rate limits?"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#can-i-use-this-service-for-international-phone-numbers", 
            "text": "Yes. Branch uses Twilio to send SMS messages, which means SMS will be delivered all around the world. However, please note that the number the SMS has to be delivered to, must be in the same country the SMS is being sent from.", 
            "title": "Can I use this service for international phone numbers?"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#ive-sent-myself-multiple-texts-just-now-and-only-received-the-first-few-whats-going-on", 
            "text": "This occurs when a carrier filters you SMS out due to spam. We try our hardest to rate limit a specific user, however, if bypassed, carriers may block your SMS. The reason is that carriers will aggressively block content if it's similar and repeatedly sent to the same number. The solution is to wait 24-48 hours.", 
            "title": "I've sent myself multiple texts just now and only received the first few, what's going on?"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#how-come-my-non-us-phone-number-isnt-working", 
            "text": "With full numbers, you are required to use \"+\" and the country code. If you know your users are only in a certain country, you can automatically prepend \"+\" and the country code so that they only need to enter their regular number. To do this, you must create a custom text-me-the-app page. Then, you can alter the code snippet in  step 2  with the following:       var   phone   =   +91   +   form . phone . value ;   In the example above, \"+91\" is the code for the country your users are based in.", 
            "title": "How come my (non US) phone number isn't working?"
        }, 
        {
            "location": "/pages/web/text-me-the-app/#why-have-the-sms-links-sent-from-text-me-the-app-expired", 
            "text": "A: All links links generated from the Text Me the App feature will expire after 7 days.", 
            "title": "Why have the SMS links sent from Text Me The App expired?"
        }, 
        {
            "location": "/pages/web/hosted-data/", 
            "text": "Why\n\n\n\n\nMake it easier for your marketers to create deep links whenever they create \nJourneys\n, \nDeep Linked Emails\n, \nQuick links\n, or use the \nChrome Extension\n.\n\n\n\n\nWhat\n\n\n\n\nIf you host deep link data in your website source code, Branch can automatically convert a simple web URL into a corresponding Branch link that deep links to relevant content in your mobile app.\n\n\nBranch will also parse your Content Analytics data and provide you with more valuable information about which content is driving clicks, installs, opens, and in-app engagement.\n\n\n\n\nHow\n\n\n\n\n\n\nUnderstand your web and app content\n\n\n\n\n\n\nThe first step to successfully putting deep link data on your website is to understand how your deep links correspond to your web URLs. Ask yourself the following questions, and group your content accordingly.\n\n\n\n\nDo you have any content on web that doesn\u2019t exist in the app? Examples include: time-sensitive promotions, splash pages, micro-sites.\n\n\nFor content that has corresponding app content, what type of pages do you have? Examples include: search result pages, category homepages, product pages.\n\n\nIf you\u2019ve already set up deep linking (if you haven\u2019t set up deep linking skip this step): what does your deep linking schema look like? Do you use different keys for different content? Do you have required key/value pairs that aren\u2019t content specific? Examples include: \nproductPage\n or \ncategoryPage\n keys, or \nproduct_view=true\n.  \n\n\n\n\n\n\n\n\n\n\n\n\nAdd metatags to your site\n\n\n\n\n\n\nThis will become the key-value pair in your deep link data, for example:\n\n\n\n\n\n\n\n\nExample URL\n\n\nURL data\n\n\nMetatags to add to your site\n\n\n\n\n\n\n\n\n\n\nhttps://shop.com/shoes/brown-loafers\n\n\nproductId=1234, productView=true\n\n\nmeta name=\"branch:deeplink:productId\" content=\"1234\" /\n, \nmeta name=\"branch:deeplink:productView\" content=\"true\" /\n\n\n\n\n\n\nhttps://shop.com/shoes\n\n\ncategoryId=5678\n\n\nmeta name=\"branch:deeplink:categoryId\" content=\"5678\" /\n\n\n\n\n\n\nhttps://shop.com/your-mother-is-great\n\n\nNo corresponding app content (\nopen web\n)\n\n\nmeta name=\"branch:deeplink:$web_only\" content=\"true\" /\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTroubleshoot\n\n\n\n\n\n\nFacebook App Links Metatags\n\n\n\n\nIf you have \nFacebook App Links metatags\n on your site and working with your app, then you can skip these instructions. Branch will automatically fetch App Links tags and add them to your deep link data.\n\n\n\n\n\n\n\n\nGoogle Tag Manager\n\n\n\n\nDo not use Google Tag Manager (GTM) to insert your content metatags. GTM requires JavaScript to load on the page, and the Branch link data scraper does not support JavaScript execution.", 
            "title": "Hosted Deep Link Data"
        }, 
        {
            "location": "/pages/web/hosted-data/#why", 
            "text": "Make it easier for your marketers to create deep links whenever they create  Journeys ,  Deep Linked Emails ,  Quick links , or use the  Chrome Extension .", 
            "title": "Why"
        }, 
        {
            "location": "/pages/web/hosted-data/#what", 
            "text": "If you host deep link data in your website source code, Branch can automatically convert a simple web URL into a corresponding Branch link that deep links to relevant content in your mobile app.  Branch will also parse your Content Analytics data and provide you with more valuable information about which content is driving clicks, installs, opens, and in-app engagement.", 
            "title": "What"
        }, 
        {
            "location": "/pages/web/hosted-data/#how", 
            "text": "", 
            "title": "How"
        }, 
        {
            "location": "/pages/web/hosted-data/#understand-your-web-and-app-content", 
            "text": "The first step to successfully putting deep link data on your website is to understand how your deep links correspond to your web URLs. Ask yourself the following questions, and group your content accordingly.   Do you have any content on web that doesn\u2019t exist in the app? Examples include: time-sensitive promotions, splash pages, micro-sites.  For content that has corresponding app content, what type of pages do you have? Examples include: search result pages, category homepages, product pages.  If you\u2019ve already set up deep linking (if you haven\u2019t set up deep linking skip this step): what does your deep linking schema look like? Do you use different keys for different content? Do you have required key/value pairs that aren\u2019t content specific? Examples include:  productPage  or  categoryPage  keys, or  product_view=true .", 
            "title": "Understand your web and app content"
        }, 
        {
            "location": "/pages/web/hosted-data/#add-metatags-to-your-site", 
            "text": "This will become the key-value pair in your deep link data, for example:     Example URL  URL data  Metatags to add to your site      https://shop.com/shoes/brown-loafers  productId=1234, productView=true  meta name=\"branch:deeplink:productId\" content=\"1234\" / ,  meta name=\"branch:deeplink:productView\" content=\"true\" /    https://shop.com/shoes  categoryId=5678  meta name=\"branch:deeplink:categoryId\" content=\"5678\" /    https://shop.com/your-mother-is-great  No corresponding app content ( open web )  meta name=\"branch:deeplink:$web_only\" content=\"true\" /", 
            "title": "Add metatags to your site"
        }, 
        {
            "location": "/pages/web/hosted-data/#troubleshoot", 
            "text": "", 
            "title": "Troubleshoot"
        }, 
        {
            "location": "/pages/web/hosted-data/#facebook-app-links-metatags", 
            "text": "If you have  Facebook App Links metatags  on your site and working with your app, then you can skip these instructions. Branch will automatically fetch App Links tags and add them to your deep link data.", 
            "title": "Facebook App Links Metatags"
        }, 
        {
            "location": "/pages/web/hosted-data/#google-tag-manager", 
            "text": "Do not use Google Tag Manager (GTM) to insert your content metatags. GTM requires JavaScript to load on the page, and the Branch link data scraper does not support JavaScript execution.", 
            "title": "Google Tag Manager"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/", 
            "text": "Overview\n\n\nBranch is your preferred linking infrastructure for mobile. With Deep Linked Feeds for Dynamic Ads, advertisers can easily create mobile-optimized links at scale for dynamic ad campaigns. By taking users to the most relevant content on the most relevant platform (web or app) advertisers can maximize revenue and engagement opportunities on mobile.\n\n\nDeep Linked Feeds takes an existing product feed and adds correct deep links for each piece of content.\n\n\nTake advantage of our visual interface for uploading and managing feeds, or set up a more automated integration between you, Branch and your ad network of choice.\n\n\n\n\nNote\n\n\nThis product is a part of Branch Universal Ads.\n\n\n\n\nSetup\n\n\nPre-requisites\n\n\n\n\nTo use Deep Linked Feeds you must integrate the Branch SDK.\n\n\nTo use your Deep Linked Feed on Facebook, make sure you've configured and enabled Facebook as an advertising partner on the \nBranch\n dashboard.\n\n\n\n\nPrepare your Feed Source\n\n\nTo create a deep linked feed, upload a content or product feed. In Branch terminology, this is called a \nFeed Source\n.\n\n\nWhen you need to create a \nDeep Linked Feed\n you'll go through a creation flow that will ask you to select a Feed Source for modification.\n\n\nYou'll be asked to enter some attribution tags and optionally configure linking. After you've done this, Branch will prepare a Deep Linked Feed, adding any missing columns that are needed, or editing existing columns to use the correct links for deep linking. More specifics on the transformation process can be found in our Advanced section.\n\n\nA couple of things to note:\n\n\n\n\nBe sure that your Feed Source has a \nlink\n column with each product's web URL. This is the minimum requirement for Branch to create deep links (although it will likely not be sufficient to be accepted by Facebook or partners.)\n\n\nWe recommend \nhosting deep link data\n on your website for each web URL in your feed. We won't use it to modify your feed, but when your link is clicked from an ad, we'll get the link data from your website and return it to your app.\n\n\n\n\nIf you choose this option, go to your \nLink Settings\n \n Advanced Settings and check \nEnable Link Scraping\n. This option is only available once you've enabled the Deep Linked Feeds product for your account (you can enable the product by creating and downloading a Deep Linked Feed).\n\n\n\n\n\n\nIf you can't host your link data, add the necessary link data as a column in the Feed Source.\n\n\nWant to get creative with your Feed Sources? Check out our \nAdvanced section\n for some power user tips.\n\n\nBranch accepts feed sources that are compatible with Facebook\u2019s format. If you\u2019re not sure about the compatibility of your feed, please use \nFacebook\u2019s Product Feed Debug Tool\n to test and debug it.\n\n\n\n\n\n\nExample Feed Source\n\n\nFacebook has example CSVs that Branch accepts as Feed Sources on the \nFacebook Developer Portal\n. Scroll down to \"Supported Formats\" to find the feed examples.\n\n\n\n\nUpload a Feed Source\n\n\nGo directly to \nAds \n Links \n Feed Sources section\n in the Branch dashboard to get started.\n\n\n\n\n\n\nClick the \nFeed Sources\n tab if needed, then click \"Add New Feed Source.\"\n\n\n\n\n\n\n\n\nName your Feed Source. You can supply a URL (recommended) or upload a file.\n\n\n\n\n\n\n\n\nYou can see all of the \nFeed Sources\n you've uploaded by going to the \nFeed Sources\n tab.\n\n\nCreate a New Deep Linked Feed\n\n\n\n\n\n\nClick the \nCreate Ad Link\n button from either tab.\n\n\n\n\n\n\n\n\nSelect \nCreate Product Link\n from the choices on the modal.\n\n\n\n\n\n\n\n\nDeep Linked Feed Creation Flow\n\n\n\n\n\n\nIn \"Deep Linked Feed Information\" you'll name your Deep Linked Feed for reference, and specify which Feed Source you'd like to turn into a Deep Linked Feed. You'll also input the Ad Platform on which you'd like to run your campaigns. This information will be used to modify the feed and insert well-structured Branch attribution data into the links.\n\n\n\n\nSelect \"CSV\" for Facebook Ads, and \"TSV\" for Google Product Listing Ads.\n\n\n\n\n\n\nIn \"Create Deep Links\" you'll be presented with two optional elements. The first is a list of column names from your feed source. To add deep link data to each link, select the column that contains the relevant data.\n\n\n\n\n\n\nLet's say you have a column in your product feed titled \nid\n. That column contains the product id for each piece of content in your Feed Source file, and your app needs that id to deep link correctly. To create deep links with that id for each product, select the column by checking the box on the left hand side. If you'd like to change the name of the key (for example, from \nid\n to \nproduct_id\n) you can write the new name for the key in the text box on the right hand side. This will add the correct \nproduct_id\n to each link for every single product in your feed (e.g. the first item will have \n\"product_id\":1392\n, the second item will have \n\"product_id\":5284\n).\n\n\n\n\nGetting your Deep Linked Feed\n\n\nFinally, in \"Get Deep Linked Feed\" you can choose to get a URL that will host your Deep Linked Feed or download a file with your Deep Linked Feed.\n\n\nOnce you get to the final step, you will see \"Your links are being created...\" Feel free to navigate away if you have a large feed source. Once this process has completed, you will receive a dashboard notification and an email with a link to your finished Deep Linked Feed.\n\n\n\n\n\n\nSchedule refresh\n\n\nIf you used a Feed Source hosted on a URL (recommended), you will see two options for accessing your feed. We recommend selecting \"Schedule Refresh.\" If you select this option, Branch will host a URL for your Deep Linked Feed that will update itself from your Feed Source URL at regular intervals. You can then provide the Deep Linked Feed URL to your partners, and Branch will keep the content up to date.\n\n\n\n\nYou can see all of the \nDeep Linked Feeds\n you've created by going to the \nDeep Linked Feeds\n tab.\n\n\nDownload CSV\n\n\nClick \"Download CSV\" if you just need a one-time file with your Deep Linked Feed.\n\n\nYou can see all of the \nDeep Linked Feeds\n you've created by going to the \nDeep Linked Feeds\n tab.\n\n\nUse your Deep Linked Feed\n\n\nAfter you've downloaded your feed, it's time to use it!\n\n\n\n\nFacebook Dynamic Ads\n\n\nLaunch a \nFacebook Dynamic Ad Campaign\n to drive engagement or installs with your Deep Linked Feed!\n\n\n\n\n\n\nAd Network Integrations\n\n\nBranch Deep Linked Feeds are accepted by top remarketing companies like Criteo, Remerge and AppNexus. Ask your Account Manager about launching your campaign with Branch deep links.\n\n\n\n\n\n\nDrive Installs With Your Content\n\n\nUse \nContent Analytics\n to see which products are driving results, then use Deep Linked Feeds to create the links you need at scale with every type of ad.\n\n\n\n\nUnderstand Ad Performance\n\n\nYour Deep Linked Feed provides a bevy of important insights for you to optimize your campaigns and your content.\n\n\n\n\n\n\n\n\nDeep Linked Feed Field\n\n\nBranch Analytics Tag\n\n\n\n\n\n\n\n\n\n\nFeature\n\n\nPaid Ads\n\n\n\n\n\n\nCampaign\n\n\nCampaign\n\n\n\n\n\n\nAd Platform\n\n\nChannel\n\n\n\n\n\n\nAd Type\n\n\nTag\n\n\n\n\n\n\n\n\n\n\nVisit \nContent Analytics\n to see which products are driving clicks, opens, installs and conversions\n\n\nCheck out \nSource Analytics\n to simply understand which Ad Channels are most impactful for you.\n\n\nSet up a \nData Integration\n to send your Dynamic Ads data to another attribution or analytics dashboard.\n\n\n\n\nAdvanced\n\n\nAdd additional link data in your Feed Source\n\n\nYou can add additional data to each link by adding a column to your Feed Source called \nbranch_query_params\n. This column accepts parameters in the web query parameter format \nkey1=value1\nkey2=value2\n.\n\n\nAdvanced segmentation with Data Integrations\n\n\nThe attribution Data Integrations (Tune, Kochava, AppsFlyer, Localytics and Adjust) support additional network segmentation with additional measurement parameters that can be appended to HTTP deep links.\n\n\nTo get started, please visit the \nAdvanced\n documentation for your Data Integration for instructions on how to generate and construct the correct query parameters for your campaign and ad network.\n\n\nThis field accepts parameters in the web query parameter format \nkey1=value1\nkey2=value2\n so do not include \n?\n at the beginning of the entry.\n\n\nOnce you've created the right parameters, add them in the \nAdvanced: Add Measurement Parameters\n text field in Step 2. Your parameters will be added to every HTTP Branch link in the \nlink\n column.\n\n\n\n\nSupport\n\n\nHow does Branch create a Deep Linked Feed?\n\n\nWhen we create a Deep Linked Feed, we take your Feed Source, your Link Settings, and any input you provide to generate a working feed.\n\n\nWe look for the presence of the following columns, and for each one we either modify the existing column, or add a new one with the relevant information:\n- link (by default, we use a Branch link with a web fallback)\n- ios_url\n- ios_app_name\n- ios_app_store_id\n- android_url\n- android_app_name\n- android_package\n\n\nLinks don't open the app\n\n\n\n\nFirst, understand what the \nintended behavior\n of your link should be.\n\n\nLinks created by the Deep Linked Feeds tool currently fall back to the Web URL you originally specified in the \nlink\n column by default. You can override this behavior by including a column called \nbranch_query_params\n and including \n$fallback_method=app_wide\n as the value for every row. This will make each link fall back to the platform fallback you have specified in your \nLink Settings\n, which is usually the App Store.\n\n\nFacebook requires certain \n\"applink treatment\"\n values to be present to change fallback behavior. We're working on adding these to our interface, but for the moment, include them in your feed source.\n\n\n\n\nDeep links aren't working\n\n\n\n\nEnsure you've included your deep link data. Branch will scrape any \nHosted Deep Link Data\n corresponding to the Web URL in your Feed Source's \nlink\n column for every link. Alternatively, you can include deep link data as a column in your Feed Source and then select the relevant data in Step 2 of Deep Linked creation.\n\n\nTo see which data is getting through to your app, click the link and then view the link click in \nLive View\n to see the data going through to your app.\n\n\nIf you don't know what deep link data you need to include, ask a technical teammate to show you which data is included in a working Branch link.\n\n\n\n\nFeed Source won't upload\n\n\n\n\nBranch accepts Feed Sources that are compatible with Facebook\u2019s \nfeed format\n. Please use \nFacebook\u2019s Product Feed Debug Tool\n to test and debug your Product Feed format.\n\n\nPlease ensure you have a column titled \nlink\n in your Feed Source\n\n\nThe largest file size accepted by the tool is 50MB. Please contact \n if you need to upload a larger file.\n\n\n\n\nReport issues\n\n\n\n\nFor Facebook data discrepancies, please see our \nFacebook Advertising troubleshooting documentation\n.\n\n\n\n\nIf you run into any issues, or have questions, please contact \n.", 
            "title": "Dynamic Product Feeds"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#overview", 
            "text": "Branch is your preferred linking infrastructure for mobile. With Deep Linked Feeds for Dynamic Ads, advertisers can easily create mobile-optimized links at scale for dynamic ad campaigns. By taking users to the most relevant content on the most relevant platform (web or app) advertisers can maximize revenue and engagement opportunities on mobile.  Deep Linked Feeds takes an existing product feed and adds correct deep links for each piece of content.  Take advantage of our visual interface for uploading and managing feeds, or set up a more automated integration between you, Branch and your ad network of choice.   Note  This product is a part of Branch Universal Ads.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#pre-requisites", 
            "text": "To use Deep Linked Feeds you must integrate the Branch SDK.  To use your Deep Linked Feed on Facebook, make sure you've configured and enabled Facebook as an advertising partner on the  Branch  dashboard.", 
            "title": "Pre-requisites"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#prepare-your-feed-source", 
            "text": "To create a deep linked feed, upload a content or product feed. In Branch terminology, this is called a  Feed Source .  When you need to create a  Deep Linked Feed  you'll go through a creation flow that will ask you to select a Feed Source for modification.  You'll be asked to enter some attribution tags and optionally configure linking. After you've done this, Branch will prepare a Deep Linked Feed, adding any missing columns that are needed, or editing existing columns to use the correct links for deep linking. More specifics on the transformation process can be found in our Advanced section.  A couple of things to note:   Be sure that your Feed Source has a  link  column with each product's web URL. This is the minimum requirement for Branch to create deep links (although it will likely not be sufficient to be accepted by Facebook or partners.)  We recommend  hosting deep link data  on your website for each web URL in your feed. We won't use it to modify your feed, but when your link is clicked from an ad, we'll get the link data from your website and return it to your app.   If you choose this option, go to your  Link Settings    Advanced Settings and check  Enable Link Scraping . This option is only available once you've enabled the Deep Linked Feeds product for your account (you can enable the product by creating and downloading a Deep Linked Feed).    If you can't host your link data, add the necessary link data as a column in the Feed Source.  Want to get creative with your Feed Sources? Check out our  Advanced section  for some power user tips.  Branch accepts feed sources that are compatible with Facebook\u2019s format. If you\u2019re not sure about the compatibility of your feed, please use  Facebook\u2019s Product Feed Debug Tool  to test and debug it.    Example Feed Source  Facebook has example CSVs that Branch accepts as Feed Sources on the  Facebook Developer Portal . Scroll down to \"Supported Formats\" to find the feed examples.", 
            "title": "Prepare your Feed Source"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#upload-a-feed-source", 
            "text": "Go directly to  Ads   Links   Feed Sources section  in the Branch dashboard to get started.    Click the  Feed Sources  tab if needed, then click \"Add New Feed Source.\"     Name your Feed Source. You can supply a URL (recommended) or upload a file.     You can see all of the  Feed Sources  you've uploaded by going to the  Feed Sources  tab.", 
            "title": "Upload a Feed Source"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#create-a-new-deep-linked-feed", 
            "text": "Click the  Create Ad Link  button from either tab.     Select  Create Product Link  from the choices on the modal.", 
            "title": "Create a New Deep Linked Feed"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#deep-linked-feed-creation-flow", 
            "text": "In \"Deep Linked Feed Information\" you'll name your Deep Linked Feed for reference, and specify which Feed Source you'd like to turn into a Deep Linked Feed. You'll also input the Ad Platform on which you'd like to run your campaigns. This information will be used to modify the feed and insert well-structured Branch attribution data into the links.   Select \"CSV\" for Facebook Ads, and \"TSV\" for Google Product Listing Ads.    In \"Create Deep Links\" you'll be presented with two optional elements. The first is a list of column names from your feed source. To add deep link data to each link, select the column that contains the relevant data.    Let's say you have a column in your product feed titled  id . That column contains the product id for each piece of content in your Feed Source file, and your app needs that id to deep link correctly. To create deep links with that id for each product, select the column by checking the box on the left hand side. If you'd like to change the name of the key (for example, from  id  to  product_id ) you can write the new name for the key in the text box on the right hand side. This will add the correct  product_id  to each link for every single product in your feed (e.g. the first item will have  \"product_id\":1392 , the second item will have  \"product_id\":5284 ).", 
            "title": "Deep Linked Feed Creation Flow"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#getting-your-deep-linked-feed", 
            "text": "Finally, in \"Get Deep Linked Feed\" you can choose to get a URL that will host your Deep Linked Feed or download a file with your Deep Linked Feed.  Once you get to the final step, you will see \"Your links are being created...\" Feel free to navigate away if you have a large feed source. Once this process has completed, you will receive a dashboard notification and an email with a link to your finished Deep Linked Feed.", 
            "title": "Getting your Deep Linked Feed"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#schedule-refresh", 
            "text": "If you used a Feed Source hosted on a URL (recommended), you will see two options for accessing your feed. We recommend selecting \"Schedule Refresh.\" If you select this option, Branch will host a URL for your Deep Linked Feed that will update itself from your Feed Source URL at regular intervals. You can then provide the Deep Linked Feed URL to your partners, and Branch will keep the content up to date.   You can see all of the  Deep Linked Feeds  you've created by going to the  Deep Linked Feeds  tab.", 
            "title": "Schedule refresh"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#download-csv", 
            "text": "Click \"Download CSV\" if you just need a one-time file with your Deep Linked Feed.  You can see all of the  Deep Linked Feeds  you've created by going to the  Deep Linked Feeds  tab.", 
            "title": "Download CSV"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#use-your-deep-linked-feed", 
            "text": "After you've downloaded your feed, it's time to use it!   Facebook Dynamic Ads  Launch a  Facebook Dynamic Ad Campaign  to drive engagement or installs with your Deep Linked Feed!    Ad Network Integrations  Branch Deep Linked Feeds are accepted by top remarketing companies like Criteo, Remerge and AppNexus. Ask your Account Manager about launching your campaign with Branch deep links.    Drive Installs With Your Content  Use  Content Analytics  to see which products are driving results, then use Deep Linked Feeds to create the links you need at scale with every type of ad.", 
            "title": "Use your Deep Linked Feed"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#understand-ad-performance", 
            "text": "Your Deep Linked Feed provides a bevy of important insights for you to optimize your campaigns and your content.     Deep Linked Feed Field  Branch Analytics Tag      Feature  Paid Ads    Campaign  Campaign    Ad Platform  Channel    Ad Type  Tag      Visit  Content Analytics  to see which products are driving clicks, opens, installs and conversions  Check out  Source Analytics  to simply understand which Ad Channels are most impactful for you.  Set up a  Data Integration  to send your Dynamic Ads data to another attribution or analytics dashboard.", 
            "title": "Understand Ad Performance"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#add-additional-link-data-in-your-feed-source", 
            "text": "You can add additional data to each link by adding a column to your Feed Source called  branch_query_params . This column accepts parameters in the web query parameter format  key1=value1 key2=value2 .", 
            "title": "Add additional link data in your Feed Source"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#advanced-segmentation-with-data-integrations", 
            "text": "The attribution Data Integrations (Tune, Kochava, AppsFlyer, Localytics and Adjust) support additional network segmentation with additional measurement parameters that can be appended to HTTP deep links.  To get started, please visit the  Advanced  documentation for your Data Integration for instructions on how to generate and construct the correct query parameters for your campaign and ad network.  This field accepts parameters in the web query parameter format  key1=value1 key2=value2  so do not include  ?  at the beginning of the entry.  Once you've created the right parameters, add them in the  Advanced: Add Measurement Parameters  text field in Step 2. Your parameters will be added to every HTTP Branch link in the  link  column.", 
            "title": "Advanced segmentation with Data Integrations"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#how-does-branch-create-a-deep-linked-feed", 
            "text": "When we create a Deep Linked Feed, we take your Feed Source, your Link Settings, and any input you provide to generate a working feed.  We look for the presence of the following columns, and for each one we either modify the existing column, or add a new one with the relevant information:\n- link (by default, we use a Branch link with a web fallback)\n- ios_url\n- ios_app_name\n- ios_app_store_id\n- android_url\n- android_app_name\n- android_package", 
            "title": "How does Branch create a Deep Linked Feed?"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#links-dont-open-the-app", 
            "text": "First, understand what the  intended behavior  of your link should be.  Links created by the Deep Linked Feeds tool currently fall back to the Web URL you originally specified in the  link  column by default. You can override this behavior by including a column called  branch_query_params  and including  $fallback_method=app_wide  as the value for every row. This will make each link fall back to the platform fallback you have specified in your  Link Settings , which is usually the App Store.  Facebook requires certain  \"applink treatment\"  values to be present to change fallback behavior. We're working on adding these to our interface, but for the moment, include them in your feed source.", 
            "title": "Links don't open the app"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#deep-links-arent-working", 
            "text": "Ensure you've included your deep link data. Branch will scrape any  Hosted Deep Link Data  corresponding to the Web URL in your Feed Source's  link  column for every link. Alternatively, you can include deep link data as a column in your Feed Source and then select the relevant data in Step 2 of Deep Linked creation.  To see which data is getting through to your app, click the link and then view the link click in  Live View  to see the data going through to your app.  If you don't know what deep link data you need to include, ask a technical teammate to show you which data is included in a working Branch link.", 
            "title": "Deep links aren't working"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#feed-source-wont-upload", 
            "text": "Branch accepts Feed Sources that are compatible with Facebook\u2019s  feed format . Please use  Facebook\u2019s Product Feed Debug Tool  to test and debug your Product Feed format.  Please ensure you have a column titled  link  in your Feed Source  The largest file size accepted by the tool is 50MB. Please contact   if you need to upload a larger file.", 
            "title": "Feed Source won't upload"
        }, 
        {
            "location": "/pages/deep-linked-ads/dynamic-product-feeds/#report-issues", 
            "text": "For Facebook data discrepancies, please see our  Facebook Advertising troubleshooting documentation .   If you run into any issues, or have questions, please contact  .", 
            "title": "Report issues"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/", 
            "text": "Overview\n\n\nBranch Universal Ads help you drive results for web and app campaigns.\n\n\n\n\nCreate Ad Links with tracking parameters and deep linking\n\n\nEnable Ad Partners to send them preconfigured conversion postbacks\n\n\nView ad performance with web and app analytics\n\n\n\n\n\n\nPaid Product\n\n\nAds is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\nAd Partners\n\n\nHere is a list of integrated \nAd Partners\n.\n\n\nSetup\n\n\nPrerequisites\n\n\nTo track installs from Ads you should integrate the Branch SDK into your app. If you want to deep link from your ads directly to content, you should configure deep link routing.\n\n\nEnable an ad partner\n\n\n\n\nVisit the \nAds page\n on the Branch dashboard.\n\n\nSelect \nPartner Management\n from the sidebar.\n\n\nSearch for the Ad Partner that you'd like to enable.\n\n\n\n\n\n\n\n\nEnter any credentials that may be required, and click \nSave and Enable\n in the bottom right hand corner.\n\n\n\n\n\n\n\n\nEnable postbacks\n\n\nBasic postbacks will automatically be activated for events like \nInstall\n and \nPurchase\n when you enable your ad partner. You can then \nadd additional postbacks\n, for example, if you wanted to add postbacks for custom events that are specific to your app like \nAccount Created\n. You can also \nedit postbacks\n if there's additional data you really need to pass along to your ad partner.\n\n\n\n\nCreate an ad link\n\n\nOnce you've enabled an ad partner, it's time to create a tracking link.\n\n\n\n\n\n\nFirst, select an ad format. For App Install or App Engagement campaigns you'll want to select the \nApp Only\n format. For Search or Display campaigns where the user should go to web if they don't have the app, then you should select \nCross-Platform Search\n or \nCross-Platform Display\n. \nProduct Links\n are for shopping or dynamic remarketing campaigns and will take you to create a Deep Linked Product Feed.\n\n\n\n\n\n\n\n\nAt this point you need to name your link. Select something that will make it easy to find if you need it later. Your Ad Format and Ad Partner should be selected already, but feel free to choose one if they aren't. It's important that you select the right Ad Partner for analytics later on. Click \nConfigure Options\n to continue.\n\n\n\n\n\n\n\n\nThis is your chance to add deep link data and analytics tags. Analytics tags are important for later segmentation, so click the \nAnalytics\n sub tab to add a Channel and Campaign value.\n\n\n\n\n\n\nSet Analytics tags\n\n\nIt's easier to slice your data in our analytics platform if you properly assign analytics parameters to your link. \nChannels\n generally correspond to ad networks, and \nCampaigns\n correspond to marketing initiatives that you're launching. For example: \nChannel\n: \"YouTube\", \nCampaign\n: \"Summer 2017 Shoe Discounts.\"\n\n\n\n\n\n\n\n\nClick \nCreate Link Now\n, and you have your tracking link! Take this link and give it to your Ad Partner's Account Manager or paste it into the tracking section of your campaign yourself. If you'd like to try our view-through attribution beta, please contact \n.\n\n\n\n\n\n\nView through attribution\n\n\nTo try our view-through attribution beta, please contact \n. Once it's been enabled, you'll be able to create impression pixels. Currently, impression pixels are only supported with server to server impression tracking, so be sure that the impression pixel that's returned by the dashboard has \n%24s2s=true\n and an \n%24idfa\n or \n%24aaid\n macro. If you have questions, just contact support and we'll get it sorted out.\n\n\n\n\n\n\n\n\nView your data with People-Based Attribution\n\n\nThe \nAds Analytics Page\n on the Branch dashboard shows the performance of your ad campaigns \nacross both web and app\n. You can view performance over time, including purchase and other custom events.\n\n\nEvents are attributed using Branch's unified last-click attribution model. This means that Branch will attribute to the last click across channels, and across platforms.\n\n\nFor example, if a customer clicks a Branch email link, and then clicks an ad, installs the the app and purchases an item, Branch will attribute the install and the purchase to the last clicked ad link.\n\n\nIf the customer then goes on to purchase an item on web within the attribution window, Branch will also attribute the web purchase to the same ad link, connecting the web and app actions taken by a single user for a more accurate view of your marketing channels and customer behavior.\n\n\n\n\nYou can read more about \nPeople-Based Attribution here\n.\n\n\nView-Through Attribution\n\n\nIf you'd like to try our view-through attribution beta, please contact \n.\n\n\nView-through attribution allows you to track installs, session starts and conversion events back to an ad, even if the ad was never clicked on. \n\n\nOur view-through attribution logic is currently as follows for any given event.\n\n\n\n\nIf there's a click within a valid attribution window, give credit to the click.\n\n\nIf there's no click within a valid attribution window, give credit to the last impression that was within a valid attribution window.\n\n\n\n\nCurrently, impression pixels are only supported with server to server tracking, so server to server macros and device IDs are required when using impression pixels.\n\n\nTo create a pixel, simply \ncreate an ad link\n, and grab the pixel from the final step of link creation.\n\n\nAdvanced\n\n\nAdd more postbacks\n\n\nWhen you enable an ad partner, your ad partner postbacks can be found under the \nPostbacks\n tab for that ad partner. It's easy to add additional postbacks.\n\n\n\n\n\n\n\n\nClick the \nAdd New Postback\n button at the bottom of the screen.\n\n\n\n\n\n\n\n\nA modal will appear with Branch default events, as well as any commerce or custom events you've set up. Select an event, enter a postback URL if you're asked to, and click \nSave\n. This will be the event that triggers your new postback.\n\n\n\n\n\n\n\n\nEdit postbacks\n\n\nFor advanced integrations, you may want to provide additional information in your postback that isn't there by default. You can edit postbacks by adding data into the textbox, then clicking save. When the postback is saved, it is then validated - if you enter an invalid postback, you'll get an error at the top of your screen.\n\n\n\n\nReset Postbacks\n\n\nWe all make mistakes from time to time. If you need to reset your postbacks and your credentials, navigate to the \nAccount Settings\n tab and look for the \nReset all settings\n button. Be careful though! This will disable the ad partner, clear out all credentials and postbacks that you've set up, and return the ad partner to its basic configuration. You can then start afresh.\n\n\n\n\nChange attribution windows\n\n\nAttribution windows can be specified at the global account level or on a per link basis with the link level window taking priority. See the below instructions for setup.\n\n\nFor customer experience and data accuracy, please do not set your deep linking window longer than the other attribution windows.\n\n\nAccount Level Attribution Windows\n\n\nYou can edit your attribution windows under Link Settings \n Attribution Windows.\n\n\n\n\nLearn more about account level attribution windows in \nPeople-Based Attribution\n.\n\n\nLink Level Attribution Windows\n\n\nTo set attribution windows on a link level, you can append the following parameters to your generated Branch link.\n\n\n\n\n\n\n\n\nKey\n\n\nExample Link\n\n\n\n\n\n\n\n\n\n\n$click_install_window_days\n\n\nhttps://branchster.app.link/hpNVE52gxE?$click_install_window_days=3\n\n\n\n\n\n\n$click_session_start_window_days\n\n\nhttps://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=7\n\n\n\n\n\n\n$click_conversion_window_days\n\n\nhttps://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=30\n\n\n\n\n\n\n$impression_install_window_days\n\n\nhttps://branchster.app.link/hpNVE52gxE?$impression_install_window_days=3\n\n\n\n\n\n\n$impression_session_start_window_days\n\n\nhttps://branchster.app.link/hpNVE52gxE?$impression_session_start_window_days=1\n\n\n\n\n\n\n$impression_conversion_window_days\n\n\nhttps://branchster.app.link/hpNVE52gxE?$impression_session_start_window_days=7\n\n\n\n\n\n\n\n\n\n\nLink Level Attribution Support for Standard Branch links\n\n\nAs of July 2017, link level attribution window setting is only available on standard Branch links. Special Branch links such as the ones used for Google's Universal App Campaign or Play Store links with Branch link id parameters are currently not supported.\n\n\n\n\nSupport\n\n\nHow do I debug a discrepancy?\n\n\nNavigate to the \nAnalytics\n page to see data.", 
            "title": "Branch Universal Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#overview", 
            "text": "Branch Universal Ads help you drive results for web and app campaigns.   Create Ad Links with tracking parameters and deep linking  Enable Ad Partners to send them preconfigured conversion postbacks  View ad performance with web and app analytics    Paid Product  Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#ad-partners", 
            "text": "Here is a list of integrated  Ad Partners .", 
            "title": "Ad Partners"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#prerequisites", 
            "text": "To track installs from Ads you should integrate the Branch SDK into your app. If you want to deep link from your ads directly to content, you should configure deep link routing.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#enable-an-ad-partner", 
            "text": "Visit the  Ads page  on the Branch dashboard.  Select  Partner Management  from the sidebar.  Search for the Ad Partner that you'd like to enable.     Enter any credentials that may be required, and click  Save and Enable  in the bottom right hand corner.     Enable postbacks  Basic postbacks will automatically be activated for events like  Install  and  Purchase  when you enable your ad partner. You can then  add additional postbacks , for example, if you wanted to add postbacks for custom events that are specific to your app like  Account Created . You can also  edit postbacks  if there's additional data you really need to pass along to your ad partner.", 
            "title": "Enable an ad partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#create-an-ad-link", 
            "text": "Once you've enabled an ad partner, it's time to create a tracking link.    First, select an ad format. For App Install or App Engagement campaigns you'll want to select the  App Only  format. For Search or Display campaigns where the user should go to web if they don't have the app, then you should select  Cross-Platform Search  or  Cross-Platform Display .  Product Links  are for shopping or dynamic remarketing campaigns and will take you to create a Deep Linked Product Feed.     At this point you need to name your link. Select something that will make it easy to find if you need it later. Your Ad Format and Ad Partner should be selected already, but feel free to choose one if they aren't. It's important that you select the right Ad Partner for analytics later on. Click  Configure Options  to continue.     This is your chance to add deep link data and analytics tags. Analytics tags are important for later segmentation, so click the  Analytics  sub tab to add a Channel and Campaign value.    Set Analytics tags  It's easier to slice your data in our analytics platform if you properly assign analytics parameters to your link.  Channels  generally correspond to ad networks, and  Campaigns  correspond to marketing initiatives that you're launching. For example:  Channel : \"YouTube\",  Campaign : \"Summer 2017 Shoe Discounts.\"     Click  Create Link Now , and you have your tracking link! Take this link and give it to your Ad Partner's Account Manager or paste it into the tracking section of your campaign yourself. If you'd like to try our view-through attribution beta, please contact  .    View through attribution  To try our view-through attribution beta, please contact  . Once it's been enabled, you'll be able to create impression pixels. Currently, impression pixels are only supported with server to server impression tracking, so be sure that the impression pixel that's returned by the dashboard has  %24s2s=true  and an  %24idfa  or  %24aaid  macro. If you have questions, just contact support and we'll get it sorted out.", 
            "title": "Create an ad link"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#view-your-data-with-people-based-attribution", 
            "text": "The  Ads Analytics Page  on the Branch dashboard shows the performance of your ad campaigns  across both web and app . You can view performance over time, including purchase and other custom events.  Events are attributed using Branch's unified last-click attribution model. This means that Branch will attribute to the last click across channels, and across platforms.  For example, if a customer clicks a Branch email link, and then clicks an ad, installs the the app and purchases an item, Branch will attribute the install and the purchase to the last clicked ad link.  If the customer then goes on to purchase an item on web within the attribution window, Branch will also attribute the web purchase to the same ad link, connecting the web and app actions taken by a single user for a more accurate view of your marketing channels and customer behavior.   You can read more about  People-Based Attribution here .", 
            "title": "View your data with People-Based Attribution"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#view-through-attribution", 
            "text": "If you'd like to try our view-through attribution beta, please contact  .  View-through attribution allows you to track installs, session starts and conversion events back to an ad, even if the ad was never clicked on.   Our view-through attribution logic is currently as follows for any given event.   If there's a click within a valid attribution window, give credit to the click.  If there's no click within a valid attribution window, give credit to the last impression that was within a valid attribution window.   Currently, impression pixels are only supported with server to server tracking, so server to server macros and device IDs are required when using impression pixels.  To create a pixel, simply  create an ad link , and grab the pixel from the final step of link creation.", 
            "title": "View-Through Attribution"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#add-more-postbacks", 
            "text": "When you enable an ad partner, your ad partner postbacks can be found under the  Postbacks  tab for that ad partner. It's easy to add additional postbacks.     Click the  Add New Postback  button at the bottom of the screen.     A modal will appear with Branch default events, as well as any commerce or custom events you've set up. Select an event, enter a postback URL if you're asked to, and click  Save . This will be the event that triggers your new postback.", 
            "title": "Add more postbacks"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#edit-postbacks", 
            "text": "For advanced integrations, you may want to provide additional information in your postback that isn't there by default. You can edit postbacks by adding data into the textbox, then clicking save. When the postback is saved, it is then validated - if you enter an invalid postback, you'll get an error at the top of your screen.   Reset Postbacks  We all make mistakes from time to time. If you need to reset your postbacks and your credentials, navigate to the  Account Settings  tab and look for the  Reset all settings  button. Be careful though! This will disable the ad partner, clear out all credentials and postbacks that you've set up, and return the ad partner to its basic configuration. You can then start afresh.", 
            "title": "Edit postbacks"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#change-attribution-windows", 
            "text": "Attribution windows can be specified at the global account level or on a per link basis with the link level window taking priority. See the below instructions for setup.  For customer experience and data accuracy, please do not set your deep linking window longer than the other attribution windows.", 
            "title": "Change attribution windows"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#account-level-attribution-windows", 
            "text": "You can edit your attribution windows under Link Settings   Attribution Windows.   Learn more about account level attribution windows in  People-Based Attribution .", 
            "title": "Account Level Attribution Windows"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#link-level-attribution-windows", 
            "text": "To set attribution windows on a link level, you can append the following parameters to your generated Branch link.     Key  Example Link      $click_install_window_days  https://branchster.app.link/hpNVE52gxE?$click_install_window_days=3    $click_session_start_window_days  https://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=7    $click_conversion_window_days  https://branchster.app.link/hpNVE52gxE?$click_session_start_window_days=30    $impression_install_window_days  https://branchster.app.link/hpNVE52gxE?$impression_install_window_days=3    $impression_session_start_window_days  https://branchster.app.link/hpNVE52gxE?$impression_session_start_window_days=1    $impression_conversion_window_days  https://branchster.app.link/hpNVE52gxE?$impression_session_start_window_days=7      Link Level Attribution Support for Standard Branch links  As of July 2017, link level attribution window setting is only available on standard Branch links. Special Branch links such as the ones used for Google's Universal App Campaign or Play Store links with Branch link id parameters are currently not supported.", 
            "title": "Link Level Attribution Windows"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/deep-linked-ads/branch-universal-ads/#how-do-i-debug-a-discrepancy", 
            "text": "Navigate to the  Analytics  page to see data.", 
            "title": "How do I debug a discrepancy?"
        }, 
        {
            "location": "/pages/deep-linked-ads/apple/", 
            "text": "Overview\n\n\nBranch can help track your Apple Search Ad campaigns by fetching the search ad attribution from Apple at app install.  You can then use the parameters you've set in the Apple Search Ad dashboard, parameters such as the campaign name, and take special action in you app after an install, or simply track the effectiveness of a campaign in the Branch dashboard, along with other your other Branch statistics, such as total installs, referrals, and app link statistics.\n\n\n\n\nApple Search Ads\n\n\nApple Search Ads for Developers\n\n\nApple Search Ads WWDC\n\n\n\n\nSetup\n\n\nIn order to check if the user came from an Apple Search Ad, you must make the attribution call before Branch initializes. As a warning, Apple's API is extremely slow often taking more than 1 second round trip. This means that your call to Branch's initSession to the execution of the callback block will be delayed by this additional 1 second.\n\n\nImport iAd and AdSupport\n\n\nYou must add Apple's \niAd.framework\n and \nAdSupport.framework\n to your \nLinked Frameworks\n in your Xcode project to enable Apple Search Ad checking.\n\n\n\n\nEnable Apple Search Ads Check\n\n\nTo enable this check, add a \ndelayInitToCheckForSearchAds\n call to your \nAppDelegate.m\n (or \nAppDelegate.swift\n) file after you create the Branch singleton, but \nbefore\n you call \ninitSession\n. Your code will end up looking something like this:\n\n\nBranch\n \n*\nbranch\n \n=\n \n[\nBranch\n \ngetInstance\n];\n\n\n[\nbranch\n \ndelayInitToCheckForSearchAds\n];\n\n\n[\nbranch\n \ninitSession\n.....\n\n\n\n\n\nlet\n \nbranch\n:\n \nBranch\n \n=\n \nBranch\n.\ngetInstance\n()\n\n\nbranch\n.\ndelayInitToCheckForSearchAds\n()\n\n\nbranch\n.\ninitSession\n.....\n\n\n\n\n\nIf you're concerned about the additional 1 second latency, the call to \ndelayInitToCheckForSearchAds\n can be called conditionally at run time. So, if you want to only check on first install, or the like, then just don't call this method.\n\n\nApple Search Ads Debug\n\n\nWe've also added a debug mode which will demonstrate the functionality. You can enable it like so, but just remember to remove this before release!\n\n\nBranch\n \n*\nbranch\n \n=\n \n[\nBranch\n \ngetInstance\n];\n\n\n[\nbranch\n \nsetAppleSearchAdsDebugMode\n];\n\n\n[\nbranch\n \ndelayInitToCheckForSearchAds\n];\n\n\n[\nbranch\n \ninitSession\n.....\n\n\n\n\n\nlet\n \nbranch\n:\n \nBranch\n \n=\n \nBranch\n.\ngetInstance\n()\n\n\nbranch\n.\nsetAppleSearchAdsDebugMode\n()\n\n\nbranch\n.\ndelayInitToCheckForSearchAds\n()\n\n\nbranch\n.\ninitSession\n.....\n\n\n\n\n\nView Attribution on Dashboard\n\n\nAll the attribution can be visible on the \nBranch dashboard summary page\n. All installs and opens registered from this channel will automatically be tagged with the \nchannel\n: \nApple App Store\n and the \nfeature\n: \nSearch Ads\n. The \ncampaign\n will be set to the Campaign Name you've configured in the Apple Search Ads dashboard.\n\n\n\n\nInstalls might not be accurate, but installs + open events should match what Apple reports\n\n\nDue to API limitations, it may take up to 30 days for full attribution of a device\n\n\n\n\nNote that these stats are \nlimited to the date range\n at the top of the page. You can expand the range if you'd like.\n\n\nSupport\n\n\nAdding deep linking to Apple Search Ads\n\n\nSince this integration doesn't utilize Branch links, options for deep linking are limited. We'll pass back the value you use for \ncampaign\n in the Apple Ads dashboard. Since this value is controlled by you, you can put anything there, but it will reflect on the Apple ads dashboard. We will track installs regularly.", 
            "title": "Apple Search"
        }, 
        {
            "location": "/pages/deep-linked-ads/apple/#overview", 
            "text": "Branch can help track your Apple Search Ad campaigns by fetching the search ad attribution from Apple at app install.  You can then use the parameters you've set in the Apple Search Ad dashboard, parameters such as the campaign name, and take special action in you app after an install, or simply track the effectiveness of a campaign in the Branch dashboard, along with other your other Branch statistics, such as total installs, referrals, and app link statistics.   Apple Search Ads  Apple Search Ads for Developers  Apple Search Ads WWDC", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/apple/#setup", 
            "text": "In order to check if the user came from an Apple Search Ad, you must make the attribution call before Branch initializes. As a warning, Apple's API is extremely slow often taking more than 1 second round trip. This means that your call to Branch's initSession to the execution of the callback block will be delayed by this additional 1 second.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/apple/#import-iad-and-adsupport", 
            "text": "You must add Apple's  iAd.framework  and  AdSupport.framework  to your  Linked Frameworks  in your Xcode project to enable Apple Search Ad checking.", 
            "title": "Import iAd and AdSupport"
        }, 
        {
            "location": "/pages/deep-linked-ads/apple/#enable-apple-search-ads-check", 
            "text": "To enable this check, add a  delayInitToCheckForSearchAds  call to your  AppDelegate.m  (or  AppDelegate.swift ) file after you create the Branch singleton, but  before  you call  initSession . Your code will end up looking something like this:  Branch   * branch   =   [ Branch   getInstance ];  [ branch   delayInitToCheckForSearchAds ];  [ branch   initSession .....   let   branch :   Branch   =   Branch . getInstance ()  branch . delayInitToCheckForSearchAds ()  branch . initSession .....   If you're concerned about the additional 1 second latency, the call to  delayInitToCheckForSearchAds  can be called conditionally at run time. So, if you want to only check on first install, or the like, then just don't call this method.", 
            "title": "Enable Apple Search Ads Check"
        }, 
        {
            "location": "/pages/deep-linked-ads/apple/#apple-search-ads-debug", 
            "text": "We've also added a debug mode which will demonstrate the functionality. You can enable it like so, but just remember to remove this before release!  Branch   * branch   =   [ Branch   getInstance ];  [ branch   setAppleSearchAdsDebugMode ];  [ branch   delayInitToCheckForSearchAds ];  [ branch   initSession .....   let   branch :   Branch   =   Branch . getInstance ()  branch . setAppleSearchAdsDebugMode ()  branch . delayInitToCheckForSearchAds ()  branch . initSession .....", 
            "title": "Apple Search Ads Debug"
        }, 
        {
            "location": "/pages/deep-linked-ads/apple/#view-attribution-on-dashboard", 
            "text": "All the attribution can be visible on the  Branch dashboard summary page . All installs and opens registered from this channel will automatically be tagged with the  channel :  Apple App Store  and the  feature :  Search Ads . The  campaign  will be set to the Campaign Name you've configured in the Apple Search Ads dashboard.   Installs might not be accurate, but installs + open events should match what Apple reports  Due to API limitations, it may take up to 30 days for full attribution of a device   Note that these stats are  limited to the date range  at the top of the page. You can expand the range if you'd like.", 
            "title": "View Attribution on Dashboard"
        }, 
        {
            "location": "/pages/deep-linked-ads/apple/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/deep-linked-ads/apple/#adding-deep-linking-to-apple-search-ads", 
            "text": "Since this integration doesn't utilize Branch links, options for deep linking are limited. We'll pass back the value you use for  campaign  in the Apple Ads dashboard. Since this value is controlled by you, you can put anything there, but it will reflect on the Apple ads dashboard. We will track installs regularly.", 
            "title": "Adding deep linking to Apple Search Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/doubleclick/", 
            "text": "Overview\n\n\nTrack your Doubleclick campaigns using Branch's Universal Ads product. Branch's Ad Product will enable you to update your Doubleclick Campaign Manager (DCM) campaigns with deep links that send data back to Doubleclick's servers.\n\n\nYou can now run campaigns on a variety of in-app and mobile web publishing sites, and provide your users with the smoothest experience with Branch's deep links. Read on to learn how to set everything up.\n\n\nSetup\n\n\nDoubleclick Campaign Manager Set Up\n\n\nBefore we start anything on the Branch side, we need to configure options on the DCM side. Start by heading to your DCM dashboard, and navigating to the advertisers section.\n\n\nGrab Advertiser ID\n\n\nFirst, we'll need to grab the advertiser ID. Select the advertiser you want to track with, and grab the Advertiser ID. In this example, it is 6637276. This is the advertiser you will track campaigns with. Please keep note of it.\n\n\n\n\nGrab Server to Server Token\n\n\nOnce you've captured the advertiser ID and selected the advertiser, navigate to \nFloodlight Configuration\n. From there, go to \"server to server\", and make sure \"in-app attribution tracking\" is check-marked. Click new token, call it \u201cBranch token\u201d, and save it. Copy this value, as well.\n\n\n\n\nNow that you have \nAdvertiser ID\n and \nServer to Server Token\n, the last step is to find the events you need to track.\n\n\nGrab Tags for Events\n\n\nGo to the \nFloodlight activities\n tab. For all the events you want to track, grab the \nActivity tag String\n and \nGroup tag String\n.\n\n\n\n\nIn the above screenshot, the two values for \nActivity tag String\n are \nact-ios\n and \nact-android\n. The one value for \nGroup tag String\n is \nsales\n. Do this for all activities you want to track.\n\n\nOnce you're done with this exercise, you should have at least 4 unique values:\n\n\n\n\nServer to Server token\n\n\nAdvertiser ID\n\n\nActivity tag String (per event)\n\n\nGroup tag String (per event)\n\n\n\n\nBranch Dashboard Setup\n\n\nLet's take these values and place them in Branch's dashboard. Begin by navigating to the \npartners page\n.\n\n\nEnable\n\n\nFind doubleclick in the search box. Hit enable. In the \nAccount Settings\n tab, insert your \nServer to Server token\n.\n\n\nMap Events\n\n\nAt this point, you have enabled Branch to communicate with Doubleclick. Now we need to map Branch events to \nFloodlight Activities\n found on the Doubleclick dashboard. Click the \nPostback Config\n tab. You should see a URL for the event \nInstall\n. For demonstration purposes, we will assume you have a corresponding Install event on the Doubleclick dashboard, but this applies to any event you add.\n\n\nStart by grabbing your \nAdvertiser ID\n, \nActivity tag String\n, and \nGroup tag String\n.\n\n\nIn the screenshot above, we have two events, \"In App Activations - Android\", and \"In App Activations - iOS\", which correspond to the Branch Install event. For this example, the \nActivity tag Strings\n are \nact-and\n and \nact-ios\n. The \nGroup tag String\n is \nsales\n.\n\n\nCopy the existing URL in Install, and replace the \nsrc\n, \ncat\n, and \ntype\n variables. Your end result should look exactly like this:\n\n\nhttps://ad.doubleclick.net/ddm/s2s/appactivity/src=6637276;cat=\n#if user_data.os==\"IOS\"\nact-ios\n/#if\n#if user_data.os==\"ANDROID\"\nact-and\n/#if\n;type=sales;ord=${ (id)! }\n\n\nIf you don't have two different tags for iOS and Android, then it will look simpler:\n\n\nhttps://ad.doubleclick.net/ddm/s2s/appactivity/src=6637276;cat=act-tag;type=sales;ord=${ (id)! }\n\n\n\n\nSimply update and hit save.\n\n\nRun campaigns\n\n\nAt this point, you can now create a link for the Doubleclick network and send data back. Take your Branch link, and place it as the Click Through URL for your placement.", 
            "title": "Doubleclick"
        }, 
        {
            "location": "/pages/deep-linked-ads/doubleclick/#overview", 
            "text": "Track your Doubleclick campaigns using Branch's Universal Ads product. Branch's Ad Product will enable you to update your Doubleclick Campaign Manager (DCM) campaigns with deep links that send data back to Doubleclick's servers.  You can now run campaigns on a variety of in-app and mobile web publishing sites, and provide your users with the smoothest experience with Branch's deep links. Read on to learn how to set everything up.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/doubleclick/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/doubleclick/#doubleclick-campaign-manager-set-up", 
            "text": "Before we start anything on the Branch side, we need to configure options on the DCM side. Start by heading to your DCM dashboard, and navigating to the advertisers section.", 
            "title": "Doubleclick Campaign Manager Set Up"
        }, 
        {
            "location": "/pages/deep-linked-ads/doubleclick/#grab-advertiser-id", 
            "text": "First, we'll need to grab the advertiser ID. Select the advertiser you want to track with, and grab the Advertiser ID. In this example, it is 6637276. This is the advertiser you will track campaigns with. Please keep note of it.", 
            "title": "Grab Advertiser ID"
        }, 
        {
            "location": "/pages/deep-linked-ads/doubleclick/#grab-server-to-server-token", 
            "text": "Once you've captured the advertiser ID and selected the advertiser, navigate to  Floodlight Configuration . From there, go to \"server to server\", and make sure \"in-app attribution tracking\" is check-marked. Click new token, call it \u201cBranch token\u201d, and save it. Copy this value, as well.   Now that you have  Advertiser ID  and  Server to Server Token , the last step is to find the events you need to track.", 
            "title": "Grab Server to Server Token"
        }, 
        {
            "location": "/pages/deep-linked-ads/doubleclick/#grab-tags-for-events", 
            "text": "Go to the  Floodlight activities  tab. For all the events you want to track, grab the  Activity tag String  and  Group tag String .   In the above screenshot, the two values for  Activity tag String  are  act-ios  and  act-android . The one value for  Group tag String  is  sales . Do this for all activities you want to track.  Once you're done with this exercise, you should have at least 4 unique values:   Server to Server token  Advertiser ID  Activity tag String (per event)  Group tag String (per event)", 
            "title": "Grab Tags for Events"
        }, 
        {
            "location": "/pages/deep-linked-ads/doubleclick/#branch-dashboard-setup", 
            "text": "Let's take these values and place them in Branch's dashboard. Begin by navigating to the  partners page .", 
            "title": "Branch Dashboard Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/doubleclick/#enable", 
            "text": "Find doubleclick in the search box. Hit enable. In the  Account Settings  tab, insert your  Server to Server token .", 
            "title": "Enable"
        }, 
        {
            "location": "/pages/deep-linked-ads/doubleclick/#map-events", 
            "text": "At this point, you have enabled Branch to communicate with Doubleclick. Now we need to map Branch events to  Floodlight Activities  found on the Doubleclick dashboard. Click the  Postback Config  tab. You should see a URL for the event  Install . For demonstration purposes, we will assume you have a corresponding Install event on the Doubleclick dashboard, but this applies to any event you add.  Start by grabbing your  Advertiser ID ,  Activity tag String , and  Group tag String .  In the screenshot above, we have two events, \"In App Activations - Android\", and \"In App Activations - iOS\", which correspond to the Branch Install event. For this example, the  Activity tag Strings  are  act-and  and  act-ios . The  Group tag String  is  sales .  Copy the existing URL in Install, and replace the  src ,  cat , and  type  variables. Your end result should look exactly like this:  https://ad.doubleclick.net/ddm/s2s/appactivity/src=6637276;cat= #if user_data.os==\"IOS\" act-ios /#if #if user_data.os==\"ANDROID\" act-and /#if ;type=sales;ord=${ (id)! }  If you don't have two different tags for iOS and Android, then it will look simpler:  https://ad.doubleclick.net/ddm/s2s/appactivity/src=6637276;cat=act-tag;type=sales;ord=${ (id)! }   Simply update and hit save.", 
            "title": "Map Events"
        }, 
        {
            "location": "/pages/deep-linked-ads/doubleclick/#run-campaigns", 
            "text": "At this point, you can now create a link for the Doubleclick network and send data back. Take your Branch link, and place it as the Click Through URL for your placement.", 
            "title": "Run campaigns"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/", 
            "text": "Google Adwords Overview\n\n\nOverview\n\n\nWith Branch, you can put deep links in every type of Google AdWords campaign, improving conversion rates and letting you measure the impact of your campaigns on mobile.  \n\n\nThe Google AdWords interface can be confusing so we've created a guide to help you find the right documentation. The new AdWords interface still follows roughly the same campaign creation flow. We'll update this page as needed if the campaign creation flow is updated, or new ad types are supported.\n\n\nOnce you have completed set up below, follow each guide to track campaigns.\n\n\nSetup\n\n\nSetting up Adwords conversion events with Branch allows Branch to get direct confirmation from Google for which conversion events were driven by an Adwords advertisement and allows Adwords to collect accurate conversion data for your app.\n\n\nOAuth\n\n\nBenefits of the new integration include tracking all Universal App Campaigns automatically (no links required), and sending all conversion events back to AdWords for optimized spend.\n\n\nAdWords Setup\n\n\n\n\nLog in to your \nAdWords dashboard\n account that has the highest level of access. You will have the ability to connect all your AdWords accounts with Branch.\n\n\nGo to \nSettings \n Linked Accounts\n.\n\n\n\nCreate a new link ID: Go to \nThird Party App Analytics \n +\n.\n\n\nAdd a new provider: Select \"other\" in the drop down. Input the following ID: \n3404357870\n.\n\n\nSelect iOS or Android.\n\n\nCreate Link IDs for all platforms you run campaigns on.\n\n\n\n\n\nNote\n you must be an admin in your AdWords account in order to generate Link IDs!\n\n\nBranch Setup\n\n\nNavigate to the \npartner management\n tab and click \nConnect with Google\n. Choose the email address that is tied to the AdWords accounts you want to connect.\n\n\n\n\nSelect all the necessary accounts, and continue.\n\n\n\n\nFinally, paste the Link IDs from earlier.\n\n\n\n\nImport Events\n\n\nAll that remains is importing Branch events into AdWords. After you have set this up, wait ~ 20 minutes, and go back to the AdWords dashboard.\n\n\n\n\nGo to \nConversions\n.\n\n\n\nAdd a new conversion: \n+ \n App \n Third Party App Analytics\n.\n\n\n\nImport your Branch specific events. Click \nImport and Continue\n.\n\n\nMark \nInclude in Conversions\n to \nYES\n.\n\n\n\n\nThat's it! All of your campaigns with mobile conversions will be tracked in Branch's dashboard.\n\n\n\n\nConversion Windows\n\n\nAdwords has a default 30 day conversion window for app install actions which can't be changed. To minimize discrepancies between Branch and Adwords conversion values, we recommend setting your Branch attribution window to the same value.\nNavigate to \nLink Settings\n \n \nAttribution Windows\n and set the \nClick to conversion event\n to 30 days.\n\n\nBy default, the window is set to 30 days in the Branch dashboard.\n\n\n\n\n\n\nMigration\n\n\nIf you were using the old style of tracking, simply remove your conversion IDs and conversion labels from the Branch dashboard. Also, delete the old conversions with postbacks in AdWords. These steps are required to minimize discrepancies. \n\n\nCampaign Type\n\n\nNow that you've completed set up, you can create links for these type of campaigns. \nNOTE\n if you've completed the new style of set up, you do \nnot\n create links for Universal App Campaigns below.\n\n\n\n\n\n\n\n\nGoogle Campaign\n\n\nCampaign Type/Objective\n\n\nBranch Documentation Link\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nSearch Network\n\n\nMobile app engagement\n\n\nlink\n\n\nApp Only: Engagement\n\n\n\n\n\n\nSearch Network\n\n\nStandard\n\n\nlink\n\n\nCross-platform Search\n\n\n\n\n\n\nSearch Network\n\n\nDynamic Search Ads\n\n\nlink\n\n\nCross-platform Search\n\n\n\n\n\n\nDisplay Network\n\n\nEngage with your mobile app\n\n\nlink\n\n\nApp Only: Engagement\n\n\n\n\n\n\nDisplay Network\n\n\nOthers (Visit your website, Influence, etc.)\n\n\nlink\n\n\nCross-platform Display\n\n\n\n\n\n\nVideo\n\n\nMobile App Installs\n\n\nlink\n\n\nApp Only: Install\n\n\n\n\n\n\nVideo\n\n\nStandard\n\n\nlink\n\n\nCross-platform Display\n\n\n\n\n\n\nShopping\n\n\nWeb and App Purchases\n\n\nlink\n\n\nCross-platform Display\n\n\n\n\n\n\nUniversal App Campaigns\n\n\nUniversal App Campaigns\n\n\nlink\n\n\nApp Only: Install\n\n\n\n\n\n\n\n\nTroubleshooting\n\n\nFAQ\n\n\nQ: I'm getting discrepancy between conversion counts in Branch and Google Adwords\n\n\nA:\n While we should always expect around a 5% discrepancy due to time zone differences and the like, if you are seeing significant discrepancies, it could be an indication of a broader problem.\n\n\nThe first thing to do is to make sure your attribution window in Branch lines up with Google. Go to \nLink Settings\n, and navigate down to the Attribution Windows section. Here, you should set the attribution window for \nclick to install\n, \nclick to session start\n, and \nclick to conversion event\n to be 30, 90, and 90 days respectively. This aligns with Google's default attribution windows, but if you'd like to make them shorter, feel free.\n\n\nAnother source of discrepancies is the fact that attribution is based upon \nclick\n time in AdWords, whereas it is based upon \ninstall\n time in the Branch dashboard. This isn't a discrepancy per se, but will sometimes show different numbers in the two dashboards.\n\n\nFinally, AdWords can delay reporting up to 24 hours. It's best to measure campaigns in a trailing manner.\n\n\nQ: My campaign is reporting a number of conversions much higher than the number of conversions shown in the conversion table in Adwords\n\n\nA:\n When viewing a campaign, it shows the sum of all conversion events that apply to it. To view by conversion, navigate to \nSegment\n \n \nConversions\n \n \nConversion name\n, in order to clearly see the breakdown of your campaign's conversions.", 
            "title": "Google"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/#google-adwords-overview", 
            "text": "", 
            "title": "Google Adwords Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/#overview", 
            "text": "With Branch, you can put deep links in every type of Google AdWords campaign, improving conversion rates and letting you measure the impact of your campaigns on mobile.    The Google AdWords interface can be confusing so we've created a guide to help you find the right documentation. The new AdWords interface still follows roughly the same campaign creation flow. We'll update this page as needed if the campaign creation flow is updated, or new ad types are supported.  Once you have completed set up below, follow each guide to track campaigns.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/#setup", 
            "text": "Setting up Adwords conversion events with Branch allows Branch to get direct confirmation from Google for which conversion events were driven by an Adwords advertisement and allows Adwords to collect accurate conversion data for your app.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/#oauth", 
            "text": "Benefits of the new integration include tracking all Universal App Campaigns automatically (no links required), and sending all conversion events back to AdWords for optimized spend.", 
            "title": "OAuth"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/#adwords-setup", 
            "text": "Log in to your  AdWords dashboard  account that has the highest level of access. You will have the ability to connect all your AdWords accounts with Branch.  Go to  Settings   Linked Accounts .  Create a new link ID: Go to  Third Party App Analytics   + .  Add a new provider: Select \"other\" in the drop down. Input the following ID:  3404357870 .  Select iOS or Android.  Create Link IDs for all platforms you run campaigns on.   Note  you must be an admin in your AdWords account in order to generate Link IDs!", 
            "title": "AdWords Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/#branch-setup", 
            "text": "Navigate to the  partner management  tab and click  Connect with Google . Choose the email address that is tied to the AdWords accounts you want to connect.   Select all the necessary accounts, and continue.   Finally, paste the Link IDs from earlier.", 
            "title": "Branch Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/#import-events", 
            "text": "All that remains is importing Branch events into AdWords. After you have set this up, wait ~ 20 minutes, and go back to the AdWords dashboard.   Go to  Conversions .  Add a new conversion:  +   App   Third Party App Analytics .  Import your Branch specific events. Click  Import and Continue .  Mark  Include in Conversions  to  YES .   That's it! All of your campaigns with mobile conversions will be tracked in Branch's dashboard.   Conversion Windows  Adwords has a default 30 day conversion window for app install actions which can't be changed. To minimize discrepancies between Branch and Adwords conversion values, we recommend setting your Branch attribution window to the same value.\nNavigate to  Link Settings     Attribution Windows  and set the  Click to conversion event  to 30 days.  By default, the window is set to 30 days in the Branch dashboard.", 
            "title": "Import Events"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/#migration", 
            "text": "If you were using the old style of tracking, simply remove your conversion IDs and conversion labels from the Branch dashboard. Also, delete the old conversions with postbacks in AdWords. These steps are required to minimize discrepancies.", 
            "title": "Migration"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/#campaign-type", 
            "text": "Now that you've completed set up, you can create links for these type of campaigns.  NOTE  if you've completed the new style of set up, you do  not  create links for Universal App Campaigns below.     Google Campaign  Campaign Type/Objective  Branch Documentation Link  Branch Ad Format      Search Network  Mobile app engagement  link  App Only: Engagement    Search Network  Standard  link  Cross-platform Search    Search Network  Dynamic Search Ads  link  Cross-platform Search    Display Network  Engage with your mobile app  link  App Only: Engagement    Display Network  Others (Visit your website, Influence, etc.)  link  Cross-platform Display    Video  Mobile App Installs  link  App Only: Install    Video  Standard  link  Cross-platform Display    Shopping  Web and App Purchases  link  Cross-platform Display    Universal App Campaigns  Universal App Campaigns  link  App Only: Install", 
            "title": "Campaign Type"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-ads-overview/#faq", 
            "text": "Q: I'm getting discrepancy between conversion counts in Branch and Google Adwords  A:  While we should always expect around a 5% discrepancy due to time zone differences and the like, if you are seeing significant discrepancies, it could be an indication of a broader problem.  The first thing to do is to make sure your attribution window in Branch lines up with Google. Go to  Link Settings , and navigate down to the Attribution Windows section. Here, you should set the attribution window for  click to install ,  click to session start , and  click to conversion event  to be 30, 90, and 90 days respectively. This aligns with Google's default attribution windows, but if you'd like to make them shorter, feel free.  Another source of discrepancies is the fact that attribution is based upon  click  time in AdWords, whereas it is based upon  install  time in the Branch dashboard. This isn't a discrepancy per se, but will sometimes show different numbers in the two dashboards.  Finally, AdWords can delay reporting up to 24 hours. It's best to measure campaigns in a trailing manner.  Q: My campaign is reporting a number of conversions much higher than the number of conversions shown in the conversion table in Adwords  A:  When viewing a campaign, it shows the sum of all conversion events that apply to it. To view by conversion, navigate to  Segment     Conversions     Conversion name , in order to clearly see the breakdown of your campaign's conversions.", 
            "title": "FAQ"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-overview/", 
            "text": "Facebook Ads Overview\n\n\nOverview\n\n\nBranch links can be used together with Facebook ads, allowing you to track ad-driven installs on the Branch dashboard and deep link those new users directly to content the first time they open your app. Refer to \nFacebook's Ad Guide\n to learn more.\n\n\nFacebook's Ad Platform supports numerous campaign types and a shared set of advertisement formats. To help you navigate Facebook's Advertisement Platform we created this guide detailing how to use Branch links in all major Facebook ad types.\n\n\nThis documentation supports the following Facebook Ad Campaigns:\n\n\n\n\n\n\n\n\nFacebook Campaign Category\n\n\nCampaign Type/Objective\n\n\nLink users to\n\n\nBranch Documentation Link\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nAwareness\n\n\nBrand Awareness\n\n\nWeb\n\n\nlink\n\n\nCross-platform Display\n\n\n\n\n\n\nAwareness\n\n\nReach\n\n\nWeb\n\n\nlink\n\n\nCross-platform Display\n\n\n\n\n\n\nConsideration\n\n\nTraffic\n\n\nWeb or App\n\n\nlink\n\n\nCross-platform Display\n\n\n\n\n\n\nConsideration\n\n\nApp Installs\n\n\nApp\n\n\nlink\n\n\nApp Only: Installs\n\n\n\n\n\n\nConsideration\n\n\nVideo Views\n\n\nWeb\n\n\nlink\n\n\nCross-platform Display\n\n\n\n\n\n\nConsideration\n\n\nLead Generation\n\n\nWeb *\n\n\nlink\n\n\nCross-platform Display\n\n\n\n\n\n\nConversion\n\n\nConversions\n\n\nWeb or App\n\n\nlink\n\n\nCross-platform Display\n\n\n\n\n\n\nConversion\n\n\nProduct Catalogue Sales\n\n\nWeb or App\n\n\nlink\n\n\nCross-platform Product Links\n\n\n\n\n\n\n\n\n(*) Facebook has indicated that links are not supported in all placements.\n\n\nWe also have a document with \nFAQs and Advanced Options\n for Facebook Ads. We recommend starting with one of the guides above, then jumping into the FAQ and Advanced Options when you have questions or need to troubleshoot.", 
            "title": "Facebook"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-overview/#facebook-ads-overview", 
            "text": "", 
            "title": "Facebook Ads Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-overview/#overview", 
            "text": "Branch links can be used together with Facebook ads, allowing you to track ad-driven installs on the Branch dashboard and deep link those new users directly to content the first time they open your app. Refer to  Facebook's Ad Guide  to learn more.  Facebook's Ad Platform supports numerous campaign types and a shared set of advertisement formats. To help you navigate Facebook's Advertisement Platform we created this guide detailing how to use Branch links in all major Facebook ad types.  This documentation supports the following Facebook Ad Campaigns:     Facebook Campaign Category  Campaign Type/Objective  Link users to  Branch Documentation Link  Branch Ad Format      Awareness  Brand Awareness  Web  link  Cross-platform Display    Awareness  Reach  Web  link  Cross-platform Display    Consideration  Traffic  Web or App  link  Cross-platform Display    Consideration  App Installs  App  link  App Only: Installs    Consideration  Video Views  Web  link  Cross-platform Display    Consideration  Lead Generation  Web *  link  Cross-platform Display    Conversion  Conversions  Web or App  link  Cross-platform Display    Conversion  Product Catalogue Sales  Web or App  link  Cross-platform Product Links     (*) Facebook has indicated that links are not supported in all placements.  We also have a document with  FAQs and Advanced Options  for Facebook Ads. We recommend starting with one of the guides above, then jumping into the FAQ and Advanced Options when you have questions or need to troubleshoot.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/twitter/", 
            "text": "Overview\n\n\nConfiguring Twitter install ads to use Branch links is very simple. The only trick is that you will be using the website click/conversion ads instead of the standard app install ad. Using Branch links allows you to track ad-driven installs on the Branch dashboard and deep link those new users directly to content the first time they open your app.\n\n\nSetup\n\n\nCreate Quick Links\n\n\n\n\nVisit the \nMarketing page\n on the Branch dashboard and click \n+ Add link\n.\n\n\nCreate a link, and fill in values for \ncampaign\n and \nchannel\n. Make sure to add deep link data.\n\n\n\n\nConfigure ad campaign on Twitter\n\n\n\n\nSelect campaign type\n\n\nGo to Twitter and set up a new ad campaign. When selecting the campaign type that you want, select \nWebsite Clicks or Conversions\n.\n\n\nSet the device targeting\n\n\nSet the device targeting as desired.\n\n\nEnter Branch Quick Link\n\n\nOn the ad creation card, enter the Branch Quick Link you created in the \nWebsite URL\n field.\n\n\n\n\nView your data using the Branch dashboard\n\n\nThe \nMarketing page\n on the Branch dashboard shows the performance of each individual link. You can find your link listed in the table with a quick summary of the \ntotal\n clicks and installs.\n\n\n\n\nTo view more details stats, click the \nsmall button that looks like a bar chart\n on the far right. Note that these stats are \nlimited to the date range\n at the top. You can expand the range if you'd like.", 
            "title": "Twitter"
        }, 
        {
            "location": "/pages/deep-linked-ads/twitter/#overview", 
            "text": "Configuring Twitter install ads to use Branch links is very simple. The only trick is that you will be using the website click/conversion ads instead of the standard app install ad. Using Branch links allows you to track ad-driven installs on the Branch dashboard and deep link those new users directly to content the first time they open your app.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/twitter/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/twitter/#create-quick-links", 
            "text": "Visit the  Marketing page  on the Branch dashboard and click  + Add link .  Create a link, and fill in values for  campaign  and  channel . Make sure to add deep link data.", 
            "title": "Create Quick Links"
        }, 
        {
            "location": "/pages/deep-linked-ads/twitter/#configure-ad-campaign-on-twitter", 
            "text": "", 
            "title": "Configure ad campaign on Twitter"
        }, 
        {
            "location": "/pages/deep-linked-ads/twitter/#select-campaign-type", 
            "text": "Go to Twitter and set up a new ad campaign. When selecting the campaign type that you want, select  Website Clicks or Conversions .", 
            "title": "Select campaign type"
        }, 
        {
            "location": "/pages/deep-linked-ads/twitter/#set-the-device-targeting", 
            "text": "Set the device targeting as desired.", 
            "title": "Set the device targeting"
        }, 
        {
            "location": "/pages/deep-linked-ads/twitter/#enter-branch-quick-link", 
            "text": "On the ad creation card, enter the Branch Quick Link you created in the  Website URL  field.", 
            "title": "Enter Branch Quick Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/twitter/#view-your-data-using-the-branch-dashboard", 
            "text": "The  Marketing page  on the Branch dashboard shows the performance of each individual link. You can find your link listed in the table with a quick summary of the  total  clicks and installs.   To view more details stats, click the  small button that looks like a bar chart  on the far right. Note that these stats are  limited to the date range  at the top. You can expand the range if you'd like.", 
            "title": "View your data using the Branch dashboard"
        }, 
        {
            "location": "/pages/emails/get-started/", 
            "text": "Overview\n\n\nDeep Linked Email allows you to automatically convert your email links into multi-platform deep links that take users directly to content in the app on mobile devices, while still maintaining the same web experience for desktop and mobile users without the app.\n\n\n\n\nWith a script provided by Branch, you can dynamically create Branch links in email. In any place the script is called, the web URL is converted into its corresponding Branch link. The email is then sent.\n\n\nWhen a link is clicked by a user without the app, it will route that user to the original web URL (including on desktop). When a link is clicked by a user with your app, it will direct that user into the relevant in-app content regardless of platform or email client.\n\n\nGuide\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already \nintegrated the Branch SDK\n into your app.\n\n\n\n\nContact your Branch Account Manager or \n at any time for assistance with the setup steps.\n\n\nChoose your email service provider\n\n\nNavigate to the \nDeep Linked Email\n section of the Branch dashboard. Select your email service provider and click \nGet Started\n.\n\n\n\n\nSet up deep linking for email\n\n\nEmail link behavior\n\n\nBranch turns the web URLs you put into your emails into Branch deep links, opening the app for users with your app installed to that same content in the app.\n\n\n\n\nTo do this, it must be possible to map your web URL content (e.g. a page with brown loafers at \nhttps://shop.com/shoes/brown-loafers\n) into a working deep link that takes users to brown loafers in the app. The Deep Linked Email \nsetup flow\n will attempt to automatically detect this mapping for you.\n\n\nIf you do not want to set this up yet, you can select \nNo, just open to app homepage for now\n.\n\n\n\n\nBy default, email deep links will redirect users \nwithout your app\n to the same content on the web instead.\n\n\n\n\nIf you would like to send users to the App Store or another default you have specified in Link Settings, you can select \nOpen to default redirects\n.\n\n\n\n\nChecking your deep linking setup\n\n\nIf you chose \nnot\n to set up deep linking to specific content within your app, then you can \nskip this step\n.\n\n\n\n\nIn this step, you will want to enter a web URL that corresponds to a specific screen within your app. In other words, the webpage should have content that also exists in your app. If you do not know whether your web content also exists in-app, try any URL other than your website homepage. Some examples:\n\n\n\n\nA product page, like a page with brown loafers\n\n\nAn article\n\n\nA content page, like a video or image\n\n\n\n\nOnce you choose one and click \nSubmit\n, \nmeta tags that can be used for deep linking\n will be retrieved from your webpage. You will see a result indicating the mapping between your web content and your app content. For a full explanation of the tests run on this page and the possible results, check out the \nsupport section\n.\n\n\nWe couldn't determine your deep linking setup\n\n\nIf an app deep linking scheme that maps to your web content cannot be successfully detected, you can \nconfigure your settings manually\n, or you can reach out to your Branch account manager or support for assistance.\n\n\n\n\nWe will help you set up one of the following methods:\n\n\nIf you use unique key/value data as deep link values:\n\n\n\n\nRecommended:\n \nHosted deep link data:\n You can host your deep link data on your website with a metatag that looks like this \nmeta name=\"branch:deeplink:my_key\" content=\"my_value\" /\n where \nmy_key\n and \nmy_value\n will become a key value pair in deep link data. For each web URL, Branch will look for those tags and embed the deep link data (if found) into the deep link. Note that Branch also accepts App Links tags for deep linking. For more details, please read \nHosted Deep Link Data\n.\n\n\nAs query parameters:\n Simply append query parameters on to your web url and Branch will take those parameters and put them in deep link data.\n\n\n\n\nIf you use your web URL as a deep link value:\n\n\n\n\nURL path:\n If you use the path of your web URL as your  \n$deeplink_path\n value, or any other deep link value, then the configuration will automatically take the path of the URL and put it in deep link data.\n\n\nFull URL:\n If you use the full web URL as your \n$deeplink_path\n value, or any other deep link value, then the configuration will take the entire URL and put it in deep link data.\n\n\n\n\n\n\nHost deep link data for more than just emails\n\n\nThe Branch \nQuick Link creator\n also scrapes your web URL for deep link data to make link creation even easier. \nHosting Deep Link Data\n on your website will make using Branch products easier in future.\n\n\n\n\nIn the meantime, you can proceed to the next step: \nConfigure ESP\n.\n\n\nDeep linking settings for email\n\n\nThe following are all the possible settings you can configure for deep linking with email.\n\n\nLink Behavior\n\n\n\n\n\n\n\n\nSetting\n\n\nExample\n\n\nLink Data Result\n\n\n\n\n\n\n\n\n\n\nOpen the app homepage\n\n\nNo settings configured to generate deep link data for email; email links will route to the app homepage.\n\n\n\n\n\n\n\n\nOpen to specific app content\n\n\nDeep link to specific app content based on one or more of the following settings.\n\n\n\n\n\n\n\n\nTranslate query parameters on URLs into Branch link data\n\n\nURL:\n \nhttps://shop.com/shoes/brown-loafers\nproduct_id=123456\n\n\nproduct_id: 123456\n\n\n\n\n\n\nTranslate web URL into Branch link data: \n Full URL for key ______\n\n\nURL:\n \nhttps://shop.com/shoes/brown-loafers\n \n \nKey:\n \n$canonical_url\n\n\n$canonical_url: https://shop.com/shoes/brown-loafers\n\n\n\n\n\n\nTranslate web URL into Branch link data: \n URL path for key ______\n\n\nURL:\n \nhttps://shop.com/shoes/brown-loafers\n \n \nKey:\n \n$deeplink_path\n\n\n$deeplink_path: shoes/brown-loafers\n\n\n\n\n\n\nRetrieve hosted deep link data from website and translate into Branch link data\n\n\nURL:\n \nhttps://shop.com/shoes/brown-loafers\n \n \nMeta Tags:\n \nmeta name=\"branch:deeplink:product_id\" content=\"123456\" /\n\n\nproduct_id: 123456\n\n\n\n\n\n\nStrip protocol (http:// or https://): \n from $deeplink_path \n from $ios_deeplink_path \n from $android_deeplink_path \n \nNote: Typically used with one of the other settings.\n\n\nURL:\n \nhttps://shop.com/shoes/brown-loafers\n \n \nOther Settings:\n Translate web URL into Branch link data: Full URL for key \n$deeplink_path\n\n\n$deeplink_path: shop.com/shoes/brown-loafers\n\n\n\n\n\n\nTranslate query parameters on URLs into Branch link data from parameter ______ to key ______ \n \nNote: Not configurable in the UI. \nContact support\n to use this setting.\n\n\nURL:\n \nhttps://shop.com/shoes/brown-loafers\nproduct_id=123456\nutm_content=shoes\n \n \nParameter:\n \nutm_content\n \n \nKey:\n \ncategory\n\n\ncategory: shoes\n\n\n\n\n\n\n\n\nLink behavior for users without your app\n\n\n\n\n\n\n\n\nSetting\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nOpen to specific web content\n\n\nRoute to the original URL specified in the email.\n\n\n\n\n\n\nOpen to default redirects\n\n\nRoute to defaults specified in \nLink Settings\n.\n\n\n\n\n\n\n\n\nVisualizing Email Performance\n\n\nIn order to view the performance of your Deep Linked Emails, navigate to the Analytics tab of the Email section of the dashboard. \n\n\nThe Analytics tab provides two charts: a time series and a table. Both charts are populated exclusively with data from your Branch Deep Linked Email campaigns, and you can filter further using the options at the top of each chart. The charts display counts and rates of events attributed to Deep Linked Email link clicks.\n\n\nBoth the time series and the table automatically compare by platform, so you can see the results of your campaigns across all platforms (iOS app \n web, Android app \n web, desktop web).\n\n\n\n\nEmail Analytics filtering\n\n\nThese charts are pre-filtered, so it will not be possible to view data associated with non-email Branch links in the Email Analytics section of the dashboard. This filtering does not make use of standard Branch analytics labels (e.g. channel, campaign, feature), so it may be difficult to recreate these reports on other dashboard analytics pages.\n\n\n\n\nNext steps\n\n\nCompleting your integration requires some setup that is specific to your email service provider. Please follow the documentation for your provider:\n\n\n\n\nAmazon SES\n\n\nBetaout\n\n\nBlueshift\n\n\nBraze (formerly Appboy)\n\n\nBronto\n\n\nCampaign Monitor\n\n\nEpsilon\n\n\nKahuna\n\n\nLeanplum\n\n\nMailgun\n\n\nMailjet\n\n\nMandrill\n\n\nMoEngage\n\n\nPostUp\n\n\nResponsys\n\n\nSailthru\n\n\nSalesforce\n\n\nSender\n\n\nSendGrid\n\n\nSparkPost\n\n\nVero\n\n\nZeta", 
            "title": "Get Started"
        }, 
        {
            "location": "/pages/emails/get-started/#overview", 
            "text": "Deep Linked Email allows you to automatically convert your email links into multi-platform deep links that take users directly to content in the app on mobile devices, while still maintaining the same web experience for desktop and mobile users without the app.   With a script provided by Branch, you can dynamically create Branch links in email. In any place the script is called, the web URL is converted into its corresponding Branch link. The email is then sent.  When a link is clicked by a user without the app, it will route that user to the original web URL (including on desktop). When a link is clicked by a user with your app, it will direct that user into the relevant in-app content regardless of platform or email client.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/emails/get-started/#guide", 
            "text": "", 
            "title": "Guide"
        }, 
        {
            "location": "/pages/emails/get-started/#prerequisites", 
            "text": "This guide requires you to have already  integrated the Branch SDK  into your app.   Contact your Branch Account Manager or   at any time for assistance with the setup steps.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/emails/get-started/#choose-your-email-service-provider", 
            "text": "Navigate to the  Deep Linked Email  section of the Branch dashboard. Select your email service provider and click  Get Started .", 
            "title": "Choose your email service provider"
        }, 
        {
            "location": "/pages/emails/get-started/#set-up-deep-linking-for-email", 
            "text": "", 
            "title": "Set up deep linking for email"
        }, 
        {
            "location": "/pages/emails/get-started/#email-link-behavior", 
            "text": "Branch turns the web URLs you put into your emails into Branch deep links, opening the app for users with your app installed to that same content in the app.   To do this, it must be possible to map your web URL content (e.g. a page with brown loafers at  https://shop.com/shoes/brown-loafers ) into a working deep link that takes users to brown loafers in the app. The Deep Linked Email  setup flow  will attempt to automatically detect this mapping for you.  If you do not want to set this up yet, you can select  No, just open to app homepage for now .   By default, email deep links will redirect users  without your app  to the same content on the web instead.   If you would like to send users to the App Store or another default you have specified in Link Settings, you can select  Open to default redirects .", 
            "title": "Email link behavior"
        }, 
        {
            "location": "/pages/emails/get-started/#checking-your-deep-linking-setup", 
            "text": "If you chose  not  to set up deep linking to specific content within your app, then you can  skip this step .   In this step, you will want to enter a web URL that corresponds to a specific screen within your app. In other words, the webpage should have content that also exists in your app. If you do not know whether your web content also exists in-app, try any URL other than your website homepage. Some examples:   A product page, like a page with brown loafers  An article  A content page, like a video or image   Once you choose one and click  Submit ,  meta tags that can be used for deep linking  will be retrieved from your webpage. You will see a result indicating the mapping between your web content and your app content. For a full explanation of the tests run on this page and the possible results, check out the  support section .", 
            "title": "Checking your deep linking setup"
        }, 
        {
            "location": "/pages/emails/get-started/#we-couldnt-determine-your-deep-linking-setup", 
            "text": "If an app deep linking scheme that maps to your web content cannot be successfully detected, you can  configure your settings manually , or you can reach out to your Branch account manager or support for assistance.   We will help you set up one of the following methods:  If you use unique key/value data as deep link values:   Recommended:   Hosted deep link data:  You can host your deep link data on your website with a metatag that looks like this  meta name=\"branch:deeplink:my_key\" content=\"my_value\" /  where  my_key  and  my_value  will become a key value pair in deep link data. For each web URL, Branch will look for those tags and embed the deep link data (if found) into the deep link. Note that Branch also accepts App Links tags for deep linking. For more details, please read  Hosted Deep Link Data .  As query parameters:  Simply append query parameters on to your web url and Branch will take those parameters and put them in deep link data.   If you use your web URL as a deep link value:   URL path:  If you use the path of your web URL as your   $deeplink_path  value, or any other deep link value, then the configuration will automatically take the path of the URL and put it in deep link data.  Full URL:  If you use the full web URL as your  $deeplink_path  value, or any other deep link value, then the configuration will take the entire URL and put it in deep link data.    Host deep link data for more than just emails  The Branch  Quick Link creator  also scrapes your web URL for deep link data to make link creation even easier.  Hosting Deep Link Data  on your website will make using Branch products easier in future.   In the meantime, you can proceed to the next step:  Configure ESP .", 
            "title": "We couldn't determine your deep linking setup"
        }, 
        {
            "location": "/pages/emails/get-started/#deep-linking-settings-for-email", 
            "text": "The following are all the possible settings you can configure for deep linking with email.", 
            "title": "Deep linking settings for email"
        }, 
        {
            "location": "/pages/emails/get-started/#link-behavior", 
            "text": "Setting  Example  Link Data Result      Open the app homepage  No settings configured to generate deep link data for email; email links will route to the app homepage.     Open to specific app content  Deep link to specific app content based on one or more of the following settings.     Translate query parameters on URLs into Branch link data  URL:   https://shop.com/shoes/brown-loafers product_id=123456  product_id: 123456    Translate web URL into Branch link data:   Full URL for key ______  URL:   https://shop.com/shoes/brown-loafers     Key:   $canonical_url  $canonical_url: https://shop.com/shoes/brown-loafers    Translate web URL into Branch link data:   URL path for key ______  URL:   https://shop.com/shoes/brown-loafers     Key:   $deeplink_path  $deeplink_path: shoes/brown-loafers    Retrieve hosted deep link data from website and translate into Branch link data  URL:   https://shop.com/shoes/brown-loafers     Meta Tags:   meta name=\"branch:deeplink:product_id\" content=\"123456\" /  product_id: 123456    Strip protocol (http:// or https://):   from $deeplink_path   from $ios_deeplink_path   from $android_deeplink_path    Note: Typically used with one of the other settings.  URL:   https://shop.com/shoes/brown-loafers     Other Settings:  Translate web URL into Branch link data: Full URL for key  $deeplink_path  $deeplink_path: shop.com/shoes/brown-loafers    Translate query parameters on URLs into Branch link data from parameter ______ to key ______    Note: Not configurable in the UI.  Contact support  to use this setting.  URL:   https://shop.com/shoes/brown-loafers product_id=123456 utm_content=shoes     Parameter:   utm_content     Key:   category  category: shoes", 
            "title": "Link Behavior"
        }, 
        {
            "location": "/pages/emails/get-started/#link-behavior-for-users-without-your-app", 
            "text": "Setting  Description      Open to specific web content  Route to the original URL specified in the email.    Open to default redirects  Route to defaults specified in  Link Settings .", 
            "title": "Link behavior for users without your app"
        }, 
        {
            "location": "/pages/emails/get-started/#visualizing-email-performance", 
            "text": "In order to view the performance of your Deep Linked Emails, navigate to the Analytics tab of the Email section of the dashboard.   The Analytics tab provides two charts: a time series and a table. Both charts are populated exclusively with data from your Branch Deep Linked Email campaigns, and you can filter further using the options at the top of each chart. The charts display counts and rates of events attributed to Deep Linked Email link clicks.  Both the time series and the table automatically compare by platform, so you can see the results of your campaigns across all platforms (iOS app   web, Android app   web, desktop web).   Email Analytics filtering  These charts are pre-filtered, so it will not be possible to view data associated with non-email Branch links in the Email Analytics section of the dashboard. This filtering does not make use of standard Branch analytics labels (e.g. channel, campaign, feature), so it may be difficult to recreate these reports on other dashboard analytics pages.", 
            "title": "Visualizing Email Performance"
        }, 
        {
            "location": "/pages/emails/get-started/#next-steps", 
            "text": "Completing your integration requires some setup that is specific to your email service provider. Please follow the documentation for your provider:   Amazon SES  Betaout  Blueshift  Braze (formerly Appboy)  Bronto  Campaign Monitor  Epsilon  Kahuna  Leanplum  Mailgun  Mailjet  Mandrill  MoEngage  PostUp  Responsys  Sailthru  Salesforce  Sender  SendGrid  SparkPost  Vero  Zeta", 
            "title": "Next steps"
        }, 
        {
            "location": "/pages/emails/amazon-ses/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domain from the \nDomains\n section of your Amazon SES account. If you have not added a custom click tracking domain yet, follow the instructions \nhere\n. \n\n\nYou will also need to add your AWS tracking domain next to your click tracking domain in the \nAmazon SES Domain\n field in the Configure ESP step. It should be one of the following:\n\n\n\n\n\n\n\n\nAWS Region\n\n\nAWS tracking domain\n\n\n\n\n\n\n\n\n\n\nUS West (Oregon)\n\n\nr.us-west-2.awstrack.me\n\n\n\n\n\n\nUS East (N. Virginia)\n\n\nr.us-east-1.awstrack.me\n\n\n\n\n\n\nEU (Ireland)\n\n\nr.eu-west-1.awstrack.me\n\n\n\n\n\n\n\n\nOn \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nCreate a custom click tracking domain\n\n\nAdd and verify an email domain in the \nDomains\n section of your Amazon SES account:\n\n\n\n\nFor more information on how to set up a click tracking domain please visit Amazon SES's \ndocumentation\n.\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Amazon SES"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domain from the  Domains  section of your Amazon SES account. If you have not added a custom click tracking domain yet, follow the instructions  here .   You will also need to add your AWS tracking domain next to your click tracking domain in the  Amazon SES Domain  field in the Configure ESP step. It should be one of the following:     AWS Region  AWS tracking domain      US West (Oregon)  r.us-west-2.awstrack.me    US East (N. Virginia)  r.us-east-1.awstrack.me    EU (Ireland)  r.eu-west-1.awstrack.me     On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#create-a-custom-click-tracking-domain", 
            "text": "Add and verify an email domain in the  Domains  section of your Amazon SES account:   For more information on how to set up a click tracking domain please visit Amazon SES's  documentation .", 
            "title": "Create a custom click tracking domain"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/amazon-ses/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/betaout/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nPlease reach out to Betaout support to request a new custom tracking domain for your account. To enable tracking on a subdomain, you must set up a CNAME record in DNS pointing your subdomain to emailbout.com. \n\n\nOnce you have a custom tracking domain, enter it on the Configure ESP step of email onboarding. On \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nDisable the Smart URL feature\n\n\nContact Betaout support and request that they disable the Smart URL feature. Otherwise, deep links won't work.\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Betaout"
        }, 
        {
            "location": "/pages/emails/betaout/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/betaout/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/betaout/#tell-us-your-click-tracking-domain", 
            "text": "Please reach out to Betaout support to request a new custom tracking domain for your account. To enable tracking on a subdomain, you must set up a CNAME record in DNS pointing your subdomain to emailbout.com.   Once you have a custom tracking domain, enter it on the Configure ESP step of email onboarding. On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/betaout/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/betaout/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/betaout/#disable-the-smart-url-feature", 
            "text": "Contact Betaout support and request that they disable the Smart URL feature. Otherwise, deep links won't work.", 
            "title": "Disable the Smart URL feature"
        }, 
        {
            "location": "/pages/emails/betaout/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/betaout/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/betaout/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/betaout/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/betaout/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/betaout/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/betaout/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/betaout/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/blueshift/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domains from your Blueshift settings. On \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nIn order for your email service provider to know that the email link should open the app, add \ndeeplink=\"true\"\n to the HTML, for example:\n\n\na\n \nhref\n=\nhttp://example.com\n \ndeeplink\n=\ntrue\nLink to your app!\n/\na\n\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Blueshift"
        }, 
        {
            "location": "/pages/emails/blueshift/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/blueshift/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/blueshift/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domains from your Blueshift settings. On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/blueshift/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/blueshift/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/blueshift/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/blueshift/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/blueshift/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/blueshift/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/blueshift/#flag-your-deep-links", 
            "text": "In order for your email service provider to know that the email link should open the app, add  deeplink=\"true\"  to the HTML, for example:  a   href = http://example.com   deeplink = true Link to your app! / a   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/blueshift/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/braze/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nContact your Braze Account Manager and request the Email Click Tracking Domain and the SendGrid Data domain associated with your SendGrid account.\n\n\nOnce you\u2019ve retrieved this information, enter both the click tracking domain and the SendGrid domain in item 1 of this step: \n\n\n\n\nOn \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nIn order for your email service provider to know that the email link should open the app, add \nuniversal=\"true\"\n to the HTML, for example:\n\n\na\n \nhref\n=\nhttp://example.com\n \nuniversal\n=\ntrue\nLink to your app!\n/\na\n\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Braze (formerly Appboy)"
        }, 
        {
            "location": "/pages/emails/braze/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/braze/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/braze/#tell-us-your-click-tracking-domain", 
            "text": "Contact your Braze Account Manager and request the Email Click Tracking Domain and the SendGrid Data domain associated with your SendGrid account.  Once you\u2019ve retrieved this information, enter both the click tracking domain and the SendGrid domain in item 1 of this step:    On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/braze/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/braze/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/braze/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/braze/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/braze/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/braze/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/braze/#flag-your-deep-links", 
            "text": "In order for your email service provider to know that the email link should open the app, add  universal=\"true\"  to the HTML, for example:  a   href = http://example.com   universal = true Link to your app! / a   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/braze/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/bronto/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domain from your Bronto account. If you have not added a private domain yet, follow the instructions \nhere\n. \n\n\nOn \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nSet up a private domain\n\n\nUsing a private domain gives you more control over your email sending reputation. Please follow Bronto's \ndocumentation\n to set this up.\n\n\nEnable Click Through Link Tracking\n\n\nEnabling Click Through Link Tracking allows you to see which links your users are clicking in your emails. Please follow Bronto's \ndocumentation\n to set this up.\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Bronto"
        }, 
        {
            "location": "/pages/emails/bronto/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/bronto/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/bronto/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domain from your Bronto account. If you have not added a private domain yet, follow the instructions  here .   On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/bronto/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/bronto/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/bronto/#set-up-a-private-domain", 
            "text": "Using a private domain gives you more control over your email sending reputation. Please follow Bronto's  documentation  to set this up.", 
            "title": "Set up a private domain"
        }, 
        {
            "location": "/pages/emails/bronto/#enable-click-through-link-tracking", 
            "text": "Enabling Click Through Link Tracking allows you to see which links your users are clicking in your emails. Please follow Bronto's  documentation  to set this up.", 
            "title": "Enable Click Through Link Tracking"
        }, 
        {
            "location": "/pages/emails/bronto/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/bronto/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/bronto/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/bronto/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/bronto/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/bronto/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/bronto/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/bronto/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domain from the \nAccount settings\n section of your Campaign Monitor account. If you have not added a custom click tracking domain yet, follow the instructions \nhere\n. \n\n\nOn \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nCreate a custom click tracking domain\n\n\n\n\n\n\nAdd a custom click tracking domain in the \nAccount Settings\n section of your Campaign Monitor account:\n\n\n\n\n\n\n\n\nCreate a new CNAME record in your DNS zone file point it to Campaign Monitor\n\n\n\n\nVerify the domain in Campaign Monitor\n\n\n\n\nFor more information on how to set up your domain, please visit Campaign Monitor's \ndocumentation\n.\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Campaign Monitor"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domain from the  Account settings  section of your Campaign Monitor account. If you have not added a custom click tracking domain yet, follow the instructions  here .   On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#create-a-custom-click-tracking-domain", 
            "text": "Add a custom click tracking domain in the  Account Settings  section of your Campaign Monitor account:     Create a new CNAME record in your DNS zone file point it to Campaign Monitor   Verify the domain in Campaign Monitor   For more information on how to set up your domain, please visit Campaign Monitor's  documentation .", 
            "title": "Create a custom click tracking domain"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/campaign-monitor/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/epsilon/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domain from your Epsilon settings. We recommend creating a new click tracking domain for the Epsilon Harmony integration. You can switch over your production click tracking domain to Epsilon but we recommend testing with a different domain to get started.\n\n\nFor Epsilon, you may also need an IP address. Notify your Epsilon Harmony Account Manager that you plan to use Branch Deep Linked Email, and ask your Harmony Account Manager to provide the IP that you set your click tracking domains to. Add that next to your click tracking domain in this step.\n\n\nOn \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nSet up your click tracking domain\n\n\nOnly do this step after you've \nprovided your click tracking domain\n to Branch.\n\n\n\n\nCreate a CNAME for your subdomain and point it to \nepsilon.thirdparty.bnc.lt\n\n\nConfirm with your Branch Account Manager that the domain is working correctly.\n\n\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Epsilon"
        }, 
        {
            "location": "/pages/emails/epsilon/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/epsilon/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/epsilon/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domain from your Epsilon settings. We recommend creating a new click tracking domain for the Epsilon Harmony integration. You can switch over your production click tracking domain to Epsilon but we recommend testing with a different domain to get started.  For Epsilon, you may also need an IP address. Notify your Epsilon Harmony Account Manager that you plan to use Branch Deep Linked Email, and ask your Harmony Account Manager to provide the IP that you set your click tracking domains to. Add that next to your click tracking domain in this step.  On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/epsilon/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/epsilon/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/epsilon/#set-up-your-click-tracking-domain", 
            "text": "Only do this step after you've  provided your click tracking domain  to Branch.   Create a CNAME for your subdomain and point it to  epsilon.thirdparty.bnc.lt  Confirm with your Branch Account Manager that the domain is working correctly.", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/epsilon/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/epsilon/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/epsilon/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/epsilon/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/epsilon/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/epsilon/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/epsilon/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/kahuna/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domains from your Kahuna settings. On \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nIn order for your email service provider to know that the email link should open the app, add \ndeeplink=\"true\"\n to the HTML, for example:\n\n\na\n \nhref\n=\nhttp://example.com\n \ndeeplink\n=\ntrue\nLink to your app!\n/\na\n\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Kahuna"
        }, 
        {
            "location": "/pages/emails/kahuna/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/kahuna/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/kahuna/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domains from your Kahuna settings. On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/kahuna/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/kahuna/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/kahuna/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/kahuna/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/kahuna/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/kahuna/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/kahuna/#flag-your-deep-links", 
            "text": "In order for your email service provider to know that the email link should open the app, add  deeplink=\"true\"  to the HTML, for example:  a   href = http://example.com   deeplink = true Link to your app! / a   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/kahuna/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/leanplum/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domains from your Leanplum settings. On \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nIn order for your email service provider to know that the email link should open the app, add \nuniversal=\"true\"\n to the HTML, for example:\n\n\na\n \nhref\n=\nhttp://example.com\n \nuniversal\n=\ntrue\nLink to your app!\n/\na\n\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Leanplum"
        }, 
        {
            "location": "/pages/emails/leanplum/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/leanplum/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/leanplum/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domains from your Leanplum settings. On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/leanplum/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/leanplum/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/leanplum/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/leanplum/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/leanplum/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/leanplum/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/leanplum/#flag-your-deep-links", 
            "text": "In order for your email service provider to know that the email link should open the app, add  universal=\"true\"  to the HTML, for example:  a   href = http://example.com   universal = true Link to your app! / a   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/leanplum/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/mailgun/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domains from your Mailgun settings. On \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nIn order for your email service provider to know that the email link should open the app, add \ndeeplink=\"true\"\n to the HTML, for example:\n\n\na\n \nhref\n=\nhttp://example.com\n \ndeeplink\n=\ntrue\nLink to your app!\n/\na\n\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Mailgun"
        }, 
        {
            "location": "/pages/emails/mailgun/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/mailgun/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/mailgun/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domains from your Mailgun settings. On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/mailgun/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/mailgun/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/mailgun/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/mailgun/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/mailgun/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/mailgun/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/mailgun/#flag-your-deep-links", 
            "text": "In order for your email service provider to know that the email link should open the app, add  deeplink=\"true\"  to the HTML, for example:  a   href = http://example.com   deeplink = true Link to your app! / a   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/mailgun/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/mailjet/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domains from your Mailjet settings. On \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Mailjet"
        }, 
        {
            "location": "/pages/emails/mailjet/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/mailjet/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/mailjet/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domains from your Mailjet settings. On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/mailjet/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/mailjet/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/mailjet/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/mailjet/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/mailjet/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/mailjet/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/mailjet/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/mailjet/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/mailjet/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/mailjet/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/mandrill/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domain from the \nTracking \n Return Path Domains\n section of your Mandrill account. If you have not added a custom click tracking domain yet, follow the instructions \nhere\n.\n\n\nOn \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nCreate a custom click tracking domain\n\n\n\n\n\n\nAdd and verify a custom click tracking domain in the \nTracking \n Return Path Domains\n section of your Mandrill account:\n\n\n\n\n\n\n\n\nTo enable tracking on a subdomain, you must set up a CNAME record in DNS pointing your subdomain to \nmandrillapp.com\n.\n\n\n\n\n\n\nFor more information on how to set up a tracking domain please visit Mandrill's \ndocumentation\n.\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Mandrill"
        }, 
        {
            "location": "/pages/emails/mandrill/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/mandrill/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/mandrill/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domain from the  Tracking   Return Path Domains  section of your Mandrill account. If you have not added a custom click tracking domain yet, follow the instructions  here .  On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/mandrill/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/mandrill/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/mandrill/#create-a-custom-click-tracking-domain", 
            "text": "Add and verify a custom click tracking domain in the  Tracking   Return Path Domains  section of your Mandrill account:     To enable tracking on a subdomain, you must set up a CNAME record in DNS pointing your subdomain to  mandrillapp.com .    For more information on how to set up a tracking domain please visit Mandrill's  documentation .", 
            "title": "Create a custom click tracking domain"
        }, 
        {
            "location": "/pages/emails/mandrill/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/mandrill/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/mandrill/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/mandrill/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/mandrill/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/mandrill/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/mandrill/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/mandrill/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/moengage/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domains from your MoEngage settings. On \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "MoEngage"
        }, 
        {
            "location": "/pages/emails/moengage/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/moengage/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/moengage/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domains from your MoEngage settings. On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/moengage/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/moengage/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/moengage/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/moengage/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/moengage/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/moengage/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/moengage/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/moengage/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/moengage/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/moengage/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/postup/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domains from your PostUp settings. On \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "PostUp"
        }, 
        {
            "location": "/pages/emails/postup/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/postup/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/postup/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domains from your PostUp settings. On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/postup/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/postup/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/postup/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/postup/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/postup/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/postup/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/postup/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/postup/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/postup/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/postup/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/responsys/", 
            "text": "Prerequisites\n\n\n\n\nTo use the Branch Link Conversion SDK, you'll need an EMD (Email Message Designer) enabled account. If you're using the Classic dashboard, or if you\u2019re not sure, please talk to your Responsys Account Manager.\n\n\n\n\nSetup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domain from your Responsys settings. Enter it in item 1 of this step. On \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nSend your AASA file to your ESP\n\n\n\n\nYour AASA file must be uploaded to your click tracking domain by your email service provider. Your ESP account manager will do this for you - enter their email and click \nSend\n, and they will receive an email with the file and request to upload.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nOptions for generating Branch links for email\n\n\nThere are a few different ways you can create Branch links that are compatible with Deep Linked Email + Responsys. You will need to replace the web URLs in your templates with these. To create Branch links, you can either:\n\n\n\n\nUse the Branch Responsys SDK\n\n\nMaking regular Branch links compatible with email\n\n\nCreate email links via API without changing your email templates\n\n\nConvert all web links in your email to deep links\n\n\n\n\nResponsys uses the shortcode \ne_rs\n for links in emails\n - please use this in place of \ne_xx\n in the guide below.\n\n\nUse the Branch Responsys SDK\n\n\nIn this step, we'll upload an SDK that makes it very easy to create deep links in your emails.  Please remember that this will require an EMD (Email Message Designer) enabled account.\n\n\n\n\nWatch how to do this instead\n\n\nThere is also a \ntutorial video\n that walks through these steps.\n\n\n\n\n\n\n\n\nWork with your Branch account manager to modify the following code snippet, replacing \nDOMAIN-HERE\n with your Branch base domain:\n\n\n#macro deeplink link_to_be_wrapped\n#assign branch_base_url=\nhttps://DOMAIN-HERE/3p?%243p=e_rs\n#assign final_link=branch_base_url + \n%24original_url=\n + link_to_be_wrapped?url(\nISO-8859-1\n)\na\n \nhref=\n${\nfinal_link\n}\n#nested\n/a\n/#macro\n \n#macro tracked_deeplink link_to_be_wrapped\n#assign branch_base_url=\nhttps://DOMAIN-HERE/3p?%243p=e_rs\n#assign deeplink=branch_base_url + \n%24original_url=\n + link_to_be_wrapped?url(\nISO-8859-1\n)\n/#macro\n\n\n\n\n\n\n\n\n\nLog in to your Responsys account.\n\n\n\n\n\n\nIn the Responsys Dashboard, open your Content Library. You can also access it via the Shortcuts screen on the main page: \n\n\n\n\n\n\n\n\nOnce you are in the Content Manager, you\u2019ll see a list of folders where content is stored. Under \nAll Content\n, create a new folder named \nBranch_SDK\n:\n\n\n\n\n\n\n\n\nSelect the \nBranch_SDK\n folder and then click \nCreate Document\n:\n\n\n\n\n\n\n\n\nIn the Create Document window:\n\n\n\n\nEnter \nbranch-sdk\n in the \u201cDocument Name\u201d field.\n\n\nIn the \nContent Box\n, delete all the text.\n\n\nPaste the snippet you copied in \n1\n.\n\n\nClick Save. \n\n\n\n\n\n\n\n\n\n\nYou have now successfully created the deep linking script. Your file structure should look as follows:\n\n\n\n\nConfigure your Responsys email templates\n\n\nThis code is referred to as the \"Branch script\" - this script will convert your web URLs to deep links.\n\n\nThe Responsys integration requires you to add email template code in two places.\n\n\n\n\nAt the top of an email template\n\n\nImmediately before a hyperlink\n\n\n\n\nCopy the following snippet, and using the \u201cSource\u201d view, paste the snippet directly under the \nhtml\n tag for every template you plan to add deep linking to.\n\n\n#include \ncms://contentlibrary/Branch_SDK/branch-sdk.htm\n\n\n\n\n\nCreate deep links\n\n\nWherever you are using \na\n tags in your email templates, replace those with \n@deeplink\n tags, or add \n@tracked_deeplink /\n for web URLs that you would like to deep link.\n\n\nHere's how it looks with Link Tracking disabled.\n\n\nBefore:\n\n\na href=\"https://branch.io\"\nExample link\n/a\n\n\nAfter:\n\n\n@deeplink \"https://branch.io\"\nExample link\n/@deeplink\n\n\nWith link tracking enabled, you can still use Branch links in emails.\n\n\nBefore:\n\n\na href=\"https://branch.io/product/1234\"\nExample link\n/a\n\n\nAfter:\n\n\n@tracked_deeplink \"https://branch.io/product/1234\" /\n\n\na href=\"${clickthrough('TEST_TRACKED_DEEPLINK' , 'deeplink=' + deeplink)}\"\nExample link\n/a\n\n\nThis latter example pulls from a Link Table.\n\n\n\n\nMaking regular Branch links compatible with email\n\n\nBe sure to add \n\"$3p\":\"e_xx\"\n to the deep link data of any links you use in email to ensure Universal Link and click tracking works as expected.\n\n\nCreate email links via API without changing your email templates\n\n\nTo create email links via API, please use the instructions on how to \ncreate links via API\n, but include the following key value pairs in your call:\n\n\n\n\n\"$3p\":\"e_xx\"\n This is required for Universal Link and click tracking functionality.\n\n\n\"$original_url\":\"{{your web url URI encoded}}\"\n For each piece of content, include a URI encoded version of your content's web URL. You can also add deep link data as query parameters on that web URL. This ensures accurate Content Analytics reporting. \n   \nExample:\n \n\"$original_url\":\"https%3A%2F%2Fshop.com%2Fshoes%2Fbrown-shoes%3Fmy_key%3Dmy_value%26campaign%3Dshoe_discounts\"\n\n\n\n\nConvert all web links in your email to deep links\n\n\nWe have provided a way of easily converting web links to Branch links, as well as \nan example\n. The example takes an html email (as a string) and applies the script to it.\n\n\nHere is the script:\n\n\nvar\n \ncrypto\n \n=\n \nrequire\n(\ncrypto\n);\n\n\nmodule\n.\nexports\n \n=\n \nfunction\n(\noriginal_url\n,\n \nbranch_base_url\n)\n \n{\n\n    \nif\n \n(\n!\noriginal_url\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nMissing original_url\n);\n \n}\n\n    \nif\n \n(\ntypeof\n \noriginal_url\n \n!=\n \nstring\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nInvalid original_url\n);\n \n}\n\n    \nif\n \n(\n!\nbranch_base_url\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nMissing branch_base_url, should be similar to https://bnc.lt/abcd/3p?%243p=e_xx\n);\n \n}\n\n    \nif\n \n(\ntypeof\n \nbranch_base_url\n \n!=\n \nstring\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nInvalid branch_base_url\n);\n \n}\n\n\n    \nreturn\n \nbranch_base_url\n \n+\n \n%24original_url=\n \n+\n \nencodeURIComponent\n(\noriginal_url\n);\n\n\n};\n\n\n\n\n\nHere is how links look before and after (the latter being a Branch deep link).\n\n\n\n\nBefore:\n \nhttp://example.com/?foo=bar\n\n\nAfter:\n \nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nNote\n that these are simplified examples, not actual demo links.\n\n\nHandle links for web-only content\n\n\nIn some cases you may have content on web that isn\u2019t in the app - for example, a temporary Mother\u2019s Day promotion or an unsubscribe button. You can designate links to only open on web if you use the Responsys Link Table feature. There are three URL fields in the link table when creating a new link: \nLINK_URL\n, \nIOS_LINK_URL\n, and \nANDROID_LINK_URL\n. If you only enter the link in the \nLINK_URL\n field, the path of the final click-wrapped url will begin with \n/pub/cc\n.  However, if you also input the same link in \nIOS_LINK_URL\n, then the path of the final click-wrapped url will begin with \npub/acc\n. You should set up your AASA file to whitelist only the path \n/pub/acc*\n in order to not launch the app from web-only links.\n\n\n\n\n\n\nSupport\n\n\nStyling\n\n\nIf you include style tags within your \na\n tags, you\u2019ll need to separate those out into a separate div inside the \n@deeplink\n tag. If you use tracked links with \na\n tags, those will work fine.\n\n\nStyle Tags within your anchor tags like so:\n\n\nBefore:\n\n\na\n \nhref=\nhttps://branch.io/\n \nstyle=\ncolor:#000001; text-decoration:none;\nBranch Website\n/a\n\n\n\n\n\nAfter:\n\n\n@deeplink \nhttps://branch.io/\ndiv\n \nstyle=\ncolor:#000001; text-decoration:none;\nBranch Website\n/div\n/@deeplink\n\n\n\n\n\nLaunch failed error\n\n\nYou\u2019ll see this error if you haven\u2019t included the \n#import \n snippet in your template.\n\n\nLaunch\n \nFailed\n:\n \nLaunch\n \nfailed\n:\n \nTemplate\n \n/\ncontentlibrary\n/\nbranch\n \ntest\n \ncampaign\n/\nMy\n \nDefault\n \nTemplate\n.\nhtm\n \ncaused\n \nan\n \nexecution\n \nerror\n:\n \non\n \nline\n \n183\n,\n \ncolumn\n \n92\n \nin\n \ncms\n:\n//contentlibrary/branch test campaign/Content.htm: deeplink is not a user-defined directive. It is a freemarker.template.SimpleScalar\n\n\n\n\n\nUsing dynamic data from profile extension tables\n\n\nThe \n@deeplink \n and \n@tracked_deeplink /\n tags even work with dynamic links injected via RPL.\n\n@deeplink \n${\nlatestProduct\n.\nurl\n}\n${\nlatestProduct\n.\nname\n}\n/@deeplink\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Responsys"
        }, 
        {
            "location": "/pages/emails/responsys/#prerequisites", 
            "text": "To use the Branch Link Conversion SDK, you'll need an EMD (Email Message Designer) enabled account. If you're using the Classic dashboard, or if you\u2019re not sure, please talk to your Responsys Account Manager.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/emails/responsys/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/responsys/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/responsys/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domain from your Responsys settings. Enter it in item 1 of this step. On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/responsys/#send-your-aasa-file-to-your-esp", 
            "text": "Your AASA file must be uploaded to your click tracking domain by your email service provider. Your ESP account manager will do this for you - enter their email and click  Send , and they will receive an email with the file and request to upload.", 
            "title": "Send your AASA file to your ESP"
        }, 
        {
            "location": "/pages/emails/responsys/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/responsys/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/responsys/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/responsys/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/responsys/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/responsys/#options-for-generating-branch-links-for-email", 
            "text": "There are a few different ways you can create Branch links that are compatible with Deep Linked Email + Responsys. You will need to replace the web URLs in your templates with these. To create Branch links, you can either:   Use the Branch Responsys SDK  Making regular Branch links compatible with email  Create email links via API without changing your email templates  Convert all web links in your email to deep links   Responsys uses the shortcode  e_rs  for links in emails  - please use this in place of  e_xx  in the guide below.", 
            "title": "Options for generating Branch links for email"
        }, 
        {
            "location": "/pages/emails/responsys/#use-the-branch-responsys-sdk", 
            "text": "In this step, we'll upload an SDK that makes it very easy to create deep links in your emails.  Please remember that this will require an EMD (Email Message Designer) enabled account.   Watch how to do this instead  There is also a  tutorial video  that walks through these steps.     Work with your Branch account manager to modify the following code snippet, replacing  DOMAIN-HERE  with your Branch base domain:  #macro deeplink link_to_be_wrapped #assign branch_base_url= https://DOMAIN-HERE/3p?%243p=e_rs #assign final_link=branch_base_url +  %24original_url=  + link_to_be_wrapped?url( ISO-8859-1 ) a   href= ${ final_link } #nested /a /#macro   #macro tracked_deeplink link_to_be_wrapped #assign branch_base_url= https://DOMAIN-HERE/3p?%243p=e_rs #assign deeplink=branch_base_url +  %24original_url=  + link_to_be_wrapped?url( ISO-8859-1 ) /#macro     Log in to your Responsys account.    In the Responsys Dashboard, open your Content Library. You can also access it via the Shortcuts screen on the main page:      Once you are in the Content Manager, you\u2019ll see a list of folders where content is stored. Under  All Content , create a new folder named  Branch_SDK :     Select the  Branch_SDK  folder and then click  Create Document :     In the Create Document window:   Enter  branch-sdk  in the \u201cDocument Name\u201d field.  In the  Content Box , delete all the text.  Paste the snippet you copied in  1 .  Click Save.       You have now successfully created the deep linking script. Your file structure should look as follows:", 
            "title": "Use the Branch Responsys SDK"
        }, 
        {
            "location": "/pages/emails/responsys/#configure-your-responsys-email-templates", 
            "text": "This code is referred to as the \"Branch script\" - this script will convert your web URLs to deep links.  The Responsys integration requires you to add email template code in two places.   At the top of an email template  Immediately before a hyperlink   Copy the following snippet, and using the \u201cSource\u201d view, paste the snippet directly under the  html  tag for every template you plan to add deep linking to.  #include  cms://contentlibrary/Branch_SDK/branch-sdk.htm", 
            "title": "Configure your Responsys email templates"
        }, 
        {
            "location": "/pages/emails/responsys/#create-deep-links", 
            "text": "Wherever you are using  a  tags in your email templates, replace those with  @deeplink  tags, or add  @tracked_deeplink /  for web URLs that you would like to deep link.  Here's how it looks with Link Tracking disabled.  Before:  a href=\"https://branch.io\" Example link /a  After:  @deeplink \"https://branch.io\" Example link /@deeplink  With link tracking enabled, you can still use Branch links in emails.  Before:  a href=\"https://branch.io/product/1234\" Example link /a  After:  @tracked_deeplink \"https://branch.io/product/1234\" /  a href=\"${clickthrough('TEST_TRACKED_DEEPLINK' , 'deeplink=' + deeplink)}\" Example link /a  This latter example pulls from a Link Table.", 
            "title": "Create deep links"
        }, 
        {
            "location": "/pages/emails/responsys/#making-regular-branch-links-compatible-with-email", 
            "text": "Be sure to add  \"$3p\":\"e_xx\"  to the deep link data of any links you use in email to ensure Universal Link and click tracking works as expected.", 
            "title": "Making regular Branch links compatible with email"
        }, 
        {
            "location": "/pages/emails/responsys/#create-email-links-via-api-without-changing-your-email-templates", 
            "text": "To create email links via API, please use the instructions on how to  create links via API , but include the following key value pairs in your call:   \"$3p\":\"e_xx\"  This is required for Universal Link and click tracking functionality.  \"$original_url\":\"{{your web url URI encoded}}\"  For each piece of content, include a URI encoded version of your content's web URL. You can also add deep link data as query parameters on that web URL. This ensures accurate Content Analytics reporting. \n    Example:   \"$original_url\":\"https%3A%2F%2Fshop.com%2Fshoes%2Fbrown-shoes%3Fmy_key%3Dmy_value%26campaign%3Dshoe_discounts\"", 
            "title": "Create email links via API without changing your email templates"
        }, 
        {
            "location": "/pages/emails/responsys/#convert-all-web-links-in-your-email-to-deep-links", 
            "text": "We have provided a way of easily converting web links to Branch links, as well as  an example . The example takes an html email (as a string) and applies the script to it.  Here is the script:  var   crypto   =   require ( crypto );  module . exports   =   function ( original_url ,   branch_base_url )   { \n     if   ( ! original_url )   {   return   new   Error ( Missing original_url );   } \n     if   ( typeof   original_url   !=   string )   {   return   new   Error ( Invalid original_url );   } \n     if   ( ! branch_base_url )   {   return   new   Error ( Missing branch_base_url, should be similar to https://bnc.lt/abcd/3p?%243p=e_xx );   } \n     if   ( typeof   branch_base_url   !=   string )   {   return   new   Error ( Invalid branch_base_url );   } \n\n     return   branch_base_url   +   %24original_url=   +   encodeURIComponent ( original_url );  };   Here is how links look before and after (the latter being a Branch deep link).   Before:   http://example.com/?foo=bar  After:   https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar   Note  that these are simplified examples, not actual demo links.", 
            "title": "Convert all web links in your email to deep links"
        }, 
        {
            "location": "/pages/emails/responsys/#handle-links-for-web-only-content", 
            "text": "In some cases you may have content on web that isn\u2019t in the app - for example, a temporary Mother\u2019s Day promotion or an unsubscribe button. You can designate links to only open on web if you use the Responsys Link Table feature. There are three URL fields in the link table when creating a new link:  LINK_URL ,  IOS_LINK_URL , and  ANDROID_LINK_URL . If you only enter the link in the  LINK_URL  field, the path of the final click-wrapped url will begin with  /pub/cc .  However, if you also input the same link in  IOS_LINK_URL , then the path of the final click-wrapped url will begin with  pub/acc . You should set up your AASA file to whitelist only the path  /pub/acc*  in order to not launch the app from web-only links.", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/responsys/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/emails/responsys/#styling", 
            "text": "If you include style tags within your  a  tags, you\u2019ll need to separate those out into a separate div inside the  @deeplink  tag. If you use tracked links with  a  tags, those will work fine.  Style Tags within your anchor tags like so:  Before:  a   href= https://branch.io/   style= color:#000001; text-decoration:none; Branch Website /a   After:  @deeplink  https://branch.io/ div   style= color:#000001; text-decoration:none; Branch Website /div /@deeplink", 
            "title": "Styling"
        }, 
        {
            "location": "/pages/emails/responsys/#launch-failed-error", 
            "text": "You\u2019ll see this error if you haven\u2019t included the  #import   snippet in your template.  Launch   Failed :   Launch   failed :   Template   / contentlibrary / branch   test   campaign / My   Default   Template . htm   caused   an   execution   error :   on   line   183 ,   column   92   in   cms : //contentlibrary/branch test campaign/Content.htm: deeplink is not a user-defined directive. It is a freemarker.template.SimpleScalar", 
            "title": "Launch failed error"
        }, 
        {
            "location": "/pages/emails/responsys/#using-dynamic-data-from-profile-extension-tables", 
            "text": "The  @deeplink   and  @tracked_deeplink /  tags even work with dynamic links injected via RPL. @deeplink  ${ latestProduct . url } ${ latestProduct . name } /@deeplink", 
            "title": "Using dynamic data from profile extension tables"
        }, 
        {
            "location": "/pages/emails/responsys/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/sailthru/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domain from your Sailthru settings:\n\n\n\n\nLog in to your Sailthru account\n\n\n\n\nGo to Settings \n Setup \n Domains:\n\n\n\n\n\n\n\n\nNote or copy the value in the Link Domain field\n\n\n\n\n\n\nEnter the domain in item 1 of this step:\n\n\n\n\n\n\n\n\nClick \nDone\n\n\n\n\n\n\nOn \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nSend your AASA file to your ESP\n\n\n\n\nYour AASA file must be uploaded to your click tracking domain by your email service provider. Your ESP account manager will do this for you - enter their email and click \nSend\n, and they will receive an email with the file and request to upload.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nUpload your AASA file\n\n\nSailthru will host an Apple App Site Association (AASA) file for you, so that your click tracking domain appears to Apple as a Universal Link, and the app will open and deep link.\n\n\nTo set up your AASA file, download the AASA file from the \nemail you received from Branch\n, and follow the \ninstructions provided by Sailthru\n for setting up the HTTPS certificates.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nOptions for generating Branch links for email\n\n\nThere are a few different ways you can create Branch links that are compatible with Deep Linked Email + Sailthru. You will need to replace the web URLs in your templates with these. To create Branch links, you can either:\n\n\n\n\nAutomatically populate emails with content via Zephyr\n\n\nMaking regular Branch links compatible with email\n\n\nCreate email links via API without changing your email templates\n\n\nConvert all web links in your email to deep links\n\n\n\n\nAutomatically populate emails with content via Zephyr\n\n\nSailthru allows you to automatically populate emails with content via Zephyr. This means that you can create a template once, then have all subsequent emails automatically configured to convert normal web URLs into deep links.\n\n\nThe Sailthru integration requires you to add code in two places:\n\n\n\n\nAt the top of an email template\n\n\nImmediately before a hyperlink\n\n\n\n\nPrepare your template\n\n\nAt the top of each email template, you should simply copy and paste the following snippet. It specifies a variable that is used to automatically contruct deep links, \nbranch_base_url\n. This snippet will be provided by your Branch Account Manager.\n\n\nCopy the below snippet and paste it above the \nhead\n tag:\n\n\n{branch_base_url=\nBASE URL FROM BRANCH\n}\n\n\n\n\nEnter the base url provided by your Branch account manager.\n\n\n\n\nExample\n\n\n{branch_base_url=\nhttp://bnc.lt/abcd/3p?%243p=e_st\n}\n\n\n\n\n\n\nCreate deep links\n\n\nBefore each hyperlink, you\u2019ll need to include a short amount of code. Put the original link (which will automatically be converted to a deep link) on the first line of the code snippet.\n\n\nBefore:\n\n\na\n \nhref\n=\nORIGINAL URL\nClick me\n/\na\n\n\n\n\n\nAfter:\n\n\n{link=\nORIGINAL URL\n}\n\n{*Branch deeplink builder*}{deeplink=branch_base_url + \n%24original_url=\n + u(link)}{*end Branch deeplink builder*}\n\n\na\n \nhref\n=\n{deeplink}\nClick me\n/\na\n\n\n\n\n\n\n\nExample\n\n\n{link=\nhttp://example.com/?utm=y\n}\n\n{*Branch deeplink builder*}{deeplink=branch_base_url + \n%24original_url=\n + u(link)}{*end Branch deeplink builder*}\n\n\na\n \nhref\n=\n{deeplink}\nClick me\n/\na\n\n\n\n\n\n\n\n\n\n\n\nUsing Branch Links with Zephyr\n\n\nThe Branch deep link script also works with Sailthru's Zephyr personalization language. Here's an example with the correct syntax.\n\n\n{link=content[0].url}\n\n{*Branch deeplink builder*}{deeplink=branch_base_url + \n%24original_url=\n + u(link)}{*end Branch deeplink builder*}\n\n\na\n \nhref\n=\n{deeplink}\nClick me\n/\na\n\n\n\n\n\n\n\nMaking regular Branch links compatible with email\n\n\nBe sure to add \n\"$3p\":\"e_xx\"\n to the deep link data of any links you use in email to ensure Universal Link and click tracking works as expected.\n\n\nCreate email links via API without changing your email templates\n\n\nTo create email links via API, please use the instructions on how to \ncreate links via API\n, but include the following key value pairs in your call:\n\n\n\n\n\"$3p\":\"e_xx\"\n This is required for Universal Link and click tracking functionality.\n\n\n\"$original_url\":\"{{your web url URI encoded}}\"\n For each piece of content, include a URI encoded version of your content's web URL. You can also add deep link data as query parameters on that web URL. This ensures accurate Content Analytics reporting. \n   \nExample:\n \n\"$original_url\":\"https%3A%2F%2Fshop.com%2Fshoes%2Fbrown-shoes%3Fmy_key%3Dmy_value%26campaign%3Dshoe_discounts\"\n\n\n\n\nConvert all web links in your email to deep links\n\n\nWe have provided a way of easily converting web links to Branch links, as well as \nan example\n. The example takes an html email (as a string) and applies the script to it.\n\n\nHere is the script:\n\n\nvar\n \ncrypto\n \n=\n \nrequire\n(\ncrypto\n);\n\n\nmodule\n.\nexports\n \n=\n \nfunction\n(\noriginal_url\n,\n \nbranch_base_url\n)\n \n{\n\n    \nif\n \n(\n!\noriginal_url\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nMissing original_url\n);\n \n}\n\n    \nif\n \n(\ntypeof\n \noriginal_url\n \n!=\n \nstring\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nInvalid original_url\n);\n \n}\n\n    \nif\n \n(\n!\nbranch_base_url\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nMissing branch_base_url, should be similar to https://bnc.lt/abcd/3p?%243p=e_xx\n);\n \n}\n\n    \nif\n \n(\ntypeof\n \nbranch_base_url\n \n!=\n \nstring\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nInvalid branch_base_url\n);\n \n}\n\n\n    \nreturn\n \nbranch_base_url\n \n+\n \n%24original_url=\n \n+\n \nencodeURIComponent\n(\noriginal_url\n);\n\n\n};\n\n\n\n\n\nHere is how links look before and after (the latter being a Branch deep link).\n\n\n\n\nBefore:\n \nhttp://example.com/?foo=bar\n\n\nAfter:\n \nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nNote\n that these are simplified examples, not actual demo links.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n%24web_only%3Dtrue\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar%24web_only%3Dtrue\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Sailthru"
        }, 
        {
            "location": "/pages/emails/sailthru/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/sailthru/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/sailthru/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domain from your Sailthru settings:   Log in to your Sailthru account   Go to Settings   Setup   Domains:     Note or copy the value in the Link Domain field    Enter the domain in item 1 of this step:     Click  Done    On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/sailthru/#send-your-aasa-file-to-your-esp", 
            "text": "Your AASA file must be uploaded to your click tracking domain by your email service provider. Your ESP account manager will do this for you - enter their email and click  Send , and they will receive an email with the file and request to upload.", 
            "title": "Send your AASA file to your ESP"
        }, 
        {
            "location": "/pages/emails/sailthru/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/sailthru/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/sailthru/#upload-your-aasa-file", 
            "text": "Sailthru will host an Apple App Site Association (AASA) file for you, so that your click tracking domain appears to Apple as a Universal Link, and the app will open and deep link.  To set up your AASA file, download the AASA file from the  email you received from Branch , and follow the  instructions provided by Sailthru  for setting up the HTTPS certificates.", 
            "title": "Upload your AASA file"
        }, 
        {
            "location": "/pages/emails/sailthru/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/sailthru/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/sailthru/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/sailthru/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/sailthru/#options-for-generating-branch-links-for-email", 
            "text": "There are a few different ways you can create Branch links that are compatible with Deep Linked Email + Sailthru. You will need to replace the web URLs in your templates with these. To create Branch links, you can either:   Automatically populate emails with content via Zephyr  Making regular Branch links compatible with email  Create email links via API without changing your email templates  Convert all web links in your email to deep links", 
            "title": "Options for generating Branch links for email"
        }, 
        {
            "location": "/pages/emails/sailthru/#automatically-populate-emails-with-content-via-zephyr", 
            "text": "Sailthru allows you to automatically populate emails with content via Zephyr. This means that you can create a template once, then have all subsequent emails automatically configured to convert normal web URLs into deep links.  The Sailthru integration requires you to add code in two places:   At the top of an email template  Immediately before a hyperlink", 
            "title": "Automatically populate emails with content via Zephyr"
        }, 
        {
            "location": "/pages/emails/sailthru/#prepare-your-template", 
            "text": "At the top of each email template, you should simply copy and paste the following snippet. It specifies a variable that is used to automatically contruct deep links,  branch_base_url . This snippet will be provided by your Branch Account Manager.  Copy the below snippet and paste it above the  head  tag:  {branch_base_url= BASE URL FROM BRANCH }  Enter the base url provided by your Branch account manager.   Example  {branch_base_url= http://bnc.lt/abcd/3p?%243p=e_st }", 
            "title": "Prepare your template"
        }, 
        {
            "location": "/pages/emails/sailthru/#create-deep-links", 
            "text": "Before each hyperlink, you\u2019ll need to include a short amount of code. Put the original link (which will automatically be converted to a deep link) on the first line of the code snippet.  Before:  a   href = ORIGINAL URL Click me / a   After:  {link= ORIGINAL URL }\n\n{*Branch deeplink builder*}{deeplink=branch_base_url +  %24original_url=  + u(link)}{*end Branch deeplink builder*} a   href = {deeplink} Click me / a    Example  {link= http://example.com/?utm=y }\n\n{*Branch deeplink builder*}{deeplink=branch_base_url +  %24original_url=  + u(link)}{*end Branch deeplink builder*} a   href = {deeplink} Click me / a      Using Branch Links with Zephyr  The Branch deep link script also works with Sailthru's Zephyr personalization language. Here's an example with the correct syntax.  {link=content[0].url}\n\n{*Branch deeplink builder*}{deeplink=branch_base_url +  %24original_url=  + u(link)}{*end Branch deeplink builder*} a   href = {deeplink} Click me / a", 
            "title": "Create deep links"
        }, 
        {
            "location": "/pages/emails/sailthru/#making-regular-branch-links-compatible-with-email", 
            "text": "Be sure to add  \"$3p\":\"e_xx\"  to the deep link data of any links you use in email to ensure Universal Link and click tracking works as expected.", 
            "title": "Making regular Branch links compatible with email"
        }, 
        {
            "location": "/pages/emails/sailthru/#create-email-links-via-api-without-changing-your-email-templates", 
            "text": "To create email links via API, please use the instructions on how to  create links via API , but include the following key value pairs in your call:   \"$3p\":\"e_xx\"  This is required for Universal Link and click tracking functionality.  \"$original_url\":\"{{your web url URI encoded}}\"  For each piece of content, include a URI encoded version of your content's web URL. You can also add deep link data as query parameters on that web URL. This ensures accurate Content Analytics reporting. \n    Example:   \"$original_url\":\"https%3A%2F%2Fshop.com%2Fshoes%2Fbrown-shoes%3Fmy_key%3Dmy_value%26campaign%3Dshoe_discounts\"", 
            "title": "Create email links via API without changing your email templates"
        }, 
        {
            "location": "/pages/emails/sailthru/#convert-all-web-links-in-your-email-to-deep-links", 
            "text": "We have provided a way of easily converting web links to Branch links, as well as  an example . The example takes an html email (as a string) and applies the script to it.  Here is the script:  var   crypto   =   require ( crypto );  module . exports   =   function ( original_url ,   branch_base_url )   { \n     if   ( ! original_url )   {   return   new   Error ( Missing original_url );   } \n     if   ( typeof   original_url   !=   string )   {   return   new   Error ( Invalid original_url );   } \n     if   ( ! branch_base_url )   {   return   new   Error ( Missing branch_base_url, should be similar to https://bnc.lt/abcd/3p?%243p=e_xx );   } \n     if   ( typeof   branch_base_url   !=   string )   {   return   new   Error ( Invalid branch_base_url );   } \n\n     return   branch_base_url   +   %24original_url=   +   encodeURIComponent ( original_url );  };   Here is how links look before and after (the latter being a Branch deep link).   Before:   http://example.com/?foo=bar  After:   https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar   Note  that these are simplified examples, not actual demo links.", 
            "title": "Convert all web links in your email to deep links"
        }, 
        {
            "location": "/pages/emails/sailthru/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  %24web_only%3Dtrue  to your links as a query parameter, for example:  a   href = https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar%24web_only%3Dtrue   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/sailthru/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/salesforce/", 
            "text": "Prerequisites\n\n\n\n\nYou must have the Salesforce Marketing Cloud Sender Authentication Package (SAP) in order to benefit from Universal Links + click tracking functionality.\n\n\n\n\nSetup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domain from your Salesforce settings. We \nhighly\n recommend using a new click tracking domain for this implementation to ensure that the user experience for pre-Branch links on the original click tracking domain doesn't break.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nConfigure your AASA file in Salesforce Marketing Cloud\n\n\nYour Salesforce account must be configured to correctly handle Universal Links. Configure the settings in Deep Linking under the Admin section in Email Studio. Ensure you're in the account corresponding to the correct click tracking domain \nyou selected\n above.\n\n\n\n\n\n\nEnter the AppID value\n\n\nCheck the \"Exclude Profile\" and \"Unsub Center\" checkboxes to force links to these items to open in the browser and not the app, if desired.\n\n\nClick \"Save\" to save the configuration.\n\n\nLet Salesforce and Branch know that you've finished this step and your Technical Account Manager will verify that everything looks good.\n\n\n\n\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nOptions for generating Branch links for email\n\n\nThere are a few different ways you can create Branch links that are compatible with Deep Linked Email + Salesforce. You will need to replace the web URLs in your templates with these. To create Branch links, you can either:\n\n\n\n\nAdd a new Content Area for easy deep linking\n\n\nMaking regular Branch links compatible with email\n\n\nCreate email links via API without changing your email templates\n\n\nConvert all web links in your email to deep links\n\n\n\n\nAdd a new Content Area for easy deep linking\n\n\nIn this step, we'll add a new Content Area in Salesforce that makes it very easy to create deep links in your emails.\n\n\n\n\n\n\nWork with your Branch account manager to modify the following code snippet, replacing \nDOMAIN-HERE\n with your Branch base domain:\n\n\n%%[ VAR @deeplink, @branch_base_url SET @branch_base_url = \nhttps://DOMAIN-HERE/3p?%243p=e_et\n SET @deeplink = CONCAT(@branch_base_url, CONCAT(\n%24original_url=\n, URLEncode(@link_to_be_wrapped, 1, 1))) ]%%\n\n\n\n\n\n\n\n\n\nAfter logging into Salesforce Marketing Cloud, click on \nEmail Studio\n and then a sub-menu will appear. Click on \nEmail\n in the dropdown menu:\n\n\n\n\n\n\n\n\nThis will take you to the landing page for the Email section. Click on \nContent\n in the menu bar to navigate to the Content section:\n\n\n\n\n\n\n\n\nIn the Content section, you will see a list of folders on the left side. Right click on the \nMy Contents\n folder and choose \nNew Folder\n in the context menu:\n\n\n\n\n\n\n\n\nName the folder \nBranch\n:\n\n\n\n\n\n\n\n\nOnce the folder is created, click on the \nBranch\n folder. On the right side, you will see a menu bar for the Branch folder. Click on \nCreate\n and in the sub menu, click \nContent\n to create new content:\n\n\n\n\n\n\n\n\nIn the Create Content window that appears, enter \ndeeplink\n in the text field named Content Name. Click on \nNext\n after you enter the text:\n\n\n\n\n\n\n\n\nThe next screen will ask you to select the format of the content. Choose \nFree Form\n and then click \nNext\n:\n\n\n\n\n\n\n\n\nIn the next screen, paste in the snippet you generated in \n1\n:\n\n\n\n\n\n\n\n\nClick \nSave\n. You will now be back at your list of folders in the Content section with the file \ndeeplink\n listed:\n\n\n\n\n\n\n\n\nYou have now successfully created the deep linking script.  \n\n\n\n\nCode snippet\n\n\nThe snippet will follow this format:\n\n%%[ VAR @deeplink, @branch_base_url SET @branch_base_url = \nBASE URL FROM BRANCH\n SET @deeplink = CONCAT(@branch_base_url, CONCAT(\n%24original_url=\n, URLEncode(@link_to_be_wrapped, 1, 1))) ]%%\n\n\n\nThe code above has a placeholder for \n@branch_base_url\n. Replace it with yours.\n\n\n\n\nConfigure your Salesforce email templates\n\n\nThis section covers how to convert individual links in your existing email templates to use Branch deep links.  You will need to determine which links in your email template that you want to convert to Branch deep links.  \n\n\nTo convert a link to a Branch deep link, let's use an example:\n\na\n \nstyle=\nborder-radius: 4px;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: #fff;background-color: #00afd1;font-family: sans-serif;\n \nhref=\nhttps://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\nI want it!\n/a\n\n\n\n\nThis is what the link will look like \nafter\n you have modified it to support Branch deep links:\n\n%%[ SET @link_to_be_wrapped = \nhttps://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\n ContentAreaByName(\nMy Contents\\deeplink\n) ]%%\n\na\n \nstyle=\nborder-radius: 4px;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: #fff;background-color: #00afd1;font-family: sans-serif;\n  \nhref=\n%%=RedirectTo(@deeplink)=%%\nI want this!\n/a\n\n\n\n\nWe recommend you create the deep link in a separate document and then paste it back into the HTML editor in Salesforce marketing cloud. To begin:\n\n\n\n\nLog in to Salesforce Marketing Cloud\n\n\n\n\nClick on \nEmail Studio\n and then a sub-menu will appear. Click on \nEmail\n in the dropdown menu:\n\n\n\n\n\n\n\n\nThis will take you to the landing page for the Email section. Click on \nContent\n in the menu bar to navigate to the Content section:\n\n\n\n\n\n\n\n\nNavigate to your folder containing your emails and open an existing email. Make sure the email is in HTML layout as shown below:\n\n\n\n\n\n\n\n\nChoose a link that you want to convert to a Branch deep link. Copy the text right after the \nhref=\n in your email template, and paste it into a separate document. In the example, it is:\n\n\n\"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\"\n\n\n\n\n\n\nAdd \n%%[ SET @link_to_be_wrapped =\n before the link in your separate document. In the example, this is now:\n\n\n%%[ SET @link_to_be_wrapped =\n\"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\"\n\n\n\n\n\n\nAdd \nContentAreaByName(\"My Contents\\deeplink\")]%%\n after the link:\n\n\n%%[ SET @link_to_be_wrapped = \"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\"\nContentAreaByName(\"My Contents\\deeplink\")]%%\n\n\n\n\n\n\nFrom the original link in your template, copy the text from and including \na\n until the \nhref=\n.  Add it to the text after \n%%\n in the last step. Please include the \na\n but not the \nhref=\n:\n\n\n%%[ SET @link_to_be_wrapped = \"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\" ContentAreaByName(\"My Contents\\deeplink\") ]%%\na style=\"border-radius: 4px;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: #fff;background-color: #00afd1;font-family: sans-serif;\"\n\n\n\n\n\n\nAdd \nhref=\"%%=RedirectTo(@deeplink)=%%\"\n to the end:\n\n\n%%[ SET @link_to_be_wrapped = \"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\" ContentAreaByName(\"My Contents\\deeplink\") ]%% \na style=\"border-radius: 4px;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: #fff;background-color: #00afd1;font-family: sans-serif;\"\nhref=\"%%=RedirectTo(@deeplink)=%%\"\n\n\n\n\n\n\nFrom the original link in your template, copy the end of the tag, the link text, and the closing tag (\nI want it!\n/a\n in the example) and add it to the end:\n\n\n%%[ SET @link_to_be_wrapped = \"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\" ContentAreaByName(\"My Contents\\deeplink\") ]%% \na style=\"border-radius: 4px;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: #fff;background-color: #00afd1;font-family: sans-serif;\" href=\"%%=RedirectTo(@deeplink)=%%\"\nI want it!\n/a\n\n\n\n\n\n\nCopy your final result from the separate document back into your email template, replacing everything inside and including the \na\n/a\n tags in the template.\n\n\n\n\n\n\nRepeat this for all your links in your email template that you want to convert to Branch deep links.\n\n\n\n\n\n\nThese links are complete and will deep link to content in your app.  \n\n\nThis converted code is referred to as the \"Branch script\" - this script will convert your web URLs to deep links. The script uses the \nContent Area\n to turn your web URL into a deep link.\n\n\n\n\nAdding the Branch script\n\n\nWherever you are using \na\n tags in your email templates, replace those with a short snippet for web URLs that you would like to deep link.\n\n%%[SET @link_to_be_wrapped = \nADD YOUR LINK HERE\n ContentAreaByName(\nMy Contents\\deeplink\n)]%%\n\na\n \nhref=\n%%=RedirectTo(@deeplink)=%%\nClick Me\n/a\n\n\n\nFor example, \nbefore:\n\n\na href=\"https://branch.io/product/1234\"\nExample link\n/a\n\n\nAfter:\n\n\n%%[ SET @link_to_be_wrapped = \"https://branch.io/product/1234\" ContentAreaByName(\"My Contents\\deeplink\") ]%%\n\n\na href=\"%%=RedirectTo(@deeplink)=%%\"\nExample link\n/a\n\n\n\n\n\n\nContent Area folder\n\n\nMake sure your \ndeeplink\n Content Area \nis in the right folder\n. Either change the folder to \"My Contents\" or change the path used by \"ContentAreaByName\" in the Branch script.\n\n\n\n\nMaking regular Branch links compatible with email\n\n\nBe sure to add \n\"$3p\":\"e_xx\"\n to the deep link data of any links you use in email to ensure Universal Link and click tracking works as expected.\n\n\nCreate email links via API without changing your email templates\n\n\nTo create email links via API, please use the instructions on how to \ncreate links via API\n, but include the following key value pairs in your call:\n\n\n\n\n\"$3p\":\"e_xx\"\n This is required for Universal Link and click tracking functionality.\n\n\n\"$original_url\":\"{{your web url URI encoded}}\"\n For each piece of content, include a URI encoded version of your content's web URL. You can also add deep link data as query parameters on that web URL. This ensures accurate Content Analytics reporting. \n   \nExample:\n \n\"$original_url\":\"https%3A%2F%2Fshop.com%2Fshoes%2Fbrown-shoes%3Fmy_key%3Dmy_value%26campaign%3Dshoe_discounts\"\n\n\n\n\nConvert all web links in your email to deep links\n\n\nWe have provided a way of easily converting web links to Branch links, as well as \nan example\n. The example takes an html email (as a string) and applies the script to it.\n\n\nHere is the script:\n\n\nvar\n \ncrypto\n \n=\n \nrequire\n(\ncrypto\n);\n\n\nmodule\n.\nexports\n \n=\n \nfunction\n(\noriginal_url\n,\n \nbranch_base_url\n)\n \n{\n\n    \nif\n \n(\n!\noriginal_url\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nMissing original_url\n);\n \n}\n\n    \nif\n \n(\ntypeof\n \noriginal_url\n \n!=\n \nstring\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nInvalid original_url\n);\n \n}\n\n    \nif\n \n(\n!\nbranch_base_url\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nMissing branch_base_url, should be similar to https://bnc.lt/abcd/3p?%243p=e_xx\n);\n \n}\n\n    \nif\n \n(\ntypeof\n \nbranch_base_url\n \n!=\n \nstring\n)\n \n{\n \nreturn\n \nnew\n \nError\n(\nInvalid branch_base_url\n);\n \n}\n\n\n    \nreturn\n \nbranch_base_url\n \n+\n \n%24original_url=\n \n+\n \nencodeURIComponent\n(\noriginal_url\n);\n\n\n};\n\n\n\n\n\nHere is how links look before and after (the latter being a Branch deep link).\n\n\n\n\nBefore:\n \nhttp://example.com/?foo=bar\n\n\nAfter:\n \nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nNote\n that these are simplified examples, not actual demo links.\n\n\nFlag your web-only links\n\n\nIf you want any web-only links to not open the app on iOS, Salesforce has a special attribute that you can apply to these links.\n\n\nAdd \nmc-deep-link=\"false\"\n to your link tag like this:\n\n\na\n \nmc-deep-link\n=\nfalse\n \nhref\n=\nhttps://my.app.link/3p?$3p=e_et\n$original_url=...\n \nThis link will not open the app.\n/\na\n\n\n\n\n\nTo ensure that the app does not open on other platforms, add \n%24web_only%3Dtrue\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar%24web_only%3Dtrue\n \nLink to your app!\n/\na\n\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Salesforce"
        }, 
        {
            "location": "/pages/emails/salesforce/#prerequisites", 
            "text": "You must have the Salesforce Marketing Cloud Sender Authentication Package (SAP) in order to benefit from Universal Links + click tracking functionality.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/emails/salesforce/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/salesforce/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/salesforce/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domain from your Salesforce settings. We  highly  recommend using a new click tracking domain for this implementation to ensure that the user experience for pre-Branch links on the original click tracking domain doesn't break.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/salesforce/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/salesforce/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/salesforce/#configure-your-aasa-file-in-salesforce-marketing-cloud", 
            "text": "Your Salesforce account must be configured to correctly handle Universal Links. Configure the settings in Deep Linking under the Admin section in Email Studio. Ensure you're in the account corresponding to the correct click tracking domain  you selected  above.    Enter the AppID value  Check the \"Exclude Profile\" and \"Unsub Center\" checkboxes to force links to these items to open in the browser and not the app, if desired.  Click \"Save\" to save the configuration.  Let Salesforce and Branch know that you've finished this step and your Technical Account Manager will verify that everything looks good.", 
            "title": "Configure your AASA file in Salesforce Marketing Cloud"
        }, 
        {
            "location": "/pages/emails/salesforce/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/salesforce/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/salesforce/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/salesforce/#options-for-generating-branch-links-for-email", 
            "text": "There are a few different ways you can create Branch links that are compatible with Deep Linked Email + Salesforce. You will need to replace the web URLs in your templates with these. To create Branch links, you can either:   Add a new Content Area for easy deep linking  Making regular Branch links compatible with email  Create email links via API without changing your email templates  Convert all web links in your email to deep links", 
            "title": "Options for generating Branch links for email"
        }, 
        {
            "location": "/pages/emails/salesforce/#add-a-new-content-area-for-easy-deep-linking", 
            "text": "In this step, we'll add a new Content Area in Salesforce that makes it very easy to create deep links in your emails.    Work with your Branch account manager to modify the following code snippet, replacing  DOMAIN-HERE  with your Branch base domain:  %%[ VAR @deeplink, @branch_base_url SET @branch_base_url =  https://DOMAIN-HERE/3p?%243p=e_et  SET @deeplink = CONCAT(@branch_base_url, CONCAT( %24original_url= , URLEncode(@link_to_be_wrapped, 1, 1))) ]%%     After logging into Salesforce Marketing Cloud, click on  Email Studio  and then a sub-menu will appear. Click on  Email  in the dropdown menu:     This will take you to the landing page for the Email section. Click on  Content  in the menu bar to navigate to the Content section:     In the Content section, you will see a list of folders on the left side. Right click on the  My Contents  folder and choose  New Folder  in the context menu:     Name the folder  Branch :     Once the folder is created, click on the  Branch  folder. On the right side, you will see a menu bar for the Branch folder. Click on  Create  and in the sub menu, click  Content  to create new content:     In the Create Content window that appears, enter  deeplink  in the text field named Content Name. Click on  Next  after you enter the text:     The next screen will ask you to select the format of the content. Choose  Free Form  and then click  Next :     In the next screen, paste in the snippet you generated in  1 :     Click  Save . You will now be back at your list of folders in the Content section with the file  deeplink  listed:     You have now successfully created the deep linking script.     Code snippet  The snippet will follow this format: %%[ VAR @deeplink, @branch_base_url SET @branch_base_url =  BASE URL FROM BRANCH  SET @deeplink = CONCAT(@branch_base_url, CONCAT( %24original_url= , URLEncode(@link_to_be_wrapped, 1, 1))) ]%%  \nThe code above has a placeholder for  @branch_base_url . Replace it with yours.", 
            "title": "Add a new Content Area for easy deep linking"
        }, 
        {
            "location": "/pages/emails/salesforce/#configure-your-salesforce-email-templates", 
            "text": "This section covers how to convert individual links in your existing email templates to use Branch deep links.  You will need to determine which links in your email template that you want to convert to Branch deep links.    To convert a link to a Branch deep link, let's use an example: a   style= border-radius: 4px;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: #fff;background-color: #00afd1;font-family: sans-serif;   href= https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel I want it! /a   This is what the link will look like  after  you have modified it to support Branch deep links: %%[ SET @link_to_be_wrapped =  https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel  ContentAreaByName( My Contents\\deeplink ) ]%% a   style= border-radius: 4px;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: #fff;background-color: #00afd1;font-family: sans-serif;    href= %%=RedirectTo(@deeplink)=%% I want this! /a   We recommend you create the deep link in a separate document and then paste it back into the HTML editor in Salesforce marketing cloud. To begin:   Log in to Salesforce Marketing Cloud   Click on  Email Studio  and then a sub-menu will appear. Click on  Email  in the dropdown menu:     This will take you to the landing page for the Email section. Click on  Content  in the menu bar to navigate to the Content section:     Navigate to your folder containing your emails and open an existing email. Make sure the email is in HTML layout as shown below:     Choose a link that you want to convert to a Branch deep link. Copy the text right after the  href=  in your email template, and paste it into a separate document. In the example, it is:  \"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\"    Add  %%[ SET @link_to_be_wrapped =  before the link in your separate document. In the example, this is now:  %%[ SET @link_to_be_wrapped = \"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\"    Add  ContentAreaByName(\"My Contents\\deeplink\")]%%  after the link:  %%[ SET @link_to_be_wrapped = \"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\" ContentAreaByName(\"My Contents\\deeplink\")]%%    From the original link in your template, copy the text from and including  a  until the  href= .  Add it to the text after  %%  in the last step. Please include the  a  but not the  href= :  %%[ SET @link_to_be_wrapped = \"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\" ContentAreaByName(\"My Contents\\deeplink\") ]%% a style=\"border-radius: 4px;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: #fff;background-color: #00afd1;font-family: sans-serif;\"    Add  href=\"%%=RedirectTo(@deeplink)=%%\"  to the end:  %%[ SET @link_to_be_wrapped = \"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\" ContentAreaByName(\"My Contents\\deeplink\") ]%%  a style=\"border-radius: 4px;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: #fff;background-color: #00afd1;font-family: sans-serif;\" href=\"%%=RedirectTo(@deeplink)=%%\"    From the original link in your template, copy the end of the tag, the link text, and the closing tag ( I want it! /a  in the example) and add it to the end:  %%[ SET @link_to_be_wrapped = \"https://www.blueapron.com/recipes/five-spice-chicken-vermicelli-with-mushrooms-collard-greens-baby-fennel\" ContentAreaByName(\"My Contents\\deeplink\") ]%%  a style=\"border-radius: 4px;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: #fff;background-color: #00afd1;font-family: sans-serif;\" href=\"%%=RedirectTo(@deeplink)=%%\" I want it! /a    Copy your final result from the separate document back into your email template, replacing everything inside and including the  a /a  tags in the template.    Repeat this for all your links in your email template that you want to convert to Branch deep links.    These links are complete and will deep link to content in your app.    This converted code is referred to as the \"Branch script\" - this script will convert your web URLs to deep links. The script uses the  Content Area  to turn your web URL into a deep link.   Adding the Branch script  Wherever you are using  a  tags in your email templates, replace those with a short snippet for web URLs that you would like to deep link. %%[SET @link_to_be_wrapped =  ADD YOUR LINK HERE  ContentAreaByName( My Contents\\deeplink )]%% a   href= %%=RedirectTo(@deeplink)=%% Click Me /a  \nFor example,  before:  a href=\"https://branch.io/product/1234\" Example link /a  After:  %%[ SET @link_to_be_wrapped = \"https://branch.io/product/1234\" ContentAreaByName(\"My Contents\\deeplink\") ]%%  a href=\"%%=RedirectTo(@deeplink)=%%\" Example link /a    Content Area folder  Make sure your  deeplink  Content Area  is in the right folder . Either change the folder to \"My Contents\" or change the path used by \"ContentAreaByName\" in the Branch script.", 
            "title": "Configure your Salesforce email templates"
        }, 
        {
            "location": "/pages/emails/salesforce/#making-regular-branch-links-compatible-with-email", 
            "text": "Be sure to add  \"$3p\":\"e_xx\"  to the deep link data of any links you use in email to ensure Universal Link and click tracking works as expected.", 
            "title": "Making regular Branch links compatible with email"
        }, 
        {
            "location": "/pages/emails/salesforce/#create-email-links-via-api-without-changing-your-email-templates", 
            "text": "To create email links via API, please use the instructions on how to  create links via API , but include the following key value pairs in your call:   \"$3p\":\"e_xx\"  This is required for Universal Link and click tracking functionality.  \"$original_url\":\"{{your web url URI encoded}}\"  For each piece of content, include a URI encoded version of your content's web URL. You can also add deep link data as query parameters on that web URL. This ensures accurate Content Analytics reporting. \n    Example:   \"$original_url\":\"https%3A%2F%2Fshop.com%2Fshoes%2Fbrown-shoes%3Fmy_key%3Dmy_value%26campaign%3Dshoe_discounts\"", 
            "title": "Create email links via API without changing your email templates"
        }, 
        {
            "location": "/pages/emails/salesforce/#convert-all-web-links-in-your-email-to-deep-links", 
            "text": "We have provided a way of easily converting web links to Branch links, as well as  an example . The example takes an html email (as a string) and applies the script to it.  Here is the script:  var   crypto   =   require ( crypto );  module . exports   =   function ( original_url ,   branch_base_url )   { \n     if   ( ! original_url )   {   return   new   Error ( Missing original_url );   } \n     if   ( typeof   original_url   !=   string )   {   return   new   Error ( Invalid original_url );   } \n     if   ( ! branch_base_url )   {   return   new   Error ( Missing branch_base_url, should be similar to https://bnc.lt/abcd/3p?%243p=e_xx );   } \n     if   ( typeof   branch_base_url   !=   string )   {   return   new   Error ( Invalid branch_base_url );   } \n\n     return   branch_base_url   +   %24original_url=   +   encodeURIComponent ( original_url );  };   Here is how links look before and after (the latter being a Branch deep link).   Before:   http://example.com/?foo=bar  After:   https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar   Note  that these are simplified examples, not actual demo links.", 
            "title": "Convert all web links in your email to deep links"
        }, 
        {
            "location": "/pages/emails/salesforce/#flag-your-web-only-links", 
            "text": "If you want any web-only links to not open the app on iOS, Salesforce has a special attribute that you can apply to these links.  Add  mc-deep-link=\"false\"  to your link tag like this:  a   mc-deep-link = false   href = https://my.app.link/3p?$3p=e_et $original_url=...   This link will not open the app. / a   To ensure that the app does not open on other platforms, add  %24web_only%3Dtrue  to your links as a query parameter, for example:  a   href = https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar%24web_only%3Dtrue   Link to your app! / a", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/salesforce/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/sender/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nCreate a custom click tracking domain\n\n\n\n\n\n\nReach support \n and ask them to add a custom click tracking domain for your Sender account.\n\n\n\n\n\n\nTo enable tracking on a subdomain, you must set up a CNAME record in DNS pointing your subdomain to \napp.sender.net\n. \n\n\n\n\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Sender"
        }, 
        {
            "location": "/pages/emails/sender/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/sender/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/sender/#tell-us-your-click-tracking-domain", 
            "text": "", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/sender/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/sender/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/sender/#create-a-custom-click-tracking-domain", 
            "text": "Reach support   and ask them to add a custom click tracking domain for your Sender account.    To enable tracking on a subdomain, you must set up a CNAME record in DNS pointing your subdomain to  app.sender.net .", 
            "title": "Create a custom click tracking domain"
        }, 
        {
            "location": "/pages/emails/sender/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/sender/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/sender/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/sender/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/sender/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/sender/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/sender/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/sender/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/sendgrid/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domains from your Sendgrid settings:\n\n\n\n\nLog in to your SendGrid account.\n\n\nGo to Settings \n Whitelabels \n Email Links.\n\n\n\n\nFind your email link whitelabeled domain, click on the gear icon and click \"View\" (or create a new whitelabel).\n\n\n\n\n\n\n\n\nNote the \"Host\" email click tracking domain (e.g. email.mydomain.com) and the SendGrid domain under \"Data\".\n\n\n\n\n\n\n\n\nEnter both the click tracking domain and the SendGrid domain in item 1 of this step:\n\n\n\n\n\n\n\n\nOn \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nValidate your click tracking domain in SendGrid\n\n\nBefore you CNAME to Branch, you must CNAME your click tracking domain to sendgrid.net and validate the domain in Whitelabel \n Email Links within SendGrid. Once there is a green checkmark indicating that the domain is valid, then you can proceed to the next step.\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nIn order for your email service provider to know that the email link should open the app, add \nuniversal=\"true\"\n to the HTML, for example:\n\n\na\n \nhref\n=\nhttp://example.com\n \nuniversal\n=\ntrue\nLink to your app!\n/\na\n\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nTroubleshoot issues\n\n\n\n\n\n\nError validating whitelabel: Expect CNAME record\n\n\nIf you are seeing this \nerror message\n, the reason is that SendGrid will only consider the CNAME sendgrid.net valid. To get rid of this error, please:\n\n\n\n\nCNAME your subdomain to sendgrid.net\n\n\nValidate records on SendGrid dashboard\n\n\nCNAME your subdomain to thirdparty.bnc.lt\n\n\nDo not validate records on SendGrid after Step 3\n\n\n\n\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "SendGrid"
        }, 
        {
            "location": "/pages/emails/sendgrid/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/sendgrid/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/sendgrid/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domains from your Sendgrid settings:   Log in to your SendGrid account.  Go to Settings   Whitelabels   Email Links.   Find your email link whitelabeled domain, click on the gear icon and click \"View\" (or create a new whitelabel).     Note the \"Host\" email click tracking domain (e.g. email.mydomain.com) and the SendGrid domain under \"Data\".     Enter both the click tracking domain and the SendGrid domain in item 1 of this step:     On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/sendgrid/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/sendgrid/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/sendgrid/#validate-your-click-tracking-domain-in-sendgrid", 
            "text": "Before you CNAME to Branch, you must CNAME your click tracking domain to sendgrid.net and validate the domain in Whitelabel   Email Links within SendGrid. Once there is a green checkmark indicating that the domain is valid, then you can proceed to the next step.", 
            "title": "Validate your click tracking domain in SendGrid"
        }, 
        {
            "location": "/pages/emails/sendgrid/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/sendgrid/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/sendgrid/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/sendgrid/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/sendgrid/#flag-your-deep-links", 
            "text": "In order for your email service provider to know that the email link should open the app, add  universal=\"true\"  to the HTML, for example:  a   href = http://example.com   universal = true Link to your app! / a   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/sendgrid/#troubleshoot-issues", 
            "text": "", 
            "title": "Troubleshoot issues"
        }, 
        {
            "location": "/pages/emails/sendgrid/#error-validating-whitelabel-expect-cname-record", 
            "text": "If you are seeing this  error message , the reason is that SendGrid will only consider the CNAME sendgrid.net valid. To get rid of this error, please:   CNAME your subdomain to sendgrid.net  Validate records on SendGrid dashboard  CNAME your subdomain to thirdparty.bnc.lt  Do not validate records on SendGrid after Step 3", 
            "title": "Error validating whitelabel: Expect CNAME record"
        }, 
        {
            "location": "/pages/emails/sendgrid/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/sparkpost/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domain from the \nTracking Domains\n section of your SparkPost account. If you have not added a custom click tracking domain yet, follow the instructions \nhere\n. \n\n\nOn \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nCreate a custom click tracking domain\n\n\n\n\n\n\nAdd and verify a custom click tracking domain in the \nTracking Domains\n section of your SparkPost account:\n\n\n\n\n\n\n\n\nCreate a new CNAME record in your DNS zone file and set the host of your domain to the value \nspgo.io\n\n\n\n\n\n\nFor more information on how to set up your domain, please visit SparkPost's \ndocumentation\n.\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "SparkPost"
        }, 
        {
            "location": "/pages/emails/sparkpost/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/sparkpost/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/sparkpost/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domain from the  Tracking Domains  section of your SparkPost account. If you have not added a custom click tracking domain yet, follow the instructions  here .   On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/sparkpost/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/sparkpost/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/sparkpost/#create-a-custom-click-tracking-domain", 
            "text": "Add and verify a custom click tracking domain in the  Tracking Domains  section of your SparkPost account:     Create a new CNAME record in your DNS zone file and set the host of your domain to the value  spgo.io    For more information on how to set up your domain, please visit SparkPost's  documentation .", 
            "title": "Create a custom click tracking domain"
        }, 
        {
            "location": "/pages/emails/sparkpost/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/sparkpost/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/sparkpost/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/sparkpost/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/sparkpost/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/sparkpost/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/sparkpost/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/sparkpost/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/vero/", 
            "text": "Overview\n\n\nDeep Linked Email allows you to automatically convert your email links into multi-platform deep links that take users directly to content in the app on mobile devices, while still maintaining the same web experience for desktop and mobile users without the app.\n\n\n\n\nWith a script provided by Branch, you can dynamically create Branch links in email. In any place the script is called, the web URL is converted into its corresponding Branch link. The email is then sent.\n\n\nWhen a link is clicked by a user without the app, it will route that user to the original web URL (including on desktop). When a link is clicked by a user with your app, it will direct that user into the relevant in-app content regardless of platform or email client.\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already integrated the Branch SDK into your app.\n\n\n\n\nContact your Branch Account Manager or \n at any time for assistance with the setup steps.\n\n\nChoose your email service provider\n\n\nNavigate to the \nDeep Linked Email\n section of the Branch dashboard. Select SendGrid or Mailgun as your email service provider and click \nGet Started\n. If you do not know which ESP to select, please contact your Vero account manager. Then, follow the \nSendGrid\n or \nMailgun\n setup steps.\n\n\n\n\nTell us your click tracking domain\n\n\nIf you use Vero as your sending provider\n\n\nYou will need to request a custom click tracking domain from Vero.\n\n\n\n\nBranch recommends that you setup a new click tracking domain in order to not affect any existing email campaigns which may have been sent prior to integration.\n\n\nYou should create new click tracking domain at your domain registrar dashboard.\n\n\nEmail Vero (\n) and request a second / new click tracking domain at your domain. Vero will set this up and email back the DKIM and SPF DNS details for configuring this domain.\n\n\nVerify the click tracking domain using the configuration provided by Vero\n\n\n\n\nIf you plug Vero into your own Mailgun account\n\n\nYou will still need to request a custom click tracking domain from Vero, but with slightly different setup steps. \n\n\n\n\nBranch recommends that you create a new click tracking domain in order to not affect any existing email campaigns which may have been sent prior to integration.\n\n\nYou should create new click tracking domain at your domain registrar dashboard.\n\n\nEmail Vero (\n) with your new click tracking domain and ask them to set up the separate click tracking domain\n\n\nAdd and verify\n your new custom click tracking domain in the Mailgun dashboard\n\n\nLog into Vero and go to Settings \n Email Providers. Add a new Mailgun \"account\" and input the domain name you have just verified. Vero will now allow you to set this as the default, or use this on a per-campaign basis.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Vero"
        }, 
        {
            "location": "/pages/emails/vero/#overview", 
            "text": "Deep Linked Email allows you to automatically convert your email links into multi-platform deep links that take users directly to content in the app on mobile devices, while still maintaining the same web experience for desktop and mobile users without the app.   With a script provided by Branch, you can dynamically create Branch links in email. In any place the script is called, the web URL is converted into its corresponding Branch link. The email is then sent.  When a link is clicked by a user without the app, it will route that user to the original web URL (including on desktop). When a link is clicked by a user with your app, it will direct that user into the relevant in-app content regardless of platform or email client.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/emails/vero/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/vero/#prerequisites", 
            "text": "This guide requires you to have already integrated the Branch SDK into your app.   Contact your Branch Account Manager or   at any time for assistance with the setup steps.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/emails/vero/#choose-your-email-service-provider", 
            "text": "Navigate to the  Deep Linked Email  section of the Branch dashboard. Select SendGrid or Mailgun as your email service provider and click  Get Started . If you do not know which ESP to select, please contact your Vero account manager. Then, follow the  SendGrid  or  Mailgun  setup steps.", 
            "title": "Choose your email service provider"
        }, 
        {
            "location": "/pages/emails/vero/#tell-us-your-click-tracking-domain", 
            "text": "", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/vero/#if-you-use-vero-as-your-sending-provider", 
            "text": "You will need to request a custom click tracking domain from Vero.   Branch recommends that you setup a new click tracking domain in order to not affect any existing email campaigns which may have been sent prior to integration.  You should create new click tracking domain at your domain registrar dashboard.  Email Vero ( ) and request a second / new click tracking domain at your domain. Vero will set this up and email back the DKIM and SPF DNS details for configuring this domain.  Verify the click tracking domain using the configuration provided by Vero", 
            "title": "If you use Vero as your sending provider"
        }, 
        {
            "location": "/pages/emails/vero/#if-you-plug-vero-into-your-own-mailgun-account", 
            "text": "You will still need to request a custom click tracking domain from Vero, but with slightly different setup steps.    Branch recommends that you create a new click tracking domain in order to not affect any existing email campaigns which may have been sent prior to integration.  You should create new click tracking domain at your domain registrar dashboard.  Email Vero ( ) with your new click tracking domain and ask them to set up the separate click tracking domain  Add and verify  your new custom click tracking domain in the Mailgun dashboard  Log into Vero and go to Settings   Email Providers. Add a new Mailgun \"account\" and input the domain name you have just verified. Vero will now allow you to set this as the default, or use this on a per-campaign basis.", 
            "title": "If you plug Vero into your own Mailgun account"
        }, 
        {
            "location": "/pages/emails/vero/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/zeta/", 
            "text": "Setup\n\n\nThis guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow \nthis documentation\n first.\n\n\nConfigure your ESP\n\n\nTo open the app directly on iOS 9.2+, you must configure your email integration and your app to support \nUniversal Links\n in emails.\n\n\nTell us your click tracking domain\n\n\nYou can retrieve your click tracking domains from your Zeta settings. On \nDone\n click, an AASA file - required for Universal Links - specific to that domain will be generated.\n\n\nConfigure your app for your click tracking domain\n\n\n\n\nIn this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click \nSend\n. They will complete the \ntechnical setup\n steps below.\n\n\nTechnical setup\n\n\nThe following app changes ensure that your email integration supports \nUniversal Links\n. You will need access to your app code to make these changes.\n\n\nYou should have \nreceived an email from Branch\n with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the \nDeep Linked Email setup flow\n.\n\n\n\n\nHow does it work?\n\n\nApple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the \nSupport\n section for more information.\n\n\n\n\nSet up your click tracking domain\n\n\nCreate a CNAME for your click tracking domain and point it to \nthirdparty.bnc.lt\n.\n\n\nAdd your click tracking domain to your Associated Domains\n\n\nTo enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.\n\n\n\n\nIn Xcode, go to the \nCapabilities\n tab of your project file.\n\n\n\n\nScroll down and enable \nAssociated Domains\n if it is not already enabled.\n\n\n\n\n\n\n\n\nCopy your click tracking domain from the \nemail you received from Branch\n, or retrieve it from your ESP's settings.\n\n\n\n\n\n\nIn the \nDomains\n section, click the \n+\n icon and add your click tracking domain. For example, if your click tracking domain is \nemail.example.com\n, add an entry for \napplinks:email.example.com\n.\n\n\n\n\n\n\n\n\n\n\nHaving trouble or new to Universal Links?\n\n\nFollow \nthese instructions\n for more details on enabling Universal Links in the Branch dashboard and in Xcode.\n\n\n\n\nHandle links for web-only content\n\n\nIf you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.\n\n\nYou should add this code snippet inside the deep link handler code block. Note that this uses query parameter \n$web_only=true\n. This should match the \nquery parameter on the web URL\n you enter in the email.\n\n\n[\nbranch\n \ninitSessionWithLaunchOptions\n:\nlaunchOptions\n \nandRegisterDeepLinkHandler\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n  \n// params are the deep linked params associated with the link that the user clicked before showing up.\n\n  \nif\n \n(\nparams\n[\n@\n$3p\n]\n \n \nparams\n[\n@\n$web_only\n])\n \n{\n\n            \nNSURL\n \n*\nurl\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\n$original_url\n]];\n\n            \nif\n \n(\nurl\n)\n \n{\n\n                \n[\napplication\n \nopenURL\n:\nurl\n];\n \n// check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early\n\n            \n}\n\n  \n}\n \nelse\n \n{\n \n    \n// it is a deep link\n\n    \nGDLog\n(\n@\nbranch deep link: %@\n,\n \n[\nparams\n \ndescription\n]);\n \n    \n[\nself\n \nhandleBranchDeeplink\n:\nparams\n];\n\n  \n}\n\n\n}];\n\n\n\n\n\nValidate and test\n\n\n\n\nThe last step of the \nDeep Linked Email setup flow\n validates whether you have completed all necessary steps and whether an engineer on your team has completed the \ntechnical setup\n steps. You will also see recommendations for how to improve your email integration.\n\n\nUsage\n\n\nOnce you\u2019ve completed the \none time setup steps\n, it\u2019s time to send your first email.\n\n\nThis guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.\n\n\nFlag your deep links\n\n\nFor the email links that you would like to deep link to content, add \n$deep_link=true\n to the URL as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$deep_link=true\n \nLink to your app!\n/\na\n\n\n\n\n\nThis will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.\n\n\nFlag your web-only links\n\n\nWith your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add \n$web_only=true\n to your links as a query parameter, for example:\n\n\na\n \nhref\n=\nlinks.example.com?$web_only=true\n \nLink to your app!\n/\na\n\n\n\n\n\n\n\nHandle links for web-only content\n\n\nMake sure you have completed the \ntechnical setup steps\n to handle web-only links within your app.\n\n\n\n\nThis will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.\n\n\n\n\nWhat happens to your links behind the scenes?\n\n\nThis is what a link looks like within your email template:\n\n\nhttp://example.com/?foo=bar\n\n\n\n\nWhen a user clicks your link, Branch processes the link and converts it to something like this:\n\n\nhttps://vza3.app.link/3p?%243p=e_xx\n%24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar\n\n\n\n\nWhere \nvza3.app.link\n is your Branch domain.\n\n\n\n\nThe conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the \nemail page\n.\n\n\n\n\nMore information\n\n\nCurious about how email works and more FAQ? \nVisit our general \nemail support\n page\n.", 
            "title": "Zeta"
        }, 
        {
            "location": "/pages/emails/zeta/#setup", 
            "text": "This guide will walk you through how to integrate your email service provider with Branch. If you have not completed the getting started steps, please follow  this documentation  first.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/emails/zeta/#configure-your-esp", 
            "text": "To open the app directly on iOS 9.2+, you must configure your email integration and your app to support  Universal Links  in emails.", 
            "title": "Configure your ESP"
        }, 
        {
            "location": "/pages/emails/zeta/#tell-us-your-click-tracking-domain", 
            "text": "You can retrieve your click tracking domains from your Zeta settings. On  Done  click, an AASA file - required for Universal Links - specific to that domain will be generated.", 
            "title": "Tell us your click tracking domain"
        }, 
        {
            "location": "/pages/emails/zeta/#configure-your-app-for-your-click-tracking-domain", 
            "text": "In this prompt, enter the email of someone on your team who is qualified to modify your iOS app, and then click  Send . They will complete the  technical setup  steps below.", 
            "title": "Configure your app for your click tracking domain"
        }, 
        {
            "location": "/pages/emails/zeta/#technical-setup", 
            "text": "The following app changes ensure that your email integration supports  Universal Links . You will need access to your app code to make these changes.  You should have  received an email from Branch  with your ESP's click tracking domain. If not, likely you or someone on your team still needs to complete the  Deep Linked Email setup flow .   How does it work?  Apple recognizes the click tracking domain as a Universal Link, and opens the app immediately without the browser opening. Once the app has opened, Branch will collect the referring URL that opened the app (at this time, it will be the click tracking url). Inside the app, Branch will robotically \u201cclick\u201d the link, registering the click with the ESP, and returning the Branch link information to the Branch SDK inside the app. This information is then used to deep link the user to the correct in-app content. See the  Support  section for more information.", 
            "title": "Technical setup"
        }, 
        {
            "location": "/pages/emails/zeta/#set-up-your-click-tracking-domain", 
            "text": "Create a CNAME for your click tracking domain and point it to  thirdparty.bnc.lt .", 
            "title": "Set up your click tracking domain"
        }, 
        {
            "location": "/pages/emails/zeta/#add-your-click-tracking-domain-to-your-associated-domains", 
            "text": "To enable Universal Links on your click tracking domain, you'll need to add the click tracking domain to your Associated Domains entitlement.   In Xcode, go to the  Capabilities  tab of your project file.   Scroll down and enable  Associated Domains  if it is not already enabled.     Copy your click tracking domain from the  email you received from Branch , or retrieve it from your ESP's settings.    In the  Domains  section, click the  +  icon and add your click tracking domain. For example, if your click tracking domain is  email.example.com , add an entry for  applinks:email.example.com .      Having trouble or new to Universal Links?  Follow  these instructions  for more details on enabling Universal Links in the Branch dashboard and in Xcode.", 
            "title": "Add your click tracking domain to your Associated Domains"
        }, 
        {
            "location": "/pages/emails/zeta/#handle-links-for-web-only-content", 
            "text": "If you have links to content that exists only on web, and not in the app (for example, a temporary marketing webpage that isn't in the app) then this code snippet will ensure all links that have not had the deep linking script applied will open in a browser.  You should add this code snippet inside the deep link handler code block. Note that this uses query parameter  $web_only=true . This should match the  query parameter on the web URL  you enter in the email.  [ branch   initSessionWithLaunchOptions : launchOptions   andRegisterDeepLinkHandler : ^ ( NSDictionary   * params ,   NSError   * error )   { \n   // params are the deep linked params associated with the link that the user clicked before showing up. \n   if   ( params [ @ $3p ]     params [ @ $web_only ])   { \n             NSURL   * url   =   [ NSURL   URLWithString : params [ @ $original_url ]]; \n             if   ( url )   { \n                 [ application   openURL : url ];   // check to make sure your existing deep linking logic, if any, is not executed, perhaps by returning early \n             } \n   }   else   {  \n     // it is a deep link \n     GDLog ( @ branch deep link: %@ ,   [ params   description ]);  \n     [ self   handleBranchDeeplink : params ]; \n   }  }];", 
            "title": "Handle links for web-only content"
        }, 
        {
            "location": "/pages/emails/zeta/#validate-and-test", 
            "text": "The last step of the  Deep Linked Email setup flow  validates whether you have completed all necessary steps and whether an engineer on your team has completed the  technical setup  steps. You will also see recommendations for how to improve your email integration.", 
            "title": "Validate and test"
        }, 
        {
            "location": "/pages/emails/zeta/#usage", 
            "text": "Once you\u2019ve completed the  one time setup steps , it\u2019s time to send your first email.  This guide will identify which web links you'd like to open the app and deep link, as well as convert them to Branch links.", 
            "title": "Usage"
        }, 
        {
            "location": "/pages/emails/zeta/#flag-your-deep-links", 
            "text": "For the email links that you would like to deep link to content, add  $deep_link=true  to the URL as a query parameter, for example:  a   href = links.example.com?$deep_link=true   Link to your app! / a   This will ensure that your links are converted to Branch links that will open the app on iOS and Android, with full tracking and attribution.", 
            "title": "Flag your deep links"
        }, 
        {
            "location": "/pages/emails/zeta/#flag-your-web-only-links", 
            "text": "With your email service provider, all email links will open the app by default. In order for your app to know that the email link should bounce to web after opening the app, add  $web_only=true  to your links as a query parameter, for example:  a   href = links.example.com?$web_only=true   Link to your app! / a    Handle links for web-only content  Make sure you have completed the  technical setup steps  to handle web-only links within your app.   This will also ensure that your links are converted to Branch links that will open the app on Android as well, with full tracking and attribution.   What happens to your links behind the scenes?  This is what a link looks like within your email template:  http://example.com/?foo=bar  When a user clicks your link, Branch processes the link and converts it to something like this:  https://vza3.app.link/3p?%243p=e_xx %24original_url=http%3A%2F%2Fexample.com%2F%3Ffoo%3Dbar  Where  vza3.app.link  is your Branch domain.   The conversion to Branch links will only work when your links are wrapped in your click tracking domain. To test links without wrapping, please generate a test link on step 3 of email onboarding, also accessible by clicking the gear icon for your ESP on the  email page .", 
            "title": "Flag your web-only links"
        }, 
        {
            "location": "/pages/emails/zeta/#more-information", 
            "text": "Curious about how email works and more FAQ?  Visit our general  email support  page .", 
            "title": "More information"
        }, 
        {
            "location": "/pages/emails/support/", 
            "text": "How does link creation work?\n\n\nThree stages of a link\n\n\n\n\n\n\n\n\nLink name\n\n\nLink example\n\n\nLink description\n\n\n\n\n\n\n\n\n\n\nOriginal link\n\n\nhttps://www.shop.com/product\n\n\nThis is the original link that you would put in an email. If emails are dynamically personalized, this will be the link that is filled in by the personalization engine.\n\n\n\n\n\n\nBranch link\n\n\nhttps://branch.shop.com/?original_url=https%3A%2F%2Fwww.shop.com%2Fproduct\n\n\nA Branch deep link, that handles all redirection for users on any platform, with or without the app.\n\n\n\n\n\n\nClick Tracking URL\n\n\nhttps://email.shop.com/click/abcde12345\n\n\nAn ESP generated click tracking URL. The URL doesn\u2019t signify anything, but when clicked, records the click and redirects to a given destination.\n\n\n\n\n\n\n\n\n\n\nRedirect behavior and tracking\n\n\nWhen your customer clicks the click tracking link in an email, the browser will generally open. Once in the browser, the click tracking redirect will happen, followed by an instant redirect to the Branch link. At this point, Branch will either stay in the browser, and load the original URL (if the app is not installed, or the customer is on a desktop device), or Branch will open the app and deep link to content. Branch uses the information from the original URL to deep link to the correct in-app content.\n\n\n\n\nUniversal links and click tracking\n\n\nApple introduced Universal Links starting with iOS 9. Apple introduced Universal Links starting with iOS 9. You must configure your app and your links in a specific way to enable Universal Link functionality. Branch guides developers through this process so that Branch links function as Universal Links.\n\n\nFor Universal Links to work, Apple requires that a file called an \u201cApple-App-Site-Association\u201d (AASA) file must be hosted on the domain of the link in question. When the link is clicked, Apple will check for the presence of this file to decide whether or not to open the app. All Branch links are Universal Links, because we will host this file securely on your Branch link domain.\n\n\nWhen you click a Branch link directly from an email inside the Mail app on iOS 9+, it functions as a Universal Link - it redirects directly into the desired app. However, if you put a Branch Universal Link behind a click tracking URL, it won\u2019t deep link into the app. This is because generally, a click tracking URL is not a Universal Link. If you\u2019re not hosting that AASA file on the click tracking URL\u2019s domain, you aren\u2019t going to get Universal Link behavior for that link.\n\n\nSolution\n\n\nTo solve this, Branch will host the AASA file on your click tracking domain. We\u2019ll help you get set up with this.\n\n\n\n\nDeep linking setup messages\n\n\nIn the \nSet up Deep Linking\n step of the email onboarding flow, you will see a result indicating the mapping between your web content and your app content.\n\n\nWe think you use your web URL for deep linking\n\n\n\n\nIf your webpage, for instance at the URL \nhttps://shop.com/shoes/brown-loafers\n, has a tag like this:\n\n\nmeta name=\"al:ios:url\" content=\"shop://https://shop.com/shoes/brown-loafers\" /\n\n\nor this:\n\n\nmeta name=\"al:android:url\" content=\"shop://shoes/brown-loafers\" /\n\n\nYour deep linking setup for email will use all or part of your \nweb URL\n as a deep link value. It can use either the full URL including the protocol (\nhttps://shop.com/shoes/brown-loafers\n), the full URL without the protocol (\nshop.com/shoes/brown-loafers\n), or the path of the URL (\nshoes/brown-loafers\n).\n\n\nWe think you host your deep link data on your website\n\n\n\n\nIf instead, your webpage has a tag like this:\n\n\nmeta name=\"branch:deeplink:product_id\" content=\"123456\" /\n\n\nor this:\n\n\nmeta name=\"al:ios:url\" content=\"shop://id/123456\" /\n\n\nYour deep linking setup for email will use the \nhosted deep link data\n method. This means that no mapping can be made to the URL, and \nmeta tags that can be used for deep linking\n will be retrieved from your webpage on an ongoing basis.\n\n\nWe couldn't determine your deep linking setup from your web URL\n\n\nIf there are no meta tags for deep linking on your webpage, or you indicate that the mapping is incorrect, you can try a Branch link instead.\n\n\n\n\nHere, you will want to enter a Branch link that opens to a page within your app (not the home screen).\n\n\nWhen you click \nSubmit\n, the link's values for \n$canonical_url\n, \n$desktop_url\n, and \n$fallback_url\n will be compared against other values in the link. If there is a mapping between values for the full URL or the path of the URL, your deep linking setup for email will use those methods.\n\n\nTest your link\n\n\nWhen you submit a web URL or Branch link, you will be prompted with a test link. Click this link on iOS and Android devices, and verify that it will open your app to the right place.\n\n\n\n\nOnce you click \nYes\n, your deep linking will be set up for email. When a user clicks a link in your emails, we will embed the full web URL, path of the web URL, or retrieved deep link data from the webpage into a Branch version of that link and pass it to your app, so that it will open to the right place.", 
            "title": "Support"
        }, 
        {
            "location": "/pages/emails/support/#how-does-link-creation-work", 
            "text": "", 
            "title": "How does link creation work?"
        }, 
        {
            "location": "/pages/emails/support/#three-stages-of-a-link", 
            "text": "Link name  Link example  Link description      Original link  https://www.shop.com/product  This is the original link that you would put in an email. If emails are dynamically personalized, this will be the link that is filled in by the personalization engine.    Branch link  https://branch.shop.com/?original_url=https%3A%2F%2Fwww.shop.com%2Fproduct  A Branch deep link, that handles all redirection for users on any platform, with or without the app.    Click Tracking URL  https://email.shop.com/click/abcde12345  An ESP generated click tracking URL. The URL doesn\u2019t signify anything, but when clicked, records the click and redirects to a given destination.", 
            "title": "Three stages of a link"
        }, 
        {
            "location": "/pages/emails/support/#redirect-behavior-and-tracking", 
            "text": "When your customer clicks the click tracking link in an email, the browser will generally open. Once in the browser, the click tracking redirect will happen, followed by an instant redirect to the Branch link. At this point, Branch will either stay in the browser, and load the original URL (if the app is not installed, or the customer is on a desktop device), or Branch will open the app and deep link to content. Branch uses the information from the original URL to deep link to the correct in-app content.", 
            "title": "Redirect behavior and tracking"
        }, 
        {
            "location": "/pages/emails/support/#universal-links-and-click-tracking", 
            "text": "Apple introduced Universal Links starting with iOS 9. Apple introduced Universal Links starting with iOS 9. You must configure your app and your links in a specific way to enable Universal Link functionality. Branch guides developers through this process so that Branch links function as Universal Links.  For Universal Links to work, Apple requires that a file called an \u201cApple-App-Site-Association\u201d (AASA) file must be hosted on the domain of the link in question. When the link is clicked, Apple will check for the presence of this file to decide whether or not to open the app. All Branch links are Universal Links, because we will host this file securely on your Branch link domain.  When you click a Branch link directly from an email inside the Mail app on iOS 9+, it functions as a Universal Link - it redirects directly into the desired app. However, if you put a Branch Universal Link behind a click tracking URL, it won\u2019t deep link into the app. This is because generally, a click tracking URL is not a Universal Link. If you\u2019re not hosting that AASA file on the click tracking URL\u2019s domain, you aren\u2019t going to get Universal Link behavior for that link.  Solution  To solve this, Branch will host the AASA file on your click tracking domain. We\u2019ll help you get set up with this.", 
            "title": "Universal links and click tracking"
        }, 
        {
            "location": "/pages/emails/support/#deep-linking-setup-messages", 
            "text": "In the  Set up Deep Linking  step of the email onboarding flow, you will see a result indicating the mapping between your web content and your app content.", 
            "title": "Deep linking setup messages"
        }, 
        {
            "location": "/pages/emails/support/#we-think-you-use-your-web-url-for-deep-linking", 
            "text": "If your webpage, for instance at the URL  https://shop.com/shoes/brown-loafers , has a tag like this:  meta name=\"al:ios:url\" content=\"shop://https://shop.com/shoes/brown-loafers\" /  or this:  meta name=\"al:android:url\" content=\"shop://shoes/brown-loafers\" /  Your deep linking setup for email will use all or part of your  web URL  as a deep link value. It can use either the full URL including the protocol ( https://shop.com/shoes/brown-loafers ), the full URL without the protocol ( shop.com/shoes/brown-loafers ), or the path of the URL ( shoes/brown-loafers ).", 
            "title": "We think you use your web URL for deep linking"
        }, 
        {
            "location": "/pages/emails/support/#we-think-you-host-your-deep-link-data-on-your-website", 
            "text": "If instead, your webpage has a tag like this:  meta name=\"branch:deeplink:product_id\" content=\"123456\" /  or this:  meta name=\"al:ios:url\" content=\"shop://id/123456\" /  Your deep linking setup for email will use the  hosted deep link data  method. This means that no mapping can be made to the URL, and  meta tags that can be used for deep linking  will be retrieved from your webpage on an ongoing basis.", 
            "title": "We think you host your deep link data on your website"
        }, 
        {
            "location": "/pages/emails/support/#we-couldnt-determine-your-deep-linking-setup-from-your-web-url", 
            "text": "If there are no meta tags for deep linking on your webpage, or you indicate that the mapping is incorrect, you can try a Branch link instead.   Here, you will want to enter a Branch link that opens to a page within your app (not the home screen).  When you click  Submit , the link's values for  $canonical_url ,  $desktop_url , and  $fallback_url  will be compared against other values in the link. If there is a mapping between values for the full URL or the path of the URL, your deep linking setup for email will use those methods.", 
            "title": "We couldn't determine your deep linking setup from your web URL"
        }, 
        {
            "location": "/pages/emails/support/#test-your-link", 
            "text": "When you submit a web URL or Branch link, you will be prompted with a test link. Click this link on iOS and Android devices, and verify that it will open your app to the right place.   Once you click  Yes , your deep linking will be set up for email. When a user clicks a link in your emails, we will embed the full web URL, path of the web URL, or retrieved deep link data from the webpage into a Branch version of that link and pass it to your app, so that it will open to the right place.", 
            "title": "Test your link"
        }, 
        {
            "location": "/pages/emails/self-serve/", 
            "text": "Overview\n\n\nYou can use Branch links in email campaigns to launch your app or gracefully fall back to the App or Play Store download page. For more advanced purposes, you can even deep link users directly to content after your app opens.\n\n\n\n\nGuide\n\n\nPrerequisites\n\n\n\n\nTo track installs from Branch links in email campaigns, you need to integrate the Branch SDK into your app.\n\n\nIf you want to deep link directly content, you should configure deep link routing.\n\n\n\n\nDisable third-party click tracking\n\n\nMany third-party providers add redirects to your URLs. This facilitates click tracking and analytics on those platforms, but will break Universal Link and App Link functionality. To make Universal Links and App Links work, \nyou will need to disable click tracking\n in the third-party system. Here are instructions for some common platforms:\n\n\n\n\nMailChimp\n\n\nMandrill\n\n\n\n\n\n\nWant to deep link your emails without sacrificing click tracking?\n\n\nTo keep click tracking \nand\n deep link on all devices, try one of our \nDeep Linked Email integrations\n. If you do not see your ESP there, let us know \nhere\n:\n\n\n\n\nAnd let your ESP know, too!\n\n\n\n\nCreate Quick Links on the Branch dashboard\n\n\n\n\nOpen the \nQuick Link creator\n on the Branch dashboard.\n\n\nPick a \nLink Name\n for later reference. For example: \"Launch Email\".\n\n\nPaste in the web URL from your email template.\n\n\nAdd analytics tags. For \"Where will you post this link?\" it's recommended to use \nEmail\n as the channel.\n\n\nIn \nConfigure Options\n \n \nRedirects\n, select \nWeb URL\n for each platform.\n\n\nClick \nCreate Link Now\n, and then copy the created link into your email template.\n\n\n\n\nRepeat this for each URL in your email template that you would like to deep link.\n\n\n\n\nOptional: Deep Link Routing (Advanced)\n\n\nYou can use the \nConfigure Options\n \n \nDeep Linking\n section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\nConclusion\n\n\nIt's that simple! The \nBranch dashboard\n will track clicks for this link based on the channel, campaign and any other tags you created. Users who have the app will be linked straight to the app, and users who don't will be taken to the App/Play Store to download it, depending on your \nsettings\n.\n\n\n\n\nCreating links dynamically\n\n\nIf you need more flexibility, you might also be interested in building links by \nappending query parameters\n.", 
            "title": "Self Serve"
        }, 
        {
            "location": "/pages/emails/self-serve/#overview", 
            "text": "You can use Branch links in email campaigns to launch your app or gracefully fall back to the App or Play Store download page. For more advanced purposes, you can even deep link users directly to content after your app opens.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/emails/self-serve/#guide", 
            "text": "", 
            "title": "Guide"
        }, 
        {
            "location": "/pages/emails/self-serve/#prerequisites", 
            "text": "To track installs from Branch links in email campaigns, you need to integrate the Branch SDK into your app.  If you want to deep link directly content, you should configure deep link routing.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/emails/self-serve/#disable-third-party-click-tracking", 
            "text": "Many third-party providers add redirects to your URLs. This facilitates click tracking and analytics on those platforms, but will break Universal Link and App Link functionality. To make Universal Links and App Links work,  you will need to disable click tracking  in the third-party system. Here are instructions for some common platforms:   MailChimp  Mandrill    Want to deep link your emails without sacrificing click tracking?  To keep click tracking  and  deep link on all devices, try one of our  Deep Linked Email integrations . If you do not see your ESP there, let us know  here :   And let your ESP know, too!", 
            "title": "Disable third-party click tracking"
        }, 
        {
            "location": "/pages/emails/self-serve/#create-quick-links-on-the-branch-dashboard", 
            "text": "Open the  Quick Link creator  on the Branch dashboard.  Pick a  Link Name  for later reference. For example: \"Launch Email\".  Paste in the web URL from your email template.  Add analytics tags. For \"Where will you post this link?\" it's recommended to use  Email  as the channel.  In  Configure Options     Redirects , select  Web URL  for each platform.  Click  Create Link Now , and then copy the created link into your email template.   Repeat this for each URL in your email template that you would like to deep link.   Optional: Deep Link Routing (Advanced)  You can use the  Configure Options     Deep Linking  section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.", 
            "title": "Create Quick Links on the Branch dashboard"
        }, 
        {
            "location": "/pages/emails/self-serve/#conclusion", 
            "text": "It's that simple! The  Branch dashboard  will track clicks for this link based on the channel, campaign and any other tags you created. Users who have the app will be linked straight to the app, and users who don't will be taken to the App/Play Store to download it, depending on your  settings .   Creating links dynamically  If you need more flexibility, you might also be interested in building links by  appending query parameters .", 
            "title": "Conclusion"
        }, 
        {
            "location": "/pages/advance/push-notifications/", 
            "text": "Overview\n\n\n\n\nPush notifications are a great way to engage your existing app users. The Branch platform does not actually send push notifications, but you can add Branch links to your push notifications to get the benefit of deep linking and attribution.\n\n\n\n\nConfigure\n\n\n\n\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already \nintegrated the Branch SDK\n into your app for tracking.\n\n\n\n\n\n\n\n\nReceive push notification links\n\n\n\n\nPlease ensure that your Branch SDK is correctly configured to receive the push notification and parse out the link. You can find the specific methods needed on \nthis page of the integration guide\n. Only native iOS and Android supported.\n\n\n\n\n\n\n\n\nCreate a Branch powered push message\n\n\n\n\nNow that your app is setup, you just need to \ncreate a Branch deep link\n and place it into your push message. Simply add the link as additional key/value to your payload. Use the key \nbranch\n and place the link as the value.", 
            "title": "Links in push notifications"
        }, 
        {
            "location": "/pages/advance/push-notifications/#overview", 
            "text": "Push notifications are a great way to engage your existing app users. The Branch platform does not actually send push notifications, but you can add Branch links to your push notifications to get the benefit of deep linking and attribution.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/advance/push-notifications/#configure", 
            "text": "", 
            "title": "Configure"
        }, 
        {
            "location": "/pages/advance/push-notifications/#prerequisites", 
            "text": "This guide requires you to have already  integrated the Branch SDK  into your app for tracking.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/advance/push-notifications/#receive-push-notification-links", 
            "text": "Please ensure that your Branch SDK is correctly configured to receive the push notification and parse out the link. You can find the specific methods needed on  this page of the integration guide . Only native iOS and Android supported.", 
            "title": "Receive push notification links"
        }, 
        {
            "location": "/pages/advance/push-notifications/#create-a-branch-powered-push-message", 
            "text": "Now that your app is setup, you just need to  create a Branch deep link  and place it into your push message. Simply add the link as additional key/value to your payload. Use the key  branch  and place the link as the value.", 
            "title": "Create a Branch powered push message"
        }, 
        {
            "location": "/pages/organic-search/firebase/", 
            "text": "Overview\n\n\nGoogle's App Indexing is a project that attempts to expose app results in Google searches performed on mobile devices. This project is formally called Firebase App Indexing.\n\n\nAt a high level, App Indexing has two themes to consider.\n\n\n\n\nResults, ranking and relevancy are based upon web scraping. App Indexing does not improve relevancy in results.\n\n\nApp Indexing makes it so that web results \nalso\n open up your app.\n\n\n\n\nWhen enabling App Indexing, you will likely want to make these changes to your website, as well:\n\n\n\n\nMake your existing website support Apple's Universal Links and Android's App Links. After this, all of your links will correctly open the app and you're done.\n\n\nAdd the undocumented header \nlink rel=\"alternate\" ..\n tags to your website for when Google crawls the page. Branch can assist with this using \nautoAppIndex()\n, documented below.\n\n\n\n\nIf Google knows your website opens the app, when it shows up in a search result, and the user has the app installed, the app will open instead of the website, therefore achieveing App Indexing results in organic search portals.\n\n\nBranch's App Indexing integration is designed for businesses that don't have a website, and want Branch to host their site for them. If you have a website, Branch can dynamically inject App Indexing tags through the WebSDK function \nautoAppIndex()\n described \nhere\n.\n\n\nNote that in order for you to get traffic from this feature, your Branch link will need to appear in search results. We've just now supercharged our app indexing feature with AMP tech to leverage Google's new prioritization of these pages.\n\n\nSetup\n\n\nDefine Your Content\n\n\nThe first step to listing your app content in Google is to tell Branch what the content is and how it should appear in search. Assuming you followed our get started guide, you have already indexed your content by creating \nBranch Universal Objects\n. You can create these objects using the native SDKs, where you simply need to set the OG tag parameters. Below are few examples, but you can \nsee every platform here\n.\n\n\n\n\n\n\niOS - Objective C\n\n\nBranchUniversalObject\n \n*\nbranchUniversalObject\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nitem/12345\n];\n\n\n// Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \n@\nMy Content Title\n;\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \n@\nMy Content Description\n;\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \n@\nhttps://example.com/mycontent-12345.png\n;\n\n\n\n// Add any additional custom OG tags here\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\n$og_video\n \nvalue\n:\n@\nhttp://mysite/video.mpg\n];\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/12345\n)\n\n\n// Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \nMy Content Title\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \nMy Content Description\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \nhttps://example.com/mycontent-12345.png\n\n\n\n// Add any additional custom OG tags here\n\n\nbranchUniversalObject\n.\naddMetadataKey\n(\n$og_video\n,\n \nvalue\n:\n \nhttp://mysite/video.mpg\n)\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n \nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n                \n.\nsetCanonicalIdentifier\n(\nitem/12345\n)\n\n\n// Facebook OG tags -- This will overwrite any defaults you have set on the Branch Dashboard\n\n                \n.\nsetTitle\n(\nMy Content Title\n)\n\n                \n.\nsetContentDescription\n(\nMy Content Description\n)\n\n                \n.\nsetContentImageUrl\n(\nhttps://example.com/mycontent-12345.png\n)\n\n\n\n// Add any additional custom OG tags here\n\n                \n.\nsetContentMetadata\n(\nnew\n \nContentMetadata\n().\naddCustomMetadata\n(\n$og_video\n,\n \nhttp://mysite/video.mpg\n));\n\n\n\n\n\n\n\n\n\nEnable App Indexing\n\n\nEnable automatic sitemap generation on the \nOrganic Search\n page of the Branch Dashboard. Check the \nAutomatic sitemap generation\n checkbox.\n\n\n\n\nOnce you enable this, your app will be included in our nightly job to automatically generate sitemaps. These sitemaps can be scraped by Google, and all of the included links can then be indexed.\n\n\nAfter you've enabled App Indexing, this page will showcase the following data:\n\n\n\n\nThe date the sitemap files were last generated (and included at least one of your links)\n\n\nThe total number of links to unique pieces content that Branch has included in sitemaps\n\n\nThe date Google last scraped your links\n\n\nThe total number of times that Google has scraped links to your content\n\n\n\n\nBoth the sitemap itself and statistics about Google scraping your links are updated via nightly map-reduce jobs.\n\n\n\n\nAdvanced\n\n\nConfigure existing website for App Indexing\n\n\nIf you already have your own website, we recommend that you configure your own site for App Indexing rather than use Branch's hosted App Indexing. You want your main website, with your domain and SEO juice to appear in Google rather than try to push your \napp.link\n domain into search results. Therefore, we recommend you go through a few steps to configure your site for App Indexing.\n\n\nApp Indexing, despite the confusing amount of literature out there, simply opens up your app when installed and falls back to your website when not. You actually don't need to use any of Google's tools (Firebase App Indexing) to accomplish this. Merely configuring your domain for Universal Links on iOS and App Links on Android will do the trick. Here are more details:\n\n\nRecommended: Add Universal Link and App Link support to your domain\n\n\nThis is by far the easiest way to take advantage of Google App Indexing, and the recommended way per conversations that we've had with their team. All you need to do is configure Universal Links and Android App Links on your domain and your corresponding apps.\n\n\nWe've put together some handy guides on our blogs:\n- \nEnable Universal Links on your domain\n\n- \nEnable Android App Links on your domain\n\n\nFeel free to drop us a line if you need help with this stuff.\n\n\nAlternative: Have the WebSDK inject App Indexing tags into your Webpage\n\n\nIf you don\u2019t want to implement Universal or App Links then you can allow the WebSDK to inject App Indexing meta tags between the head section of your webpage. These tags allow Google's web crawling bots to index your app content by launching your app through URI schemes.\n\n\nThis requires:\n\n\n\n\n\n\nBranch to be integrated for URI based deep linking. Please ensure that steps 1, 2, 3 and 4 (\niOS\n only) of the following guides are completed:\n\n\n\n\nAndroid SDK Integration Guide\n\n\niOS SDK Integration Guide\n\n\n\n\n\n\n\n\nA call to \nautoAppIndex()\n (a WebSDK function) to be made with the appropriate parameters (see below).\n\n\n\n\n\n\nEnsure that you've placed the snippet from \nhere\n somewhere between the \nhead\n/head\n tags of your webpage. Then position \nbranch.autoAppIndex({..})\n below \nbranch.init()\n and with the optional parameters below:\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\n\"androidPackageName\"\n\n\nAndroid App's package name\n\n\n\n\n\n\n\"androidURL\"\n\n\nA custom scheme for your Android App such as: \nexample/home/cupertino/12345\n where \nexample\n is the App's URI scheme and \nhome/cupertino/12345\n routes to unique content in the App\n\n\n\n\n\n\n\"iosAppId\"\n\n\niTunes App Store ID for your iOS App\n\n\n\n\n\n\n\"iosURL\"\n\n\nA custom scheme for your iOS App such as: \nexample/home/cupertino/12345\n\n\n\n\n\n\n\"data\"\n\n\nAny additional deep link data that you would like to pass to your App\n\n\n\n\n\n\n\n\nbranch\n.\nautoAppIndex\n({\n\n    \niosAppId\n:\n123456789\n,\n\n    \niosURL\n:\nexample/home/cupertino/12345\n,\n\n    \nandroidPackageName\n:\ncom.somecompany.app\n,\n\n    \nandroidURL\n:\nexample/home/cupertino/12345\n,\n\n    \ndata\n:\n{\nwalkScore\n:\n65\n,\n \ntransitScore\n:\n50\n}\n\n\n},\n \nfunction\n(\nerr\n)\n \n{\n \nconsole\n.\nlog\n(\nerr\n);\n \n});\n\n\n\n\n\nAfter the WebSDK has initialized, the function will inject Firebase App Indexing tags between the head section of your webpage with the following format:\n\n\nhtml\n\n\nhead\n\n  ...\n  \nlink\n \nrel\n=\nalternate\n \nhref\n=\nandroid-app://{androidPackageName}/{androidURL}?{branch_tracking_params_and_additional_deep_link_data}\n/\n\n  \nlink\n \nrel\n=\nalternate\n \nhref\n=\nios-app://{iosAppId}/{iosURL}?{branch_tracking_params_and_additional_deep_link_data}\n/\n\n  ...\n\n/\nhead\n\n\nbody\n \u2026 \n/\nbody\n\n\n\n\n\nNote\n: If optional parameters from above are not specified, Branch will try to build Firebase App Indexing tags using your page's \nApp Links\n tags.\n\n\nAlternatively, if optional parameters are specified but Firebase App Indexing tags already exist then this function will append Branch tracking params to the end of those tags and ignore what is passed into \n.autoAppIndex()\n.\n\n\nFor debugging purposes, you can check that the method is correctly inserting these tags by right clicking anywhere on your webpage in Chrome then clicking on inspect. After that, toggle the head section of your page's HTML and you should see the dynamically generated Firebase App Indexing tags.\n\n\nAnalytics related to Google's attempts to index your App's content via these tags can be found from Source Analytics in Dashboard where \nchannel\n is \nFirebase App Indexing\n and \nfeature\n is \nAuto App Indexing\n.\n\n\n\n\nTesting with webmaster tools\n\n\nWe have read on Google's official blog that Googlebot renders javascript before it indexes webpages however, there are times where it may choose not to. The reasons why are unclear to us. Therefore, dynamically generated App Indexing meta tags created as part of this function may or may not appear in your tests with Webmaster Tools when you try to fetch and render as Googlebot.\n\n\n\n\nAttribute app traffic to organic search\n\n\nCurious as to how well your content is performing -- how many clicks and installs it is driving?\n\n\nWe automatically tag clicks on these links as coming from Google App Indexing. In the Click Flow section of our Dashboard's \nSummary\n page, you can filter for these clicks. Just select either \nchannel: google_search\n or \nfeature: google_app_index\n.\n\n\nHiding content from the index\n\n\nNot all content is public, and not all content should be publicly indexed. If you want to enable Branch's automatic sitemap generation but exclude certain pieces of content, you can mark that content as private. You should set the content indexing mode for the individual Branch Universal Object. This property is called \ncontentIndexMode\n.\n\n\n\n\n\n\niOS - Objective C\n\n\nBranchUniversalObject\n \n*\nbranchUniversalObject\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nitem/12345\n];\n\n\nbranchUniversalObject\n.\ncontentIndexMode\n \n=\n \nContentIndexModePrivate\n;\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/12345\n)\n\n\nbranchUniversalObject\n.\ncontentIndexMode\n \n=\n \nContentIndexModePrivate\n\n\n\n\n\n\n\n\n\nAndroid - Java\n\n\n \nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n                \n.\nsetCanonicalIdentifier\n(\nitem/12345\n)\n\n                \n.\nsetContentIndexingMode\n(\nBranchUniversalObject\n.\nCONTENT_INDEX_MODE\n.\nPRIVATE\n);\n\n\n\n\n\n\n\n\n\nYou can see other platform coding examples of this on the \nrespective sections of the integration docs\n.", 
            "title": "Firebase App Indexing"
        }, 
        {
            "location": "/pages/organic-search/firebase/#overview", 
            "text": "Google's App Indexing is a project that attempts to expose app results in Google searches performed on mobile devices. This project is formally called Firebase App Indexing.  At a high level, App Indexing has two themes to consider.   Results, ranking and relevancy are based upon web scraping. App Indexing does not improve relevancy in results.  App Indexing makes it so that web results  also  open up your app.   When enabling App Indexing, you will likely want to make these changes to your website, as well:   Make your existing website support Apple's Universal Links and Android's App Links. After this, all of your links will correctly open the app and you're done.  Add the undocumented header  link rel=\"alternate\" ..  tags to your website for when Google crawls the page. Branch can assist with this using  autoAppIndex() , documented below.   If Google knows your website opens the app, when it shows up in a search result, and the user has the app installed, the app will open instead of the website, therefore achieveing App Indexing results in organic search portals.  Branch's App Indexing integration is designed for businesses that don't have a website, and want Branch to host their site for them. If you have a website, Branch can dynamically inject App Indexing tags through the WebSDK function  autoAppIndex()  described  here .  Note that in order for you to get traffic from this feature, your Branch link will need to appear in search results. We've just now supercharged our app indexing feature with AMP tech to leverage Google's new prioritization of these pages.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/organic-search/firebase/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/organic-search/firebase/#define-your-content", 
            "text": "The first step to listing your app content in Google is to tell Branch what the content is and how it should appear in search. Assuming you followed our get started guide, you have already indexed your content by creating  Branch Universal Objects . You can create these objects using the native SDKs, where you simply need to set the OG tag parameters. Below are few examples, but you can  see every platform here .    iOS - Objective C  BranchUniversalObject   * branchUniversalObject   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ item/12345 ];  // Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard  branchUniversalObject . title   =   @ My Content Title ;  branchUniversalObject . contentDescription   =   @ My Content Description ;  branchUniversalObject . imageUrl   =   @ https://example.com/mycontent-12345.png ;  // Add any additional custom OG tags here  [ branchUniversalObject   addMetadataKey : @ $og_video   value : @ http://mysite/video.mpg ];     iOS - Swift  let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   item/12345 )  // Facebook OG tags -- this will overwrite any defaults you set up on the Branch Dashboard  branchUniversalObject . title   =   My Content Title  branchUniversalObject . contentDescription   =   My Content Description  branchUniversalObject . imageUrl   =   https://example.com/mycontent-12345.png  // Add any additional custom OG tags here  branchUniversalObject . addMetadataKey ( $og_video ,   value :   http://mysite/video.mpg )     Android    BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n                 . setCanonicalIdentifier ( item/12345 )  // Facebook OG tags -- This will overwrite any defaults you have set on the Branch Dashboard \n                 . setTitle ( My Content Title ) \n                 . setContentDescription ( My Content Description ) \n                 . setContentImageUrl ( https://example.com/mycontent-12345.png )  // Add any additional custom OG tags here \n                 . setContentMetadata ( new   ContentMetadata (). addCustomMetadata ( $og_video ,   http://mysite/video.mpg ));", 
            "title": "Define Your Content"
        }, 
        {
            "location": "/pages/organic-search/firebase/#enable-app-indexing", 
            "text": "Enable automatic sitemap generation on the  Organic Search  page of the Branch Dashboard. Check the  Automatic sitemap generation  checkbox.   Once you enable this, your app will be included in our nightly job to automatically generate sitemaps. These sitemaps can be scraped by Google, and all of the included links can then be indexed.  After you've enabled App Indexing, this page will showcase the following data:   The date the sitemap files were last generated (and included at least one of your links)  The total number of links to unique pieces content that Branch has included in sitemaps  The date Google last scraped your links  The total number of times that Google has scraped links to your content   Both the sitemap itself and statistics about Google scraping your links are updated via nightly map-reduce jobs.", 
            "title": "Enable App Indexing"
        }, 
        {
            "location": "/pages/organic-search/firebase/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/organic-search/firebase/#configure-existing-website-for-app-indexing", 
            "text": "If you already have your own website, we recommend that you configure your own site for App Indexing rather than use Branch's hosted App Indexing. You want your main website, with your domain and SEO juice to appear in Google rather than try to push your  app.link  domain into search results. Therefore, we recommend you go through a few steps to configure your site for App Indexing.  App Indexing, despite the confusing amount of literature out there, simply opens up your app when installed and falls back to your website when not. You actually don't need to use any of Google's tools (Firebase App Indexing) to accomplish this. Merely configuring your domain for Universal Links on iOS and App Links on Android will do the trick. Here are more details:", 
            "title": "Configure existing website for App Indexing"
        }, 
        {
            "location": "/pages/organic-search/firebase/#recommended-add-universal-link-and-app-link-support-to-your-domain", 
            "text": "This is by far the easiest way to take advantage of Google App Indexing, and the recommended way per conversations that we've had with their team. All you need to do is configure Universal Links and Android App Links on your domain and your corresponding apps.  We've put together some handy guides on our blogs:\n-  Enable Universal Links on your domain \n-  Enable Android App Links on your domain  Feel free to drop us a line if you need help with this stuff.", 
            "title": "Recommended: Add Universal Link and App Link support to your domain"
        }, 
        {
            "location": "/pages/organic-search/firebase/#alternative-have-the-websdk-inject-app-indexing-tags-into-your-webpage", 
            "text": "If you don\u2019t want to implement Universal or App Links then you can allow the WebSDK to inject App Indexing meta tags between the head section of your webpage. These tags allow Google's web crawling bots to index your app content by launching your app through URI schemes.  This requires:    Branch to be integrated for URI based deep linking. Please ensure that steps 1, 2, 3 and 4 ( iOS  only) of the following guides are completed:   Android SDK Integration Guide  iOS SDK Integration Guide     A call to  autoAppIndex()  (a WebSDK function) to be made with the appropriate parameters (see below).    Ensure that you've placed the snippet from  here  somewhere between the  head /head  tags of your webpage. Then position  branch.autoAppIndex({..})  below  branch.init()  and with the optional parameters below:     Key  Value      \"androidPackageName\"  Android App's package name    \"androidURL\"  A custom scheme for your Android App such as:  example/home/cupertino/12345  where  example  is the App's URI scheme and  home/cupertino/12345  routes to unique content in the App    \"iosAppId\"  iTunes App Store ID for your iOS App    \"iosURL\"  A custom scheme for your iOS App such as:  example/home/cupertino/12345    \"data\"  Any additional deep link data that you would like to pass to your App     branch . autoAppIndex ({ \n     iosAppId : 123456789 , \n     iosURL : example/home/cupertino/12345 , \n     androidPackageName : com.somecompany.app , \n     androidURL : example/home/cupertino/12345 , \n     data : { walkScore : 65 ,   transitScore : 50 }  },   function ( err )   {   console . log ( err );   });   After the WebSDK has initialized, the function will inject Firebase App Indexing tags between the head section of your webpage with the following format:  html  head \n  ...\n   link   rel = alternate   href = android-app://{androidPackageName}/{androidURL}?{branch_tracking_params_and_additional_deep_link_data} / \n   link   rel = alternate   href = ios-app://{iosAppId}/{iosURL}?{branch_tracking_params_and_additional_deep_link_data} / \n  ... / head  body  \u2026  / body   Note : If optional parameters from above are not specified, Branch will try to build Firebase App Indexing tags using your page's  App Links  tags.  Alternatively, if optional parameters are specified but Firebase App Indexing tags already exist then this function will append Branch tracking params to the end of those tags and ignore what is passed into  .autoAppIndex() .  For debugging purposes, you can check that the method is correctly inserting these tags by right clicking anywhere on your webpage in Chrome then clicking on inspect. After that, toggle the head section of your page's HTML and you should see the dynamically generated Firebase App Indexing tags.  Analytics related to Google's attempts to index your App's content via these tags can be found from Source Analytics in Dashboard where  channel  is  Firebase App Indexing  and  feature  is  Auto App Indexing .   Testing with webmaster tools  We have read on Google's official blog that Googlebot renders javascript before it indexes webpages however, there are times where it may choose not to. The reasons why are unclear to us. Therefore, dynamically generated App Indexing meta tags created as part of this function may or may not appear in your tests with Webmaster Tools when you try to fetch and render as Googlebot.", 
            "title": "Alternative: Have the WebSDK inject App Indexing tags into your Webpage"
        }, 
        {
            "location": "/pages/organic-search/firebase/#attribute-app-traffic-to-organic-search", 
            "text": "Curious as to how well your content is performing -- how many clicks and installs it is driving?  We automatically tag clicks on these links as coming from Google App Indexing. In the Click Flow section of our Dashboard's  Summary  page, you can filter for these clicks. Just select either  channel: google_search  or  feature: google_app_index .", 
            "title": "Attribute app traffic to organic search"
        }, 
        {
            "location": "/pages/organic-search/firebase/#hiding-content-from-the-index", 
            "text": "Not all content is public, and not all content should be publicly indexed. If you want to enable Branch's automatic sitemap generation but exclude certain pieces of content, you can mark that content as private. You should set the content indexing mode for the individual Branch Universal Object. This property is called  contentIndexMode .    iOS - Objective C  BranchUniversalObject   * branchUniversalObject   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ item/12345 ];  branchUniversalObject . contentIndexMode   =   ContentIndexModePrivate ;     iOS - Swift  let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   item/12345 )  branchUniversalObject . contentIndexMode   =   ContentIndexModePrivate     Android - Java    BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n                 . setCanonicalIdentifier ( item/12345 ) \n                 . setContentIndexingMode ( BranchUniversalObject . CONTENT_INDEX_MODE . PRIVATE );     You can see other platform coding examples of this on the  respective sections of the integration docs .", 
            "title": "Hiding content from the index"
        }, 
        {
            "location": "/pages/organic-search/spotlight/", 
            "text": "Overview\n\n\nListing your app content on Apple's new Spotlight search with Branch is easy. Note that this guide will list on both \ncloud search\n and \nlocal spotlight search\n.\n\n\n\n\nWarning\n\n\nSome older devices cannot index content. iPad minis, for example, cannot use CoreSpotlight. The SDK includes a check for these devices and will return an error message if you attempt to index content on them.\n\n\n\n\nSetup\n\n\nPrerequisites\n\n\nThis guide requires you to have already \nintegrated the Branch SDK\n into your app. For Spotlight search results to function as intended, you should also \nconfigure deep link routing\n.\n\n\nList Content\n\n\nContent can be added to Spotlight search by using the \nBranchUniversalObject\n. We'd recommend that you put this on every page that renders a piece of content for your users. This way, a user could rediscover a previous thing that they had viewed.\n\n\nFirst, define the content that you'd like to be listed by customizing the \nBranchUniversalObject\n. We'd recommend that you do this in \nviewDidLoad\n\n\n\n\n\n\nSwift 3\n\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/12345\n)\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \nMy Content Title\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \nMy Content Description\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \nhttps://example.com/mycontent-12345.png\n\n\nbranchUniversalObject\n.\naddMetadataKey\n(\nproperty1\n,\n \nvalue\n:\n \nblue\n)\n\n\nbranchUniversalObject\n.\naddMetadataKey\n(\nproperty2\n,\n \nvalue\n:\n \nred\n)\n\n\n\n// important to set this flag to true\n\n\nbranchUniversalObject\n.\nautomaticallyListOnSpotlight\n \n=\n \ntrue\n\n\n\n\n\n\n\n\n\nObjective C\n\n\nBranchUniversalObject\n \n*\nbranchUniversalObject\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nitem/12345\n];\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \n@\nMy Content Title\n;\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \n@\nMy Content Description\n;\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \n@\nhttps://example.com/mycontent-12345.png\n;\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\nproperty1\n \nvalue\n:\n@\nblue\n];\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\nproperty2\n \nvalue\n:\n@\nred\n];\n\n\n\n// important to set this flag to true\n\n\nbranchUniversalObject\n.\nautomaticallyListOnSpotlight\n \n=\n \nYES\n;\n\n\n\n\n\n\n\n\n\nThen call the \nuserCompletedAction\n method with the \nView\n event on your \nBranchUniversalObject\n. You will want to do this every single time a user goes to view a page in your app, so we recommend putting this in \nviewDidAppear\n, which means you must initialize the Branch Universal Object with all appropriate metadata before \nviewDidAppear\n.\n\n\n\n\n\n\nSwift 3\n\n\nbranchUniversalObject\n.\nuserCompletedAction\n(\nBNCRegisterViewEvent\n)\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n[\nbranchUniversalObject\n \nuserCompletedAction\n:\nBNCRegisterViewEvent\n];\n\n\n\n\n\n\n\n\n\nThis will create the appropriate NSUserActivity and tell Apple that a view occurred, adding it to the local Spotlight index if not already present in addition to increasing it's ranking in the global index. To read more about this, check out \nthis blog post\n.\n\n\nHandle incoming traffic from Spotlight\n\n\nOpen your \nAppDelegate.m\n file and add the following method. If you completed the basic SDK integration guide, this is likely already present.\n\n\n\n\n\n\nSwift 3\n\n\nfunc\n \napplication\n(\n_\n \napplication\n:\n \nUIApplication\n,\n \ncontinue\n \nuserActivity\n:\n \nNSUserActivity\n,\n \nrestorationHandler\n:\n \n@\nescaping\n \n([\nAny\n]?)\n \n-\n \nVoid\n)\n \n-\n \nBool\n \n{\n\n    \n// pass the url to the handle deep link call\n\n    \nreturn\n \nBranch\n.\ngetInstance\n().\ncontinueUserActivity\n(\nuserActivity\n)\n\n\n    \nreturn\n \ntrue\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective C\n\n\n-\n \n(\nBOOL\n)\napplication:\n(\nUIApplication\n \n*\n)\napplication\n \ncontinueUserActivity:\n(\nNSUserActivity\n \n*\n)\nuserActivity\n \nrestorationHandler:\n(\nvoid\n \n(\n^\n)(\nNSArray\n \n*\nrestorableObjects\n))\nrestorationHandler\n \n{\n\n    \n[[\nBranch\n \ngetInstance\n]\n \ncontinueUserActivity\n:\nuserActivity\n];\n\n\n    \nreturn\n \nYES\n;\n\n\n}\n\n\n\n\n\n\n\n\n\nAdvanced\n\n\nUse deepviews for user acquisition\n\n\nIf the user doesn't have the app installed and finds your content through search, Spotlight will open up the browser. In this situation, you can \nshow a Deepview\n, which is an automatically-generated, mobile web render of the app content.\n\n\nCustomize content\n\n\n\n\n\n\nYou can use our identifier when indexing to perform advanced customizations of the content being listed.\n\n\n\n\n\n\nSwift 3\n\n    \n \nbranch\n.\ngetSpotlightUrl\n(\nwithParams\n:\n \n[\n$og_title\n:\n \nMy App\n,\n\n                                    \n$og_description\n:\n \nMy app is disrupting apps\n,\n\n                                    \n$og_thumb\n:\n \nhttps://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png\n,\n\n                                    \nobject_id\n:\n \n1234\n],\n \n                         \ncallback\n:\n \n{\n \n(\nparams\n,\n \nerror\n)\n \nin\n\n\n        \nif\n \nlet\n \nparams\n \n=\n \nparams\n \n{\n\n                \n// params will contain @\nurl\n and @\nspotlight_identifier\n\n                \n// the example below shows where to use them\n\n\n                \n// Index via the NSUserActivity strategy\n\n                \n// you must set the new NSUserActivity to the property of a UIViewController\n\n                \nself\n.\nuserActivity\n \n=\n \nNSUserActivity\n(\nactivityType\n:\n \nparams\n[\nspotlight_identifer\n]\n \nas\n!\n \nString\n)\n\n                \nself\n.\nuserActivity\n.\nwebpageURL\n \n=\n \nURL\n(\nstring\n:\n \nparams\n[\nurl\n]\n \nas\n!\n \nString\n)\n\n                \nself\n.\nuserActivity\n.\nbecomeCurrent\n()\n\n        \n}\n    \n\n})\n\n\n\n\n\n\n\n\nObjective-C\n\n    \n[\nbranch\n \ngetSpotlightUrlWithParams\n:\n@{\n@\n$og_title\n:\n \n@\nMy App\n,\n\n                                        \n@\n$og_description\n:\n \n@\nMy app is disrupting apps\n,\n\n                                        \n@\n$og_thumb\n:\n \n@\nhttps://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png\n,\n\n                                        \n@\nobject_id\n:\n \n@\n1234\n}\n\n                             \ncallback\n:\n^\n(\nNSDictionary\n \n*\nparams\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n        \nif\n \n(\n!\nerror\n \n \nparams\n)\n \n{\n\n            \n// params will contain @\nurl\n and @\nspotlight_identifier\n\n            \n// the example below shows where to use them\n\n\n            \n// Index via the NSUserActivity strategy\n\n            \n// you must set the new NSUserActivity to the property of a UIViewController\n\n            \nself\n.\nuserActivity\n \n=\n \n[[\nNSUserActivity\n \nalloc\n]\n \ninitWithActivityType\n:\nparams\n[\n@\nspotlight_identifer\n]];\n\n            \nself\n.\nuserActivity\n.\nwebpageURL\n \n=\n \n[\nNSURL\n \nURLWithString\n:\nparams\n[\n@\nurl\n]];\n\n            \n[\nself\n.\nuserActivity\n \nbecomeCurrent\n];\n\n        \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\nIndex content at scale\n\n\nIf the goal is to simply index the content of the app without creating a \nBranchUniversalObject\n or if you want index content at scale then we recommend using the following method:\n\n\n\n\n\n\nSwift 3\n\n\nlet\n \nset\n:\nBranchCSSearchableItemAttributeSet\n \n=\n \nBranchCSSearchableItemAttributeSet\n()\n\n\nset\n.\ntitle\n \n=\n \nMy Content Title\n\n\nset\n.\ncontentDescription\n \n=\n \nMy Content Description\n\n\nset\n.\nparams\n \n=\n \n[\nproperty1\n \n:\n \nblue\n,\n \nproperty2\n \n:\n \nred\n]\n\n\nset\n.\nkeywords\n \n=\n \n[\narray\n,\n \nof\n,\n \nkeywords\n]\n\n\nset\n.\nthumbnailURL\n \n=\n \nURL\n(\nstring\n:\n \nhttps://example.com/mycontent-12345.png\n)\n\n\nset\n.\nindex\n \n{\n \n(\nurl\n,\n \nspotlightIdentifier\n,\n \nerror\n)\n \nin\n\n    \nprint\n(\nurl \n\\(\nString\n(\ndescribing\n:\n \nurl\n))\n, spotlightIdentifier \n\\(\nString\n(\ndescribing\n:\n \nspotlightIdentifier\n))\n, error \n\\(\nerror\n.\ndebugDescription\n)\n)\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n    \nBranchCSSearchableItemAttributeSet\n \n*\nset\n \n=\n \n[[\nBranchCSSearchableItemAttributeSet\n \nalloc\n]\n \ninit\n];\n\n\nset\n.\ntitle\n \n=\n \n@\nMy Content Title\n;\n\n\nset\n.\ncontentDescription\n \n=\n \n@\nMy Content Description\n;\n\n\nset\n.\nparams\n \n=\n \n@{\n@\nproperty1\n \n:\n \n@\nblue\n,\n \n@\nproperty2\n \n:\n \n@\nred\n}\n;\n\n\nset\n.\nkeywords\n \n=\n \n[\nNSSet\n \nsetWithArray\n:\n@[\narray\n,\n \nof\n,\n \nkeywords\n]\n];\n\n\nset\n.\nthumbnailURL\n \n=\n \n@\nhttps://example.com/mycontent-12345.png\n;\n\n\n[\nset\n \nindexWithCallback\n:\n^\n(\nNSString\n \n*\n \n_Nullable\n \nurl\n,\n \nNSString\n \n*\n \n_Nullable\n \nspotlightIdentifier\n,\n \nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n    \nNSLog\n(\n@\nurl %@, spotlightIdentifier %@, error %@ \n,\n \nurl\n,\n \nspotlightIdentifier\n,\n \nerror\n);\n\n\n}];\n\n\n\n\n\n\n\n\nIndex content using Branch Universal Object on Spotlight\n\n\n\n\n\n\nIndex single Branch Universal Object\n\n\n\n\nSwift 3\n\n    \nuniversalObject\n.\nlistOnSpotlight\n(\nwith\n:\n \nlinkProperty\n)\n \n{\n \n(\nurl\n,\n \nerror\n)\n \nin\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nprint\n(\nSuccessfully indexed on spotlight\n)\n     \n     \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\"Content would be index using NSUserActivity if contentIndexMode of BranchUniversalObject is Public, else would be index using CSSearchableIndex\"\n\n\n\n\n\n\nIndex batch of Branch Universal Objects on Spotlight using CSSearchableIndex\n\n\n\n\n\n\nSwift 3\n\n    \nBranch\n.\ngetInstance\n().\nindexOnSpotlight\n(\nusingSearchableItems\n:\n \nuniversalObjects\n,\n \n                                        \ncompletion\n:\n \n{\n \n(\nuniversalObjects\n,\n \nerror\n)\n \nin\n\n     \nif\n \n(\n!\nerror\n)\n \n{\n\n        \n// Successfully able to index all the BUO on spotloght\n\n    \n}\n\n\n})\n\n\n\n\n\n\n\n\nObjective-C\n\n    \n[[\nBranch\n \ngetInstance\n]\n \nindexOnSpotlightUsingSearchableItems\n:\nuniversalObjects\n\n                                            \ncompletion\n:\n^\n(\nNSArray\nBranchUniversalObject\n \n*\n \n*\nuniversalObjects\n,\n\n                                                         \nNSError\n \n*\nerror\n)\n \n{\n\n        \nif\n \n(\n!\nerror\n)\n \n{\n\n           \n// Successfully able to index all the BUO on spotloght\n\n        \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nAll the Branch Universal Objects will be indexed using CSSearchableIndex irrespective of it's contentIndexMode  \n\n\n\n\n\n\n\n\nRemove single Branch Universal Object from Spotlight if privately indexed\n\n\n\n\n\n\nSwift 3\n\n\nuniversalObject\n.\nremoveFromSpotlight\n \n{\n \n(\nerror\n)\n \nin\n\n    \nif\n(\n!\nerror\n)\n \n{\n\n        \nprint\n(\nBUO successfully removed\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n[\nuniversalObject\n \nremoveFromSpotlightWithCallback\n:\n^\n(\nNSError\n \n*\n \n_Nullable\n \nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nNSLog\n(\n@\nuniversal Object removed from spotlight\n);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemove batch of Branch Universal Objects from Spotlight if privately indexed\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\nremoveSearchableItems\n(\nwith\n:\n \n[\nBUO1\n,\nBUO2\n])\n \n{\n \n(\nerror\n)\n \nin\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nprint\n(\nAn array of BUOs removed from spotlight\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nremoveSearchableItemsWithBranchUniversalObjects\n:\n@[\nBUO1\n,\nBUO2\n]\n \ncallback\n:\n^\n(\nNSError\n \n*\nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nNSLog\n(\n@\nAn array of BUOs removed from spotlight\n);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\"spotlightIdentifier\" member variable of Branch Universal Object should contain the spotlight indentifier which was used to index content to successfully remove indexing. \n\n\n\n\n\n\n\n\nRemove all the content from Spotlight if privately indexed using Branch SDK\n\n\n\n\n\n\nSwift 3\n\n\nBranch\n.\ngetInstance\n().\nremoveAllPrivateContentFromSpotLight\n \n{\n \n(\nerror\n)\n \nin\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nprint\n(\nAll branch privately indexed content removed from spotlight\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nremoveAllPrivateContentFromSpotLightWithCallback\n:\n^\n(\nNSError\n \n*\nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nNSLog\n(\n@\nAll branch privately indexed content removed from spotlight\n);\n\n    \n}\n\n\n}];", 
            "title": "Spotlight Search"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#overview", 
            "text": "Listing your app content on Apple's new Spotlight search with Branch is easy. Note that this guide will list on both  cloud search  and  local spotlight search .   Warning  Some older devices cannot index content. iPad minis, for example, cannot use CoreSpotlight. The SDK includes a check for these devices and will return an error message if you attempt to index content on them.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#prerequisites", 
            "text": "This guide requires you to have already  integrated the Branch SDK  into your app. For Spotlight search results to function as intended, you should also  configure deep link routing .", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#list-content", 
            "text": "Content can be added to Spotlight search by using the  BranchUniversalObject . We'd recommend that you put this on every page that renders a piece of content for your users. This way, a user could rediscover a previous thing that they had viewed.  First, define the content that you'd like to be listed by customizing the  BranchUniversalObject . We'd recommend that you do this in  viewDidLoad    Swift 3  let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   item/12345 )  branchUniversalObject . title   =   My Content Title  branchUniversalObject . contentDescription   =   My Content Description  branchUniversalObject . imageUrl   =   https://example.com/mycontent-12345.png  branchUniversalObject . addMetadataKey ( property1 ,   value :   blue )  branchUniversalObject . addMetadataKey ( property2 ,   value :   red )  // important to set this flag to true  branchUniversalObject . automaticallyListOnSpotlight   =   true     Objective C  BranchUniversalObject   * branchUniversalObject   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ item/12345 ];  branchUniversalObject . title   =   @ My Content Title ;  branchUniversalObject . contentDescription   =   @ My Content Description ;  branchUniversalObject . imageUrl   =   @ https://example.com/mycontent-12345.png ;  [ branchUniversalObject   addMetadataKey : @ property1   value : @ blue ];  [ branchUniversalObject   addMetadataKey : @ property2   value : @ red ];  // important to set this flag to true  branchUniversalObject . automaticallyListOnSpotlight   =   YES ;     Then call the  userCompletedAction  method with the  View  event on your  BranchUniversalObject . You will want to do this every single time a user goes to view a page in your app, so we recommend putting this in  viewDidAppear , which means you must initialize the Branch Universal Object with all appropriate metadata before  viewDidAppear .    Swift 3  branchUniversalObject . userCompletedAction ( BNCRegisterViewEvent )     Objective C  [ branchUniversalObject   userCompletedAction : BNCRegisterViewEvent ];     This will create the appropriate NSUserActivity and tell Apple that a view occurred, adding it to the local Spotlight index if not already present in addition to increasing it's ranking in the global index. To read more about this, check out  this blog post .", 
            "title": "List Content"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#handle-incoming-traffic-from-spotlight", 
            "text": "Open your  AppDelegate.m  file and add the following method. If you completed the basic SDK integration guide, this is likely already present.    Swift 3  func   application ( _   application :   UIApplication ,   continue   userActivity :   NSUserActivity ,   restorationHandler :   @ escaping   ([ Any ]?)   -   Void )   -   Bool   { \n     // pass the url to the handle deep link call \n     return   Branch . getInstance (). continueUserActivity ( userActivity ) \n\n     return   true  }     Objective C  -   ( BOOL ) application: ( UIApplication   * ) application   continueUserActivity: ( NSUserActivity   * ) userActivity   restorationHandler: ( void   ( ^ )( NSArray   * restorableObjects )) restorationHandler   { \n     [[ Branch   getInstance ]   continueUserActivity : userActivity ]; \n\n     return   YES ;  }", 
            "title": "Handle incoming traffic from Spotlight"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#use-deepviews-for-user-acquisition", 
            "text": "If the user doesn't have the app installed and finds your content through search, Spotlight will open up the browser. In this situation, you can  show a Deepview , which is an automatically-generated, mobile web render of the app content.", 
            "title": "Use deepviews for user acquisition"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#customize-content", 
            "text": "You can use our identifier when indexing to perform advanced customizations of the content being listed.    Swift 3 \n       branch . getSpotlightUrl ( withParams :   [ $og_title :   My App , \n                                     $og_description :   My app is disrupting apps , \n                                     $og_thumb :   https://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png , \n                                     object_id :   1234 ],  \n                          callback :   {   ( params ,   error )   in \n\n         if   let   params   =   params   { \n                 // params will contain @ url  and @ spotlight_identifier \n                 // the example below shows where to use them \n\n                 // Index via the NSUserActivity strategy \n                 // you must set the new NSUserActivity to the property of a UIViewController \n                 self . userActivity   =   NSUserActivity ( activityType :   params [ spotlight_identifer ]   as !   String ) \n                 self . userActivity . webpageURL   =   URL ( string :   params [ url ]   as !   String ) \n                 self . userActivity . becomeCurrent () \n         }      })     Objective-C \n     [ branch   getSpotlightUrlWithParams : @{ @ $og_title :   @ My App , \n                                         @ $og_description :   @ My app is disrupting apps , \n                                         @ $og_thumb :   @ https://s3-us-west-1.amazonaws.com/branchhost/mosaic_og.png , \n                                         @ object_id :   @ 1234 } \n                              callback : ^ ( NSDictionary   * params ,   NSError   * error )   { \n         if   ( ! error     params )   { \n             // params will contain @ url  and @ spotlight_identifier \n             // the example below shows where to use them \n\n             // Index via the NSUserActivity strategy \n             // you must set the new NSUserActivity to the property of a UIViewController \n             self . userActivity   =   [[ NSUserActivity   alloc ]   initWithActivityType : params [ @ spotlight_identifer ]]; \n             self . userActivity . webpageURL   =   [ NSURL   URLWithString : params [ @ url ]]; \n             [ self . userActivity   becomeCurrent ]; \n         }  }];", 
            "title": "Customize content"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#index-content-at-scale", 
            "text": "If the goal is to simply index the content of the app without creating a  BranchUniversalObject  or if you want index content at scale then we recommend using the following method:    Swift 3  let   set : BranchCSSearchableItemAttributeSet   =   BranchCSSearchableItemAttributeSet ()  set . title   =   My Content Title  set . contentDescription   =   My Content Description  set . params   =   [ property1   :   blue ,   property2   :   red ]  set . keywords   =   [ array ,   of ,   keywords ]  set . thumbnailURL   =   URL ( string :   https://example.com/mycontent-12345.png )  set . index   {   ( url ,   spotlightIdentifier ,   error )   in \n     print ( url  \\( String ( describing :   url )) , spotlightIdentifier  \\( String ( describing :   spotlightIdentifier )) , error  \\( error . debugDescription ) )  }     Objective-C \n     BranchCSSearchableItemAttributeSet   * set   =   [[ BranchCSSearchableItemAttributeSet   alloc ]   init ];  set . title   =   @ My Content Title ;  set . contentDescription   =   @ My Content Description ;  set . params   =   @{ @ property1   :   @ blue ,   @ property2   :   @ red } ;  set . keywords   =   [ NSSet   setWithArray : @[ array ,   of ,   keywords ] ];  set . thumbnailURL   =   @ https://example.com/mycontent-12345.png ;  [ set   indexWithCallback : ^ ( NSString   *   _Nullable   url ,   NSString   *   _Nullable   spotlightIdentifier ,   NSError   *   _Nullable   error )   { \n     NSLog ( @ url %@, spotlightIdentifier %@, error %@  ,   url ,   spotlightIdentifier ,   error );  }];", 
            "title": "Index content at scale"
        }, 
        {
            "location": "/pages/organic-search/spotlight/#index-content-using-branch-universal-object-on-spotlight", 
            "text": "Index single Branch Universal Object   Swift 3 \n     universalObject . listOnSpotlight ( with :   linkProperty )   {   ( url ,   error )   in \n     if   ( ! error )   { \n         print ( Successfully indexed on spotlight )      \n      }  }       Note   \"Content would be index using NSUserActivity if contentIndexMode of BranchUniversalObject is Public, else would be index using CSSearchableIndex\"    Index batch of Branch Universal Objects on Spotlight using CSSearchableIndex    Swift 3 \n     Branch . getInstance (). indexOnSpotlight ( usingSearchableItems :   universalObjects ,  \n                                         completion :   {   ( universalObjects ,   error )   in \n      if   ( ! error )   { \n         // Successfully able to index all the BUO on spotloght \n     }  })     Objective-C \n     [[ Branch   getInstance ]   indexOnSpotlightUsingSearchableItems : universalObjects \n                                             completion : ^ ( NSArray BranchUniversalObject   *   * universalObjects , \n                                                          NSError   * error )   { \n         if   ( ! error )   { \n            // Successfully able to index all the BUO on spotloght \n         }  }];        Note  All the Branch Universal Objects will be indexed using CSSearchableIndex irrespective of it's contentIndexMode       Remove single Branch Universal Object from Spotlight if privately indexed    Swift 3  universalObject . removeFromSpotlight   {   ( error )   in \n     if ( ! error )   { \n         print ( BUO successfully removed ) \n     }  }     Objective-C  [ universalObject   removeFromSpotlightWithCallback : ^ ( NSError   *   _Nullable   error )   { \n     if   ( ! error )   { \n         NSLog ( @ universal Object removed from spotlight ); \n     }  }];       Remove batch of Branch Universal Objects from Spotlight if privately indexed    Swift 3  Branch . getInstance (). removeSearchableItems ( with :   [ BUO1 , BUO2 ])   {   ( error )   in \n     if   ( ! error )   { \n         print ( An array of BUOs removed from spotlight ) \n     }  }     Objective-C  [[ Branch   getInstance ]   removeSearchableItemsWithBranchUniversalObjects : @[ BUO1 , BUO2 ]   callback : ^ ( NSError   * error )   { \n     if   ( ! error )   { \n         NSLog ( @ An array of BUOs removed from spotlight ); \n     }  }];        Note  \"spotlightIdentifier\" member variable of Branch Universal Object should contain the spotlight indentifier which was used to index content to successfully remove indexing.      Remove all the content from Spotlight if privately indexed using Branch SDK    Swift 3  Branch . getInstance (). removeAllPrivateContentFromSpotLight   {   ( error )   in \n     if   ( ! error )   { \n         print ( All branch privately indexed content removed from spotlight ) \n     }  }     Objective-C  [[ Branch   getInstance ]   removeAllPrivateContentFromSpotLightWithCallback : ^ ( NSError   * error )   { \n     if   ( ! error )   { \n         NSLog ( @ All branch privately indexed content removed from spotlight ); \n     }  }];", 
            "title": "Index content using Branch Universal Object on Spotlight"
        }, 
        {
            "location": "/pages/organic-search/branch-seo/", 
            "text": "Overview\n\n\nBranch has invested a lot of time and effort to ensure that we only help with SEO and search rankings while delivering our value. We've very thoughtfully designed how we treat Google and other search engine bots that crawl links to ensure that SEO juice is properly passed on to your website domain and not ours. \n\n\nBranch redirects don't affect SEO / rankings\n\n\nCommonly, you'll want to put Branch links on social and other public platforms to get the benefit of Branch's deep linking and attribution. You might configure your Branch link to send your users to the website when the app is not installed by using \n$fallback_url\n or one of the platform fallbacks like \n$desktop_url\n or \n$ios_url\n. \n\n\nThere's no need to worry about SEO in this case. Branch uses HTTP 307 redirects to fallback to your website when the app is not installed and a Google representative has \ncommented publicly\n that these do not harm SEO or rankings.\n\n\nBest practices for using Branch to enhance SEO\n\n\nIf you're not using using \n$fallback_url\n or one of the platform fallbacks like \n$desktop_url\n or \n$ios_url\n to redirect users, you can still configure your Branch links to contribute SEO juice to a website. You merely need to configure the \n$canonical_url\n field of the link to the web URL you'd like us to send to search engine bots. This doesn't affect redirect behavior but does affect SEO.\n\n\nThis can be set via the native libaries while using the BUO as shown below. For other platforms, you can see the appropriate code in the following \ndocs\n.\n\n\n\n\n\n\niOS - Objective C\n\n\nBranchUniversalObject\n \n*\nbranchUniversalObject\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nitem/12345\n];\n\n\nbranchUniversalObject\n.\ncanonicalUrl\n \n=\n \n@\nhttps://example.com/item/12345\n;\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nitem/12345\n)\n\n\nbranchUniversalObject\n.\ncanonicalUrl\n \n=\n \nhttps://example.com/item/12345\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n \nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n                \n.\nsetCanonicalIdentifier\n(\nitem/12345\n)\n\n                \n.\nsetCanonicalUrl\n(\nhttps://example.com/item/12345\n)\n\n\n\n\n\n\n\n\n\nJourneys banners and other web integrations\n\n\nThe other common concern is around Branch's web products such as \nJourneys banners\n or the \nweb library\n. After deploying your banners to the wild, you can check your Branch-integrated site using Google's \nPage Speed analyzer\n. You'll be pleased to know that Branch is fully optimized.\n\n\nYou'll find that all assets such as images, text and image are compressed and optimized for page loads speed. Plus, our static assets are cached in our CDN to deliver fast load times globally. We won't be a hindrance to your site performance.", 
            "title": "General SEO Compatibility"
        }, 
        {
            "location": "/pages/organic-search/branch-seo/#overview", 
            "text": "Branch has invested a lot of time and effort to ensure that we only help with SEO and search rankings while delivering our value. We've very thoughtfully designed how we treat Google and other search engine bots that crawl links to ensure that SEO juice is properly passed on to your website domain and not ours.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/organic-search/branch-seo/#branch-redirects-dont-affect-seo-rankings", 
            "text": "Commonly, you'll want to put Branch links on social and other public platforms to get the benefit of Branch's deep linking and attribution. You might configure your Branch link to send your users to the website when the app is not installed by using  $fallback_url  or one of the platform fallbacks like  $desktop_url  or  $ios_url .   There's no need to worry about SEO in this case. Branch uses HTTP 307 redirects to fallback to your website when the app is not installed and a Google representative has  commented publicly  that these do not harm SEO or rankings.", 
            "title": "Branch redirects don't affect SEO / rankings"
        }, 
        {
            "location": "/pages/organic-search/branch-seo/#best-practices-for-using-branch-to-enhance-seo", 
            "text": "If you're not using using  $fallback_url  or one of the platform fallbacks like  $desktop_url  or  $ios_url  to redirect users, you can still configure your Branch links to contribute SEO juice to a website. You merely need to configure the  $canonical_url  field of the link to the web URL you'd like us to send to search engine bots. This doesn't affect redirect behavior but does affect SEO.  This can be set via the native libaries while using the BUO as shown below. For other platforms, you can see the appropriate code in the following  docs .    iOS - Objective C  BranchUniversalObject   * branchUniversalObject   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ item/12345 ];  branchUniversalObject . canonicalUrl   =   @ https://example.com/item/12345 ;     iOS - Swift  let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   item/12345 )  branchUniversalObject . canonicalUrl   =   https://example.com/item/12345     Android    BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n                 . setCanonicalIdentifier ( item/12345 ) \n                 . setCanonicalUrl ( https://example.com/item/12345 )", 
            "title": "Best practices for using Branch to enhance SEO"
        }, 
        {
            "location": "/pages/organic-search/branch-seo/#journeys-banners-and-other-web-integrations", 
            "text": "The other common concern is around Branch's web products such as  Journeys banners  or the  web library . After deploying your banners to the wild, you can check your Branch-integrated site using Google's  Page Speed analyzer . You'll be pleased to know that Branch is fully optimized.  You'll find that all assets such as images, text and image are compressed and optimized for page loads speed. Plus, our static assets are cached in our CDN to deliver fast load times globally. We won't be a hindrance to your site performance.", 
            "title": "Journeys banners and other web integrations"
        }, 
        {
            "location": "/pages/viral/content-sharing/", 
            "text": "Overview\n\n\nIf your users are creating content in your app, they will probably want to share that content with their friends. You can encourage this by making it easy to generate sharing links that open your app \nand\n route back exactly to the piece of content that was originally shared. This will even work when the user who opens the link doesn't have your app installed yet.\n\n\nGuide\n\n\nLet's say you have developed an app called \nBranch Monster Factory\n. You want your users to share the monsters they create with their friends, and see the monster that was shared as soon as your app opens. Let's get started!\n\n\nGenerate shareable links\n\n\nThe first thing we need to do is allow your users to create links. These links will contain references to the content being shared, which generate analytics data and allow your app to route straight back to that content when a link is opened.\n\n\nStart by importing the relevant Branch frameworks into the view controller you will be using:\n\n\n\n\n\n\niOS - Objective C\n\n\n#import \nBranchUniversalObject.h\n\n\n#import \nBranchLinkProperties.h\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\n{\n%\n \nhighlight\n \nobjective\n-\nc\n \n%\n}\n\n\n#import \nBranchUniversalObject.h\n\n\n#import \nBranchLinkProperties.h\n\n\n#import \nBranchConstants.h\n\n\n\n\n\n\n\n\n\nCreate a \nBranchUniversalObject\n containing details about the content that is being shared. You can find examples for the \nother platforms here\n.\n\n\n\n\n\n\niOS - Objective C\n\n\nBranchUniversalObject\n \n*\nbranchUniversalObject\n \n=\n \n[[\nBranchUniversalObject\n \nalloc\n]\n \ninitWithCanonicalIdentifier\n:\n@\nmonster/12345\n];\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \n@\nMeet Mr. Squiggles\n;\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \n@\nYour friend Josh has invited you to meet his awesome monster, Mr. Squiggles!\n;\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \n@\nhttps://example.com/monster-pic-12345.png\n;\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\nuserId\n \nvalue\n:\n@\n12345\n];\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\nuserName\n \nvalue\n:\n@\nJosh\n];\n\n\n[\nbranchUniversalObject\n \naddMetadataKey\n:\n@\nmonsterName\n \nvalue\n:\n@\nMr. Squiggles\n];\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nlet\n \nbranchUniversalObject\n:\n \nBranchUniversalObject\n \n=\n \nBranchUniversalObject\n(\ncanonicalIdentifier\n:\n \nmonster/12345\n)\n\n\nbranchUniversalObject\n.\ntitle\n \n=\n \nMeet Mr. Squiggles\n\n\nbranchUniversalObject\n.\ncontentDescription\n \n=\n \nYour friend Josh has invited you to meet his awesome monster, Mr. Squiggles!\n\n\nbranchUniversalObject\n.\nimageUrl\n \n=\n \nhttps://example.com/monster-pic-12345.png\n\n\nbranchUniversalObject\n.\ncontentMetadata\n.\ncustomMetadata\n \n=\n \n[\ncustom\n:\n123\n]\n\n\nbranchUniversalObject\n.\ncontentMetadata\n.\ncustomMetadata\n \n=\n \n[\nanything\n:\neverything\n]\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n \nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n                \n.\nsetCanonicalIdentifier\n(\nmonster/12345\n)\n\n                \n.\nsetTitle\n(\nMeet Mr. Squiggles\n)\n\n                \n.\nsetContentDescription\n(\nYour friend Josh has invited you to meet his awesome monster, Mr. Squiggles!\n)\n\n                \n.\nsetContentImageUrl\n(\nhttps://example.com/monster-pic-12345.png\n)\n\n                \n.\nsetContentMetadata\n(\nnew\n \nContentMetadata\n().\naddCustomMetadata\n(\nuserId\n,\n \n12345\n)\n\n                    \n.\naddCustomMetadata\n(\nuserName\n,\n \nJosh\n)\n\n                    \n.\naddCustomMetadata\n(\nmonsterName\n,\n \nMr. Squiggles\n));\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nThe \ncanonicalIdentifier\n or \ncanonicalUrl\n parameter greatly improves the content analytics data Branch captures. It should be unique to that piece of content and helps Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities.\n\n\n\n\nThen define the properties of the link. In the example, our properties reflect that this is shared content and the user selected Facebook as the destination. You can find examples of \nthe other platforms here\n.\n\n\n\n\n\n\niOS - Objective C\n\n\nBranchLinkProperties\n \n*\nlinkProperties\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlinkProperties\n.\nfeature\n \n=\n \n@\nshare\n;\n\n\nlinkProperties\n.\nchannel\n \n=\n \n@\nfacebook\n;\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nlet\n \nlinkProperties\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlinkProperties\n.\nfeature\n \n=\n \nshare\n\n\nlinkProperties\n.\nchannel\n \n=\n \nfacebook\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nLinkProperties\n \nlinkProperties\n \n=\n \nnew\n \nLinkProperties\n()\n\n               \n.\nsetChannel\n(\nfacebook\n)\n\n               \n.\nsetFeature\n(\nsharing\n)\n\n\n\n\n\n\n\n\n\nNote that on Android, you can customize the styling with the ShareSheetStyle class. Since iOS share sheet is baked into the platform, it's not customizable.\n\n\nAndroid\n\n\nShareSheetStyle\n \nshareSheetStyle\n \n=\n \nnew\n \nShareSheetStyle\n(\nMainActivity\n.\nthis\n,\n \nCheck this out!\n,\n \nThis stuff is awesome: \n)\n\n                        \n.\nsetCopyUrlStyle\n(\ngetResources\n().\ngetDrawable\n(\nandroid\n.\nR\n.\ndrawable\n.\nic_menu_send\n),\n \nCopy\n,\n \nAdded to clipboard\n)\n\n                        \n.\nsetMoreOptionStyle\n(\ngetResources\n().\ngetDrawable\n(\nandroid\n.\nR\n.\ndrawable\n.\nic_menu_search\n),\n \nShow more\n)\n\n                        \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nFACEBOOK\n)\n\n                        \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nEMAIL\n)\n\n                        \n.\nsetAsFullWidthStyle\n(\ntrue\n)\n\n                        \n.\nsetSharingTitle\n(\nShare With\n);\n\n\n\n\nThen, trigger the share sheet to appear without having to create a link. Calling this method will automatically generate a Branch link with the appropriate analytics channel when the user selects a sharing destination. You can find examples of \nthe other platforms here\n.\n\n\n\n\n\n\niOS - Objective C\n\n\n[\nbranchUniversalObject\n \nshowShareSheetWithLinkProperties\n:\nlinkProperties\n\n                                           \nandShareText\n:\n@\nSuper amazing thing I want to share!\n\n                                     \nfromViewController\n:\nself\n\n                                            \ncompletion\n:\n^\n(\nNSString\n \n*\nactivityType\n,\n \nBOOL\n \ncompleted\n)\n \n{\n\n    \nNSLog\n(\n@\nfinished presenting\n);\n\n\n}];\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nbranchUniversalObject\n.\nshowShareSheet\n(\nwith\n:\n \nlinkProperties\n,\n\n                                     \nandShareText\n:\n \nSuper amazing thing I want to share!\n,\n\n                                     \nfrom\n:\n \nself\n)\n \n{\n \n(\nactivityType\n,\n \ncompleted\n)\n \nin\n\n    \nif\n \n(\ncompleted\n)\n \n{\n\n        \nprint\n(\nString\n(\nformat\n:\n \nCompleted sharing to %@\n,\n \nactivityType\n!))\n\n    \n}\n \nelse\n \n{\n\n        \nprint\n(\nLink sharing cancelled\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nbranchUniversalObject\n.\nshowShareSheet\n(\nthis\n,\n\n                                      \nlinkProperties\n,\n\n                                      \nshareSheetStyle\n,\n\n                                       \nnew\n \nBranch\n.\nBranchLinkShareListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonShareLinkDialogDismissed\n()\n \n{\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nHere's an example of what you'll see with iOS on the left and Android on the right:\n\n\n\n\n\n\nTo learn more about the concepts we used, visit these pages\n\n\n\n\nCreating Links in Apps\n\n\nConfiguring Links\n\n\nBranch Universal Object\n\n\nDeep Link Routing\n\n\n\n\n\n\nRoute incoming users directly to content\n\n\nNow that your user has created a link and sent it to a friend, you should detect the incoming link when that friend opens your app, and route directly to the shared content. Read more about how to do this on the \nDeep Link Routing\n page.\n\n\nIf you want to give a preview of the content to users who have not yet downloaded your app, try out \nDeepviews\n.\n\n\nViewing live data on the Branch dashboard\n\n\nThe \nAnalytics page\n on the Branch dashboard allows you to see data on content your users are sharing, and which pieces of content are the most popular. You can also use the dashboard's \nLive View page\n to see links and link clicks in real time.\n\n\n\n\nMeasure influencers\n\n\nThe \nInfluencers page\n on the dashboard will show you who is driving the most new signups.\n\n\n\n\nAdvanced\n\n\nCreating dynamic links without the share sheet\n\n\nIf you've built your own share sheet and you want to just create a Branch link for an individual share message or have another use case, you can create deep links directly with the following call:\n\n\n\n\n\n\niOS - Objective C\n\n\n[\nbranchUniversalObject\n \ngetShortUrlWithLinkProperties\n:\nlinkProperties\n \nandCallback\n:\n^\n(\nNSString\n \n*\nurl\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nNSLog\n(\n@\ngot my Branch invite link to share: %@\n,\n \nurl\n);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nbranchUniversalObject\n.\ngetShortUrl\n(\nwith\n:\n \nlinkProperties\n)\n \n{\n \n(\nurl\n,\n \nerror\n)\n \nin\n\n    \nif\n \n(\nerror\n \n==\n \nnil\n)\n \n{\n\n        \nprint\n(\nGot my Branch link to share: (url)\n)\n\n    \n}\n \nelse\n \n{\n\n        \nprint\n(\nString\n(\nformat\n:\n \nBranch error : %@\n,\n \nerror\n!\n \nas\n \nCVarArg\n))\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nbranchUniversalObject\n.\ngenerateShortUrl\n(\nthis\n,\n \nlinkProperties\n,\n \nnew\n \nBranchLinkCreateListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonLinkCreate\n(\nString\n \nurl\n,\n \nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \nLog\n.\ni\n(\nMyApp\n,\n \ngot my Branch link to share: \n \n+\n \nurl\n);\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nYou can find examples of \nlinkProperties\n above. You would next use the returned link and help the user post it to (in this example) Facebook.\n\n\nSpecifying a shared email subject\n\n\nThe majority of share options only include one string of text, except email, which has a subject and a body. The share text will fill in the body and you can specify the email subject in the link properties as shown below.\n\n\n\n\n\n\niOS - Objective C\n\n\nBranchLinkProperties\n \n*\nlinkProperties\n \n=\n \n[[\nBranchLinkProperties\n \nalloc\n]\n \ninit\n];\n\n\nlinkProperties\n.\nfeature\n \n=\n \n@\nshare\n;\n\n\nlinkProperties\n.\nchannel\n \n=\n \n@\nfacebook\n;\n\n\n[\nlinkProperties\n \naddControlParam\n:\n@\n$email_subject\n \nwithValue\n:\n@\nTherapists hate him\n];\n\n\n\n\n\n\n\n\n\niOS - Swift\n\n\nlet\n \nlinkProperties\n:\n \nBranchLinkProperties\n \n=\n \nBranchLinkProperties\n()\n\n\nlinkProperties\n.\nfeature\n \n=\n \nshare\n\n\nlinkProperties\n.\nchannel\n \n=\n \nfacebook\n\n\nlinkProperties\n.\naddControlParam\n(\n$email_subject\n,\n \nwithValue\n:\n \nTherapists hate him\n)\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nShareSheetStyle\n \nshareSheetStyle\n \n=\n \nnew\n \nShareSheetStyle\n(\nMainActivity\n.\nthis\n,\n \nTherapists hate him\n,\n \nYou will never believe what happened next!\n)\n\n                        \n.\nsetCopyUrlStyle\n(\ngetResources\n().\ngetDrawable\n(\nandroid\n.\nR\n.\ndrawable\n.\nic_menu_send\n),\n \nCopy\n,\n \nAdded to clipboard\n)\n\n                        \n.\nsetMoreOptionStyle\n(\ngetResources\n().\ngetDrawable\n(\nandroid\n.\nR\n.\ndrawable\n.\nic_menu_search\n),\n \nShow more\n)\n\n                        \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nFACEBOOK\n)\n\n                        \n.\naddPreferredSharingOption\n(\nSharingHelper\n.\nSHARE_WITH\n.\nEMAIL\n)\n\n                        \n.\nsetAsFullWidthStyle\n(\ntrue\n)\n\n                        \n.\nsetSharingTitle\n(\nShare With\n);\n\n\n\n\n\n\n\n\n\nPreviewing and debugging links\n\n\n\n\nYou can debug any Branch link by appending \n?debug=true\n to the link and pasting it into your desktop browser. It shows\n\n\nAll deep link parameters and analytics tags\n\n\nSpecific routing guidance across many browsers\n\n\n\n\n\n\nFacebook's \nOG tag tester tool\n will show you all the meta data for your link, and a preview of what it will look like when shared on Facebook or other social media platforms.", 
            "title": "Content sharing"
        }, 
        {
            "location": "/pages/viral/content-sharing/#overview", 
            "text": "If your users are creating content in your app, they will probably want to share that content with their friends. You can encourage this by making it easy to generate sharing links that open your app  and  route back exactly to the piece of content that was originally shared. This will even work when the user who opens the link doesn't have your app installed yet.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/viral/content-sharing/#guide", 
            "text": "Let's say you have developed an app called  Branch Monster Factory . You want your users to share the monsters they create with their friends, and see the monster that was shared as soon as your app opens. Let's get started!", 
            "title": "Guide"
        }, 
        {
            "location": "/pages/viral/content-sharing/#generate-shareable-links", 
            "text": "The first thing we need to do is allow your users to create links. These links will contain references to the content being shared, which generate analytics data and allow your app to route straight back to that content when a link is opened.  Start by importing the relevant Branch frameworks into the view controller you will be using:    iOS - Objective C  #import  BranchUniversalObject.h  #import  BranchLinkProperties.h     iOS - Swift  { %   highlight   objective - c   % }  #import  BranchUniversalObject.h  #import  BranchLinkProperties.h  #import  BranchConstants.h     Create a  BranchUniversalObject  containing details about the content that is being shared. You can find examples for the  other platforms here .    iOS - Objective C  BranchUniversalObject   * branchUniversalObject   =   [[ BranchUniversalObject   alloc ]   initWithCanonicalIdentifier : @ monster/12345 ];  branchUniversalObject . title   =   @ Meet Mr. Squiggles ;  branchUniversalObject . contentDescription   =   @ Your friend Josh has invited you to meet his awesome monster, Mr. Squiggles! ;  branchUniversalObject . imageUrl   =   @ https://example.com/monster-pic-12345.png ;  [ branchUniversalObject   addMetadataKey : @ userId   value : @ 12345 ];  [ branchUniversalObject   addMetadataKey : @ userName   value : @ Josh ];  [ branchUniversalObject   addMetadataKey : @ monsterName   value : @ Mr. Squiggles ];     iOS - Swift  let   branchUniversalObject :   BranchUniversalObject   =   BranchUniversalObject ( canonicalIdentifier :   monster/12345 )  branchUniversalObject . title   =   Meet Mr. Squiggles  branchUniversalObject . contentDescription   =   Your friend Josh has invited you to meet his awesome monster, Mr. Squiggles!  branchUniversalObject . imageUrl   =   https://example.com/monster-pic-12345.png  branchUniversalObject . contentMetadata . customMetadata   =   [ custom : 123 ]  branchUniversalObject . contentMetadata . customMetadata   =   [ anything : everything ]     Android    BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n                 . setCanonicalIdentifier ( monster/12345 ) \n                 . setTitle ( Meet Mr. Squiggles ) \n                 . setContentDescription ( Your friend Josh has invited you to meet his awesome monster, Mr. Squiggles! ) \n                 . setContentImageUrl ( https://example.com/monster-pic-12345.png ) \n                 . setContentMetadata ( new   ContentMetadata (). addCustomMetadata ( userId ,   12345 ) \n                     . addCustomMetadata ( userName ,   Josh ) \n                     . addCustomMetadata ( monsterName ,   Mr. Squiggles ));      Tip  The  canonicalIdentifier  or  canonicalUrl  parameter greatly improves the content analytics data Branch captures. It should be unique to that piece of content and helps Branch dedupe across many instances of the same thing. Suitable options: a website with pathing, or a database with identifiers for entities.   Then define the properties of the link. In the example, our properties reflect that this is shared content and the user selected Facebook as the destination. You can find examples of  the other platforms here .    iOS - Objective C  BranchLinkProperties   * linkProperties   =   [[ BranchLinkProperties   alloc ]   init ];  linkProperties . feature   =   @ share ;  linkProperties . channel   =   @ facebook ;     iOS - Swift  let   linkProperties :   BranchLinkProperties   =   BranchLinkProperties ()  linkProperties . feature   =   share  linkProperties . channel   =   facebook     Android  LinkProperties   linkProperties   =   new   LinkProperties () \n                . setChannel ( facebook ) \n                . setFeature ( sharing )     Note that on Android, you can customize the styling with the ShareSheetStyle class. Since iOS share sheet is baked into the platform, it's not customizable.  Android  ShareSheetStyle   shareSheetStyle   =   new   ShareSheetStyle ( MainActivity . this ,   Check this out! ,   This stuff is awesome:  ) \n                         . setCopyUrlStyle ( getResources (). getDrawable ( android . R . drawable . ic_menu_send ),   Copy ,   Added to clipboard ) \n                         . setMoreOptionStyle ( getResources (). getDrawable ( android . R . drawable . ic_menu_search ),   Show more ) \n                         . addPreferredSharingOption ( SharingHelper . SHARE_WITH . FACEBOOK ) \n                         . addPreferredSharingOption ( SharingHelper . SHARE_WITH . EMAIL ) \n                         . setAsFullWidthStyle ( true ) \n                         . setSharingTitle ( Share With );   Then, trigger the share sheet to appear without having to create a link. Calling this method will automatically generate a Branch link with the appropriate analytics channel when the user selects a sharing destination. You can find examples of  the other platforms here .    iOS - Objective C  [ branchUniversalObject   showShareSheetWithLinkProperties : linkProperties \n                                            andShareText : @ Super amazing thing I want to share! \n                                      fromViewController : self \n                                             completion : ^ ( NSString   * activityType ,   BOOL   completed )   { \n     NSLog ( @ finished presenting );  }];     iOS - Swift  branchUniversalObject . showShareSheet ( with :   linkProperties , \n                                      andShareText :   Super amazing thing I want to share! , \n                                      from :   self )   {   ( activityType ,   completed )   in \n     if   ( completed )   { \n         print ( String ( format :   Completed sharing to %@ ,   activityType !)) \n     }   else   { \n         print ( Link sharing cancelled ) \n     }  }     Android  branchUniversalObject . showShareSheet ( this , \n                                       linkProperties , \n                                       shareSheetStyle , \n                                        new   Branch . BranchLinkShareListener ()   { \n     @Override \n     public   void   onShareLinkDialogDismissed ()   { \n     }  });     Here's an example of what you'll see with iOS on the left and Android on the right:    To learn more about the concepts we used, visit these pages   Creating Links in Apps  Configuring Links  Branch Universal Object  Deep Link Routing", 
            "title": "Generate shareable links"
        }, 
        {
            "location": "/pages/viral/content-sharing/#route-incoming-users-directly-to-content", 
            "text": "Now that your user has created a link and sent it to a friend, you should detect the incoming link when that friend opens your app, and route directly to the shared content. Read more about how to do this on the  Deep Link Routing  page.  If you want to give a preview of the content to users who have not yet downloaded your app, try out  Deepviews .", 
            "title": "Route incoming users directly to content"
        }, 
        {
            "location": "/pages/viral/content-sharing/#viewing-live-data-on-the-branch-dashboard", 
            "text": "The  Analytics page  on the Branch dashboard allows you to see data on content your users are sharing, and which pieces of content are the most popular. You can also use the dashboard's  Live View page  to see links and link clicks in real time.   Measure influencers  The  Influencers page  on the dashboard will show you who is driving the most new signups.", 
            "title": "Viewing live data on the Branch dashboard"
        }, 
        {
            "location": "/pages/viral/content-sharing/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/viral/content-sharing/#creating-dynamic-links-without-the-share-sheet", 
            "text": "If you've built your own share sheet and you want to just create a Branch link for an individual share message or have another use case, you can create deep links directly with the following call:    iOS - Objective C  [ branchUniversalObject   getShortUrlWithLinkProperties : linkProperties   andCallback : ^ ( NSString   * url ,   NSError   * error )   { \n     if   ( ! error )   { \n         NSLog ( @ got my Branch invite link to share: %@ ,   url ); \n     }  }];     iOS - Swift  branchUniversalObject . getShortUrl ( with :   linkProperties )   {   ( url ,   error )   in \n     if   ( error   ==   nil )   { \n         print ( Got my Branch link to share: (url) ) \n     }   else   { \n         print ( String ( format :   Branch error : %@ ,   error !   as   CVarArg )) \n     }  }     Android  branchUniversalObject . generateShortUrl ( this ,   linkProperties ,   new   BranchLinkCreateListener ()   { \n     @Override \n     public   void   onLinkCreate ( String   url ,   BranchError   error )   { \n         if   ( error   ==   null )   { \n             Log . i ( MyApp ,   got my Branch link to share:    +   url ); \n         } \n     }  });     You can find examples of  linkProperties  above. You would next use the returned link and help the user post it to (in this example) Facebook.", 
            "title": "Creating dynamic links without the share sheet"
        }, 
        {
            "location": "/pages/viral/content-sharing/#specifying-a-shared-email-subject", 
            "text": "The majority of share options only include one string of text, except email, which has a subject and a body. The share text will fill in the body and you can specify the email subject in the link properties as shown below.    iOS - Objective C  BranchLinkProperties   * linkProperties   =   [[ BranchLinkProperties   alloc ]   init ];  linkProperties . feature   =   @ share ;  linkProperties . channel   =   @ facebook ;  [ linkProperties   addControlParam : @ $email_subject   withValue : @ Therapists hate him ];     iOS - Swift  let   linkProperties :   BranchLinkProperties   =   BranchLinkProperties ()  linkProperties . feature   =   share  linkProperties . channel   =   facebook  linkProperties . addControlParam ( $email_subject ,   withValue :   Therapists hate him )     Android  ShareSheetStyle   shareSheetStyle   =   new   ShareSheetStyle ( MainActivity . this ,   Therapists hate him ,   You will never believe what happened next! ) \n                         . setCopyUrlStyle ( getResources (). getDrawable ( android . R . drawable . ic_menu_send ),   Copy ,   Added to clipboard ) \n                         . setMoreOptionStyle ( getResources (). getDrawable ( android . R . drawable . ic_menu_search ),   Show more ) \n                         . addPreferredSharingOption ( SharingHelper . SHARE_WITH . FACEBOOK ) \n                         . addPreferredSharingOption ( SharingHelper . SHARE_WITH . EMAIL ) \n                         . setAsFullWidthStyle ( true ) \n                         . setSharingTitle ( Share With );", 
            "title": "Specifying a shared email subject"
        }, 
        {
            "location": "/pages/viral/content-sharing/#previewing-and-debugging-links", 
            "text": "You can debug any Branch link by appending  ?debug=true  to the link and pasting it into your desktop browser. It shows  All deep link parameters and analytics tags  Specific routing guidance across many browsers    Facebook's  OG tag tester tool  will show you all the meta data for your link, and a preview of what it will look like when shared on Facebook or other social media platforms.", 
            "title": "Previewing and debugging links"
        }, 
        {
            "location": "/pages/viral/referrals/", 
            "text": "Overview\n\n\nBranch allows you to reward users with credits, track those credits, and redeem them when appropriate. It is a unit-less currency available to your users without you having to build a system from scratch.\n\n\n\n  \n\n\n\n\n\nGuide\n\n\n\n\nPrequisite\n\n\n\n\nYou need to \nintegrate the Branch SDK\n into your app.\n\n\nYou should \nidentify your users\n on both log in and log out.\n\n\nYour users should be able to \ncreate links in your app\n so we can track referred-referring relationships.\n\n\n\n\n\n\nWith every event that is recorded in Branch, we check automatically if that event is eligible for credits based on the rules that you configured, then deposit the credits if so. Reward rules can be based on both \nautomatic events and custom events\n.\n\n\n\n\nIf you identify your users\n\n\nBecause we do not merge identities, you \nshould set rewards on custom events\n and \nnot use\n the events we automatically track (\ninstall\n and \nopen\n), and do so only \nafter\n you have identified a user using our \nidentity methods\n. This will help avoid duplicate rewards and missing credits.\n\n\n\n\nAwarding credits\n\n\n\n\nReferral Fraud Protection\n\n\nBranch tracks the hardware ID and IDFA of every device we detect, and ties these to our concept of a user identity. However, this means that you may run into issues if you test repeatedly with the same devices. When testing referral programs and reward rules, you should \nuse debug mode\n.\n\n\n\n\nTo add a rule, go to the Dashboard Referrals page and click the \nRules tab\n. Click the green \"+ Add a new rule\" button. Once there, you can select between two options:\n\n\nGive reward\n\n\nYou can automatically give awards based on events taken by users.\n\n\nProperties you can define:\n\n\n\n\nWho gets a reward\n\n\nHow many credits the reward is\n\n\nWhich \nbucket\n the credits go to\n\n\nWhether the reward occurs the first time or every time\n\n\nWhich event triggers the reward\n\n\n\n\n\n\nExample\n\n\nLet's say you want to give 10 credits to each new user who signs up through a friend, and 5 credits to the friend who referred him or her. That can be done through a combination of two rules:\n\n\nRule 1: rewarding the referred user 10 credits\n\n\n\n\nWho gets a reward: \n\"Referred acting users\"\n\n\nHow many credits the reward is: \n10\n\n\nWhich bucket the credits go to: \ndefault\n\n\nWhether the reward occurs the first time or every time: \nthe first time\n\n\nWhich event triggers the reward: \ninstall\n\n\n\n\n\n\nRule 2: rewarding the referring user 5 credits\n\n\n\n\nWho gets a reward: \n\"Referring users\"\n\n\nHow many credits the reward is: \n5\n\n\nWhich bucket the credits go to: \ndefault\n\n\nWhether the reward occurs the first time or every time: \nthe first time\n\n\nWhich event triggers the reward: \ninstall\n\n\n\n\n\n\n\n\nViewing Credits\n\n\nOnce users have credits, they should be able to redeem them. Checking the balance involves loading the most recent balance from the server and then reading the balance. These can be two separate steps but for the sake of simplicity we have combined them into one example:\n\n\n\n\n\n\niOS - Swift\n\n\nBranch\n.\ngetInstance\n().\nloadRewards\n \n{\n \n(\nchanged\n,\n \nerror\n)\n \nin\n\n    \nif\n \n(\nerror\n \n==\n \nnil\n)\n \n{\n\n        \nlet\n \ncredits\n \n=\n \nBranch\n.\ngetInstance\n().\ngetCredits\n()\n\n        \nprint\n(\ncredit: \n\\(\ncredits\n)\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\niOS - Objective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nloadRewardsWithCallback\n:\n^\n(\nBOOL\n \nchanged\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nNSLog\n(\n@\ncredit: %lu\n,\n \n[[\nBranch\n \ngetInstance\n]\n \ngetCredits\n]);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nBranch\n.\ngetInstance\n(\ngetApplicationContext\n()).\nloadRewards\n(\nnew\n \nBranchReferralStateChangedListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonStateChanged\n(\nboolean\n \nchanged\n,\n \nBranch\n.\nBranchError\n \nerror\n)\n \n{\n\n        \n// changed boolean will indicate if the balance changed from what is currently in memory\n\n\n        \n// will return the balance of the current user\ns credits\n\n        \nint\n \ncredits\n \n=\n \nbranch\n.\ngetCredits\n();\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nIf you want to see the number of credits in a custom bucket you've specified, such as \nmyBucket\n, then you can do the following:\n\n\n\n\n\n\niOS - Swift\n\n\nBranch\n.\ngetInstance\n().\nloadRewards\n \n{\n \n(\nchanged\n,\n \nerror\n)\n \nin\n\n    \nif\n \n(\nerror\n \n==\n \nnil\n)\n \n{\n\n        \nlet\n \ncreditsForBucket\n \n=\n \nBranch\n.\ngetInstance\n().\ngetCreditsForBucket\n()\n\n        \nprint\n(\ncredit for bucket: \n\\(\ncreditsForBucket\n)\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\niOS - Objective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nloadRewardsWithCallback\n:\n^\n(\nBOOL\n \nchanged\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n)\n \n{\n\n        \nNSString\n \n*\nbucket\n \n=\n \n@\nmyBucket\n;\n\n        \nNSLog\n(\n@\ncredit for %@ bucket: %lu\n,\n \nbucket\n,\n \n[[\nBranch\n \ngetInstance\n]\n \ngetCreditsForBucket\n:\nbucket\n]);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nBranch\n.\ngetInstance\n(\ngetApplicationContext\n()).\nloadRewards\n(\nnew\n \nBranchReferralStateChangedListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonStateChanged\n(\nboolean\n \nchanged\n,\n \nBranch\n.\nBranchError\n \nerror\n)\n \n{\n\n        \n// changed boolean will indicate if the balance changed from what is currently in memory\n\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n)\n \n{\n\n            \nString\n \nbucket\n \n=\n \nmyBucket\n;\n\n            \nBranch\n.\ngetInstance\n(\ngetApplicationContext\n()).\ngetCreditsForBucket\n(\nbucket\n);\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nRedeeming Credits\n\n\nWhen users spend credits, you can make a simple call to redeem their credits.\n\n\n\n\n\n\niOS - Swift\n\n\nBranch\n.\ngetInstance\n().\nredeemRewards\n(\n5\n,\n \ncallback\n:\n \n{(\nsuccess\n,\n \nerror\n)\n \nin\n\n    \nif\n \nsuccess\n \n{\n\n        \nprint\n(\nRedeemed 5 credits!\n)\n\n    \n}\n\n    \nelse\n \n{\n\n        \nprint\n(\nFailed to redeem credits: \n\\(\nerror\n)\n)\n\n    \n}\n\n\n})\n\n\n\n\n\n\n\n\n\niOS - Objective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nredeemRewards\n:\n5\n \ncallback\n:\n^\n(\nBOOL\n \nsuccess\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n    \nif\n \n(\nsuccess\n)\n \n{\n\n        \nNSLog\n(\n@\nRedeemed 5 credits!\n);\n\n    \n}\n\n    \nelse\n \n{\n\n        \nNSLog\n(\n@\nFailed to redeem credits: %@\n,\n \nerror\n);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nBranch\n.\ngetInstance\n(\ngetApplicationContext\n()).\nredeemRewards\n(\n5\n);\n\n\n\n\n\n\n\n\n\nIf you want to redeem credits in a custom bucket you've specified, such as \nmyBucket\n, then you can do the following:\n\n\n\n\n\n\niOS - Swift\n\n\nBranch\n.\ngetInstance\n().\nredeemRewards\n(\n5\n,\n \nforBucket\n:\n \nmyBucket\n,\n \ncallback\n:\n \n{(\nsuccess\n,\n \nerror\n)\n \nin\n\n    \nif\n \nsuccess\n \n{\n\n        \nprint\n(\nRedeemed 5 credits for myBucket!\n)\n\n    \n}\n\n    \nelse\n \n{\n\n        \nprint\n(\nFailed to redeem credits: \n\\(\nerror\n)\n)\n\n    \n}\n\n\n})\n\n\n\n\n\n\n\n\n\niOS - Objective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nredeemRewards\n:\n5\n \nforBucket\n:\n@\nmyBucket\n \ncallback\n:\n^\n(\nBOOL\n \nsuccess\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n    \nif\n \n(\nsuccess\n)\n \n{\n\n        \nNSLog\n(\n@\nRedeemed 5 credits for myBucket!\n);\n\n    \n}\n\n    \nelse\n \n{\n\n        \nNSLog\n(\n@\nFailed to redeem credits: %@\n,\n \nerror\n);\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nBranch\n.\ngetInstance\n(\ngetApplicationContext\n()).\nredeemRewards\n(\nmyBucket\n,\n \n5\n)\n\n\n\n\n\n\n\n\n\n\n\nExample redemption flow\n\n\nThis is a simple three-part process:\n\n\n\n\nEnsure credits are loaded.\n\n\nCall the \nredeemRewards\n method and show a progress dialog.\n\n\n\n\nShow a completion dialog and reflect updates in balance.\n\n\n\n\n\n\niOS - Swift\n\n\n    \nBranch\n.\ngetInstance\n().\nloadRewards\n(\nwithCallback\n:\n \n{(\n_\n \nchanged\n:\n \nBool\n,\n \n_\n \nerror\n:\n \nError\n?)\n \n-\n \nVoid\n \nin\n\n        \nif\n \n!\n(\nerror\n \n \nBranch\n.\ngetInstance\n().\ngetCredits\n()\n \n \n5\n)\n \n{\n\n            \nBranch\n.\ngetInstance\n().\nredeemRewards\n(\n5\n,\n \ncallback\n:\n \n{(\n_\n \nsuccess\n:\n \nBool\n,\n \n_\n \nerr\n:\n \nError\n?)\n \n-\n \nVoid\n \nin\n\n                \nif\n \nerr\n \n==\n \nnil\n \n{\n\n                    \nvar\n \nnewBalance\n:\n \nInt\n \n=\n \nBranch\n.\ngetInstance\n().\ngetCredits\n()\n\n                    \nvar\n \nsuccessMsg\n \n=\n \nYou redeemed 5 credits! You have \n\\(\nInt\n(\nnewBalance\n))\n remaining.\n\n                    \nUIAlertView\n(\ntitle\n:\n \nSuccess\n,\n \nmessage\n:\n \nsuccessMsg\n,\n \ndelegate\n:\n \nnil\n,\n \ncancelButtonTitle\n:\n \nOK\n,\n \notherButtonTitles\n:\n \n).\nshow\n()\n\n                \n}\n\n            \n})\n\n        \n}\n\n    \n})\n\n\n\n\n\n\n\n\n\niOS - Objective C\n\n\n[[\nBranch\n \ngetInstance\n]\n \nloadRewardsWithCallback\n:\n^\n(\nBOOL\n \nchanged\n,\n \nNSError\n \n*\nerror\n)\n \n{\n\n    \nif\n \n(\n!\nerror\n \n \n[[\nBranch\n \ngetInstance\n]\n \ngetCredits\n]\n \n \n5\n)\n \n{\n\n        \n[[\nBranch\n \ngetInstance\n]\n \nredeemRewards\n:\n5\n \ncallback\n:\n^\n(\nBOOL\n \nsuccess\n,\n \nNSError\n \n*\nerr\n)\n \n{\n\n            \nif\n \n(\n!\nerr\n)\n \n{\n\n                \nNSInteger\n \nnewBalance\n \n=\n \n[[\nBranch\n \ngetInstance\n]\n \ngetCredits\n];\n\n                \nNSString\n \n*\nsuccessMsg\n \n=\n \n[\nNSString\n \nstringWithFormat\n:\n@\nYou redeemed 5 credits! You have %ld remaining.\n,\n \n(\nlong\n)\nnewBalance\n];\n\n                \n[[[\nUIAlertView\n \nalloc\n]\n \ninitWithTitle\n:\n@\nSuccess\n \nmessage\n:\nsuccessMsg\n \ndelegate\n:\nnil\n \ncancelButtonTitle\n:\n@\nOK\n \notherButtonTitles\n:\nnil\n]\n \nshow\n];\n\n            \n}\n\n        \n}];\n\n    \n}\n\n\n}];\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nBranch\n.\ngetInstance\n().\nloadRewards\n(\nnew\n \nBranchReferralStateChangedListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonStateChanged\n(\nboolean\n \nchanged\n,\n \nBranchError\n \nerror\n)\n \n{\n\n        \nif\n \n(\nerror\n \n==\n \nnull\n \n \nBranch\n.\ngetInstance\n().\ngetCredits\n()\n \n \n5\n)\n \n{\n\n            \nBranch\n.\ngetInstance\n().\nredeemRewards\n(\n5\n);\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSample app - iOS Referral TestBed\n\nTo get a better understanding of the overall referral flow, please check out our iOS Referral TestBed app \nSource code\n.", 
            "title": "Referral programs"
        }, 
        {
            "location": "/pages/viral/referrals/#overview", 
            "text": "Branch allows you to reward users with credits, track those credits, and redeem them when appropriate. It is a unit-less currency available to your users without you having to build a system from scratch.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/viral/referrals/#guide", 
            "text": "Prequisite   You need to  integrate the Branch SDK  into your app.  You should  identify your users  on both log in and log out.  Your users should be able to  create links in your app  so we can track referred-referring relationships.    With every event that is recorded in Branch, we check automatically if that event is eligible for credits based on the rules that you configured, then deposit the credits if so. Reward rules can be based on both  automatic events and custom events .   If you identify your users  Because we do not merge identities, you  should set rewards on custom events  and  not use  the events we automatically track ( install  and  open ), and do so only  after  you have identified a user using our  identity methods . This will help avoid duplicate rewards and missing credits.", 
            "title": "Guide"
        }, 
        {
            "location": "/pages/viral/referrals/#awarding-credits", 
            "text": "Referral Fraud Protection  Branch tracks the hardware ID and IDFA of every device we detect, and ties these to our concept of a user identity. However, this means that you may run into issues if you test repeatedly with the same devices. When testing referral programs and reward rules, you should  use debug mode .   To add a rule, go to the Dashboard Referrals page and click the  Rules tab . Click the green \"+ Add a new rule\" button. Once there, you can select between two options:", 
            "title": "Awarding credits"
        }, 
        {
            "location": "/pages/viral/referrals/#give-reward", 
            "text": "You can automatically give awards based on events taken by users.  Properties you can define:   Who gets a reward  How many credits the reward is  Which  bucket  the credits go to  Whether the reward occurs the first time or every time  Which event triggers the reward    Example  Let's say you want to give 10 credits to each new user who signs up through a friend, and 5 credits to the friend who referred him or her. That can be done through a combination of two rules:", 
            "title": "Give reward"
        }, 
        {
            "location": "/pages/viral/referrals/#rule-1-rewarding-the-referred-user-10-credits", 
            "text": "Who gets a reward:  \"Referred acting users\"  How many credits the reward is:  10  Which bucket the credits go to:  default  Whether the reward occurs the first time or every time:  the first time  Which event triggers the reward:  install", 
            "title": "Rule 1: rewarding the referred user 10 credits"
        }, 
        {
            "location": "/pages/viral/referrals/#rule-2-rewarding-the-referring-user-5-credits", 
            "text": "Who gets a reward:  \"Referring users\"  How many credits the reward is:  5  Which bucket the credits go to:  default  Whether the reward occurs the first time or every time:  the first time  Which event triggers the reward:  install", 
            "title": "Rule 2: rewarding the referring user 5 credits"
        }, 
        {
            "location": "/pages/viral/referrals/#viewing-credits", 
            "text": "Once users have credits, they should be able to redeem them. Checking the balance involves loading the most recent balance from the server and then reading the balance. These can be two separate steps but for the sake of simplicity we have combined them into one example:    iOS - Swift  Branch . getInstance (). loadRewards   {   ( changed ,   error )   in \n     if   ( error   ==   nil )   { \n         let   credits   =   Branch . getInstance (). getCredits () \n         print ( credit:  \\( credits ) ) \n     }  }     iOS - Objective C  [[ Branch   getInstance ]   loadRewardsWithCallback : ^ ( BOOL   changed ,   NSError   * error )   { \n     if   ( ! error )   { \n         NSLog ( @ credit: %lu ,   [[ Branch   getInstance ]   getCredits ]); \n     }  }];     Android  Branch . getInstance ( getApplicationContext ()). loadRewards ( new   BranchReferralStateChangedListener ()   { \n     @Override \n     public   void   onStateChanged ( boolean   changed ,   Branch . BranchError   error )   { \n         // changed boolean will indicate if the balance changed from what is currently in memory \n\n         // will return the balance of the current user s credits \n         int   credits   =   branch . getCredits (); \n     }  });     If you want to see the number of credits in a custom bucket you've specified, such as  myBucket , then you can do the following:    iOS - Swift  Branch . getInstance (). loadRewards   {   ( changed ,   error )   in \n     if   ( error   ==   nil )   { \n         let   creditsForBucket   =   Branch . getInstance (). getCreditsForBucket () \n         print ( credit for bucket:  \\( creditsForBucket ) ) \n     }  }     iOS - Objective C  [[ Branch   getInstance ]   loadRewardsWithCallback : ^ ( BOOL   changed ,   NSError   * error )   { \n     if   ( ! error )   { \n         NSString   * bucket   =   @ myBucket ; \n         NSLog ( @ credit for %@ bucket: %lu ,   bucket ,   [[ Branch   getInstance ]   getCreditsForBucket : bucket ]); \n     }  }];     Android  Branch . getInstance ( getApplicationContext ()). loadRewards ( new   BranchReferralStateChangedListener ()   { \n     @Override \n     public   void   onStateChanged ( boolean   changed ,   Branch . BranchError   error )   { \n         // changed boolean will indicate if the balance changed from what is currently in memory \n\n         if   ( error   ==   null )   { \n             String   bucket   =   myBucket ; \n             Branch . getInstance ( getApplicationContext ()). getCreditsForBucket ( bucket ); \n         } \n     }  });", 
            "title": "Viewing Credits"
        }, 
        {
            "location": "/pages/viral/referrals/#redeeming-credits", 
            "text": "When users spend credits, you can make a simple call to redeem their credits.    iOS - Swift  Branch . getInstance (). redeemRewards ( 5 ,   callback :   {( success ,   error )   in \n     if   success   { \n         print ( Redeemed 5 credits! ) \n     } \n     else   { \n         print ( Failed to redeem credits:  \\( error ) ) \n     }  })     iOS - Objective C  [[ Branch   getInstance ]   redeemRewards : 5   callback : ^ ( BOOL   success ,   NSError   * error )   { \n     if   ( success )   { \n         NSLog ( @ Redeemed 5 credits! ); \n     } \n     else   { \n         NSLog ( @ Failed to redeem credits: %@ ,   error ); \n     }  }];     Android  Branch . getInstance ( getApplicationContext ()). redeemRewards ( 5 );     If you want to redeem credits in a custom bucket you've specified, such as  myBucket , then you can do the following:    iOS - Swift  Branch . getInstance (). redeemRewards ( 5 ,   forBucket :   myBucket ,   callback :   {( success ,   error )   in \n     if   success   { \n         print ( Redeemed 5 credits for myBucket! ) \n     } \n     else   { \n         print ( Failed to redeem credits:  \\( error ) ) \n     }  })     iOS - Objective C  [[ Branch   getInstance ]   redeemRewards : 5   forBucket : @ myBucket   callback : ^ ( BOOL   success ,   NSError   * error )   { \n     if   ( success )   { \n         NSLog ( @ Redeemed 5 credits for myBucket! ); \n     } \n     else   { \n         NSLog ( @ Failed to redeem credits: %@ ,   error ); \n     }  }];     Android  Branch . getInstance ( getApplicationContext ()). redeemRewards ( myBucket ,   5 )      Example redemption flow  This is a simple three-part process:   Ensure credits are loaded.  Call the  redeemRewards  method and show a progress dialog.   Show a completion dialog and reflect updates in balance.    iOS - Swift       Branch . getInstance (). loadRewards ( withCallback :   {( _   changed :   Bool ,   _   error :   Error ?)   -   Void   in \n         if   ! ( error     Branch . getInstance (). getCredits ()     5 )   { \n             Branch . getInstance (). redeemRewards ( 5 ,   callback :   {( _   success :   Bool ,   _   err :   Error ?)   -   Void   in \n                 if   err   ==   nil   { \n                     var   newBalance :   Int   =   Branch . getInstance (). getCredits () \n                     var   successMsg   =   You redeemed 5 credits! You have  \\( Int ( newBalance ))  remaining. \n                     UIAlertView ( title :   Success ,   message :   successMsg ,   delegate :   nil ,   cancelButtonTitle :   OK ,   otherButtonTitles :   ). show () \n                 } \n             }) \n         } \n     })     iOS - Objective C  [[ Branch   getInstance ]   loadRewardsWithCallback : ^ ( BOOL   changed ,   NSError   * error )   { \n     if   ( ! error     [[ Branch   getInstance ]   getCredits ]     5 )   { \n         [[ Branch   getInstance ]   redeemRewards : 5   callback : ^ ( BOOL   success ,   NSError   * err )   { \n             if   ( ! err )   { \n                 NSInteger   newBalance   =   [[ Branch   getInstance ]   getCredits ]; \n                 NSString   * successMsg   =   [ NSString   stringWithFormat : @ You redeemed 5 credits! You have %ld remaining. ,   ( long ) newBalance ]; \n                 [[[ UIAlertView   alloc ]   initWithTitle : @ Success   message : successMsg   delegate : nil   cancelButtonTitle : @ OK   otherButtonTitles : nil ]   show ]; \n             } \n         }]; \n     }  }];     Android  Branch . getInstance (). loadRewards ( new   BranchReferralStateChangedListener ()   { \n     @Override \n     public   void   onStateChanged ( boolean   changed ,   BranchError   error )   { \n         if   ( error   ==   null     Branch . getInstance (). getCredits ()     5 )   { \n             Branch . getInstance (). redeemRewards ( 5 ); \n         } \n     }  });", 
            "title": "Redeeming Credits"
        }, 
        {
            "location": "/pages/viral/referrals/#sample-app-ios-referral-testbed", 
            "text": "To get a better understanding of the overall referral flow, please check out our iOS Referral TestBed app  Source code .", 
            "title": "Sample app - iOS Referral TestBed"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/", 
            "text": "Overview\n\n\nAt the 2017 Google IO, Google launched the public version of Instant Apps for developers to adopt and build on. Instant Apps are a way to load a partial section (or \nsplit\n as Google refers to them), without the user having to visit the Play Store and install your app. In effect, it's instant access to your native app. If you have been using a website as a fallback when your full Android app is not installed, an Instant App is an alternative. You'll have to choose between mobile web and your Instant App on Android so make sure you plan out your integration!\n\n\nBranch has made it incredibly easy to start using your basic Branch links in your Instant Apps as shown below. The guide on this page will walk you through the full configuration process to enable Branch in your new Instant App.\n\n\n\n\n\n\nNote\n\n\nThis guide is not about how to configure your Android app to be an Instant App. Please see \nGoogle's documentation for detailed instructions\n on how to do this. Come back to this guide when you're ready to enable Branch.\n\n\n\n\nWhy use Branch for your Instant Apps\n\n\nIf you follow Google's guide, they'll have you integrate your own web links as Android App Links, that will trigger Instant Apps. What can Branch do for you then? First off, let me explain how Branch works with Instant Apps. Branch will act as a \nnew\n web domain that you'll register for Android App Links in addition to your own web domain or as your only domain in the manifest. We act as your link.\n\n\nHere's a list of the potential use cases for Branch links and Instant Apps:\n\n\n\n\nBranch will host personalized web links for you since we provision a custom domain (yourapp.app.link or whitelabeled) for every app. If you don't have a website, this means that we can take care of all your Android App Links needs, automatically configuring and hosting the assetlinks.json file on your behalf.\n\n\nIf you have a popular website and have configured Android App Links, you likely don't want 100% of your web links triggering your Instant App. Your Instant App will only support a fraction of your full app functionality. You can configure your Instant App to only trigger on your Branch link domains and paths, then use the usage of Branch to control when users are linked to Instant Apps.\n\n\nBranch can measure and attribute \nclicks\n, \ninstalls\n and custom conversion events back to the Branch tracking link for \nall visits to your Instant App\n, which are visible on the dashboard.\n\n\nYou can use Branch links to deferred deep link from the Android Instant App to the full Android App. You'll likely build a feature that pushes users from the Instant App to the full Android app, and Branch can do its magic on this transition.\n\n\nBranch can measure and attribute \nclicks\n, \ninstalls\n and custom conversion events inside your full native Android App for users who were referred from an Instant App, showing the conversion from click -\n Instant App -\n Full App on the dashboard.\n\n\n\n\nSetup\n\n\nIntegrating Branch for your Instant App\n\n\nSo you're convinced. Let's get started! If at any time, you need a real example, you can check out a \nfull demo application\n on our Github. We've replicated our \noriginal Android demo application\n and modified it to support Android Instant Apps.\n\n\nInitialize the Branch SDK\n\n\nHead to your \ncore library project\n, where your Application class is defined and drop in the snippet of code to the onCreate() method as follows. If you plan on deep linking from your Android Instant App to your full Android app after its installed, you'll need to add the line \nenablePlayStoreReferrer\n. This adds a delay to the initialization to wait for the Google Play Referrer, which can take up to a second.\n\n\npublic\n \nvoid\n \nonCreate\n()\n \n{\n\n  \nsuper\n.\nonCreate\n();\n\n  \n// This is needed to deferred deep link from an Android Instant App to a full app\n\n  \n// It tells the Branch initialization to wait for the Google Play Referrer before proceeding.\n\n  \nBranch\n.\nenablePlayStoreReferrer\n(\n1000L\n);\n\n\n  \n// Initialize the Branch SDK\n\n  \nBranch\n.\ngetAutoInstance\n(\nthis\n);\n\n\n}\n\n\n\n\n\nAdd your Branch keys and register for Install Referrer\n\n\nInstant Apps can be rather confusing as there are many different manifests, but you want to find the Manifest that contains your \napplication\n tags. Make sure your Application class name is defined here, and then specify the Branch keys \ninside\n the \napplication\n element.\n\n\napplication\n\n        \nandroid:allowBackup=\ntrue\n\n        \nandroid:label=\n@string/app_name\n\n        \nandroid:theme=\n@style/AppTheme\n\n        \nandroid:supportsRtl=\ntrue\n\n        \nandroid:name=\n.MyApplication\n\n\n  \nmeta-data\n \nandroid:name=\nio.branch.sdk.TestMode\n \nandroid:value=\nfalse\n \n/\n \n!-- Set to true to use Branch_Test_Key --\n\n  \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey\n \nandroid:value=\nkey_live_my_live_key\n \n/\n\n  \nmeta-data\n \nandroid:name=\nio.branch.sdk.BranchKey.test\n \nandroid:value=\nkey_test_my_test_key\n \n/\n\n\n  \nreceiver\n \nandroid:name=\nio.branch.referral.InstallListener\n \nandroid:exported=\ntrue\n\n    \nintent-filter\n\n       \naction\n \nandroid:name=\ncom.android.vending.INSTALL_REFERRER\n \n/\n\n    \n/intent-filter\n\n  \n/receiver\n\n\n/application\n\n\n\n\n\nConfigure your Branch links as Android App Links\n\n\nThis guide presumes that you've already configured Branch for Android App Links in the past. If you haven't configured your full native app to use Branch as Android App Links, \nplease complete this guide\n which will correctly configure the dashboard and manifest.\n\n\nNow, you simply need to edit the above manifest and paste in the following snippet \ninside\n the desired \nactivity.\n Then you'll need to replace the \nxxxx\n with your own custom subdomain which will be visible on \nthe Branch link settings dashboard\n at the bottom of the page. If you're using a custom subdomain, you can find the advanced instructions in the above link regarding configuring Android App Links.\n\n\napplication\n\n  \n......\n\n\n\nactivity...\n\n  \nintent-filter\n \nandroid:autoVerify=\ntrue\n\n      \naction\n \nandroid:name=\nandroid.intent.action.VIEW\n \n/\n\n      \ncategory\n \nandroid:name=\nandroid.intent.category.DEFAULT\n \n/\n\n      \ncategory\n \nandroid:name=\nandroid.intent.category.BROWSABLE\n \n/\n\n      \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nxxxx.app.link\n \n/\n\n      \ndata\n \nandroid:scheme=\nhttps\n \nandroid:host=\nxxxx-alternate.app.link\n \n/\n\n  \n/intent-filter\n\n\n/activity\n\n\n\n/application\n\n\n\n\n\nRetrieve Branch deep link data\n\n\nAdd Branch initSession in Activities which are configured to open from a link click in order to receive the deep link params. This will return the deep link data from the referring link.\n\n\nprotected\n \nvoid\n \nonStart\n()\n \n{\n\n    \nsuper\n.\nonStart\n();\n\n    \nBranch\n.\ngetInstance\n().\ninitSession\n(\nnew\n \nBranch\n.\nBranchReferralInitListener\n()\n \n{\n\n        \n@Override\n\n        \npublic\n \nvoid\n \nonInitFinished\n(\nJSONObject\n \nreferringParams\n,\n \nBranchError\n \nerror\n)\n \n{\n\n            \nLog\n.\nd\n(\nBranch\n,\n \nonInitFinished() with deep link data: \n \n+\n \nreferringParams\n);\n\n        \n}\n\n    \n});\n\n\n}\n\n\n\n\n\nConfigure the deep linking from Instant App to your Full App\n\n\nNow, the user has arrived in your Instant App and you're ready to convert them to install your full native app. Don't worry, Branch as got your covered! We have overridden the default \nshowInstallPrompt\n with a method that auto configures the Google Play prompt with all of the deep link data you need to carry context through install. Additionally, we can provide you the full set of attribution on how many users convert through this prompt.\n\n\nBranch SDK provides convenient methods to check for app types and full app conversion. This eliminates the dependency on Google IA support SDK ('com.google.android.instantapp'). Here are some of the methods that makes life easy\n\n\n\n\nBranch#isInstantApp()\n\n\n\n\nThis convenience methods checks whether the current version of app running is Instant App or Full Android App to allow you convenience\n\n\n\n\nBranch#showInstallPrompt()\n\n\n\n\nThis methods shows an install prompt for the full Android app, allowing you an easy way to pass Branch referring deep data to the full app through the install process. Similar to how deferred deep linking works for Branch normally, the full app will receive the deep link params in the handle callback.\n\n\nThe below example shows how to create a custom Branch Universal Object, the associate it with the installation prompt that will be passed through to your full native Android app after the user installs.\n\n\nif\n \n(\nBranch\n.\nisInstantApp\n(\nthis\n))\n \n{\n\n  \nmyFullAppInstallButton\n.\nsetVisibility\n(\nView\n.\nVISIBLE\n);\n\n  \nmyFullAppInstallButton\n.\nsetOnClickListener\n(\nnew\n \nOnClickListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonClick\n(\nView\n \nv\n)\n \n{\n\n       \nBranchUniversalObject\n \nbranchUniversalObject\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n            \n.\nsetCanonicalIdentifier\n(\nitem/12345\n)\n\n            \n.\nsetTitle\n(\nMy Content Title\n)\n\n            \n.\nsetContentDescription\n(\nMy Content Description\n)\n\n            \n.\nsetContentImageUrl\n(\nhttps://example.com/mycontent-12345.png\n)\n\n            \n.\naddContentMetadata\n(\nproperty1\n,\n \nblue\n)\n\n            \n.\naddContentMetadata\n(\nproperty2\n,\n \nred\n);\n\n\n      \nBranch\n.\nshowInstallPrompt\n(\nmyActivity\n,\n \nactivity_ret_code\n,\n \nbranchUniversalObject\n);\n\n    \n}\n\n  \n});\n\n\n}\n \nelse\n \n{\n\n  \nmyFullAppInstallButton\n.\nsetVisibility\n(\nView\n.\nGONE\n);\n\n\n}\n\n\n\n\n\nTroubleshooting\n\n\nTest Instant Apps\n\n\nYou can create Branch links in a variety of ways, but to quickly test your Branch integration, head to the \nquick links section\n on our dashboard and create a link. If you configured deep linking via a specific key in the deep link data, make sure that you add it to your quick link to properly simulate a real live Branch link.", 
            "title": "Android Instant Apps"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#overview", 
            "text": "At the 2017 Google IO, Google launched the public version of Instant Apps for developers to adopt and build on. Instant Apps are a way to load a partial section (or  split  as Google refers to them), without the user having to visit the Play Store and install your app. In effect, it's instant access to your native app. If you have been using a website as a fallback when your full Android app is not installed, an Instant App is an alternative. You'll have to choose between mobile web and your Instant App on Android so make sure you plan out your integration!  Branch has made it incredibly easy to start using your basic Branch links in your Instant Apps as shown below. The guide on this page will walk you through the full configuration process to enable Branch in your new Instant App.    Note  This guide is not about how to configure your Android app to be an Instant App. Please see  Google's documentation for detailed instructions  on how to do this. Come back to this guide when you're ready to enable Branch.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#why-use-branch-for-your-instant-apps", 
            "text": "If you follow Google's guide, they'll have you integrate your own web links as Android App Links, that will trigger Instant Apps. What can Branch do for you then? First off, let me explain how Branch works with Instant Apps. Branch will act as a  new  web domain that you'll register for Android App Links in addition to your own web domain or as your only domain in the manifest. We act as your link.  Here's a list of the potential use cases for Branch links and Instant Apps:   Branch will host personalized web links for you since we provision a custom domain (yourapp.app.link or whitelabeled) for every app. If you don't have a website, this means that we can take care of all your Android App Links needs, automatically configuring and hosting the assetlinks.json file on your behalf.  If you have a popular website and have configured Android App Links, you likely don't want 100% of your web links triggering your Instant App. Your Instant App will only support a fraction of your full app functionality. You can configure your Instant App to only trigger on your Branch link domains and paths, then use the usage of Branch to control when users are linked to Instant Apps.  Branch can measure and attribute  clicks ,  installs  and custom conversion events back to the Branch tracking link for  all visits to your Instant App , which are visible on the dashboard.  You can use Branch links to deferred deep link from the Android Instant App to the full Android App. You'll likely build a feature that pushes users from the Instant App to the full Android app, and Branch can do its magic on this transition.  Branch can measure and attribute  clicks ,  installs  and custom conversion events inside your full native Android App for users who were referred from an Instant App, showing the conversion from click -  Instant App -  Full App on the dashboard.", 
            "title": "Why use Branch for your Instant Apps"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#integrating-branch-for-your-instant-app", 
            "text": "So you're convinced. Let's get started! If at any time, you need a real example, you can check out a  full demo application  on our Github. We've replicated our  original Android demo application  and modified it to support Android Instant Apps.", 
            "title": "Integrating Branch for your Instant App"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#initialize-the-branch-sdk", 
            "text": "Head to your  core library project , where your Application class is defined and drop in the snippet of code to the onCreate() method as follows. If you plan on deep linking from your Android Instant App to your full Android app after its installed, you'll need to add the line  enablePlayStoreReferrer . This adds a delay to the initialization to wait for the Google Play Referrer, which can take up to a second.  public   void   onCreate ()   { \n   super . onCreate (); \n   // This is needed to deferred deep link from an Android Instant App to a full app \n   // It tells the Branch initialization to wait for the Google Play Referrer before proceeding. \n   Branch . enablePlayStoreReferrer ( 1000L ); \n\n   // Initialize the Branch SDK \n   Branch . getAutoInstance ( this );  }", 
            "title": "Initialize the Branch SDK"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#add-your-branch-keys-and-register-for-install-referrer", 
            "text": "Instant Apps can be rather confusing as there are many different manifests, but you want to find the Manifest that contains your  application  tags. Make sure your Application class name is defined here, and then specify the Branch keys  inside  the  application  element.  application \n         android:allowBackup= true \n         android:label= @string/app_name \n         android:theme= @style/AppTheme \n         android:supportsRtl= true \n         android:name= .MyApplication \n\n   meta-data   android:name= io.branch.sdk.TestMode   android:value= false   /   !-- Set to true to use Branch_Test_Key -- \n   meta-data   android:name= io.branch.sdk.BranchKey   android:value= key_live_my_live_key   / \n   meta-data   android:name= io.branch.sdk.BranchKey.test   android:value= key_test_my_test_key   / \n\n   receiver   android:name= io.branch.referral.InstallListener   android:exported= true \n     intent-filter \n        action   android:name= com.android.vending.INSTALL_REFERRER   / \n     /intent-filter \n   /receiver  /application", 
            "title": "Add your Branch keys and register for Install Referrer"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#configure-your-branch-links-as-android-app-links", 
            "text": "This guide presumes that you've already configured Branch for Android App Links in the past. If you haven't configured your full native app to use Branch as Android App Links,  please complete this guide  which will correctly configure the dashboard and manifest.  Now, you simply need to edit the above manifest and paste in the following snippet  inside  the desired  activity.  Then you'll need to replace the  xxxx  with your own custom subdomain which will be visible on  the Branch link settings dashboard  at the bottom of the page. If you're using a custom subdomain, you can find the advanced instructions in the above link regarding configuring Android App Links.  application \n   ......  activity... \n   intent-filter   android:autoVerify= true \n       action   android:name= android.intent.action.VIEW   / \n       category   android:name= android.intent.category.DEFAULT   / \n       category   android:name= android.intent.category.BROWSABLE   / \n       data   android:scheme= https   android:host= xxxx.app.link   / \n       data   android:scheme= https   android:host= xxxx-alternate.app.link   / \n   /intent-filter  /activity  /application", 
            "title": "Configure your Branch links as Android App Links"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#retrieve-branch-deep-link-data", 
            "text": "Add Branch initSession in Activities which are configured to open from a link click in order to receive the deep link params. This will return the deep link data from the referring link.  protected   void   onStart ()   { \n     super . onStart (); \n     Branch . getInstance (). initSession ( new   Branch . BranchReferralInitListener ()   { \n         @Override \n         public   void   onInitFinished ( JSONObject   referringParams ,   BranchError   error )   { \n             Log . d ( Branch ,   onInitFinished() with deep link data:    +   referringParams ); \n         } \n     });  }", 
            "title": "Retrieve Branch deep link data"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#configure-the-deep-linking-from-instant-app-to-your-full-app", 
            "text": "Now, the user has arrived in your Instant App and you're ready to convert them to install your full native app. Don't worry, Branch as got your covered! We have overridden the default  showInstallPrompt  with a method that auto configures the Google Play prompt with all of the deep link data you need to carry context through install. Additionally, we can provide you the full set of attribution on how many users convert through this prompt.  Branch SDK provides convenient methods to check for app types and full app conversion. This eliminates the dependency on Google IA support SDK ('com.google.android.instantapp'). Here are some of the methods that makes life easy   Branch#isInstantApp()   This convenience methods checks whether the current version of app running is Instant App or Full Android App to allow you convenience   Branch#showInstallPrompt()   This methods shows an install prompt for the full Android app, allowing you an easy way to pass Branch referring deep data to the full app through the install process. Similar to how deferred deep linking works for Branch normally, the full app will receive the deep link params in the handle callback.  The below example shows how to create a custom Branch Universal Object, the associate it with the installation prompt that will be passed through to your full native Android app after the user installs.  if   ( Branch . isInstantApp ( this ))   { \n   myFullAppInstallButton . setVisibility ( View . VISIBLE ); \n   myFullAppInstallButton . setOnClickListener ( new   OnClickListener ()   { \n     @Override \n     public   void   onClick ( View   v )   { \n        BranchUniversalObject   branchUniversalObject   =   new   BranchUniversalObject () \n             . setCanonicalIdentifier ( item/12345 ) \n             . setTitle ( My Content Title ) \n             . setContentDescription ( My Content Description ) \n             . setContentImageUrl ( https://example.com/mycontent-12345.png ) \n             . addContentMetadata ( property1 ,   blue ) \n             . addContentMetadata ( property2 ,   red ); \n\n       Branch . showInstallPrompt ( myActivity ,   activity_ret_code ,   branchUniversalObject ); \n     } \n   });  }   else   { \n   myFullAppInstallButton . setVisibility ( View . GONE );  }", 
            "title": "Configure the deep linking from Instant App to your Full App"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/app-to-app/android-instant-apps/#test-instant-apps", 
            "text": "You can create Branch links in a variety of ways, but to quickly test your Branch integration, head to the  quick links section  on our dashboard and create a link. If you configured deep linking via a specific key in the deep link data, make sure that you add it to your quick link to properly simulate a real live Branch link.", 
            "title": "Test Instant Apps"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/", 
            "text": "Overview\n\n\nWith iOS 10, Branch has \nadded support\n for extension type apps so that you can bundle the SDK into your iMessage app. Apple didn't build full deep linking support into extension apps, so unfortunately the use cases are limited to driving new installs for now. We'll wait patiently to observe updates over time\n\n\niMessage apps are now completely separate from your main App Store app, and should be treated as such. Thus, there is some common confusion that we wanted to clear up regarding how to use Branch with your iMessage app. Here's a list of best practices to ensure your integration is successful.\n\n\nSetup\n\n\nBest practices\n\n\nCreate a separate Branch app for the messages app\n\n\nWe highly recommend that you create a \nseparate\n Branch app via the dashboard for your iMessage app than your full iOS app. Why? Because there's no technical way to handle deep link routing elegantly between your core app and the messages app. Apple has not built support for this use case.\n\n\nConfigure one Branch app's settings to link to your messages app in the iMessage App Store, then configure another Branch app settings to link to your core app in the main App Store. This means you'll integrate the SDK into your messages app with a different Branch key than your main app.\n\n\nOnly use Branch for driving installs of messages apps\n\n\nApple did not build support for the use case where a user clicks a link and the messages app opens. Therefore, Branch cannot open up the existing, pre-installed messages app. Branch can only link to the messages app in the iMessage App Store, even when it's already installed.\n\n\nBecause of this, you should primarily use Branch for tracking installs and deep linking through install. Don't expect a high quality user experience if the app is already installed.\n\n\nMarket your messages app separately from your main app\n\n\nBecause there's no good way to intelligently route to the main App Store, iMessages App Store and existing app depending on the context, we recommend you market your messages app with different links from your main App Store app. So, message to a user you're going to link them to your messages app differently than when you're linking to the App Store app.\n\n\nConfiguring redirects\n\n\nIntroductory concept on messages redirects\n\n\nIf you've read the above, you know that the iMessage App Store is a completely different store than the main App Store. In order to link users to your app in the iMessage App Store, you simply need to append \n?app=messages\n to the link. You can try this on any iOS 10 phone with the links below:\n\n\n\n\niMessages App Store: \nhttps://itunes.apple.com/us/app/classic-mac/id1127542169?app=messages\n\n\nMain App Store: \nhttps://itunes.apple.com/us/app/classic-mac/id1127542169\n\n\n\n\nConfigure your Branch links\n\n\nFirst, create an entirely new app via the \nBranch dashboard\n. You can do this in the pull down selector that shows your app name in the top right section. Then head to the \nlink settings page\n and scroll to the iOS section to configure it as follows:\n\n\n\n\nEnsure you do the following:\n\n\n\n\nUncheck \u201cI have an iOS App\u201d\n\n\nDisable Universal Links\n\n\nPaste the App Store URL with \n?app=messages\n appended into the URL field\n\n\nClick Save\n\n\n\n\nYou're all set! All of your Branch links will correctly link to the iMessages App Store.\n\n\nTroubleshooting\n\n\nTracking installs\n\n\nTo track installs and personalize the first time user experience, you simply need to follow the instructions in the \nSDK integration guide\n for iMessage apps. You'll integrate the SDK just as you have for your main App Store app.", 
            "title": "iMessage Apps"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#overview", 
            "text": "With iOS 10, Branch has  added support  for extension type apps so that you can bundle the SDK into your iMessage app. Apple didn't build full deep linking support into extension apps, so unfortunately the use cases are limited to driving new installs for now. We'll wait patiently to observe updates over time  iMessage apps are now completely separate from your main App Store app, and should be treated as such. Thus, there is some common confusion that we wanted to clear up regarding how to use Branch with your iMessage app. Here's a list of best practices to ensure your integration is successful.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#best-practices", 
            "text": "", 
            "title": "Best practices"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#create-a-separate-branch-app-for-the-messages-app", 
            "text": "We highly recommend that you create a  separate  Branch app via the dashboard for your iMessage app than your full iOS app. Why? Because there's no technical way to handle deep link routing elegantly between your core app and the messages app. Apple has not built support for this use case.  Configure one Branch app's settings to link to your messages app in the iMessage App Store, then configure another Branch app settings to link to your core app in the main App Store. This means you'll integrate the SDK into your messages app with a different Branch key than your main app.", 
            "title": "Create a separate Branch app for the messages app"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#only-use-branch-for-driving-installs-of-messages-apps", 
            "text": "Apple did not build support for the use case where a user clicks a link and the messages app opens. Therefore, Branch cannot open up the existing, pre-installed messages app. Branch can only link to the messages app in the iMessage App Store, even when it's already installed.  Because of this, you should primarily use Branch for tracking installs and deep linking through install. Don't expect a high quality user experience if the app is already installed.", 
            "title": "Only use Branch for driving installs of messages apps"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#market-your-messages-app-separately-from-your-main-app", 
            "text": "Because there's no good way to intelligently route to the main App Store, iMessages App Store and existing app depending on the context, we recommend you market your messages app with different links from your main App Store app. So, message to a user you're going to link them to your messages app differently than when you're linking to the App Store app.", 
            "title": "Market your messages app separately from your main app"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#configuring-redirects", 
            "text": "", 
            "title": "Configuring redirects"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#introductory-concept-on-messages-redirects", 
            "text": "If you've read the above, you know that the iMessage App Store is a completely different store than the main App Store. In order to link users to your app in the iMessage App Store, you simply need to append  ?app=messages  to the link. You can try this on any iOS 10 phone with the links below:   iMessages App Store:  https://itunes.apple.com/us/app/classic-mac/id1127542169?app=messages  Main App Store:  https://itunes.apple.com/us/app/classic-mac/id1127542169", 
            "title": "Introductory concept on messages redirects"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#configure-your-branch-links", 
            "text": "First, create an entirely new app via the  Branch dashboard . You can do this in the pull down selector that shows your app name in the top right section. Then head to the  link settings page  and scroll to the iOS section to configure it as follows:   Ensure you do the following:   Uncheck \u201cI have an iOS App\u201d  Disable Universal Links  Paste the App Store URL with  ?app=messages  appended into the URL field  Click Save   You're all set! All of your Branch links will correctly link to the iMessages App Store.", 
            "title": "Configure your Branch links"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/app-to-app/imessage-apps/#tracking-installs", 
            "text": "To track installs and personalize the first time user experience, you simply need to follow the instructions in the  SDK integration guide  for iMessage apps. You'll integrate the SDK just as you have for your main App Store app.", 
            "title": "Tracking installs"
        }, 
        {
            "location": "/pages/exports/data-feeds/", 
            "text": "Overview\n\n\nData Feeds is Branch\u2019s premium suite of tools for exporting data. If you want to export your Branch data programmatically or send your data to other analytics services, Data Feeds can help. It includes the following tools:\n\n\n\n\nData Integrations:\n pre-built integrations with other analytics services and marketing tools. Just input your credentials and Branch will automatically send your data to any of our integrated partners.\n\n\nWebhooks:\n fully customizable templated webhooks that send Branch data to the endpoint of your choice in near-real time.\n\n\nData Export API:\n an API that will allow you to pull CSV files containing all of your Branch data from the past week.\n\n\nQuery API:\n an API for querying for any of the pre-aggregated Branch event data that you can see on the dashboard.\n\n\n\n\nAll exports via Data Feeds are powered by Branch's \nPeople-Based Attribution\n. For an exhaustive list of events included in these exports and more detailed definitions of each event, please see the \nEvent Ontology Data Schema\n.\n\n\n\n\nData Feeds is a premium solution\n\n\nData Feeds can be purchased according to Branch\u2019s \npricing schedule\n, and is available at no additional charge to customers who are on MAU plans for \nJourneys\n, \nDeep Linked Email\n, or \nUniversal Ads\n. Without Data Feeds, you can still export Branch data in CSV form directly from the Branch dashboard via \nSources\n or \nCSV Exports\n.", 
            "title": "Get Started"
        }, 
        {
            "location": "/pages/exports/data-feeds/#overview", 
            "text": "Data Feeds is Branch\u2019s premium suite of tools for exporting data. If you want to export your Branch data programmatically or send your data to other analytics services, Data Feeds can help. It includes the following tools:   Data Integrations:  pre-built integrations with other analytics services and marketing tools. Just input your credentials and Branch will automatically send your data to any of our integrated partners.  Webhooks:  fully customizable templated webhooks that send Branch data to the endpoint of your choice in near-real time.  Data Export API:  an API that will allow you to pull CSV files containing all of your Branch data from the past week.  Query API:  an API for querying for any of the pre-aggregated Branch event data that you can see on the dashboard.   All exports via Data Feeds are powered by Branch's  People-Based Attribution . For an exhaustive list of events included in these exports and more detailed definitions of each event, please see the  Event Ontology Data Schema .   Data Feeds is a premium solution  Data Feeds can be purchased according to Branch\u2019s  pricing schedule , and is available at no additional charge to customers who are on MAU plans for  Journeys ,  Deep Linked Email , or  Universal Ads . Without Data Feeds, you can still export Branch data in CSV form directly from the Branch dashboard via  Sources  or  CSV Exports .", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/data-integrations/", 
            "text": "Overview\n\n\nData Integrations provide an easy way to automatically send Branch data to your other analytics services and marketing tools using pre-formatted webhooks. For most integrations, configuration just requires you to input your credentials and hit \u201cEnable\u201d.\n\n\nWe currently integrate with the following partners:\n\n\n\n\nAdobe Analytics\n\n\nAdjust\n\n\nAmplitude\n\n\nAppMetrica\n\n\nAppsflyer\n\n\nBraze\n\n\nCleverTap\n\n\nConvertro\n\n\nFabric Answers\n\n\nGoogle Analytics\n\n\nKochava\n\n\nLocalytics\n\n\nMixpanel\n\n\nmParticle\n\n\nSegment\n\n\nTune\n\n\n\n\n\n\nData Feeds is a premium solution\n\n\nData Integrations are included in Branch\u2019s \nData Feeds\n offering, which can be purchased according to Branch\u2019s \npricing schedule\n, and is available at no additional charge to customers who are on MAU plans for \nJourneys\n, \nDeep Linked Email\n, or \nUniversal Ads\n. Without Data Feeds, you can still export Branch data in CSV form directly from the Branch dashboard via \nSources\n or \nCSV Exports\n.", 
            "title": "Get Started"
        }, 
        {
            "location": "/pages/integrations/data-integrations/#overview", 
            "text": "Data Integrations provide an easy way to automatically send Branch data to your other analytics services and marketing tools using pre-formatted webhooks. For most integrations, configuration just requires you to input your credentials and hit \u201cEnable\u201d.  We currently integrate with the following partners:   Adobe Analytics  Adjust  Amplitude  AppMetrica  Appsflyer  Braze  CleverTap  Convertro  Fabric Answers  Google Analytics  Kochava  Localytics  Mixpanel  mParticle  Segment  Tune    Data Feeds is a premium solution  Data Integrations are included in Branch\u2019s  Data Feeds  offering, which can be purchased according to Branch\u2019s  pricing schedule , and is available at no additional charge to customers who are on MAU plans for  Journeys ,  Deep Linked Email , or  Universal Ads . Without Data Feeds, you can still export Branch data in CSV form directly from the Branch dashboard via  Sources  or  CSV Exports .", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/", 
            "text": "Overview\n\n\nWith a push of a button you can send your Branch data to your Adobe Analytics dashboard, helping you understand the power of Branch as an acquisition pathway.\n\n\nHow does it work?\n\n\nOnce the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your Adobe Analytics Information will result in Branch automatically forwarding referred events to Adobe Analytics through a server to server integration.\n\n\nWhat events does Branch send?\n\n\nBranch will send \nreferred\n \ninstalls\n and \nopens\n, as well as any \ncustom events\n you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends all the analytics tags that are attached to the link that drove the referred event. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users.\n\n\nWhat does it look like?\n\n\nBranch events will appear on the Adobe Analytics dashboard through \nReports \n Custom Conversion \n Branch eVar\n. Note, this will automatically appear once the Branch Data Connector is enabled through the Adobe Analytics dashboard.\n\n\nYou'll have the flexibility to analyze data as needed in the Adobe Analytics platform, as the data Branch sends maps in Adobe Analytics to a top level eVar. This eVar contains campaign, channel, target, event name, and action property, which are your analytics tags.\n\n\n\n\nBranch events are similar to Adobe Analytics events in that they can be used to build custom reports and are tracked on the various pages and dashboards. However, unlike normal events, Branch events contain valuable information about how users ended up in your app in the first place.\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have integrated the Branch SDK in your mobile apps.\n\n\nYou also need to be a Adobe Analytics customer and have the Adobe Analytics SDK integrated.\n\n\n\n\nActivate the Branch Data Connector\n\n\nIn your Adobe Analytics dashboard, under the \nAdmin\n tab, find \nData Connectors\n.\n\n\n\n\nClick \n+Add New\n, search for \"Branch,\" and click \nActivate\n.\n\n\n\n\nConfigure the Branch Data Connector\n\n\nIntegration Settings\n\n\nThese are automatically configured when you activate the Data Connector.\n\n\nVariable Mappings\n\n\nMap your Branch events to your chosen eVar. In the example below, it will be mapped to \nCustom eVar 1\n, renamed to the SiteCatalyst metric \nBranch\n.\n\n\n\n\nData Settings\n\n\nBranch has provided a default classification rule set for the Branch data that will be ingested. This maps Branch analytics data to Adobe classifications as follows. You can change this classification rule set if you would like to, but editing is not required. We also include Branch tags so you can create a new rule that further segments your analytics data for advanced visibility.\n\n\n\n\n\n\n\n\nAdobe Classification\n\n\nBranch Analytics Tag\n\n\n\n\n\n\n\n\n\n\nSource\n\n\nChannel\n\n\n\n\n\n\nCampaign\n\n\nCampaign\n\n\n\n\n\n\nMedium\n\n\nFeature\n\n\n\n\n\n\nAction\n\n\nBranch Event Name\n\n\n\n\n\n\nAction Property\n\n\nBranch Tags\n\n\n\n\n\n\n\n\n\n\nReview Summary\n\n\nFinally, review the integration, scroll to the bottom of the screen and click \nActivate Now\n to enable the integration.\n\n\n\n\nConfigure the Branch Dashboard\n\n\nRetrieve your Adobe Analytics Information\n\n\nBefore navigating to Branch, in your Adobe Analytics dashboard, navigate to the Mobile Marketing UI and find your app.\n\n\nUnder Manage App Setting -\n SDK Analytics Options, find the following data\n\n\n\n\n\n\n\n\nBranch field\n\n\nAdobe field value\n\n\n\n\n\n\n\n\n\n\nProtocol\n\n\nUse HTTPS Check Box (if checked, select HTTPS)\n\n\n\n\n\n\nAnalytics Server Domain\n\n\nTracking Server\n\n\n\n\n\n\nOmniture iOS/Android Server Key\n\n\nReport Suite ID for that app\n\n\n\n\n\n\nTimestamp\n\n\nOffline Tracking\n\n\n\n\n\n\n\n\nFor \nAnalytics Server Domain\n, please do not include \nhttp\n or \nhttps\n. If your value for this is \nhttp://test.com\n, simply put in \ntest.com\n. This means no extra slashes, and no protocol.\n\n\nEnter Adobe Analytics Information\n\n\n\n\nOn the Branch Dashboard (dashboard.branch.io), navigate to the \nIntegrations page\n.\n\n\nLocate Adobe Analytics and choose \nEnable\n.\n\n\nIf you have not yet entered billing information, please do so now.\n\n\nEnter your Adobe Analytics information and hit \nSave\n.\n\n\n\n\nPass Adobe Visitor ID\n\n\nWhen you're ready to send data through Branch, you'll need to make sure you pass through the configured Adobe Visitor ID through the Branch SDKs. In order to do so, figure out which ID you use for user tracking in the Adobe SDK by asking your Adobe Consultant, and pass this value through \nsetRequestMetadataKey\n on the Branch SDKs.\n\n\nThere are three possible identities you can track via this integration. Please verify which ID you use, and send that. For example, if your Adobe integration uses Marketing Cloud Visitor ID, retrieve it from the Adobe SDK, and pass in a key value pair, with the key being \n$marketing_cloud_visitor_id\n. The value would be the value retrieved through the Adobe SDK. \n\n\n\n\nMarketing Cloud Visitor ID - \n$marketing_cloud_visitor_id\n \nsent to Adobe as \nmid\n\n\nAnalytics Visitor ID - \n$adobe_visitor_id\n \nsent to Adobe as \naid\n\n\nAnalytics Custom Visitor ID - \n$analytics_visitor_id\n \nsent to Adobe as \nvid\n\n\n\n\nHere's a sample snippet showing this. \nNOTE\n you must set the correct key before calling \ninitSession\n. These examples use \n$adobe_visitor_id\n but you should use the appropriate key per the suggestions above. You must also initialize the Adobe SDK before setting the request metadata in the Branch SDK. \n\n\nObjective-C\n\n\nInside \ndidFinishLaunchingWithOptions\n\n\nBranch\n \n*\nbranch\n \n=\n \n[\nBranch\n \ngetInstance\n];\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetRequestMetadataKey\n:\n@\n$adobe_visitor_id\n \nvalue\n:[\nADBMobile\n \ntrackingIdentifier\n]];\n\n\n\n\n\nSwift\n\n\nInside \ndidFinishLaunchingWithOptions\n\n\nif\n \nlet\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n()\n \n{\n\n    \nbranch\n.\nsetRequestMetadataKey\n(\n$adobe_visitor_id\n,\n \nvalue\n:\nADBMobile\n.\ntrackingIdentifier\n()\n \nas\n \nNSObject\n!);\n\n\n}\n\n\n\n\n\nAndroid\n\n\nBefore you initialize in your Application#onCreate or Deep Link Activity's #onCreate.\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n();\n\n\nbranch\n.\nsetRequestMetadata\n(\n$adobe_visitor_id\n,\n \nAnalytics\n.\ngetTrackingIdentifier\n());\n\n\n\n...\n\n\n\nBranch\n.\ninitSession\n(...);\n\n\n\n\n\nAdvanced\n\n\nWhat Branch Sends to Adobe Analytics\n\n\nBranch sends the following values from Branch link data in the Adobe Context Data:\n\n\n\n\n\n\n\n\nAdobe Classification\n\n\nBranch Analytics Tag\n\n\n\n\n\n\n\n\n\n\nSource\n\n\nChannel\n\n\n\n\n\n\nCampaign\n\n\nCampaign\n\n\n\n\n\n\nMedium\n\n\nFeature\n\n\n\n\n\n\nAction\n\n\nBranch Event Name\n\n\n\n\n\n\nAction Property\n\n\nBranch Tags\n\n\n\n\n\n\n\n\nIf you create a Quick Link and specify analytics, those analytics will appear in the Adobe Analytics reporting suite.\n\n\nSupport\n\n\nThere are common strategies to take while trouble shooting.\n\n\nData isn't appearing after simulating an event\n\n\nWith Adobe Analytics' dashboard, it may take up to ~2 hours for data to appear. We'd recommend you simulate 10-15 events in one testing session, and validate that they show up two hours later, so that feedback is transparent and obvious.\n\n\nAnother thing to do is make sure a valid adobe_visitor_id is being passed up through the Branch SDK. Call \nsetDebug\n and inspect the requests to \nv1/open\n. The key you want to find in this request payload is either \n$adobe_visitor_id\n, \n$marketing_cloud_visitor_id\n, or \n$analytics_visitor_id\n.\n\n\nWhat is Context Data and where does Branch provide it to Adobe?\n\n\nWhen sending server to server calls to Adobe, Context Data is the part in between \nc.\n and \n.c\n in the server call. This call cannot be seen via the client (for example, it is not available via Charles Proxy). To see the detailed Branch server calls, please reach out to your Branch Account Manager. In general, values sent in Context Data can be visualized in the Adobe dashboard, and values outside of Context Data cannot. Values like the user identity (e.g.\nvid\n, \nmid\n or \naid\n) are sent to Adobe, but not in Context Data, so they can\u2019t be visualized in the Adobe Report Suite. However, they are appropriately formatted for Adobe to log events for that user in Adobe.", 
            "title": "Adobe Analytics"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#overview", 
            "text": "With a push of a button you can send your Branch data to your Adobe Analytics dashboard, helping you understand the power of Branch as an acquisition pathway.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#how-does-it-work", 
            "text": "Once the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your Adobe Analytics Information will result in Branch automatically forwarding referred events to Adobe Analytics through a server to server integration.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#what-events-does-branch-send", 
            "text": "Branch will send  referred   installs  and  opens , as well as any  custom events  you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends all the analytics tags that are attached to the link that drove the referred event. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users.", 
            "title": "What events does Branch send?"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#what-does-it-look-like", 
            "text": "Branch events will appear on the Adobe Analytics dashboard through  Reports   Custom Conversion   Branch eVar . Note, this will automatically appear once the Branch Data Connector is enabled through the Adobe Analytics dashboard.  You'll have the flexibility to analyze data as needed in the Adobe Analytics platform, as the data Branch sends maps in Adobe Analytics to a top level eVar. This eVar contains campaign, channel, target, event name, and action property, which are your analytics tags.   Branch events are similar to Adobe Analytics events in that they can be used to build custom reports and are tracked on the various pages and dashboards. However, unlike normal events, Branch events contain valuable information about how users ended up in your app in the first place.", 
            "title": "What does it look like?"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#prerequisites", 
            "text": "This guide requires you to have integrated the Branch SDK in your mobile apps.  You also need to be a Adobe Analytics customer and have the Adobe Analytics SDK integrated.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#activate-the-branch-data-connector", 
            "text": "In your Adobe Analytics dashboard, under the  Admin  tab, find  Data Connectors .   Click  +Add New , search for \"Branch,\" and click  Activate .", 
            "title": "Activate the Branch Data Connector"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#configure-the-branch-data-connector", 
            "text": "", 
            "title": "Configure the Branch Data Connector"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#integration-settings", 
            "text": "These are automatically configured when you activate the Data Connector.", 
            "title": "Integration Settings"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#variable-mappings", 
            "text": "Map your Branch events to your chosen eVar. In the example below, it will be mapped to  Custom eVar 1 , renamed to the SiteCatalyst metric  Branch .", 
            "title": "Variable Mappings"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#data-settings", 
            "text": "Branch has provided a default classification rule set for the Branch data that will be ingested. This maps Branch analytics data to Adobe classifications as follows. You can change this classification rule set if you would like to, but editing is not required. We also include Branch tags so you can create a new rule that further segments your analytics data for advanced visibility.     Adobe Classification  Branch Analytics Tag      Source  Channel    Campaign  Campaign    Medium  Feature    Action  Branch Event Name    Action Property  Branch Tags", 
            "title": "Data Settings"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#review-summary", 
            "text": "Finally, review the integration, scroll to the bottom of the screen and click  Activate Now  to enable the integration.", 
            "title": "Review Summary"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#configure-the-branch-dashboard", 
            "text": "", 
            "title": "Configure the Branch Dashboard"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#retrieve-your-adobe-analytics-information", 
            "text": "Before navigating to Branch, in your Adobe Analytics dashboard, navigate to the Mobile Marketing UI and find your app.  Under Manage App Setting -  SDK Analytics Options, find the following data     Branch field  Adobe field value      Protocol  Use HTTPS Check Box (if checked, select HTTPS)    Analytics Server Domain  Tracking Server    Omniture iOS/Android Server Key  Report Suite ID for that app    Timestamp  Offline Tracking     For  Analytics Server Domain , please do not include  http  or  https . If your value for this is  http://test.com , simply put in  test.com . This means no extra slashes, and no protocol.", 
            "title": "Retrieve your Adobe Analytics Information"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#enter-adobe-analytics-information", 
            "text": "On the Branch Dashboard (dashboard.branch.io), navigate to the  Integrations page .  Locate Adobe Analytics and choose  Enable .  If you have not yet entered billing information, please do so now.  Enter your Adobe Analytics information and hit  Save .", 
            "title": "Enter Adobe Analytics Information"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#pass-adobe-visitor-id", 
            "text": "When you're ready to send data through Branch, you'll need to make sure you pass through the configured Adobe Visitor ID through the Branch SDKs. In order to do so, figure out which ID you use for user tracking in the Adobe SDK by asking your Adobe Consultant, and pass this value through  setRequestMetadataKey  on the Branch SDKs.  There are three possible identities you can track via this integration. Please verify which ID you use, and send that. For example, if your Adobe integration uses Marketing Cloud Visitor ID, retrieve it from the Adobe SDK, and pass in a key value pair, with the key being  $marketing_cloud_visitor_id . The value would be the value retrieved through the Adobe SDK.    Marketing Cloud Visitor ID -  $marketing_cloud_visitor_id   sent to Adobe as  mid  Analytics Visitor ID -  $adobe_visitor_id   sent to Adobe as  aid  Analytics Custom Visitor ID -  $analytics_visitor_id   sent to Adobe as  vid   Here's a sample snippet showing this.  NOTE  you must set the correct key before calling  initSession . These examples use  $adobe_visitor_id  but you should use the appropriate key per the suggestions above. You must also initialize the Adobe SDK before setting the request metadata in the Branch SDK.   Objective-C  Inside  didFinishLaunchingWithOptions  Branch   * branch   =   [ Branch   getInstance ];  [[ Branch   getInstance ]   setRequestMetadataKey : @ $adobe_visitor_id   value :[ ADBMobile   trackingIdentifier ]];   Swift  Inside  didFinishLaunchingWithOptions  if   let   branch   =   Branch . getInstance ()   { \n     branch . setRequestMetadataKey ( $adobe_visitor_id ,   value : ADBMobile . trackingIdentifier ()   as   NSObject !);  }   Android  Before you initialize in your Application#onCreate or Deep Link Activity's #onCreate.  Branch   branch   =   Branch . getInstance ();  branch . setRequestMetadata ( $adobe_visitor_id ,   Analytics . getTrackingIdentifier ());  ...  Branch . initSession (...);", 
            "title": "Pass Adobe Visitor ID"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#what-branch-sends-to-adobe-analytics", 
            "text": "Branch sends the following values from Branch link data in the Adobe Context Data:     Adobe Classification  Branch Analytics Tag      Source  Channel    Campaign  Campaign    Medium  Feature    Action  Branch Event Name    Action Property  Branch Tags     If you create a Quick Link and specify analytics, those analytics will appear in the Adobe Analytics reporting suite.", 
            "title": "What Branch Sends to Adobe Analytics"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#support", 
            "text": "There are common strategies to take while trouble shooting.", 
            "title": "Support"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#data-isnt-appearing-after-simulating-an-event", 
            "text": "With Adobe Analytics' dashboard, it may take up to ~2 hours for data to appear. We'd recommend you simulate 10-15 events in one testing session, and validate that they show up two hours later, so that feedback is transparent and obvious.  Another thing to do is make sure a valid adobe_visitor_id is being passed up through the Branch SDK. Call  setDebug  and inspect the requests to  v1/open . The key you want to find in this request payload is either  $adobe_visitor_id ,  $marketing_cloud_visitor_id , or  $analytics_visitor_id .", 
            "title": "Data isn't appearing after simulating an event"
        }, 
        {
            "location": "/pages/integrations/adobe-analytics/#what-is-context-data-and-where-does-branch-provide-it-to-adobe", 
            "text": "When sending server to server calls to Adobe, Context Data is the part in between  c.  and  .c  in the server call. This call cannot be seen via the client (for example, it is not available via Charles Proxy). To see the detailed Branch server calls, please reach out to your Branch Account Manager. In general, values sent in Context Data can be visualized in the Adobe dashboard, and values outside of Context Data cannot. Values like the user identity (e.g. vid ,  mid  or  aid ) are sent to Adobe, but not in Context Data, so they can\u2019t be visualized in the Adobe Report Suite. However, they are appropriately formatted for Adobe to log events for that user in Adobe.", 
            "title": "What is Context Data and where does Branch provide it to Adobe?"
        }, 
        {
            "location": "/pages/integrations/adjust/", 
            "text": "Overview\n\n\nSend data to Adjust to maximize your understanding of your mobile acquisition efforts, while deep linking your users through Branch.\n\n\nWhat events does Branch send to Adjust?\n\n\nThe integration automatically sends \nBranch link clicks\n to Adjust, specifically we send:\n\n\n\n\nAll Android clicks\n\n\niOS Universal Link clicks\n\n\n\n\nThis means that for iOS install campaigns (which doesn't use Universal Links), you must use Adjust as your fallback URL.\n\n\nWhat data can I expect to see in Adjust?\n\n\nOnce you enable an integration with Adjust, we'll automatically send all eligible clicks to Adjust's servers. From there, you'll see how many users came from Branch, along with installs, opens and downstream events attributed back to the Branch link. This will give you automatic segmentation and cohorting for users acquired via Branch links.\n\n\nWe'll pass along all of the Branch link's analytics data, which will map to labels inside Adjust. Check the \"Advanced\" section to see all of the labels.\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have integrated the Branch SDK in your mobile apps.\n\n\nThis guide requires an account with Adjust and the Adjust SDK (\niOS\n, \nAndroid\n) installed in your app.\n\n\n\n\nGet credentials from your Adjust account\n\n\nTo set up the integration, you will need to navigate to your Adjust dashboard, and create a new tracking link for your mobile app. Start by selecting 'Settings' of your mobile app.\n\n\n\n\nFrom there, you will need to create a new tracker, which is found under Data Management \n Trackers \n Click Trackers, and \"Create a new tracker\" below. Be sure to call it \"Branch.\" Once created, grab the 6 digit value after the \napp.adjust.com\n portion. This is your tracker.\n\n\n\n\nEnable the Adjust card in your Branch dashboard\n\n\n\n\nOn the Branch Dashboard (dashboard.branch.io), navigate to the \nIntegrations page\n.\n\n\nLocate Adjust and choose \nEnable\n.\n\n\nIf you have not yet entered billing information, please do so now.\n\n\nEnter your tracker for iOS and Android.\n\n\nHit \nSave\n.\n\n\n\n\n\n\nAdd Adjust tracking link to your Branch Settings\n\n\nIf you'd like to track iOS installs from Branch links in Adjust, you'll need to create an Adjust tracking link and put in your Branch settings page.\n\n\nYou need to point the iOS Custom Redirect to Adjust. Take the tracker you just created in Adjust and set the Custom Redirects of your \nBranch Settings\n as follows. This means that Branch will fall back to the App Store via Adjust when your user doesn't have the app and isn't going to mobile web. Remember to click the \"Save\" button at the bottom of the Link Settings page.\n\n\n\n\n\n\n\n\nPlatform\n\n\nURL\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nhttps://app.adjust.io/abcdef\n\n\n\n\n\n\n\n\n\n\nAdvanced\n\n\nWhat Branch sends to Adjust\n\n\nBy default, Branch sends the following parameters to Adjust as part of the integration.\n\n\n\n\n\n\n\n\nBranch Analytics Tag\n\n\nAdjust Data Tag\n\n\n\n\n\n\n\n\n\n\nCampaign\n\n\ncampaign\n\n\n\n\n\n\nChannel\n\n\nadgroup\n\n\n\n\n\n\nFeature\n\n\ncreative\n\n\n\n\n\n\nBranch Click ID\n\n\nexternal_click_id\n\n\n\n\n\n\n\n\nAdvanced network segmentation with Adjust\n\n\nBy default, installs and events via Branch links will be attributed to Branch via your default tracker. If you'd like to use Branch links on your paid ad networks for deep linking, but you'd like more granular network attribution, you can create a new tracker in Adjust then use the tracker id in your Branch link. This will override the default Branch attribution.\n\n\n\n\nName your Adjust tracker something like \"TapjoyBranch\"\n\n\nTake the 6 letter identifier for your tracker and put it as a key value pair with key \ntracker_id\n in your deep link data for that specific link.", 
            "title": "Adjust"
        }, 
        {
            "location": "/pages/integrations/adjust/#overview", 
            "text": "Send data to Adjust to maximize your understanding of your mobile acquisition efforts, while deep linking your users through Branch.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/adjust/#what-events-does-branch-send-to-adjust", 
            "text": "The integration automatically sends  Branch link clicks  to Adjust, specifically we send:   All Android clicks  iOS Universal Link clicks   This means that for iOS install campaigns (which doesn't use Universal Links), you must use Adjust as your fallback URL.", 
            "title": "What events does Branch send to Adjust?"
        }, 
        {
            "location": "/pages/integrations/adjust/#what-data-can-i-expect-to-see-in-adjust", 
            "text": "Once you enable an integration with Adjust, we'll automatically send all eligible clicks to Adjust's servers. From there, you'll see how many users came from Branch, along with installs, opens and downstream events attributed back to the Branch link. This will give you automatic segmentation and cohorting for users acquired via Branch links.  We'll pass along all of the Branch link's analytics data, which will map to labels inside Adjust. Check the \"Advanced\" section to see all of the labels.", 
            "title": "What data can I expect to see in Adjust?"
        }, 
        {
            "location": "/pages/integrations/adjust/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/adjust/#prerequisites", 
            "text": "This guide requires you to have integrated the Branch SDK in your mobile apps.  This guide requires an account with Adjust and the Adjust SDK ( iOS ,  Android ) installed in your app.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/adjust/#get-credentials-from-your-adjust-account", 
            "text": "To set up the integration, you will need to navigate to your Adjust dashboard, and create a new tracking link for your mobile app. Start by selecting 'Settings' of your mobile app.   From there, you will need to create a new tracker, which is found under Data Management   Trackers   Click Trackers, and \"Create a new tracker\" below. Be sure to call it \"Branch.\" Once created, grab the 6 digit value after the  app.adjust.com  portion. This is your tracker.", 
            "title": "Get credentials from your Adjust account"
        }, 
        {
            "location": "/pages/integrations/adjust/#enable-the-adjust-card-in-your-branch-dashboard", 
            "text": "On the Branch Dashboard (dashboard.branch.io), navigate to the  Integrations page .  Locate Adjust and choose  Enable .  If you have not yet entered billing information, please do so now.  Enter your tracker for iOS and Android.  Hit  Save .", 
            "title": "Enable the Adjust card in your Branch dashboard"
        }, 
        {
            "location": "/pages/integrations/adjust/#add-adjust-tracking-link-to-your-branch-settings", 
            "text": "If you'd like to track iOS installs from Branch links in Adjust, you'll need to create an Adjust tracking link and put in your Branch settings page.  You need to point the iOS Custom Redirect to Adjust. Take the tracker you just created in Adjust and set the Custom Redirects of your  Branch Settings  as follows. This means that Branch will fall back to the App Store via Adjust when your user doesn't have the app and isn't going to mobile web. Remember to click the \"Save\" button at the bottom of the Link Settings page.     Platform  URL      iOS  https://app.adjust.io/abcdef", 
            "title": "Add Adjust tracking link to your Branch Settings"
        }, 
        {
            "location": "/pages/integrations/adjust/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/adjust/#what-branch-sends-to-adjust", 
            "text": "By default, Branch sends the following parameters to Adjust as part of the integration.     Branch Analytics Tag  Adjust Data Tag      Campaign  campaign    Channel  adgroup    Feature  creative    Branch Click ID  external_click_id", 
            "title": "What Branch sends to Adjust"
        }, 
        {
            "location": "/pages/integrations/adjust/#advanced-network-segmentation-with-adjust", 
            "text": "By default, installs and events via Branch links will be attributed to Branch via your default tracker. If you'd like to use Branch links on your paid ad networks for deep linking, but you'd like more granular network attribution, you can create a new tracker in Adjust then use the tracker id in your Branch link. This will override the default Branch attribution.   Name your Adjust tracker something like \"TapjoyBranch\"  Take the 6 letter identifier for your tracker and put it as a key value pair with key  tracker_id  in your deep link data for that specific link.", 
            "title": "Advanced network segmentation with Adjust"
        }, 
        {
            "location": "/pages/integrations/amplitude/", 
            "text": "Overview\n\n\nWith a push of a button you can send your Branch data to your Amplitude dashboard, helping you understand the power of Branch as an acquisition pathway.\n\n\nHow does it work?\n\n\nOnce the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your Amplitude API Key will result in Branch automatically forwarding referred events to Amplitude, in the exact format Amplitude expects.\n\n\nWhat events does Branch send?\n\n\nBranch will send \nreferred\n \ninstalls\n and \nopens\n, as well as any \ncustom events and commerce events\n you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends all the data that is attached to the link that drove the referred event. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to Amplitude \nhere\n.\n\n\nWhat does it look like?\n\n\nBranch events will appear alongside your other tracked events in Amplitude. These events will automatically have \n[Branch]\n prepended. Here is an example of a Branch event in the Real Time Activity view:\n\n\n\n\nAdditionally, individual events, such as those seen in Live View or visible when looking at individual users, will have Branch link data included. Here's an example:\n\n\n\n\nBranch events are similar to Amplitude events in that they can be used in your existing funnels and tracked on the various pages and dashboards. However, unlike normal events, Branch events contain invaluable information about how users ended up in your app in the first place.\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have integrated the Branch SDK in your mobile apps.\n\n\nYou also need to be an Amplitude customer and have the \nAmplitude SDK installed\n in your app.\n\n\n\n\nRetrieve your Amplitude API Key\n\n\nFind your Amplitude Project Key and enter it into the Branch Dashboard.\n\n\n\n\nLog in to your \nAmplitude account\n  and navigate to Settings by clicking your username in the top right hand corner.\n\n\n\nIn settings, select \"Projects\" from the left hand navigation.\n\n\n\nCopy the Project Key of whichever app you\u2019re going to use with Branch.\n\n\n\n\n\nConfigure the Branch Dashboard\n\n\n\n\nOn the Branch Dashboard (dashboard.branch.io), navigate to the \nIntegrations page\n.\n\n\nLocate Amplitude and choose \nEnable\n.\n\n\nIf you have not yet entered billing information, please do so now.\n\n\nEnter your Amplitude Project Key in the relevant app under \"[iOS/Android] API key\" and hit \nSave\n. If you use the same key for iOS and Android, it's fine to enter the same key twice.\n\n\n\n\n\n\nCapture IDFA/GAID\n\n\nEnsure that you are capturing both the Google Advertising Identifier (GAID) on Android, and the IDFA on iOS.\n\n\n\n\nGoogle Advertising ID is required\n\n\nAmplitude requires the Google Advertising ID to be sent. Android ID (the hardware ID) alone is not enough.\n\n\n\n\nUpgrade to the latest SDKs [if necessary]\n\n\nPlease ensure you're using the Branch iOS SDK 0.12.2 or greater, and Android SDK v1.12.1 or greater. If you implemented Branch after May 28th 2016, you are likely already on this version or later.\n\n\nAdvanced\n\n\nWhat Branch Sends to Amplitude\n\n\n\n\n\n\n\n\nProperty Name\n\n\nValue\n\n\nSourced from\n\n\nExample\n\n\nReq\n\n\n\n\n\n\n\n\n\n\n\n\napi_key\n\n\nAPI Key\n\n\nBranch Dashboard\n\n\n70d1db75922b0b4be56b819c42bxxxxx\n\n\nY\n\n\n\n\n\n\n\n\nevent_type\n\n\nBranch event\n\n\nevent name\n\n\n[Branch] install\n\n\nY\n\n\n\n\n\n\n\n\nplatform\n\n\nios\n or \nandroid\n\n\ncollected by Branch SDK\n\n\nios\n\n\nY\n\n\n\n\n\n\n\n\nidfa\n\n\nIDFA\n\n\ncollected by Branch SDK\n\n\nAEBE52E7-03EE-455A-B3C4-E57283966239\n\n\n*\n\n\n\n\n\n\n\n\nidfv\n\n\nIDFV\n\n\ncollected by Branch SDK\n\n\nAEBE52E7-03EE-455A-B3C4-E57283966239\n\n\n*\n\n\n\n\n\n\n\n\nandroid_id\n\n\nAndroid ID\n\n\ncollected by Branch SDK\n\n\nf07a13984f6d116a\n\n\nN\n\n\n\n\n\n\n\n\nadid\n\n\nGAID\n\n\ncollected by Branch SDK\n\n\nAEBE52E7-03EE-455A-B3C4-E57283966239\n\n\n*\n\n\n\n\n\n\n\n\ndevice_id\n\n\nUnique ID for device\n\n\n$amplitude_device_id\n\n\nAEBE52E7-03EE-455A-B3C4-E57283966239\n\n\nN\n\n\n\n\n\n\n\n\nuser_id\n\n\nUnique ID for user\n\n\n$amplitude_user_id\n\n\nUser A\n\n\nN\n\n\n\n\n\n\n\n\nip\n\n\nUser\u2019s IP Address\n\n\ncollected by Branch SDK\n\n\n111.111.111.111\n\n\nN\n\n\n\n\n\n\n\n\nevent_properties.ANY-KEY (many)\n\n\nThe value associated with the key\n\n\nevent metadata or referring link data\n\n\n~channel: facebook\n\n\nN\n\n\n\n\n\n\n\n\n\n\n\n\nOn iOS, \nidfa\n or \nidfv\n is required. On Android, \nadid\n is required.\n\n\n\n\nCustom identity support\n\n\nYou can use the following code to let Branch know what device_id and user_id should be sent to Amplitude. Please make sure you are using SDK version 0.12.2 or later.\n\n\niOS:\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetRequestMetadataKey\n:\n@\n$amplitude_device_id\n \nvalue\n:\n@\nDevice A\n];\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetRequestMetadataKey\n:\n@\n$amplitude_user_id\n \nvalue\n:\n@\nUser A\n];\n\n\n\n\n\nAndroid:\n\n\nBranch\n.\ngetInstance\n().\nsetRequestMetadata\n(\n$amplitude_device_id\n,\n \n12345\n);\n\n\nBranch\n.\ngetInstance\n().\nsetRequestMetadata\n(\n$amplitude_user_id\n,\n \nuser-12345\n);\n\n\n\n\n\nSupport\n\n\nTesting your Amplitude integration\n\n\nThe simplest way to test your integration is working end to end is to open your app \nfrom a Branch link\n then verify the data appears in Amplitude. After doing this, you will know how you to test more advanced scenarios.\n\n\n\n\nCreate a Branch Quick Link at \nhttps://dashboard.branch.io/quick-links\n.\n\n\nClick that Branch link to open your app.\n\n\nIn your Branch dashboard, verify you see the open event show as a \"referred session\" with a \"session referring link URL\" in your Branch dashboard under \"Liveview \n Events\"\n\n\n\n\n\n\n\n\nGo to your Amplitude dashboard and click on \"User Activity\" and look at the \"Real-time activity\" section. You should see events with \n[Branch]\n prepended. There can sometimes be a delay in events appearing, so check back 30 minutes after testing.", 
            "title": "Amplitude"
        }, 
        {
            "location": "/pages/integrations/amplitude/#overview", 
            "text": "With a push of a button you can send your Branch data to your Amplitude dashboard, helping you understand the power of Branch as an acquisition pathway.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/amplitude/#how-does-it-work", 
            "text": "Once the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your Amplitude API Key will result in Branch automatically forwarding referred events to Amplitude, in the exact format Amplitude expects.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/pages/integrations/amplitude/#what-events-does-branch-send", 
            "text": "Branch will send  referred   installs  and  opens , as well as any  custom events and commerce events  you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends all the data that is attached to the link that drove the referred event. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to Amplitude  here .", 
            "title": "What events does Branch send?"
        }, 
        {
            "location": "/pages/integrations/amplitude/#what-does-it-look-like", 
            "text": "Branch events will appear alongside your other tracked events in Amplitude. These events will automatically have  [Branch]  prepended. Here is an example of a Branch event in the Real Time Activity view:   Additionally, individual events, such as those seen in Live View or visible when looking at individual users, will have Branch link data included. Here's an example:   Branch events are similar to Amplitude events in that they can be used in your existing funnels and tracked on the various pages and dashboards. However, unlike normal events, Branch events contain invaluable information about how users ended up in your app in the first place.", 
            "title": "What does it look like?"
        }, 
        {
            "location": "/pages/integrations/amplitude/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/amplitude/#prerequisites", 
            "text": "This guide requires you to have integrated the Branch SDK in your mobile apps.  You also need to be an Amplitude customer and have the  Amplitude SDK installed  in your app.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/amplitude/#retrieve-your-amplitude-api-key", 
            "text": "Find your Amplitude Project Key and enter it into the Branch Dashboard.   Log in to your  Amplitude account   and navigate to Settings by clicking your username in the top right hand corner.  In settings, select \"Projects\" from the left hand navigation.  Copy the Project Key of whichever app you\u2019re going to use with Branch.", 
            "title": "Retrieve your Amplitude API Key"
        }, 
        {
            "location": "/pages/integrations/amplitude/#configure-the-branch-dashboard", 
            "text": "On the Branch Dashboard (dashboard.branch.io), navigate to the  Integrations page .  Locate Amplitude and choose  Enable .  If you have not yet entered billing information, please do so now.  Enter your Amplitude Project Key in the relevant app under \"[iOS/Android] API key\" and hit  Save . If you use the same key for iOS and Android, it's fine to enter the same key twice.", 
            "title": "Configure the Branch Dashboard"
        }, 
        {
            "location": "/pages/integrations/amplitude/#capture-idfagaid", 
            "text": "Ensure that you are capturing both the Google Advertising Identifier (GAID) on Android, and the IDFA on iOS.   Google Advertising ID is required  Amplitude requires the Google Advertising ID to be sent. Android ID (the hardware ID) alone is not enough.", 
            "title": "Capture IDFA/GAID"
        }, 
        {
            "location": "/pages/integrations/amplitude/#upgrade-to-the-latest-sdks-if-necessary", 
            "text": "Please ensure you're using the Branch iOS SDK 0.12.2 or greater, and Android SDK v1.12.1 or greater. If you implemented Branch after May 28th 2016, you are likely already on this version or later.", 
            "title": "Upgrade to the latest SDKs [if necessary]"
        }, 
        {
            "location": "/pages/integrations/amplitude/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/amplitude/#what-branch-sends-to-amplitude", 
            "text": "Property Name  Value  Sourced from  Example  Req       api_key  API Key  Branch Dashboard  70d1db75922b0b4be56b819c42bxxxxx  Y     event_type  Branch event  event name  [Branch] install  Y     platform  ios  or  android  collected by Branch SDK  ios  Y     idfa  IDFA  collected by Branch SDK  AEBE52E7-03EE-455A-B3C4-E57283966239  *     idfv  IDFV  collected by Branch SDK  AEBE52E7-03EE-455A-B3C4-E57283966239  *     android_id  Android ID  collected by Branch SDK  f07a13984f6d116a  N     adid  GAID  collected by Branch SDK  AEBE52E7-03EE-455A-B3C4-E57283966239  *     device_id  Unique ID for device  $amplitude_device_id  AEBE52E7-03EE-455A-B3C4-E57283966239  N     user_id  Unique ID for user  $amplitude_user_id  User A  N     ip  User\u2019s IP Address  collected by Branch SDK  111.111.111.111  N     event_properties.ANY-KEY (many)  The value associated with the key  event metadata or referring link data  ~channel: facebook  N       On iOS,  idfa  or  idfv  is required. On Android,  adid  is required.", 
            "title": "What Branch Sends to Amplitude"
        }, 
        {
            "location": "/pages/integrations/amplitude/#custom-identity-support", 
            "text": "You can use the following code to let Branch know what device_id and user_id should be sent to Amplitude. Please make sure you are using SDK version 0.12.2 or later.  iOS:  [[ Branch   getInstance ]   setRequestMetadataKey : @ $amplitude_device_id   value : @ Device A ];  [[ Branch   getInstance ]   setRequestMetadataKey : @ $amplitude_user_id   value : @ User A ];   Android:  Branch . getInstance (). setRequestMetadata ( $amplitude_device_id ,   12345 );  Branch . getInstance (). setRequestMetadata ( $amplitude_user_id ,   user-12345 );", 
            "title": "Custom identity support"
        }, 
        {
            "location": "/pages/integrations/amplitude/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/integrations/amplitude/#testing-your-amplitude-integration", 
            "text": "The simplest way to test your integration is working end to end is to open your app  from a Branch link  then verify the data appears in Amplitude. After doing this, you will know how you to test more advanced scenarios.   Create a Branch Quick Link at  https://dashboard.branch.io/quick-links .  Click that Branch link to open your app.  In your Branch dashboard, verify you see the open event show as a \"referred session\" with a \"session referring link URL\" in your Branch dashboard under \"Liveview   Events\"     Go to your Amplitude dashboard and click on \"User Activity\" and look at the \"Real-time activity\" section. You should see events with  [Branch]  prepended. There can sometimes be a delay in events appearing, so check back 30 minutes after testing.", 
            "title": "Testing your Amplitude integration"
        }, 
        {
            "location": "/pages/integrations/appmetrica/", 
            "text": "Overview\n\n\nWith a push of a button you can send your Branch data to your AppMetrica dashboard, helping you segment users and understand the power of Branch links in acquiring users.\n\n\nWhat events does Branch send to AppMetrica?\n\n\nBranch will send all \nBranch link clicks\n to AppMetrica. Branch also sends all the data that is attached to the link. AppMetrica then matches all downstream actions (installs, opens, custom events, payouts) back to the referring link. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to AppMetrica \nhere\n.\n\n\nWhat does it look like?\n\n\nSee your Branch organic acquisition campaigns alongside your AppMetrica data.\n\n\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already integrated the Branch mobile SDKs.\n\n\nYou also need to be an AppMetrica customer and have the \nAppMetrica SDK\n installed in your app.\n\n\n\n\nGet credentials from your AppMetrica dashboard\n\n\nTo set up the integration you will need to create new trackers in the AppMetrica dashboard for Branch (separate tracker for iOS and Android). After creating the trackers you will need the \ntracking URL\n for the integration.\n\n\n\n\nTo create a tracker navigate to the \nTrackers\n tab and press the \nCreate Tracker\n button.\n\n\n\n\n\n\n\n\nSelect \"Branch\" in \nPartner\n dropdown\n\n\nSelect a \nDestination URL\n. If there are no active destination URL's created for this app press the \nNew\u00a0destination\u00a0URL\n button and fill in a link to your website or app\n\n\n\n\n\n\n\n\nCopy the \nTracking URL\n\n\n\n\n\n\nEnable the AppMetrica card in your Branch dashboard\n\n\n\n\nOn the Branch Dashboard (\nhttps://dashboard.branch.io\n) navigate to the \nIntegrations page\n.\n\n\nLocate AppMetrica and choose \nEnable\n.\n\n\nIf you have not yet entered billing information, please do so now.\n\n\nEnter your \nTracking URL\n.\n\n\nHit \nSave\n.\n\n\n\n\n\n\nAdvanced\n\n\nWhat Branch sends to AppMetrica\n\n\nBranch will send any parameters that you append to a link on to AppMetrica. By default, if you don't append any additional parameters to your link, Branch will pass Branch Analytics tags on to AppMetrica with the below mapping.\n\n\n\n\n\n\n\n\nBranch Analytics Tag\n\n\nAppMetrica Data Placeholder Tag\n\n\n\n\n\n\n\n\n\n\nCampaign\n\n\nmy_campaign\n\n\n\n\n\n\nChannel\n\n\nmy_placement\n\n\n\n\n\n\nFeature\n\n\nmy_keyword\n\n\n\n\n\n\nBranch Click ID\n\n\ntracking_id\n\n\n\n\n\n\n\n\nAdvanced AppMetrica Tracker Settings\n\n\nIf you are interested in controlling advanced attribution policies, check out AppMetrica's \ndocumentation\n on this topic.", 
            "title": "AppMetrica"
        }, 
        {
            "location": "/pages/integrations/appmetrica/#overview", 
            "text": "With a push of a button you can send your Branch data to your AppMetrica dashboard, helping you segment users and understand the power of Branch links in acquiring users.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/appmetrica/#what-events-does-branch-send-to-appmetrica", 
            "text": "Branch will send all  Branch link clicks  to AppMetrica. Branch also sends all the data that is attached to the link. AppMetrica then matches all downstream actions (installs, opens, custom events, payouts) back to the referring link. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to AppMetrica  here .", 
            "title": "What events does Branch send to AppMetrica?"
        }, 
        {
            "location": "/pages/integrations/appmetrica/#what-does-it-look-like", 
            "text": "See your Branch organic acquisition campaigns alongside your AppMetrica data.", 
            "title": "What does it look like?"
        }, 
        {
            "location": "/pages/integrations/appmetrica/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/appmetrica/#prerequisites", 
            "text": "This guide requires you to have already integrated the Branch mobile SDKs.  You also need to be an AppMetrica customer and have the  AppMetrica SDK  installed in your app.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/appmetrica/#get-credentials-from-your-appmetrica-dashboard", 
            "text": "To set up the integration you will need to create new trackers in the AppMetrica dashboard for Branch (separate tracker for iOS and Android). After creating the trackers you will need the  tracking URL  for the integration.   To create a tracker navigate to the  Trackers  tab and press the  Create Tracker  button.     Select \"Branch\" in  Partner  dropdown  Select a  Destination URL . If there are no active destination URL's created for this app press the  New\u00a0destination\u00a0URL  button and fill in a link to your website or app     Copy the  Tracking URL", 
            "title": "Get credentials from your AppMetrica dashboard"
        }, 
        {
            "location": "/pages/integrations/appmetrica/#enable-the-appmetrica-card-in-your-branch-dashboard", 
            "text": "On the Branch Dashboard ( https://dashboard.branch.io ) navigate to the  Integrations page .  Locate AppMetrica and choose  Enable .  If you have not yet entered billing information, please do so now.  Enter your  Tracking URL .  Hit  Save .", 
            "title": "Enable the AppMetrica card in your Branch dashboard"
        }, 
        {
            "location": "/pages/integrations/appmetrica/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/appmetrica/#what-branch-sends-to-appmetrica", 
            "text": "Branch will send any parameters that you append to a link on to AppMetrica. By default, if you don't append any additional parameters to your link, Branch will pass Branch Analytics tags on to AppMetrica with the below mapping.     Branch Analytics Tag  AppMetrica Data Placeholder Tag      Campaign  my_campaign    Channel  my_placement    Feature  my_keyword    Branch Click ID  tracking_id", 
            "title": "What Branch sends to AppMetrica"
        }, 
        {
            "location": "/pages/integrations/appmetrica/#advanced-appmetrica-tracker-settings", 
            "text": "If you are interested in controlling advanced attribution policies, check out AppMetrica's  documentation  on this topic.", 
            "title": "Advanced AppMetrica Tracker Settings"
        }, 
        {
            "location": "/pages/integrations/appboy/", 
            "text": "Overview\n\n\nThe Branch partnership with \nBraze\n provides a push-button way to deliver Branch-referred iOS installs and attributions to your Braze dashboard. This allows you to analyze your users coming in from Branch deep linked campaigns.\n\n\nAt this time, our integration only applies to the iOS platform.\n\n\nHow it works\n\n\nWe have built a custom integration to automatically send all Branch-referred iOS install data to Braze without any extra work on your side (besides integrating both the Branch and Braze SDKs). Simply click a button, and you'll be good to go!\n\n\n\n\nHow do we differentiate Braze and Branch installs?\n\n\nWe rely on a Branch link being clicked, which leads to an install. This sets an internal boolean that an install came from Branch.\n\n\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already integrated the Branch mobile SDKs into your app.\n\n\nYou also need to \nsign up for an Braze account\n and \ninstall the Braze SDK\n.\n\n\nEnsure Braze's SDK is \ncollecting the IDFA\n.\n\n\n\n\nGet the Braze API key\n\n\n\n\nOn the Braze dashboard, navigate to the \nApp Settings\n section, and click \n3rd Party Integrations\n.\n\n\nFrom there, grab your API key (this will be the same for all attribution partners listed on the page).\n\n\n\n\nConfigure the Branch Dashboard\n\n\n\n\nOn the Branch Dashboard (dashboard.branch.io), navigate to the \nIntegrations page\n.\n\n\nLocate Braze and choose \nEnable\n.\n\n\nIf you have not yet entered billing information, please do so now.\n\n\nEnter your Braze iOS API Key and hit \nSave\n.\n\n\n\n\n\n\nAdvanced\n\n\nWhat Branch sends to Braze\n\n\n\n\n\n\n\n\nBranch Analytics Tag\n\n\nBraze Data Placeholder Tag\n\n\n\n\n\n\n\n\n\n\nCampaign\n\n\ncampaign\n\n\n\n\n\n\nChannel\n\n\nadgroup", 
            "title": "Braze"
        }, 
        {
            "location": "/pages/integrations/appboy/#overview", 
            "text": "The Branch partnership with  Braze  provides a push-button way to deliver Branch-referred iOS installs and attributions to your Braze dashboard. This allows you to analyze your users coming in from Branch deep linked campaigns.  At this time, our integration only applies to the iOS platform.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/appboy/#how-it-works", 
            "text": "We have built a custom integration to automatically send all Branch-referred iOS install data to Braze without any extra work on your side (besides integrating both the Branch and Braze SDKs). Simply click a button, and you'll be good to go!   How do we differentiate Braze and Branch installs?  We rely on a Branch link being clicked, which leads to an install. This sets an internal boolean that an install came from Branch.", 
            "title": "How it works"
        }, 
        {
            "location": "/pages/integrations/appboy/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/appboy/#prerequisites", 
            "text": "This guide requires you to have already integrated the Branch mobile SDKs into your app.  You also need to  sign up for an Braze account  and  install the Braze SDK .  Ensure Braze's SDK is  collecting the IDFA .", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/appboy/#get-the-braze-api-key", 
            "text": "On the Braze dashboard, navigate to the  App Settings  section, and click  3rd Party Integrations .  From there, grab your API key (this will be the same for all attribution partners listed on the page).", 
            "title": "Get the Braze API key"
        }, 
        {
            "location": "/pages/integrations/appboy/#configure-the-branch-dashboard", 
            "text": "On the Branch Dashboard (dashboard.branch.io), navigate to the  Integrations page .  Locate Braze and choose  Enable .  If you have not yet entered billing information, please do so now.  Enter your Braze iOS API Key and hit  Save .", 
            "title": "Configure the Branch Dashboard"
        }, 
        {
            "location": "/pages/integrations/appboy/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/appboy/#what-branch-sends-to-braze", 
            "text": "Branch Analytics Tag  Braze Data Placeholder Tag      Campaign  campaign    Channel  adgroup", 
            "title": "What Branch sends to Braze"
        }, 
        {
            "location": "/pages/integrations/appsflyer/", 
            "text": "Overview\n\n\nWith a push of a button you can send your Branch install data and attributions to your AppsFlyer dashboard, helping you understand the power of Branch as an acquisition pathway.\n\n\nHow does it work?\n\n\nOnce the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your AppsFlyer Information will result in Branch automatically forwarding attribution information for your acquisitions. As a result, you can segment and analyze your Branch-led users in your AppsFlyer dashboard.\n\n\nWhat events does Branch send?\n\n\nBranch will send all Branch mobile link clicks to AppsFlyer. This includes sending analytics information you've added to your Branch links, such as campaign and channel.\n\n\nWhat does it look like?\n\n\nBranch events will appear on the AppsFlyer dashboard, in the overview page. Scroll to the \nAggregated Performance Report\n section, and you'll notice Branch led attributions fall under the name \nbranch_int\n.\n\n\n\n\nYou can click into \nbranch_int\n in the above screenshot and then see the breakdown of clicks and installs by campaign specified.\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already integrated the Branch mobile SDK.\n\n\nYou also need to be a AppsFlyer customer and have the AppsFlyer SDK.\n\n\n\n\nRetrieve your AppsFlyer Information\n\n\nIn your AppsFlyer dashboard, grab your app identifier information.\n\n\nFor iOS, this will be the iTunes ID of your iOS app, without the \nid\n portion. If you have \nid123\n, simply put \n123\n into the Branch data integration card.\n\n\nFor Android, this will be your package name registered on AppsFlyer. If your package is registered as \nio.branch.test\n, then simply put \nio.branch.test\n in the Android section of the AppsFlyer Data Integration card.\n\n\nConfigure the Branch Dashboard\n\n\n\n\nOn the Branch Dashboard (dashboard.branch.io), navigate to the \nIntegrations page\n.\n\n\nLocate AppsFlyer and choose \nEnable\n.\n\n\nIf you have not yet entered billing information, please do so now.\n\n\nEnter your AppsFlyer information and hit \nSave\n.\n\n\n\n\nAdvanced\n\n\nWhat Branch Sends to AppsFlyer\n\n\n\n\n\n\n\n\nBranch Analytics Tag\n\n\nAppsFlyer Data Placeholder Tag\n\n\n\n\n\n\n\n\n\n\nCampaign\n\n\nMaps to \nAppsFlyer Campaign\n, \nc\n\n\n\n\n\n\nChannel\n\n\nMaps to \nAppsFlyer Channel\n, \naf_channel\n\n\n\n\n\n\n\n\nThe default Media Source will appear as \"branch_int\" (mandated by AppsFlyer and cannot be changed).\n\n\nYou can also append additional \nAppsFlyer Parameters in this format\n in link data or as query parameters.\n\n\nFor example, if you wanted to add Ad and Ad Set values to your link, you can do the following:\n\nhttps://mycompany.app.link/123245?af_ad=MyAd\naf_adset=MyAdSet\n\n\nSupport\n\n\nThere are common strategies to take while troubleshooting.\n\n\nData isn't appearing after simulating an event\n\n\nIt's likely that the device being tested on is already attributed. The proper steps to perform an attribution are as follows:\n\n\n\n\nDisable setDebug through the Branch SDK\n\n\nUninstall app from device.\n\n\nReset iOS IDFA, or Google Advertising ID\n\n\nClick Branch link\n\n\nDeploy app from XCode or Android Studio\n\n\nConfirm a fresh install occurred on Branch / AppsFlyer.\n\n\n\n\nInstalls not being attributed to Branch\n\n\nFor AppsFlyer to attribute installs properly to Branch, fingerprinting must be enabled for your app in your AppsFlyer settings. If you see Branch clicks but not installs appearing, this may be the issue. Ask your AppsFlyer Account Manager to enable fingerprinting for your app.", 
            "title": "Appsflyer"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#overview", 
            "text": "With a push of a button you can send your Branch install data and attributions to your AppsFlyer dashboard, helping you understand the power of Branch as an acquisition pathway.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#how-does-it-work", 
            "text": "Once the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your AppsFlyer Information will result in Branch automatically forwarding attribution information for your acquisitions. As a result, you can segment and analyze your Branch-led users in your AppsFlyer dashboard.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#what-events-does-branch-send", 
            "text": "Branch will send all Branch mobile link clicks to AppsFlyer. This includes sending analytics information you've added to your Branch links, such as campaign and channel.", 
            "title": "What events does Branch send?"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#what-does-it-look-like", 
            "text": "Branch events will appear on the AppsFlyer dashboard, in the overview page. Scroll to the  Aggregated Performance Report  section, and you'll notice Branch led attributions fall under the name  branch_int .   You can click into  branch_int  in the above screenshot and then see the breakdown of clicks and installs by campaign specified.", 
            "title": "What does it look like?"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#prerequisites", 
            "text": "This guide requires you to have already integrated the Branch mobile SDK.  You also need to be a AppsFlyer customer and have the AppsFlyer SDK.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#retrieve-your-appsflyer-information", 
            "text": "In your AppsFlyer dashboard, grab your app identifier information.  For iOS, this will be the iTunes ID of your iOS app, without the  id  portion. If you have  id123 , simply put  123  into the Branch data integration card.  For Android, this will be your package name registered on AppsFlyer. If your package is registered as  io.branch.test , then simply put  io.branch.test  in the Android section of the AppsFlyer Data Integration card.", 
            "title": "Retrieve your AppsFlyer Information"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#configure-the-branch-dashboard", 
            "text": "On the Branch Dashboard (dashboard.branch.io), navigate to the  Integrations page .  Locate AppsFlyer and choose  Enable .  If you have not yet entered billing information, please do so now.  Enter your AppsFlyer information and hit  Save .", 
            "title": "Configure the Branch Dashboard"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#what-branch-sends-to-appsflyer", 
            "text": "Branch Analytics Tag  AppsFlyer Data Placeholder Tag      Campaign  Maps to  AppsFlyer Campaign ,  c    Channel  Maps to  AppsFlyer Channel ,  af_channel     The default Media Source will appear as \"branch_int\" (mandated by AppsFlyer and cannot be changed).  You can also append additional  AppsFlyer Parameters in this format  in link data or as query parameters.  For example, if you wanted to add Ad and Ad Set values to your link, you can do the following: https://mycompany.app.link/123245?af_ad=MyAd af_adset=MyAdSet", 
            "title": "What Branch Sends to AppsFlyer"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#support", 
            "text": "There are common strategies to take while troubleshooting.", 
            "title": "Support"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#data-isnt-appearing-after-simulating-an-event", 
            "text": "It's likely that the device being tested on is already attributed. The proper steps to perform an attribution are as follows:   Disable setDebug through the Branch SDK  Uninstall app from device.  Reset iOS IDFA, or Google Advertising ID  Click Branch link  Deploy app from XCode or Android Studio  Confirm a fresh install occurred on Branch / AppsFlyer.", 
            "title": "Data isn't appearing after simulating an event"
        }, 
        {
            "location": "/pages/integrations/appsflyer/#installs-not-being-attributed-to-branch", 
            "text": "For AppsFlyer to attribute installs properly to Branch, fingerprinting must be enabled for your app in your AppsFlyer settings. If you see Branch clicks but not installs appearing, this may be the issue. Ask your AppsFlyer Account Manager to enable fingerprinting for your app.", 
            "title": "Installs not being attributed to Branch"
        }, 
        {
            "location": "/pages/integrations/clevertap/", 
            "text": "Overview\n\n\nWith a push of a button you can send your Branch data to your CleverTap dashboard, helping you understand the power of Branch as an acquisition pathway.\n\n\n\n\nTip\n\n\nThe CleverTap Data Integration is in private beta. Please contact your Account manager or \n to enable the CleverTap Data Integration.\n\n\n\n\nHow does it work?\n\n\nOnce the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration will result in Branch automatically forwarding referred events to CleverTap, in the exact format CleverTap expects.\n\n\nWhat events does Branch send?\n\n\nBranch will send \nreferred\n \ninstalls\n and \nopens\n, as well as any \ncustom events and commerce events\n you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends all the data that is attached to the link that drove the referred event. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users.\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have integrated the Branch SDK in your mobile apps.\n\n\nYou also need to be an CleverTap customer and have the \nCleverTap SDK installed\n in your app.\n\n\n\n\nRetrieve your CleverTap Credentials\n\n\nFind your CleverTap Account Credentials. Later, you'll enter them into the Branch Dashboard.\n\n\n\n\n\n\nLog in to your \nCleverTap account\n  and navigate to Settings by clicking the cog at the top of the screen, then \nSettings Dashboard\n.\n\n\n\n\n\n\n\n\nEnsure you're looking at the correct app for your integration, then click the eye icon to show your account credentials.\n\n\n\n\n\n\n\n\nCopy these account credentials into the Branch dashboard as instructed below.\n\n\n\n\n\n\nConfigure the Branch Dashboard\n\n\n\n\nOn the Branch Dashboard (dashboard.branch.io), navigate to the \nIntegrations page\n.\n\n\n\n\nSearch for CleverTap. If you don't see CleverTap, please contact your Branch Account Manager or \n to enable the CleverTap Data Integration.\n\n\n\n\n\n\n\n\nEnter your CleverTap credentials into the corresponding boxes in the Branch Dashboard as shown below and hit \nSave\n.\n\n\n\n\n\n\n\n\nCapture IDFA/GAID\n\n\nEnsure that you are capturing both the Google Advertising Identifier (GAID) on Android, and the IDFA on iOS.\n\n\n\n\nGoogle Advertising ID is required\n\n\nCleverTap requires the Google Advertising ID to be sent. Android ID (the hardware ID) alone is not enough.\n\n\n\n\nCleverTap identity support\n\n\nYou must use the following code to send your CleverTap identity to Branch so that user identities are correctly assigned in CleverTap. \n\n\niOS\n\n\nObjective-C\n\nInside \ndidFinishLaunchingWithOptions\n\n\nBranch\n \n*\nbranch\n \n=\n \n[\nBranch\n \ngetInstance\n];\n\n\n[\nCleverTap\n \nautoIntegrate\n];\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetRequestMetadataKey\n:\n@\n$clevertap_attribution_id\n\n\nvalue\n:[[\nCleverTap\n \nsharedInstance\n]\n \nprofileGetCleverTapAttributionIdentifier\n]];\n\n\n\n\n\nSwift\n\nInside \ndidFinishLaunchingWithOptions\n:\n\n\nCleverTap\n.\nautoIntegrate\n()\n\n\nif\n \nlet\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n()\n \n{\n\n    \nbranch\n.\nsetRequestMetadataKey\n(\n$clevertap_attribution_id\n,\n \nvalue\n:\nCleverTap\n.\nsharedInstance\n()?\nprofileGetCleverTapAttributionIdentifier\n()\n \nas\n \nNSObject\n!);\n\n\n}\n\n\n\n\n\nAndroid\n\n\nBefore you initialize in your Application \n#onCreate\n or Deep Link Activity\u2019s \n#onCreate\n.\n\n\nBranch\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n();\n\n\nbranch\n.\nsetRequestMetadata\n(\n$clevertap_attribution_id\n,\n\n\ncleverTapInstance\n.\ngetCleverTapAttributionIdentifier\n());\n\n\n\n\n\nUpgrade to the latest SDKs [if necessary]\n\n\nPlease ensure you're using the Branch iOS SDK 0.19.5 or greater, and Android SDK v2.12.1 or greater. If you implemented Branch after October 11th 2017, you are likely already on this version or later.\n\n\nSupport\n\n\nTesting your CleverTap integration\n\n\nThe simplest way to test your integration is working end to end is to open your app \nfrom a Branch link\n then verify the data appears in CleverTap. After doing this, you will know how you to test more advanced scenarios.\n\n\n\n\nCreate a Branch Quick Link at \nhttps://dashboard.branch.io/quick-links\n.\n\n\nClick that Branch link to open your app.\n\n\nIn your Branch dashboard, verify you see the open event show as a \"referred session\" with a \"session referring link URL\" in your Branch dashboard under \"Liveview \n Events\"", 
            "title": "CleverTap"
        }, 
        {
            "location": "/pages/integrations/clevertap/#overview", 
            "text": "With a push of a button you can send your Branch data to your CleverTap dashboard, helping you understand the power of Branch as an acquisition pathway.   Tip  The CleverTap Data Integration is in private beta. Please contact your Account manager or   to enable the CleverTap Data Integration.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/clevertap/#how-does-it-work", 
            "text": "Once the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration will result in Branch automatically forwarding referred events to CleverTap, in the exact format CleverTap expects.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/pages/integrations/clevertap/#what-events-does-branch-send", 
            "text": "Branch will send  referred   installs  and  opens , as well as any  custom events and commerce events  you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends all the data that is attached to the link that drove the referred event. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users.", 
            "title": "What events does Branch send?"
        }, 
        {
            "location": "/pages/integrations/clevertap/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/clevertap/#prerequisites", 
            "text": "This guide requires you to have integrated the Branch SDK in your mobile apps.  You also need to be an CleverTap customer and have the  CleverTap SDK installed  in your app.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/clevertap/#retrieve-your-clevertap-credentials", 
            "text": "Find your CleverTap Account Credentials. Later, you'll enter them into the Branch Dashboard.    Log in to your  CleverTap account   and navigate to Settings by clicking the cog at the top of the screen, then  Settings Dashboard .     Ensure you're looking at the correct app for your integration, then click the eye icon to show your account credentials.     Copy these account credentials into the Branch dashboard as instructed below.", 
            "title": "Retrieve your CleverTap Credentials"
        }, 
        {
            "location": "/pages/integrations/clevertap/#configure-the-branch-dashboard", 
            "text": "On the Branch Dashboard (dashboard.branch.io), navigate to the  Integrations page .   Search for CleverTap. If you don't see CleverTap, please contact your Branch Account Manager or   to enable the CleverTap Data Integration.     Enter your CleverTap credentials into the corresponding boxes in the Branch Dashboard as shown below and hit  Save .", 
            "title": "Configure the Branch Dashboard"
        }, 
        {
            "location": "/pages/integrations/clevertap/#capture-idfagaid", 
            "text": "Ensure that you are capturing both the Google Advertising Identifier (GAID) on Android, and the IDFA on iOS.   Google Advertising ID is required  CleverTap requires the Google Advertising ID to be sent. Android ID (the hardware ID) alone is not enough.", 
            "title": "Capture IDFA/GAID"
        }, 
        {
            "location": "/pages/integrations/clevertap/#clevertap-identity-support", 
            "text": "You must use the following code to send your CleverTap identity to Branch so that user identities are correctly assigned in CleverTap.", 
            "title": "CleverTap identity support"
        }, 
        {
            "location": "/pages/integrations/clevertap/#ios", 
            "text": "Objective-C \nInside  didFinishLaunchingWithOptions  Branch   * branch   =   [ Branch   getInstance ];  [ CleverTap   autoIntegrate ];  [[ Branch   getInstance ]   setRequestMetadataKey : @ $clevertap_attribution_id  value :[[ CleverTap   sharedInstance ]   profileGetCleverTapAttributionIdentifier ]];   Swift \nInside  didFinishLaunchingWithOptions :  CleverTap . autoIntegrate ()  if   let   branch   =   Branch . getInstance ()   { \n     branch . setRequestMetadataKey ( $clevertap_attribution_id ,   value : CleverTap . sharedInstance ()? profileGetCleverTapAttributionIdentifier ()   as   NSObject !);  }", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/integrations/clevertap/#android", 
            "text": "Before you initialize in your Application  #onCreate  or Deep Link Activity\u2019s  #onCreate .  Branch   branch   =   Branch . getInstance ();  branch . setRequestMetadata ( $clevertap_attribution_id ,  cleverTapInstance . getCleverTapAttributionIdentifier ());", 
            "title": "Android"
        }, 
        {
            "location": "/pages/integrations/clevertap/#upgrade-to-the-latest-sdks-if-necessary", 
            "text": "Please ensure you're using the Branch iOS SDK 0.19.5 or greater, and Android SDK v2.12.1 or greater. If you implemented Branch after October 11th 2017, you are likely already on this version or later.", 
            "title": "Upgrade to the latest SDKs [if necessary]"
        }, 
        {
            "location": "/pages/integrations/clevertap/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/integrations/clevertap/#testing-your-clevertap-integration", 
            "text": "The simplest way to test your integration is working end to end is to open your app  from a Branch link  then verify the data appears in CleverTap. After doing this, you will know how you to test more advanced scenarios.   Create a Branch Quick Link at  https://dashboard.branch.io/quick-links .  Click that Branch link to open your app.  In your Branch dashboard, verify you see the open event show as a \"referred session\" with a \"session referring link URL\" in your Branch dashboard under \"Liveview   Events\"", 
            "title": "Testing your CleverTap integration"
        }, 
        {
            "location": "/pages/integrations/fabric-answers/", 
            "text": "Overview\n\n\nIntegration with Fabric's Answers is totally automatic as long as you've integrated both Branch and Answers. Branch will automatically send the following three events to Answers:\n\n\n\n\nBranch Install\n: This event is sent when a user installs your app after clicking a Branch link.\n\n\nBranch Open\n: This event is sent when a user clicks a Branch link but already has your app installed.\n\n\nBranch Share\n: This event is sent when the has shared a link on a channel using the \nBranch share sheet\n.\n\n\n\n\nWith every single event that's recorded, the following custom Branch link analytics labels are sent as Answers event attributes \nif present\n:\n\n\n\n\nchannel\n\n\ncampaign\n\n\nfeature\n\n\nstage\n\n\ntags\n\n\nreferring_link\n\n\n\n\nEnable Answers\n\n\nIf you're looking to get started on this, it's very simple. Just follow the simple step by step instructions:\n\n\n\n\nIntegrate the Branch SDKs and start using links! Make sure you're using iOS 0.12.3+ or Android 1.13.2+.\n\n\nHead to your \nFabric dashboard\n\n\nFind the \nAnswers\n kit on the left hand nav bar\n\n\nClick it and accept terms of service for Answers.\n\n\nStart getting critical Branch growth insights in your Answers dash", 
            "title": "Fabric Answers"
        }, 
        {
            "location": "/pages/integrations/fabric-answers/#overview", 
            "text": "Integration with Fabric's Answers is totally automatic as long as you've integrated both Branch and Answers. Branch will automatically send the following three events to Answers:   Branch Install : This event is sent when a user installs your app after clicking a Branch link.  Branch Open : This event is sent when a user clicks a Branch link but already has your app installed.  Branch Share : This event is sent when the has shared a link on a channel using the  Branch share sheet .   With every single event that's recorded, the following custom Branch link analytics labels are sent as Answers event attributes  if present :   channel  campaign  feature  stage  tags  referring_link", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/fabric-answers/#enable-answers", 
            "text": "If you're looking to get started on this, it's very simple. Just follow the simple step by step instructions:   Integrate the Branch SDKs and start using links! Make sure you're using iOS 0.12.3+ or Android 1.13.2+.  Head to your  Fabric dashboard  Find the  Answers  kit on the left hand nav bar  Click it and accept terms of service for Answers.  Start getting critical Branch growth insights in your Answers dash", 
            "title": "Enable Answers"
        }, 
        {
            "location": "/pages/integrations/google-analytics/", 
            "text": "Overview\n\n\nWith a push of a button you can send your Branch data to your Google Analytics dashboard, helping you understand the power of Branch as an acquisition pathway. If you're interested in the segment of users coming into your apps through Branch and want to measure their events against your other cohorts, this guide can help.\n\n\nHow does it work?\n\n\nOnce the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your Google Analytics Tracking Id will result in Branch automatically forwarding referred events to Google Analytics, in the exact format Google Analytics expects. This includes automatically setting various UTM tags that can be used to determine the source of new users.\n\n\nWhat events does Branch send?\n\n\nBranch will send \nreferred\n \ninstalls\n and \nopens\n, as well as any \ncustom events\n you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends over analytics data that is attached to the link, whether it's UTM tags or fields set on the Branch Dashboard (e.g. Campaign, Channel, Feature). This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to Google Analytics \nhere\n.\n\n\nWhat does it look like?\n\n\nBranch events will appear alongside your other tracked events in Google Analytics. Here is an example of the Sources screen with test information set.\n\n\n\n\nTo view referred \ninstalls\n and \nopens\n, as well as any custom events you track with Branch as they are occur, navigate to Real-Time \n Events. The event category for all referred Branch events is \nBranchEvent\n.\n\n\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already integrated the Branch mobile SDKs and the Google Analytics SDK into your app.\n\n\n\n\nEnter your Google Analytics Tracking ID\n\n\nFor the basic, codeless integration: find your Google Analytics Tracking ID (tid) and enter it into the Branch Dashboard.\n\n\n\n\nTo locate your Google Analytics Tracking ID, navigate to \nhttps://analytics.google.com\n and log in.\n\n\nClick on \nHome\n in the navigation bar at the top of the page. You should see your app(s), with accompanying Tracking ID.\n\n\nCopy the Tracking ID of whichever app you\u2019re going to use with Branch. This is also known as the Property ID, and it is of the form UA-XXXXXX-YY (e.g. UA-000000-01). Here\u2019s an example: \n\n\n\n\nConfigure the Branch Dashboard\n\n\n\n\nOn the Branch Dashboard (dashboard.branch.io), navigate to the \nIntegrations page\n.\n\n\nLocate Google Analytics and choose \nEnable\n.\n\n\nIf you have not yet entered billing information, please do so now.\n\n\nEnter your Google Analytics Tracking ID and hit \nSave\n\n\n\n\n\n\n\n\nPlease test your integration!\n\n\nBranch is not responsible for inaccurate API keys.\n\n\n\n\nMandatory: pass Client ID to Branch\n\n\n\n\nRequired for integration\n\n\nIf you don't include the below code snippet, events will be sent to Google but Google Analytics will not ingest them and they will not be visible on the Google Analytics dashboard.\n\n\n\n\nPlease specify \n$google_analytics_client_id\n. We will pass that to Google (as \ncid\n) so Google can match the events we send them to a specific user.\n\n\niOS:\n\n\nPlease add the following before initializing the Branch session:\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetRequestMetadataKey\n:\n@\n$google_analytics_client_id\n \nvalue\n:\n@\nCLIENT-ID-HERE\n];\n\n\n\n\n\nlet\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n();\n\n\nlet\n \nval\n \n=\n \ngai\n.\ntracker\n(\nwithTrackingId\n:\n \nkey\n)\n\n\nbranch\n.\nsetRequestMetadataKey\n(\n$google_analytics_client_id\n,\n \nvalue\n:\nval\n?.\nget\n(\ncid\n))\n\n\n\n\n\nAndroid:\n\n\nPlease call the following line right after you initialize Branch in your Application\u2019s #onCreate or Activity\u2019s #onCreate:\n\n\nmTracker\n \n=\n \nsAnalytics\n.\nnewTracker\n(\nUA-XXXXXXXX-1\n);\n\n\n\nString\n \nclient_id\n \n=\n \nmTracker\n.\nget\n(\ncid\n);\n\n\nBranch\n.\ngetInstance\n().\nsetRequestMetadata\n(\n$google_analytics_client_id\n,\nclient_id\n);\n\n\n\n\n\nAdvanced\n\n\nOptional Parameter - User ID\n\n\nIf you specify \n$google_analytics_user_id\n, we can pass that to Google (as \nuid\n).\n\n\niOS:\n\n\nYou can add the following before initializing the Branch session:\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetRequestMetadataKey\n:\n@\n$google_analytics_user_id\n \nvalue\n:\n@\nUSER-ID-HERE\n];\n\n\n\n\n\nAndroid:\n\n\nYou can call the following line right after you initialize Branch in your Application\u2019s #onCreate or Activity\u2019s #onCreate:\n\n\nBranch\n.\ngetInstance\n().\nsetRequestMetadata\n(\n$google_analytics_user_id\n,\n \nUSER-ID-HERE\n);\n\n\n\n\n\nWhat Branch Sends to Google Analytics\n\n\n\n\n\n\n\n\nProperty Name\n\n\nValue\n\n\nSourced from\n\n\nExample\n\n\nReq\n\n\n\n\n\n\n\n\n\n\n\n\nv\n\n\nAPI version\n\n\n[fixed]\n\n\n1\n\n\nY\n\n\n\n\n\n\n\n\ntid\n\n\nTracking ID\n\n\nBranch Dashboard\n\n\nUA-XXXXXX-Y\n\n\nY\n\n\n\n\n\n\n\n\nds\n\n\nSource (mobile SDK)\n\n\n[fixed]\n\n\napp\n\n\nY\n\n\n\n\n\n\n\n\nan\n\n\nApplication Name\n\n\n[fixed]\n\n\nBRANCH-APP\n\n\nY\n\n\n\n\n\n\n\n\nt\n\n\nType\n\n\n[fixed]\n\n\nevent\n\n\nY\n\n\n\n\n\n\n\n\nec\n\n\nEvent Category\n\n\n[fixed]\n\n\nBranchEvent\n\n\nY\n\n\n\n\n\n\n\n\ncid\n\n\nClient ID\n\n\n(discussed above, includes $google_analytics_client_id)\n\n\nAEBE52E7-03EE-455A-B3C4-E57283966239\n\n\nY\n\n\n\n\n\n\n\n\nuid\n\n\nUser Id\n\n\n$google_analytics_user_id\n\n\nUser A\n\n\nN\n\n\n\n\n\n\n\n\ncn\n\n\nCampaign Name\n\n\nutm_campaign -or- Branch campaign\n\n\n\"Beaches and breezes\"\n\n\nN\n\n\n\n\n\n\n\n\ncs\n\n\nCampaign Source\n\n\nutm_source -or- Branch channel\n\n\n\"Twitter\"\n\n\nN\n\n\n\n\n\n\n\n\ncm\n\n\nCampaign Medium\n\n\nutm_medium -or- Branch feature\n\n\n\"480banner\"\n\n\nN\n\n\n\n\n\n\n\n\nck\n\n\nCampaign Keywords\n\n\nutm_term -or- Branch $keywords\n\n\n[\"Keyword1\", \"keyword3\"]\n\n\nN\n\n\n\n\n\n\n\n\ncc\n\n\nCampaign Content\n\n\nutm_content -or- Branch tags\n\n\n\"Some content\"\n\n\nN\n\n\n\n\n\n\n\n\nea\n\n\nEvent Action (Name)\n\n\nevent name\n\n\ninstall\n\n\nY\n\n\n\n\n\n\n\n\nuip\n\n\nUser\u2019s IP Address\n\n\ncollected by Branch SDK\n\n\n111.111.111.111\n\n\nN\n\n\n\n\n\n\n\n\nz\n\n\nCache buster\n\n\n[unix time + random number]\n\n\n1461878903666\n\n\nN\n\n\n\n\n\n\n\n\n\n\n\n\nanonymous\n\n\n\n\nClient ID\"\n    If for some reason Branch does not receive an advertising identifier or hardware identifier, and you do not explicitly specify a \n$google_analytics_client_id\n, then Branch will send \nanonymous\n as the Client ID (\ncid\n). This is a required field by Google Analytics.\n\n\nTroubleshooting\n\n\nVery short or nonexistent session lengths\n\n\nGoogle Analytics will automatically start a session when Branch sends over installs and opens. Because of this, you should remove any code that creates a new session when your application starts up. For example, on iOS, you may be firing an event with the following:\n\n\n[\nbuilder\n \nset\n:\n@\nstart\n \nforKey\n:\nkGAISessionControl\n];\n\n\n\n\n\nYou should remove this so that your app does not start a new session. Otherwise you may see zero second sessions and your average session length drop.\n\n\nData not appearing in Google Analytics\n\n\n\n\nCheck your property ID in the Branch dashboard matches the property ID in Google Analytics\n\n\nEnsure you are looking at the right part of the Google Analytics dashboard. The data should appear in \nAcquisition \n Sources \n All\n\n\nCheck that your Google Analytics Views don't have any filters on them. For example, if your View filters out users in the United Kingdom, and your Branch opens are from users in the United Kingdom, you won't see this Branch data in your View.", 
            "title": "Google Analytics"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#overview", 
            "text": "With a push of a button you can send your Branch data to your Google Analytics dashboard, helping you understand the power of Branch as an acquisition pathway. If you're interested in the segment of users coming into your apps through Branch and want to measure their events against your other cohorts, this guide can help.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#how-does-it-work", 
            "text": "Once the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your Google Analytics Tracking Id will result in Branch automatically forwarding referred events to Google Analytics, in the exact format Google Analytics expects. This includes automatically setting various UTM tags that can be used to determine the source of new users.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#what-events-does-branch-send", 
            "text": "Branch will send  referred   installs  and  opens , as well as any  custom events  you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends over analytics data that is attached to the link, whether it's UTM tags or fields set on the Branch Dashboard (e.g. Campaign, Channel, Feature). This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to Google Analytics  here .", 
            "title": "What events does Branch send?"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#what-does-it-look-like", 
            "text": "Branch events will appear alongside your other tracked events in Google Analytics. Here is an example of the Sources screen with test information set.   To view referred  installs  and  opens , as well as any custom events you track with Branch as they are occur, navigate to Real-Time   Events. The event category for all referred Branch events is  BranchEvent .", 
            "title": "What does it look like?"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#prerequisites", 
            "text": "This guide requires you to have already integrated the Branch mobile SDKs and the Google Analytics SDK into your app.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#enter-your-google-analytics-tracking-id", 
            "text": "For the basic, codeless integration: find your Google Analytics Tracking ID (tid) and enter it into the Branch Dashboard.   To locate your Google Analytics Tracking ID, navigate to  https://analytics.google.com  and log in.  Click on  Home  in the navigation bar at the top of the page. You should see your app(s), with accompanying Tracking ID.  Copy the Tracking ID of whichever app you\u2019re going to use with Branch. This is also known as the Property ID, and it is of the form UA-XXXXXX-YY (e.g. UA-000000-01). Here\u2019s an example:", 
            "title": "Enter your Google Analytics Tracking ID"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#configure-the-branch-dashboard", 
            "text": "On the Branch Dashboard (dashboard.branch.io), navigate to the  Integrations page .  Locate Google Analytics and choose  Enable .  If you have not yet entered billing information, please do so now.  Enter your Google Analytics Tracking ID and hit  Save     Please test your integration!  Branch is not responsible for inaccurate API keys.", 
            "title": "Configure the Branch Dashboard"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#mandatory-pass-client-id-to-branch", 
            "text": "Required for integration  If you don't include the below code snippet, events will be sent to Google but Google Analytics will not ingest them and they will not be visible on the Google Analytics dashboard.   Please specify  $google_analytics_client_id . We will pass that to Google (as  cid ) so Google can match the events we send them to a specific user.  iOS:  Please add the following before initializing the Branch session:  [[ Branch   getInstance ]   setRequestMetadataKey : @ $google_analytics_client_id   value : @ CLIENT-ID-HERE ];   let   branch   =   Branch . getInstance ();  let   val   =   gai . tracker ( withTrackingId :   key )  branch . setRequestMetadataKey ( $google_analytics_client_id ,   value : val ?. get ( cid ))   Android:  Please call the following line right after you initialize Branch in your Application\u2019s #onCreate or Activity\u2019s #onCreate:  mTracker   =   sAnalytics . newTracker ( UA-XXXXXXXX-1 );  String   client_id   =   mTracker . get ( cid );  Branch . getInstance (). setRequestMetadata ( $google_analytics_client_id , client_id );", 
            "title": "Mandatory: pass Client ID to Branch"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#optional-parameter-user-id", 
            "text": "If you specify  $google_analytics_user_id , we can pass that to Google (as  uid ).  iOS:  You can add the following before initializing the Branch session:  [[ Branch   getInstance ]   setRequestMetadataKey : @ $google_analytics_user_id   value : @ USER-ID-HERE ];   Android:  You can call the following line right after you initialize Branch in your Application\u2019s #onCreate or Activity\u2019s #onCreate:  Branch . getInstance (). setRequestMetadata ( $google_analytics_user_id ,   USER-ID-HERE );", 
            "title": "Optional Parameter - User ID"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#what-branch-sends-to-google-analytics", 
            "text": "Property Name  Value  Sourced from  Example  Req       v  API version  [fixed]  1  Y     tid  Tracking ID  Branch Dashboard  UA-XXXXXX-Y  Y     ds  Source (mobile SDK)  [fixed]  app  Y     an  Application Name  [fixed]  BRANCH-APP  Y     t  Type  [fixed]  event  Y     ec  Event Category  [fixed]  BranchEvent  Y     cid  Client ID  (discussed above, includes $google_analytics_client_id)  AEBE52E7-03EE-455A-B3C4-E57283966239  Y     uid  User Id  $google_analytics_user_id  User A  N     cn  Campaign Name  utm_campaign -or- Branch campaign  \"Beaches and breezes\"  N     cs  Campaign Source  utm_source -or- Branch channel  \"Twitter\"  N     cm  Campaign Medium  utm_medium -or- Branch feature  \"480banner\"  N     ck  Campaign Keywords  utm_term -or- Branch $keywords  [\"Keyword1\", \"keyword3\"]  N     cc  Campaign Content  utm_content -or- Branch tags  \"Some content\"  N     ea  Event Action (Name)  event name  install  Y     uip  User\u2019s IP Address  collected by Branch SDK  111.111.111.111  N     z  Cache buster  [unix time + random number]  1461878903666  N       anonymous   Client ID\"\n    If for some reason Branch does not receive an advertising identifier or hardware identifier, and you do not explicitly specify a  $google_analytics_client_id , then Branch will send  anonymous  as the Client ID ( cid ). This is a required field by Google Analytics.", 
            "title": "What Branch Sends to Google Analytics"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#very-short-or-nonexistent-session-lengths", 
            "text": "Google Analytics will automatically start a session when Branch sends over installs and opens. Because of this, you should remove any code that creates a new session when your application starts up. For example, on iOS, you may be firing an event with the following:  [ builder   set : @ start   forKey : kGAISessionControl ];   You should remove this so that your app does not start a new session. Otherwise you may see zero second sessions and your average session length drop.", 
            "title": "Very short or nonexistent session lengths"
        }, 
        {
            "location": "/pages/integrations/google-analytics/#data-not-appearing-in-google-analytics", 
            "text": "Check your property ID in the Branch dashboard matches the property ID in Google Analytics  Ensure you are looking at the right part of the Google Analytics dashboard. The data should appear in  Acquisition   Sources   All  Check that your Google Analytics Views don't have any filters on them. For example, if your View filters out users in the United Kingdom, and your Branch opens are from users in the United Kingdom, you won't see this Branch data in your View.", 
            "title": "Data not appearing in Google Analytics"
        }, 
        {
            "location": "/pages/integrations/kochava/", 
            "text": "Overview\n\n\nThe Kochava integration sends \nall clicks on a Branch link\n from Branch to Kochava, for the enabled platform. Now you can see your valuable Branch attribution data in your Kochava dashboard.\n\n\nKochava offers unique, holistic and unbiased app measurement. From attribution and analytics to optimization, the Kochava platform provides precise, real-time visualization of campaign and app performance from ad impression through user lifetime value. Kochava customers enjoy a suite of optimization tools including Configurable Attribution, Fraud Detection and over 2200 certified network \n publisher integrations including super publishers like Facebook, Instagram, Google and Pandora.\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already integrated the Branch mobile SDKs into your app.\n\n\nYou also need to be a Kochava customer and have the \nKochava SDK installed\n in your app.\n\n\n\n\nCreate Campaign IDs in Kochava\n\n\nFor each platform (iOS and Android) you should create campaign IDs. You will do this in the Kochava dashboard.\n\n\nCreate a campaign\n\n\n\n\nLog in to Kochava.\n\n\nSelect the desired app .\n\n\nSelect \nApp Tools \n Campaign Manager\n\n\nClick \nAdd a Campaign\n\n\nEnter a unique Campaign name.\n\n\n\n\nCreate a Segment\n\n\n\n\nSelect \nCampaign Tools\nNew Segment\n\n\nEnter a Segment Name.\n\n\nClick submit\n\n\n\n\nCreate a tracker\n\n\n\n\nClick \nSegment Tools \n New Tracker\n\n\nEnter the Tracker Name.\n\n\nSelect \nTracker Type\n3rd Party Tracking\n (default setting)\n\n\nSelect \nSelect A Network \n Branch\n\n\nClick submit. (If no further trackers need to be created).\n\n\n\n\nOnce you've clicked \nSubmit\n you should see a screen with the campaign ID.\n\n\n\n\nConfigure the Branch Dashboard\n\n\n\n\nIn the Branch dashboard, go to the \nIntegrations page\n and look for the \nKochava\n card.\n\n\nClick \nEnable\n on the card\n\n\nEnter your Kochava campaign ID for the relevant platform\n\n\nHit \nSave\n\n\n\n\n\n\nAdvanced\n\n\nAdvanced network segmentation with Kochava\n\n\nIf you are interested in advanced network attribution segmentation in Kochava, you can use the same attribution parameters from a Kochava Click URL with your Branch link, and switch out campaign_ids. Please note that using this method will override the default attribution of Branch links to their default campaign in Kochava (only the specific Branch links that you do this for will not attribute to the default campaign).\n\n\n\n\nStart with an existing Branch link, for example, a \n Quick Link\n.\n\n\nNext, \ncreate a Kochava Click URL\n in the Kochava Dashboard with the parameters you'd like to capture.\n\n\nSelect the \"Click\" URL (as opposed to the Impression URL)\n\n\nAfter creating the URL, copy everything after \nclick\n value and append the parameters to the end of your Branch link.\n\n\n\n\n\n\n\n\nExample\n\n\nHere's an example of a finalized link for Branch and Kochava:\n\n\nhttps://mylinks.app.link/8AHjQx0fyv?\n    campaign_id=kokochavabranchdemo90128398\n\n    network=Bing\n\n\n\n\nSupport\n\n\nGeneral debugging tips\n\n\nWhen working with Kochava, be sure you are \nnot\n using test mode.", 
            "title": "Kochava"
        }, 
        {
            "location": "/pages/integrations/kochava/#overview", 
            "text": "The Kochava integration sends  all clicks on a Branch link  from Branch to Kochava, for the enabled platform. Now you can see your valuable Branch attribution data in your Kochava dashboard.  Kochava offers unique, holistic and unbiased app measurement. From attribution and analytics to optimization, the Kochava platform provides precise, real-time visualization of campaign and app performance from ad impression through user lifetime value. Kochava customers enjoy a suite of optimization tools including Configurable Attribution, Fraud Detection and over 2200 certified network   publisher integrations including super publishers like Facebook, Instagram, Google and Pandora.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/kochava/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/kochava/#prerequisites", 
            "text": "This guide requires you to have already integrated the Branch mobile SDKs into your app.  You also need to be a Kochava customer and have the  Kochava SDK installed  in your app.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/kochava/#create-campaign-ids-in-kochava", 
            "text": "For each platform (iOS and Android) you should create campaign IDs. You will do this in the Kochava dashboard.", 
            "title": "Create Campaign IDs in Kochava"
        }, 
        {
            "location": "/pages/integrations/kochava/#create-a-campaign", 
            "text": "Log in to Kochava.  Select the desired app .  Select  App Tools   Campaign Manager  Click  Add a Campaign  Enter a unique Campaign name.", 
            "title": "Create a campaign"
        }, 
        {
            "location": "/pages/integrations/kochava/#create-a-segment", 
            "text": "Select  Campaign Tools New Segment  Enter a Segment Name.  Click submit", 
            "title": "Create a Segment"
        }, 
        {
            "location": "/pages/integrations/kochava/#create-a-tracker", 
            "text": "Click  Segment Tools   New Tracker  Enter the Tracker Name.  Select  Tracker Type 3rd Party Tracking  (default setting)  Select  Select A Network   Branch  Click submit. (If no further trackers need to be created).   Once you've clicked  Submit  you should see a screen with the campaign ID.", 
            "title": "Create a tracker"
        }, 
        {
            "location": "/pages/integrations/kochava/#configure-the-branch-dashboard", 
            "text": "In the Branch dashboard, go to the  Integrations page  and look for the  Kochava  card.  Click  Enable  on the card  Enter your Kochava campaign ID for the relevant platform  Hit  Save", 
            "title": "Configure the Branch Dashboard"
        }, 
        {
            "location": "/pages/integrations/kochava/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/kochava/#advanced-network-segmentation-with-kochava", 
            "text": "If you are interested in advanced network attribution segmentation in Kochava, you can use the same attribution parameters from a Kochava Click URL with your Branch link, and switch out campaign_ids. Please note that using this method will override the default attribution of Branch links to their default campaign in Kochava (only the specific Branch links that you do this for will not attribute to the default campaign).   Start with an existing Branch link, for example, a   Quick Link .  Next,  create a Kochava Click URL  in the Kochava Dashboard with the parameters you'd like to capture.  Select the \"Click\" URL (as opposed to the Impression URL)  After creating the URL, copy everything after  click  value and append the parameters to the end of your Branch link.     Example  Here's an example of a finalized link for Branch and Kochava:  https://mylinks.app.link/8AHjQx0fyv?\n    campaign_id=kokochavabranchdemo90128398 \n    network=Bing", 
            "title": "Advanced network segmentation with Kochava"
        }, 
        {
            "location": "/pages/integrations/kochava/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/integrations/kochava/#general-debugging-tips", 
            "text": "When working with Kochava, be sure you are  not  using test mode.", 
            "title": "General debugging tips"
        }, 
        {
            "location": "/pages/integrations/localytics/", 
            "text": "Overview\n\n\nWe've partnered with Localytics to provide an easy way to deliver Branch installs and attributions to your Localytics dashboard. This is great for segmenting your users and providing higher granularity for your organic cohorts vs paid cohorts.\n\n\nHow it works\n\n\nWe have built a custom integration to automatically send all Branch install data to Localytics without any extra work on your side (besides integrating both SDKs). We just need some configuration information from your Localytics account, and we'll take care of the rest.\n\n\n\n\nHow do we differentiate Localytics and Branch installs?\n\n\nWe rely on a Branch link being clicked which leads to an install. This sets an internal boolean that an install came from Branch.\n\n\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already integrated the Branch mobile SDK into your app.\n\n\nYou also need to \nsign up for a Localytics account\n and \ninstall the Localytics SDK\n.\n\n\n\n\nSet up Localytics\n\n\n\n\nOn the Localytics dashboard, navigate to the \nAttribution\n section, click the \n\u2022\u2022\u2022\n (overflow) button, and select \nSettings\n.\n\n\n\nOnce there, you'll need to add your \nStore ID\n (iTunes for iOS, Play Store for Android).\n\n\nUnder the section \nAd Tracking Setup\n, check the box labeled \nThird-party Attribution\n. This will enable an \nAttribution ID\n for you. Copy it, and have it handy for the next steps.\n\n\n\n\n\n\n\nWhat does this mean?\n\n\nOnce you have selected to allow third-party attribution, Localytics will attribute non-Localytics installs to your dashboard. \nThis information is delayed by 10 minutes.\n\n\n\n\nConfigure the Branch Dashboard\n\n\n\n\nOn the Branch Dashboard (dashboard.branch.io), navigate to the \nIntegrations page\n.\n\n\nLocate Localytics and choose \nEnable\n.\n\n\nIf you have not yet entered billing information, please do so now.\n\n\nEnter your Localytics Attribution ID for each platform and hit \nSave\n\n\n\n\n\n\n\n\nPlease test your integration!\n\n\nBranch is not responsible for inaccurate API keys.\n\n\n\n\nAdvanced\n\n\nWhat Branch sends to Localytics\n\n\n\n\n\n\n\n\nBranch Analytics Tag\n\n\nLocalytics Data Placeholder Tag\n\n\n\n\n\n\n\n\n\n\nCampaign\n\n\ncampaign\n\n\n\n\n\n\nChannel\n\n\nadgroup\n\n\n\n\n\n\nFeature\n\n\ncreative_name\n\n\n\n\n\n\n\n\nBranch will also send any arbitrary parameters you attach to a link on to Localytics.  All Branch data will appear in the Localytics \"Attribution\" dashboard, but not the \"Events\" dashboard.\n\n\nSupport\n\n\nDebugging strategies\n\n\nWhen debugging Localytics, be sure to wait 10 minutes after you simulate an install. Also be sure to collect IDFA or Google Advertising ID.", 
            "title": "Localytics"
        }, 
        {
            "location": "/pages/integrations/localytics/#overview", 
            "text": "We've partnered with Localytics to provide an easy way to deliver Branch installs and attributions to your Localytics dashboard. This is great for segmenting your users and providing higher granularity for your organic cohorts vs paid cohorts.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/localytics/#how-it-works", 
            "text": "We have built a custom integration to automatically send all Branch install data to Localytics without any extra work on your side (besides integrating both SDKs). We just need some configuration information from your Localytics account, and we'll take care of the rest.   How do we differentiate Localytics and Branch installs?  We rely on a Branch link being clicked which leads to an install. This sets an internal boolean that an install came from Branch.", 
            "title": "How it works"
        }, 
        {
            "location": "/pages/integrations/localytics/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/localytics/#prerequisites", 
            "text": "This guide requires you to have already integrated the Branch mobile SDK into your app.  You also need to  sign up for a Localytics account  and  install the Localytics SDK .", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/localytics/#set-up-localytics", 
            "text": "On the Localytics dashboard, navigate to the  Attribution  section, click the  \u2022\u2022\u2022  (overflow) button, and select  Settings .  Once there, you'll need to add your  Store ID  (iTunes for iOS, Play Store for Android).  Under the section  Ad Tracking Setup , check the box labeled  Third-party Attribution . This will enable an  Attribution ID  for you. Copy it, and have it handy for the next steps.    What does this mean?  Once you have selected to allow third-party attribution, Localytics will attribute non-Localytics installs to your dashboard.  This information is delayed by 10 minutes.", 
            "title": "Set up Localytics"
        }, 
        {
            "location": "/pages/integrations/localytics/#configure-the-branch-dashboard", 
            "text": "On the Branch Dashboard (dashboard.branch.io), navigate to the  Integrations page .  Locate Localytics and choose  Enable .  If you have not yet entered billing information, please do so now.  Enter your Localytics Attribution ID for each platform and hit  Save     Please test your integration!  Branch is not responsible for inaccurate API keys.", 
            "title": "Configure the Branch Dashboard"
        }, 
        {
            "location": "/pages/integrations/localytics/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/localytics/#what-branch-sends-to-localytics", 
            "text": "Branch Analytics Tag  Localytics Data Placeholder Tag      Campaign  campaign    Channel  adgroup    Feature  creative_name     Branch will also send any arbitrary parameters you attach to a link on to Localytics.  All Branch data will appear in the Localytics \"Attribution\" dashboard, but not the \"Events\" dashboard.", 
            "title": "What Branch sends to Localytics"
        }, 
        {
            "location": "/pages/integrations/localytics/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/integrations/localytics/#debugging-strategies", 
            "text": "When debugging Localytics, be sure to wait 10 minutes after you simulate an install. Also be sure to collect IDFA or Google Advertising ID.", 
            "title": "Debugging strategies"
        }, 
        {
            "location": "/pages/integrations/mixpanel/", 
            "text": "Overview\n\n\nWith a push of a button you can send your Branch data to your Mixpanel dashboard, helping you understand the power of Branch as an acquisition pathway.\n\n\nHow does it work?\n\n\nOnce the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your Mixpanel Token will result in Branch automatically forwarding referred events to Mixpanel, in the exact format Mixpanel expects.\n\n\nWhat events does Branch send?\n\n\nBranch will send \nreferred\n \ninstalls\n and \nopens\n, as well as any \ncustom events\n you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends all the data that is attached to the link that drove the referred event. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to Mixpanel \nhere\n.\n\n\nWhat does it look like?\n\n\nBranch events will appear alongside your other tracked events in Mixpanel. These events will automatically have \n[Branch]\n prepended.\n\n\n\n\nAdditionally, individual events, such as those seen in Live View or visible when looking at People, will have Branch link data included. Here's an example:\n\n\n\n\nBranch events are similar to Mixpanel events in that they can be used in your existing funnels and tracked on the various pages and dashboards. However, unlike normal events, Branch events contain invaluable information about how users ended up in your app in the first place.\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already integrated the Branch mobile SDKs. \n\n\nYou also need to be a Mixpanel customer and have the Mixpanel SDK (\niOS\n, \nAndroid\n) installed in your app.\n\n\n\n\nRetrieve Mixpanel Token\n\n\nFor the basic, codeless integration: find your Mixpanel Token and enter it into the Branch Dashboard.\n\n\n\n\nNavigate to \nhttps://mixpanel.com\n and log into the Dashboard.\n\n\nClick on \nAccount\n in the navigation bar at the top of the page.\n\n\nChoose \nProjects\n in the modal that appears, then copy your app\u2019s Token: \n\n\n\n\nConfigure Branch Dashboard\n\n\nEnable Data Feeds\n\n\nData Integrations are included as part of the Data Feeds product. For more information on Data Feeds, and how to enable it, please read the \nData Feeds summary\n.\n\n\nSelect the integration\n\n\n\n\nNavigate to \nData Integrations\n within Data Feeds.\n\n\n\n\nFind the integration you need by typing in the search box.\n\n\n\n\n\n\nWe've upgraded our Data Integrations!\nWe've upgraded our Data Integrations to use people-based attribution. If you see the below screen instead of the screenshot above, please click \"Preview Now\" to upgrade to our updated integrations. We will be deprecating our legacy integrations in 2018.\n\n\n\n\n\n\n\n\n\n\n\n\nOn the Branch Dashboard (dashboard.branch.io), navigate to the \nIntegrations page\n.\n\n\n\n\nSearch for Mixpanel and click on the tile.\n\n\nEnter your Mixpanel Token and hit \nEnable\n.\n\n\n\n\n\n\n\n\nPlease test integration!\n\n\nBranch is not responsible for inaccurate API keys.\n\n\n\n\nPass Mixpanel Distinct ID\n\n\nPlease ensure you're using the Branch iOS SDK 0.12.2 or greater, and Android SDK v1.12.1 or greater.\n\n\nIn addition to the basic integration, you should add a tiny amount of code to your app. This will allow the Branch SDK to pass the user's Mixpanel Distinct ID to our servers. Branch will then pass that Distinct ID to Mixpanel when logging any event.\n\n\niOS:\n\n\nPlease add the following before initializing the Branch session:\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetRequestMetadataKey\n:\n@\n$mixpanel_distinct_id\n \nvalue\n:[\nMixpanel\n \nsharedInstance\n].\ndistinctId\n];\n\n\n\n\n\nAndroid:\n\n\nPlease call the following line right after you initialize Branch in your Application\u2019s #onCreate or Activity\u2019s #onCreate:\n\n\nMixpanelAPI\n \nmp\n \n=\n \nMixpanelAPI\n.\ngetInstance\n(\nthis\n,\n \nyour project token\n);\n\n\nBranch\n.\ngetInstance\n().\nsetRequestMetadata\n(\n$mixpanel_distinct_id\n,\n \nmp\n.\ngetDistinctId\n());\n\n\n\n\n\nFor more information, see \nWhy We Recommend Passing Mixpanel Distinct ID\n.\n\n\n\n\nChanges in Mixpanel Distinct ID\n\n\nIf you at any point change the Mixpanel Distinct ID for a user as she\u2019s using your app, you should invoke the same one line of code as above. This way, future calls from Branch to Mixpanel use the updated distinct id.\n\n\nExample for iOS:\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetRequestMetadataKey\n:\n@\n$mixpanel_distinct_id\n \nvalue\n:\n@\nUser A\n];\n\n\n\n\n\n\n\nAdditional Mixpanel Resources:\n\n\nFor a high level overview of identities in Mixpanel, see \nIdentity Management in Mixpanel\n. If you experience any issues regarding tracking identities or have general questions about the \n.alias()\n and \n.identify()\n methods, please take a look at \nMixpanel's documentation\n first. Additionally, reach out to \n if the problem persists.\n\n\nAdvanced\n\n\nWhat Branch Sends to Mixpanel\n\n\n\n\n\n\n\n\nProperty Name\n\n\nValue\n\n\nSourced from\n\n\nExample\n\n\nReq\n\n\n\n\n\n\n\n\n\n\n\n\nevent\n\n\nBranch event\n\n\nevent name\n\n\n[Branch] install\n\n\nY\n\n\n\n\n\n\n\n\nproperties.distinct_id\n\n\nUnique ID for device/user\n\n\nsee section below\n\n\nAEBE52E7-03EE-455A-B3C4-E57283966239\n\n\nN\n\n\n\n\n\n\n\n\nproperties.token\n\n\nMixpanel Token\n\n\nBranch Dashboard\n\n\need14a8aaa8c8ef777b8e9cb30826399\n\n\nY\n\n\n\n\n\n\n\n\nproperties.time\n\n\nEvent creation date\n\n\nevent\n\n\n1461878903\n\n\nN\n\n\n\n\n\n\n\n\nproperties.ANY-KEY (many)\n\n\nThe value associated with the key\n\n\nevent metadata or referring link data\n\n\n~channel: facebook\n\n\nN\n\n\n\n\n\n\n\n\n\n\nWhy We Recommend Passing Mixpanel Distinct ID\n\n\nBranch will automatically specify the Distinct ID requested by Mixpanel, if any of the IDentifiers that Mixpanel uses are available. On iOS, Branch will send the IDFA if present, or the identifierForVendor (IDFV) if present, otherwise it will omit Distinct ID. On Android Branch will send the Google Advertising ID if present, or the Android ID (hardware ID) if present, otherwise it will omit Distinct ID.\n\n\nOn iOS, the Mixpanel SDK by default will use the IDFA if present, otherwise it will use the identifierForVendor (IDFV) (also known as the vendor ID or identifierForVendor). In rare cases where the identifierForVendor (IDFV) is not available, it will generate a random UUID. In order for IDFA to be available, please be sure you have included AdSupport.framework.\n\n\nOn Android, the Mixpanel SDK by default does not use the Google Advertising ID or the Android ID (hardware ID). Instead, it generates a random UUID. This means that on Android, if you do not pass Branch the Mixpanel Distinct ID, we cannot properly associate Branch-generated events with users as identified by Mixpanel.\n\n\nSupport\n\n\nNuances with Multiple Devices and Mixpanel Identities/Aliases\n\n\nIf you at any point change the Mixpanel distinct id for a user as she\u2019s using your app, you should invoke the same one line of code as above. This way, future calls from Branch to Mixpanel use the updated distinct id.\n\n\nAdditionally, there is one scenario in which the event will be logged to Mixpanel but not associated with the correct user. This is due to limitations with identities on Mixpanel\u2019s end.\n\n\nHere is an example scenario:\n\n\nThe User has an iPhone and an iPad\n\n\niPhone has IDFA 1234XXXX-XXXX-XXXX-XXXXXXXXXXXX -- 1234 for short\n\n\niPad has IDFA 5678XXXX-XXXX-XXXX-XXXXXXXXXXXX -- 5678 for short\n\n\nThe User opens the app organically (not from a Branch link), and is automatically assigned the distinctId 1234 (this is the IDFA). Then the user finishes signing up, and alias() is called with value \"User A\", linking 1234 \n \"User A\". All is well so far.\n\n\nThe User then gets placed into a drip email campaign, targeted for re-engagement. She's checking her email on her iPad and clicks on a Branch link to the app. The app is opened. We send Mixpanel a referred event with an automatically assigned distinctId 5678 (this is the IDFA). Then the user logs in, and identify() is called with value \"User A\". Identify() is called because we want the user to match across both devices with the same identity = User A. If we called alias() in this second case, then there would be two distinctIds (and in Mixpanel\u2019s logic, two different people) - one with distinctId 1234 and another with distinctId 5678. In order to merge them, we have to identify() the user on the second device. An unfortunate side effect of this logic is that actions before identify() are not associated with the same user, as there are briefly two distinctIds..\n\n\nThe referred event associated with 5678 is not associated with 1234 / \"User A\".\n\n\nIn order for any additional events on this device to be associated with \"User A\", the app should invoke the one line of code as recommended in the section \nPass Mixpanel Distinct ID\n. Example:\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetRequestMetadataKey\n:\n@\n$mixpanel_distinct_id\n \nvalue\n:\n@\nUser A\n];\n\n\n\n\n\nIf there are ever workarounds for this, we will update this guide and notify our partners accordingly. \nHere is more information\n on how Mixpanel manages identities.", 
            "title": "Mixpanel"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#overview", 
            "text": "With a push of a button you can send your Branch data to your Mixpanel dashboard, helping you understand the power of Branch as an acquisition pathway.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#how-does-it-work", 
            "text": "Once the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your Mixpanel Token will result in Branch automatically forwarding referred events to Mixpanel, in the exact format Mixpanel expects.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#what-events-does-branch-send", 
            "text": "Branch will send  referred   installs  and  opens , as well as any  custom events  you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends all the data that is attached to the link that drove the referred event. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to Mixpanel  here .", 
            "title": "What events does Branch send?"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#what-does-it-look-like", 
            "text": "Branch events will appear alongside your other tracked events in Mixpanel. These events will automatically have  [Branch]  prepended.   Additionally, individual events, such as those seen in Live View or visible when looking at People, will have Branch link data included. Here's an example:   Branch events are similar to Mixpanel events in that they can be used in your existing funnels and tracked on the various pages and dashboards. However, unlike normal events, Branch events contain invaluable information about how users ended up in your app in the first place.", 
            "title": "What does it look like?"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#prerequisites", 
            "text": "This guide requires you to have already integrated the Branch mobile SDKs.   You also need to be a Mixpanel customer and have the Mixpanel SDK ( iOS ,  Android ) installed in your app.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#retrieve-mixpanel-token", 
            "text": "For the basic, codeless integration: find your Mixpanel Token and enter it into the Branch Dashboard.   Navigate to  https://mixpanel.com  and log into the Dashboard.  Click on  Account  in the navigation bar at the top of the page.  Choose  Projects  in the modal that appears, then copy your app\u2019s Token:", 
            "title": "Retrieve Mixpanel Token"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#configure-branch-dashboard", 
            "text": "", 
            "title": "Configure Branch Dashboard"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#enable-data-feeds", 
            "text": "Data Integrations are included as part of the Data Feeds product. For more information on Data Feeds, and how to enable it, please read the  Data Feeds summary .", 
            "title": "Enable Data Feeds"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#select-the-integration", 
            "text": "Navigate to  Data Integrations  within Data Feeds.   Find the integration you need by typing in the search box.    We've upgraded our Data Integrations! We've upgraded our Data Integrations to use people-based attribution. If you see the below screen instead of the screenshot above, please click \"Preview Now\" to upgrade to our updated integrations. We will be deprecating our legacy integrations in 2018.       On the Branch Dashboard (dashboard.branch.io), navigate to the  Integrations page .   Search for Mixpanel and click on the tile.  Enter your Mixpanel Token and hit  Enable .     Please test integration!  Branch is not responsible for inaccurate API keys.", 
            "title": "Select the integration"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#pass-mixpanel-distinct-id", 
            "text": "Please ensure you're using the Branch iOS SDK 0.12.2 or greater, and Android SDK v1.12.1 or greater.  In addition to the basic integration, you should add a tiny amount of code to your app. This will allow the Branch SDK to pass the user's Mixpanel Distinct ID to our servers. Branch will then pass that Distinct ID to Mixpanel when logging any event.  iOS:  Please add the following before initializing the Branch session:  [[ Branch   getInstance ]   setRequestMetadataKey : @ $mixpanel_distinct_id   value :[ Mixpanel   sharedInstance ]. distinctId ];   Android:  Please call the following line right after you initialize Branch in your Application\u2019s #onCreate or Activity\u2019s #onCreate:  MixpanelAPI   mp   =   MixpanelAPI . getInstance ( this ,   your project token );  Branch . getInstance (). setRequestMetadata ( $mixpanel_distinct_id ,   mp . getDistinctId ());   For more information, see  Why We Recommend Passing Mixpanel Distinct ID .   Changes in Mixpanel Distinct ID  If you at any point change the Mixpanel Distinct ID for a user as she\u2019s using your app, you should invoke the same one line of code as above. This way, future calls from Branch to Mixpanel use the updated distinct id.  Example for iOS:  [[ Branch   getInstance ]   setRequestMetadataKey : @ $mixpanel_distinct_id   value : @ User A ];    Additional Mixpanel Resources:  For a high level overview of identities in Mixpanel, see  Identity Management in Mixpanel . If you experience any issues regarding tracking identities or have general questions about the  .alias()  and  .identify()  methods, please take a look at  Mixpanel's documentation  first. Additionally, reach out to   if the problem persists.", 
            "title": "Pass Mixpanel Distinct ID"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#what-branch-sends-to-mixpanel", 
            "text": "Property Name  Value  Sourced from  Example  Req       event  Branch event  event name  [Branch] install  Y     properties.distinct_id  Unique ID for device/user  see section below  AEBE52E7-03EE-455A-B3C4-E57283966239  N     properties.token  Mixpanel Token  Branch Dashboard  eed14a8aaa8c8ef777b8e9cb30826399  Y     properties.time  Event creation date  event  1461878903  N     properties.ANY-KEY (many)  The value associated with the key  event metadata or referring link data  ~channel: facebook  N", 
            "title": "What Branch Sends to Mixpanel"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#why-we-recommend-passing-mixpanel-distinct-id", 
            "text": "Branch will automatically specify the Distinct ID requested by Mixpanel, if any of the IDentifiers that Mixpanel uses are available. On iOS, Branch will send the IDFA if present, or the identifierForVendor (IDFV) if present, otherwise it will omit Distinct ID. On Android Branch will send the Google Advertising ID if present, or the Android ID (hardware ID) if present, otherwise it will omit Distinct ID.  On iOS, the Mixpanel SDK by default will use the IDFA if present, otherwise it will use the identifierForVendor (IDFV) (also known as the vendor ID or identifierForVendor). In rare cases where the identifierForVendor (IDFV) is not available, it will generate a random UUID. In order for IDFA to be available, please be sure you have included AdSupport.framework.  On Android, the Mixpanel SDK by default does not use the Google Advertising ID or the Android ID (hardware ID). Instead, it generates a random UUID. This means that on Android, if you do not pass Branch the Mixpanel Distinct ID, we cannot properly associate Branch-generated events with users as identified by Mixpanel.", 
            "title": "Why We Recommend Passing Mixpanel Distinct ID"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/integrations/mixpanel/#nuances-with-multiple-devices-and-mixpanel-identitiesaliases", 
            "text": "If you at any point change the Mixpanel distinct id for a user as she\u2019s using your app, you should invoke the same one line of code as above. This way, future calls from Branch to Mixpanel use the updated distinct id.  Additionally, there is one scenario in which the event will be logged to Mixpanel but not associated with the correct user. This is due to limitations with identities on Mixpanel\u2019s end.  Here is an example scenario:  The User has an iPhone and an iPad  iPhone has IDFA 1234XXXX-XXXX-XXXX-XXXXXXXXXXXX -- 1234 for short  iPad has IDFA 5678XXXX-XXXX-XXXX-XXXXXXXXXXXX -- 5678 for short  The User opens the app organically (not from a Branch link), and is automatically assigned the distinctId 1234 (this is the IDFA). Then the user finishes signing up, and alias() is called with value \"User A\", linking 1234   \"User A\". All is well so far.  The User then gets placed into a drip email campaign, targeted for re-engagement. She's checking her email on her iPad and clicks on a Branch link to the app. The app is opened. We send Mixpanel a referred event with an automatically assigned distinctId 5678 (this is the IDFA). Then the user logs in, and identify() is called with value \"User A\". Identify() is called because we want the user to match across both devices with the same identity = User A. If we called alias() in this second case, then there would be two distinctIds (and in Mixpanel\u2019s logic, two different people) - one with distinctId 1234 and another with distinctId 5678. In order to merge them, we have to identify() the user on the second device. An unfortunate side effect of this logic is that actions before identify() are not associated with the same user, as there are briefly two distinctIds..  The referred event associated with 5678 is not associated with 1234 / \"User A\".  In order for any additional events on this device to be associated with \"User A\", the app should invoke the one line of code as recommended in the section  Pass Mixpanel Distinct ID . Example:  [[ Branch   getInstance ]   setRequestMetadataKey : @ $mixpanel_distinct_id   value : @ User A ];   If there are ever workarounds for this, we will update this guide and notify our partners accordingly.  Here is more information  on how Mixpanel manages identities.", 
            "title": "Nuances with Multiple Devices and Mixpanel Identities/Aliases"
        }, 
        {
            "location": "/pages/integrations/mparticle/", 
            "text": "Overview\n\n\nWith a push of a button you can send your Branch data to your mParticle dashboard, helping you to understand the power of Branch as an acquisition pathway, export your data to your entire suite of analytics tools and build custom audiences upon Branch data.\n\n\nThis documentation explains how to send \nBranch install events to mParticle\n. mParticle calls this an Inbound Feed Integration. If you'd like to send mParticle events to your Branch dashboard, please review the Branch/mParticle SDK Kit integration documentation for \niOS\n and \nAndroid\n. \n\n\nHow does it work?\n\n\nOnce the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your mParticle token will result in Branch automatically forwarding attributed installs to mParticle, in the exact format mParticle expects.\n\n\nWhat events does Branch send?\n\n\nBranch will send \nattributed installs\n. Branch also sends all the data that is attached to the link that drove the attributed installs. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to mParticle \nhere\n.\n\n\nWhat does it look like?\n\n\nBranch events will appear as an attribution event in mParticle. You can then export Branch data to your other data sources.\n\n\nBranch attribution events are mapped as follows:\n\n\n\n\nEvent Type = Custom Event\n\n\nCustom Event Type = attribution\n\n\nEvent Name = attribution\n\n\n\n\n\n\nFor information on how to test your integration and see more detailed data, please review our \ntesting instructions below\n.\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already integrated the Branch and mParticle mobile SDK(s).\n\n\nThis guide requires you to have the \nAdSupportFramework\n on iOS and [Google Play Services library] (\nhttps://docs.branch.io/pages/apps/android-launch/#submitting-to-the-play-store\n) on Android.\n\n\n\n\nRetrieve mParticle Token\n\n\nFind your mParticle Token and enter it into the Branch Dashboard.\n\n\n\n\nNavigate to \nhttps://app.mparticle.com\n and log into the Dashboard.\n\n\nIn the dashboard, navigate to \nSetup \n Inputs\n. \n\n\n\n\nClick on \niOS\n or \nAndroid\n.\n\n\n\n\n\n\n\n\nCopy your key and secret - you'll enter it into the Branch dashboard in a minute.\n\n\n\n\n\n\n\n\nConfigure Branch Dashboard\n\n\nEnable Data Feeds\n\n\nData Integrations are included as part of the Data Feeds product. For more information on Data Feeds, and how to enable it, please read the \nData Feeds summary\n.\n\n\nSelect the integration\n\n\n\n\nNavigate to \nData Integrations\n within Data Feeds.\n\n\n\n\nFind the integration you need by typing in the search box.\n\n\n\n\n\n\nWe've upgraded our Data Integrations!\nWe've upgraded our Data Integrations to use people-based attribution. If you see the below screen instead of the screenshot above, please click \"Preview Now\" to upgrade to our updated integrations. We will be deprecating our legacy integrations in 2018.\n\n\n\n\n\n\n\n\n\n\n\n\nOn the Branch Dashboard (dashboard.branch.io), navigate to the \nIntegrations page\n.\n\n\n\n\nSearch for mParticle and click on the tile.\n\n\n\n\nEnter your mParticle Token and hit \nEnable\n.\n\n\n\n\n\n\nPlease test integration!\n\n\nBranch is not responsible for inaccurate API keys.\n\n\n\n\n\n\n\n\nAdditional mParticle Resources:\n\n\nYou can find additional information about the Branch and mParticle integration in the mParticle documentation.\n\n\nAdvanced\n\n\nWhat Branch Sends to mParticle\n\n\n\n\n\n\n\n\nProperty Name\n\n\nValue\n\n\nSourced from\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nevent_name\n\n\n\"attribution\"\n\n\nhardcoded\n\n\n\"attribution\"\n\n\n\n\n\n\n\n\n\n\ncustom_event_type\n\n\n\"attribution\"\n\n\nhardcoded\n\n\n\"attribution\"\n\n\n\n\n\n\n\n\n\n\nevent_id\n\n\nUnique ID for the event\n\n\nBranch install event ID\n\n\n469939270182891107\n\n\n\n\n\n\n\n\n\n\ncustom_attributes\n\n\nBranch Link Data Dictionary\n\n\nLast Attributed Touch Data for the link to which the install was attributed\n\n\n\"campaign\": \"mParticle test\", \"channel\": \"Slack\"\n\n\n\n\n\n\n\n\n\n\ntimestamp_unixtime_ms\n\n\ntimestamp of the event in ms\n\n\nevent\n\n\n1513280479654\n\n\n\n\n\n\n\n\n\n\ndevice_info\n\n\nDevice Data, like OS Version and country\n\n\nBranch User Data for the device\n\n\n\"os_version\": \"10.0\",\"device_country\": \"US\"\n\n\n\n\n\n\n\n\n\n\nuser_identities\n\n\nmParticle customer ID (mostly empty)\n\n\nmParticle customer ID for the user\n\n\n\n\n\n\n\n\n\n\n\n\napplication_info\n\n\nApp information like package name\n\n\nBranch SDK/App Details\n\n\n\"application_name\": \"Branch-3rdParty-SDK-Testbed\",\"application_version\": \"1.2.0\"\n\n\n\n\n\n\n\n\n\n\nIP\n\n\nIP of the event\n\n\nDevice\n\n\n192.82.115.928\n\n\n\n\n\n\n\n\n\n\n\n\nTesting your integration\n\n\nTo see the data being passed to mParticle in more detail, you can set up a webhook to Requestbin. This will allow you to send only a subset of your Branch events to Requestbin and verify the data is coming through as expected. \n\n\n\n\nEnable the Branch Data Integration above. Install your app from a Branch link to generate some data in mParticle. It can take up to an hour for the custom attributes to show in mParticle. \n\n\n\n\nCreate a Branch link from the Quick Links section of the dashboard, with a campaign of \nbranch_test\n.\n\n\n\n\n\n\n\n\nIn mParticle, navigate to the Directory in mParticle and add \nWebhooks\n as an option. Add a Requestbin URL generated from \nhttps://requestb.in\n.\n\n\n\n\n\n\n\n\nTo refine the data being sent to the webhook, navigate to \nConnections \n Connect\n. \n\n\n\n\nSelect your OS as the input, and \nWebhooks\n as the output.\n\n\n\n\nSet a filter to filter on \ncampaign\n and put the campaign name of \nbranch_test\n that you added in your Branch link. \n\n\n\n\n\n\n\n\nFinally, view the Requestbin. You can do this by appending \n?inspect\n to your requestbin URL. You should be able to copy paste the POST body from the request bin into a JSON formatter like \nhttps://jsonlint.com/\n to view the event details.", 
            "title": "mParticle"
        }, 
        {
            "location": "/pages/integrations/mparticle/#overview", 
            "text": "With a push of a button you can send your Branch data to your mParticle dashboard, helping you to understand the power of Branch as an acquisition pathway, export your data to your entire suite of analytics tools and build custom audiences upon Branch data.  This documentation explains how to send  Branch install events to mParticle . mParticle calls this an Inbound Feed Integration. If you'd like to send mParticle events to your Branch dashboard, please review the Branch/mParticle SDK Kit integration documentation for  iOS  and  Android .", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/mparticle/#how-does-it-work", 
            "text": "Once the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your mParticle token will result in Branch automatically forwarding attributed installs to mParticle, in the exact format mParticle expects.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/pages/integrations/mparticle/#what-events-does-branch-send", 
            "text": "Branch will send  attributed installs . Branch also sends all the data that is attached to the link that drove the attributed installs. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to mParticle  here .", 
            "title": "What events does Branch send?"
        }, 
        {
            "location": "/pages/integrations/mparticle/#what-does-it-look-like", 
            "text": "Branch events will appear as an attribution event in mParticle. You can then export Branch data to your other data sources.  Branch attribution events are mapped as follows:   Event Type = Custom Event  Custom Event Type = attribution  Event Name = attribution    For information on how to test your integration and see more detailed data, please review our  testing instructions below .", 
            "title": "What does it look like?"
        }, 
        {
            "location": "/pages/integrations/mparticle/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/mparticle/#prerequisites", 
            "text": "This guide requires you to have already integrated the Branch and mParticle mobile SDK(s).  This guide requires you to have the  AdSupportFramework  on iOS and [Google Play Services library] ( https://docs.branch.io/pages/apps/android-launch/#submitting-to-the-play-store ) on Android.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/mparticle/#retrieve-mparticle-token", 
            "text": "Find your mParticle Token and enter it into the Branch Dashboard.   Navigate to  https://app.mparticle.com  and log into the Dashboard.  In the dashboard, navigate to  Setup   Inputs .    Click on  iOS  or  Android .     Copy your key and secret - you'll enter it into the Branch dashboard in a minute.", 
            "title": "Retrieve mParticle Token"
        }, 
        {
            "location": "/pages/integrations/mparticle/#configure-branch-dashboard", 
            "text": "", 
            "title": "Configure Branch Dashboard"
        }, 
        {
            "location": "/pages/integrations/mparticle/#enable-data-feeds", 
            "text": "Data Integrations are included as part of the Data Feeds product. For more information on Data Feeds, and how to enable it, please read the  Data Feeds summary .", 
            "title": "Enable Data Feeds"
        }, 
        {
            "location": "/pages/integrations/mparticle/#select-the-integration", 
            "text": "Navigate to  Data Integrations  within Data Feeds.   Find the integration you need by typing in the search box.    We've upgraded our Data Integrations! We've upgraded our Data Integrations to use people-based attribution. If you see the below screen instead of the screenshot above, please click \"Preview Now\" to upgrade to our updated integrations. We will be deprecating our legacy integrations in 2018.       On the Branch Dashboard (dashboard.branch.io), navigate to the  Integrations page .   Search for mParticle and click on the tile.   Enter your mParticle Token and hit  Enable .    Please test integration!  Branch is not responsible for inaccurate API keys.     Additional mParticle Resources:  You can find additional information about the Branch and mParticle integration in the mParticle documentation.", 
            "title": "Select the integration"
        }, 
        {
            "location": "/pages/integrations/mparticle/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/mparticle/#what-branch-sends-to-mparticle", 
            "text": "Property Name  Value  Sourced from  Example        event_name  \"attribution\"  hardcoded  \"attribution\"      custom_event_type  \"attribution\"  hardcoded  \"attribution\"      event_id  Unique ID for the event  Branch install event ID  469939270182891107      custom_attributes  Branch Link Data Dictionary  Last Attributed Touch Data for the link to which the install was attributed  \"campaign\": \"mParticle test\", \"channel\": \"Slack\"      timestamp_unixtime_ms  timestamp of the event in ms  event  1513280479654      device_info  Device Data, like OS Version and country  Branch User Data for the device  \"os_version\": \"10.0\",\"device_country\": \"US\"      user_identities  mParticle customer ID (mostly empty)  mParticle customer ID for the user       application_info  App information like package name  Branch SDK/App Details  \"application_name\": \"Branch-3rdParty-SDK-Testbed\",\"application_version\": \"1.2.0\"      IP  IP of the event  Device  192.82.115.928", 
            "title": "What Branch Sends to mParticle"
        }, 
        {
            "location": "/pages/integrations/mparticle/#testing-your-integration", 
            "text": "To see the data being passed to mParticle in more detail, you can set up a webhook to Requestbin. This will allow you to send only a subset of your Branch events to Requestbin and verify the data is coming through as expected.    Enable the Branch Data Integration above. Install your app from a Branch link to generate some data in mParticle. It can take up to an hour for the custom attributes to show in mParticle.    Create a Branch link from the Quick Links section of the dashboard, with a campaign of  branch_test .     In mParticle, navigate to the Directory in mParticle and add  Webhooks  as an option. Add a Requestbin URL generated from  https://requestb.in .     To refine the data being sent to the webhook, navigate to  Connections   Connect .    Select your OS as the input, and  Webhooks  as the output.   Set a filter to filter on  campaign  and put the campaign name of  branch_test  that you added in your Branch link.      Finally, view the Requestbin. You can do this by appending  ?inspect  to your requestbin URL. You should be able to copy paste the POST body from the request bin into a JSON formatter like  https://jsonlint.com/  to view the event details.", 
            "title": "Testing your integration"
        }, 
        {
            "location": "/pages/integrations/segment/", 
            "text": "Overview\n\n\nWith a push of a button you can send your Branch data to your Segment dashboard, helping you to understand the power of Branch as an acquisition pathway, export your data to your entire suite of analytics tools and build custom audiences upon Branch data.\n\n\nThis documentation explains how to send \nBranch install events to Segment\n. If you'd like to send Segment events to your Branch dashboard, please review the Branch/segment SDK Kit integration documentation for \niOS\n and \nAndroid\n. \n\n\nHow does it work?\n\n\nOnce the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your Segment credentials will result in Branch automatically forwarding attributed events to Segment, in the exact format Segment expects.\n\n\nWhat events does Branch send?\n\n\nBranch will send \nattributed\n \ninstalls\n and \nopens\n, as well as any \ncustom events\n and \ncommerce events\n you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends all the data that is attached to the link that drove the referred event. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to Segment \nhere\n.\n\n\nWhat does it look like?\n\n\nBranch events will appear as an event prepended with \nbranch_\n in your Segment debugger.\n\n\n\n\nAdditionally, individual events, such as those seen in Live View or visible when looking at People, will have Branch link data included. Here's an example:\n\n\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already integrated the Branch and Segment mobile SDK(s).\n\n\n\n\nRetrieve Segment Token\n\n\nFind your Segment Token and enter it into the Branch Dashboard.\n\n\n\n\nNavigate to \nhttps://app.segment.com\n and log into the Dashboard.\n\n\nIn the dashboard, navigate to your desired Workspace. \n\n\n\n\nIn that Workspace, navigate to \nSources\n and select the Source that has your app listed. Branch is not yet an independent Source, so Branch events appear within your app's Source.\n\n\n\n\n\n\n\n\nClick through to \nSettings \n API Keys\n\n\n\n\n\n\n\n\nCopy your key and secret - you'll enter it into the Branch dashboard in a minute.\n\n\n\n\n\n\nConfigure Branch Dashboard\n\n\nEnable Data Feeds\n\n\nData Integrations are included as part of the Data Feeds product. For more information on Data Feeds, and how to enable it, please read the \nData Feeds summary\n.\n\n\nSelect the integration\n\n\n\n\nNavigate to \nData Integrations\n within Data Feeds.\n\n\n\n\nFind the integration you need by typing in the search box.\n\n\n\n\n\n\nWe've upgraded our Data Integrations!\nWe've upgraded our Data Integrations to use people-based attribution. If you see the below screen instead of the screenshot above, please click \"Preview Now\" to upgrade to our updated integrations. We will be deprecating our legacy integrations in 2018.\n\n\n\n\n\n\n\n\n\n\n\n\nOn the Branch Dashboard (dashboard.branch.io), navigate to the \nIntegrations page\n.\n\n\n\n\nSearch for Segment and click on the tile.\n\n\n\n\nEnter your Segment Token and hit \nEnable\n.\n\n\n\n\n\n\n\n\n\n\nPlease test integration!\n\n\nBranch is not responsible for inaccurate API keys.\n\n\n\n\nPass Segment Anonymous ID\n\n\nWhen you're ready to send data through Branch, you'll need to make sure you pass through the configured Segment Anonymous ID the Branch SDKs. In order to do so, you'll ask the Segment SDK to provide you with the Segment Anonymous ID, and pass this value through \nsetRequestMetadataKey\n on the Branch SDKs.\n\n\nHere's a sample snippet showing this. \nNOTE\n you must set the correct key before calling \ninitSession\n. You must also initialize the Segment SDK before setting the request metadata in the Branch SDK.\n\n\niOS\n\n\nInside \ndidFinishLaunchingWithOptions\n\n\nBranch\n \n*\nbranch\n \n=\n \n[\nBranch\n \ngetInstance\n];\n\n\n[[\nBranch\n \ngetInstance\n]\n \nsetRequestMetadataKey\n:\n@\n$adobe_visitor_id\n \nvalue\n:[\nADBMobile\n \ntrackingIdentifier\n]];\n\n\n\n\n\nSwift\n\n\nInside \ndidFinishLaunchingWithOptions\n\n\nif\n \nlet\n \nbranch\n \n=\n \nBranch\n.\ngetInstance\n()\n \n{\n\n    \nbranch\n.\nsetRequestMetadataKey\n(\n$adobe_visitor_id\n,\n \nvalue\n:\nADBMobile\n.\ntrackingIdentifier\n()\n \nas\n \nNSObject\n!);\n\n\n}\n\n\n\n\n\nAndroid\n\n\nBefore you initialize in your Application#onCreate or Deep Link Activity's #onCreate.\n\n\nBranch\n.\ngetInstance\n().\nsetRequestMetadata\n(\n$segment_anonymous_id\n,\n \ncom\n.\nsegment\n.\nanalytics\n.\nAnalytics\n.\nwith\n(\nthis\n).\ngetAnalyticsContext\n().\ntraits\n().\nanonymousId\n());\n\n\n\n...\n\n\n\nBranch\n.\ninitSession\n(...);\n\n\n\n\n\nIn the above snippet, \nthis\n is the Activity context.\n\n\nAdvanced\n\n\nWhat Branch Sends to Segment\n\n\n\n\n\n\n\n\nProperty\n\n\nValue\n\n\nSourced from\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nevent\n\n\nBranch event\n\n\nevent name\n\n\nbranch_OPEN\n\n\n\n\n\n\n\n\n\n\nevent_id\n\n\nUnique ID for the event\n\n\nBranch event ID\n\n\n469939270182891107\n\n\n\n\n\n\n\n\n\n\nproperties\n\n\nBranch Link Data Dictionary\n\n\nLast Attributed Touch Data for the link to which the event was attributed\n\n\n\"campaign\": \"Segment test\", \"channel\": \"Slack\"\n\n\n\n\n\n\n\n\n\n\ndevice_info\n\n\nDevice Data, like OS\n\n\nBranch User Data for the device\n\n\n\"os\": \"ANDROID\"\n\n\n\n\n\n\n\n\n\n\nanonymousId\n\n\nSegment Anonymous ID\n\n\nSegment SDK provided Anonymous ID\n\n\n12356\n\n\n\n\n\n\n\n\n\n\nIP\n\n\nIP of the event\n\n\nDevice\n\n\n192.82.115.928\n\n\n\n\n\n\n\n\n\n\n\n\nAll of the above properties are received as flat \nproperties[key]\n, even though some are stored as dictionaries in Branch. They are grouped in our documentation for legibility.", 
            "title": "Segment"
        }, 
        {
            "location": "/pages/integrations/segment/#overview", 
            "text": "With a push of a button you can send your Branch data to your Segment dashboard, helping you to understand the power of Branch as an acquisition pathway, export your data to your entire suite of analytics tools and build custom audiences upon Branch data.  This documentation explains how to send  Branch install events to Segment . If you'd like to send Segment events to your Branch dashboard, please review the Branch/segment SDK Kit integration documentation for  iOS  and  Android .", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/segment/#how-does-it-work", 
            "text": "Once the Branch SDK is integrated into an app, Branch can detect which links are leading to installs, re-opens, and users' actions. Enabling this integration and providing your Segment credentials will result in Branch automatically forwarding attributed events to Segment, in the exact format Segment expects.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/pages/integrations/segment/#what-events-does-branch-send", 
            "text": "Branch will send  attributed   installs  and  opens , as well as any  custom events  and  commerce events  you track with Branch. Non-referred events, clicks, web session starts, and pageviews will be excluded. Branch also sends all the data that is attached to the link that drove the referred event. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to Segment  here .", 
            "title": "What events does Branch send?"
        }, 
        {
            "location": "/pages/integrations/segment/#what-does-it-look-like", 
            "text": "Branch events will appear as an event prepended with  branch_  in your Segment debugger.   Additionally, individual events, such as those seen in Live View or visible when looking at People, will have Branch link data included. Here's an example:", 
            "title": "What does it look like?"
        }, 
        {
            "location": "/pages/integrations/segment/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/segment/#prerequisites", 
            "text": "This guide requires you to have already integrated the Branch and Segment mobile SDK(s).", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/segment/#retrieve-segment-token", 
            "text": "Find your Segment Token and enter it into the Branch Dashboard.   Navigate to  https://app.segment.com  and log into the Dashboard.  In the dashboard, navigate to your desired Workspace.    In that Workspace, navigate to  Sources  and select the Source that has your app listed. Branch is not yet an independent Source, so Branch events appear within your app's Source.     Click through to  Settings   API Keys     Copy your key and secret - you'll enter it into the Branch dashboard in a minute.", 
            "title": "Retrieve Segment Token"
        }, 
        {
            "location": "/pages/integrations/segment/#configure-branch-dashboard", 
            "text": "", 
            "title": "Configure Branch Dashboard"
        }, 
        {
            "location": "/pages/integrations/segment/#enable-data-feeds", 
            "text": "Data Integrations are included as part of the Data Feeds product. For more information on Data Feeds, and how to enable it, please read the  Data Feeds summary .", 
            "title": "Enable Data Feeds"
        }, 
        {
            "location": "/pages/integrations/segment/#select-the-integration", 
            "text": "Navigate to  Data Integrations  within Data Feeds.   Find the integration you need by typing in the search box.    We've upgraded our Data Integrations! We've upgraded our Data Integrations to use people-based attribution. If you see the below screen instead of the screenshot above, please click \"Preview Now\" to upgrade to our updated integrations. We will be deprecating our legacy integrations in 2018.       On the Branch Dashboard (dashboard.branch.io), navigate to the  Integrations page .   Search for Segment and click on the tile.   Enter your Segment Token and hit  Enable .      Please test integration!  Branch is not responsible for inaccurate API keys.", 
            "title": "Select the integration"
        }, 
        {
            "location": "/pages/integrations/segment/#pass-segment-anonymous-id", 
            "text": "When you're ready to send data through Branch, you'll need to make sure you pass through the configured Segment Anonymous ID the Branch SDKs. In order to do so, you'll ask the Segment SDK to provide you with the Segment Anonymous ID, and pass this value through  setRequestMetadataKey  on the Branch SDKs.  Here's a sample snippet showing this.  NOTE  you must set the correct key before calling  initSession . You must also initialize the Segment SDK before setting the request metadata in the Branch SDK.  iOS  Inside  didFinishLaunchingWithOptions  Branch   * branch   =   [ Branch   getInstance ];  [[ Branch   getInstance ]   setRequestMetadataKey : @ $adobe_visitor_id   value :[ ADBMobile   trackingIdentifier ]];   Swift  Inside  didFinishLaunchingWithOptions  if   let   branch   =   Branch . getInstance ()   { \n     branch . setRequestMetadataKey ( $adobe_visitor_id ,   value : ADBMobile . trackingIdentifier ()   as   NSObject !);  }   Android  Before you initialize in your Application#onCreate or Deep Link Activity's #onCreate.  Branch . getInstance (). setRequestMetadata ( $segment_anonymous_id ,   com . segment . analytics . Analytics . with ( this ). getAnalyticsContext (). traits (). anonymousId ());  ...  Branch . initSession (...);   In the above snippet,  this  is the Activity context.", 
            "title": "Pass Segment Anonymous ID"
        }, 
        {
            "location": "/pages/integrations/segment/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/segment/#what-branch-sends-to-segment", 
            "text": "Property  Value  Sourced from  Example        event  Branch event  event name  branch_OPEN      event_id  Unique ID for the event  Branch event ID  469939270182891107      properties  Branch Link Data Dictionary  Last Attributed Touch Data for the link to which the event was attributed  \"campaign\": \"Segment test\", \"channel\": \"Slack\"      device_info  Device Data, like OS  Branch User Data for the device  \"os\": \"ANDROID\"      anonymousId  Segment Anonymous ID  Segment SDK provided Anonymous ID  12356      IP  IP of the event  Device  192.82.115.928       All of the above properties are received as flat  properties[key] , even though some are stored as dictionaries in Branch. They are grouped in our documentation for legibility.", 
            "title": "What Branch Sends to Segment"
        }, 
        {
            "location": "/pages/integrations/tune/", 
            "text": "Overview\n\n\nWith a push of a button you can send your Branch data to your Tune dashboard, helping you segment users, calculate LTV and understand the power of Branch links in acquiring users.\n\n\nWhat events does Branch send to Tune?\n\n\nBranch will send all \nBranch link clicks\n to Tune. Branch also sends all the data that is attached to the link. Tune then matches all downstream actions (installs, opens, custom events, payouts) back to the referring link. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to Tune in the advaned section.\n\n\nWhat does it look like?\n\n\nSee your Branch organic acquisition campaigns alongside your Tune data. You can also use Branch links with Tune measurement URL parameters to get the advantages of Branch deep linking with Tune's fine-grained attribution data and ROI analysis.\n\n\n\n\nSetup\n\n\nPrerequisites\n\n\n\n\nThis guide requires you to have already integrated the Branch SDK. You also need to be a Tune customer and have the Tune SDK (\niOS\n, \nAndroid\n) installed in your app.\n\n\n\n\nGet credentials from your Tune dashboard\n\n\nTo set up the integration you will need your \nTune Advertiser ID\n (an account-level identifier), your platform-specific Tune \nSite IDs\n (also known as App IDs) and a Tune \nPublisher ID\n for Branch.\n\n\nYou can find your \nAdvertiser ID\n by navigating to \"Accounts \n Advertiser Account\" in the left hand sidebar and finding the Advertiser ID in the Account Details.\n\n\n\n\nYou can find your \nSite ID\n by navigating to \"Mobile Apps\" in the left hand sidebar and getting the relevant Site ID from the table.\n\n\n\n\nTo retrieve Branch's \nPublisher ID\n from Tune it is first necessary to set Branch up as an \nIntegrated Partner\n and find the Publisher ID:\n\n\n\n\nLog in to Tune and go to Attribution Analytics\n\n\nIn the navigation bar on the left side of the portal, under the Partners section, click: Integrations\n\n\nOn the Integrated Partners page (on the right side), search for Branch\n\n\nSelect Branch and, in the far-right column, click: Enable\n\n\nClick on the Branch logo, then click on the \"Attribution Settings\" tab and copy the Partner ID (also known as the Branch Publisher ID)\n\n\n\n\n\n\nEnable the Tune card in your Branch dashboard\n\n\n\n\nOn the Branch Dashboard (\nhttps://dashboard.branch.io\n) navigate to the \nIntegrations page\n.\n\n\nLocate Tune and choose \nEnable\n.\n\n\nIf you have not yet entered billing information, please do so now.\n\n\nEnter your Branch Partner ID, the Tune Advertiser ID and your platform-specific Tune Site IDs.\n\n\nHit \nSave\n.\n\n\n\n\n\n\nAdvanced\n\n\nWhat Branch sends to Tune\n\n\nBranch will send any parameters that you append to a link on to Tune (see \nbelow for adding advanced attribution parameters\n). By default, if you don't append any additional parameters to your link, Branch will pass Branch Analytics tags on to Tune with the below mapping.\n\n\n\n\nCaution\n\n\nIf you enabled the Tune integration before August 10th 2016, your analytics tags will map to sub_publisher and sub_placement. To get the updated mappings please disable and re-enable the Tune card in your dashboard.\n\n\n\n\n\n\n\n\n\n\nBranch Analytics Tag\n\n\nTune Data Placeholder Tag\n\n\n\n\n\n\n\n\n\n\nCampaign\n\n\nmy_campaign\n\n\n\n\n\n\nChannel\n\n\nmy_placement\n\n\n\n\n\n\nFeature\n\n\nmy_keyword\n\n\n\n\n\n\nBranch Click ID\n\n\ntracking_id\n\n\n\n\n\n\n\n\nWhat are the methods Branch uses to let TUNE know an install came from Branch?\n\n\nWe rely on 3 methods to match attributions into TUNE\u2019s dashboard.\n\n\n\n\nThe first is snapshotting, which is the most basic. This is when we send a click event to Tune with IP address and User Agent and Tune completes the attribution.\n\n\nThe next method is passing the Google Advertising Id or IDFA on iOS. This occurs when a Universal or App link drove open the app session via Branch (meaning a click never touched the browser). In this case, we can attribute Branch correctly in TUNE\u2019s dashboard 100% of the time, because TUNE receives the IDFA / GAID from Branch while also keeping reference to it through their own SDK.\n\n\nThe third method is passing along Branch\u2019s click ID through the install referrer on Android, and the URI scheme on iOS. The TUNE SDK consumes the click ID through these mechanisms and then Branch sends that same click id back to TUNE. This also results in a 100% match.\n\n\n\n\nBy following all the steps listed in this guide, you\u2019ll automatically have all 3 available.\n\n\nAdvanced network segmentation with Tune\n\n\nIf you are interested in advanced network attribution segmentation in Tune, you can use the same attribution parameters you'd append to a Tune Measurement URL with your Branch link.\n\n\n\n\nCaution\n\n\nIf you enabled the Tune integration before August 10th 2016, you will need to disable and re-enable the Tune card in your dashboard before carrying out the instructions below. Please note this will change your default mapping of Branch analytics tags from the sub_publisher and sub_placement values into the my_partner values as noted above.\n\n\n\n\n\n\nStart with an existing Branch link, for example, a \nQuick Link\n.\n\n\nAppend \n?\n to the end of your link to start the query params string. For example: \nhttps://mylinks.app.link/8AHjQx0fyv\n?\n\n\nNext, \ncreate a measurement URL\n in Tune's Attribution Analytics Dashboard with the parameters you'd like to capture.\n\n\nSelect the \"Click\" URL (as opposed to the Impression URL)\n\n\nAfter creating the measurement URL, copy everything after \naction=click\n and append the parameters to the end of your Branch link.\n\n\nYou should remove \nsite_id={value}\n from the parameters, as Branch will automatically fill that in for your app depending on platform.\n\n\n\n\n\n\n\n\n\n\nYour new URL will now pass useful parameters to Tune.\n\n\nFor example, here's a finalized link for Tapjoy:\n\n\nhttps://mylinks.app.link/8AHjQx0fyv?\n    \npublisher_id\n=\n334667\n\n    \nsub_campaign\n=\nTapjoyBranchCampaign\n\n    \nmy_publisher\n=\nTapjoy\n\n    \nsub1\n=\ncustomtapjoyparameter\n\n    \nandroid_id\n=\nTAPJOY_RESTORED_RAW_ADVERTISING_ID\n\n\n\n\n\n\nCaution\n\n\nBranch automatically uses the my_* parameters for its link data. If there is a conflict between the custom parameters you append to your Branch link and the default parameters Branch automatically sends to Tune, the custom parameters will override the default data.\n\n\n\n\nSending Google ValueTrack Parameters to Tune\n\n\nFor AdWords App Install Campaigns, you can append ValueTrack parameters to your Branch link by following the same instructions highlighted above.\n\n\nWhen you create a Measurement URL in the Tune dashboard, the following URL parameters will automatically be generated and should be appended to the end of your Branch link (line breaks added for legibility):\n\n\nhttps://mylinks.app.link/8AHjQx0fyv?\n    \nsub_publisher\n={\nnetwork\n}\n\n    \nsub_placement\n={\nplacement\n}\n\n    \nsub_ad\n={\ncreative\n}\n\n    \nsub_campaign\n={\ncampaignid\n}\n\n    \nattr_core\n=\n1\n\n    \nsub_keyword\n={\nkeyword\n}\n\n    \ngdevice\n={\ndevice\n}\n\n    \ngmodel\n={\ndevicemodel\n}\n\n    \nis_mobile\n={\nifmobile:\n[\nvalue\n]}\n\n\n\n\n\n\n\nMacros\n\n\nWith the macros \n{}\n, Google will insert the relevant values for each parameter, values which will then be passed to Tune's Attribution Analytics.\n\n\n\n\nFor a full list of supported value parameters for AdWords, check out Tune's \nGoogle AdWords Integration\n documentation.\n\n\nSupport\n\n\nHow can I test this integration?\n\n\n\n\nEnable the integration\n\n\nCreate a Branch link\n\n\nClick the Branch link so the app opens or you are taken to the app store. If you're taken to the app store, download and open the app.\n\n\nLog in to your Tune dashboard, and click \"Logs\" on the left hand side bar.\n\n\nCheck the \"Click\" logs for a click attributed to Branch (or the network if you are using measurement URL parameters)\n\n\nCheck the \"Installs\" or \"Opens\" logs for a correctly attributed install.\n\n\nAfter 10-15 minutes, you should see an install or open appear in your Attribution Dashboard.\n\n\n\n\nPlease note that to produce installs, you must delete the app and reset your advertising identifier, then click a Branch link and install the app.\n\n\nBranch data not appearing in Tune\n\n\nEnsure Branch is an enabled provider under your \nPartners\n in your TUNE dashboard. This should happen automatically, but to verify, click into the \nIntegrated Partners\n section on your TUNE dashboard. From there, enter in Branch inside the search box, and click enable.\n\n\nIn this section, click on \nAttribution Settings\n. You'll see a section called \nAttribution Windows\n. Ensure \nFingerprint Attribution Window\n is set to 3 hours or more. If you have this disabled, events will not be attributed to Branch.\n\n\nInstall discrepancies\n\n\nCapture the GAID and IDFA device identifiers\n\n\nEnsure that you are capturing both the Google Advertising Identifier (GAID) on Android, and the IDFA on iOS.\n\n\nAdd Google Play Install Referrer (Android)\n\n\nWhen you integrate the Tune SDK, ensure you add the install referrer snippet provided Tune \nhere\n.\n\n\nIssues with Facebook data discrepancies.\n\n\nIf you are finding data discrepancies between Branch, Tune and Facebook - please ensure you have followed the Facebook Ads setup and troubleshooting steps \nhere\n.\n\n\nIf you're using the Tune integration and Branch links in Facebook ads, Branch must initialize and complete before the Tune SDK. When this happens, Branch will be able fetch the necessary attribution parameters and pass them to Tune via the integration.", 
            "title": "Tune"
        }, 
        {
            "location": "/pages/integrations/tune/#overview", 
            "text": "With a push of a button you can send your Branch data to your Tune dashboard, helping you segment users, calculate LTV and understand the power of Branch links in acquiring users.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/tune/#what-events-does-branch-send-to-tune", 
            "text": "Branch will send all  Branch link clicks  to Tune. Branch also sends all the data that is attached to the link. Tune then matches all downstream actions (installs, opens, custom events, payouts) back to the referring link. This will allow you to analyze which campaigns, channels, etc. are helping you acquire and engage users. You can see the list of fields that we send to Tune in the advaned section.", 
            "title": "What events does Branch send to Tune?"
        }, 
        {
            "location": "/pages/integrations/tune/#what-does-it-look-like", 
            "text": "See your Branch organic acquisition campaigns alongside your Tune data. You can also use Branch links with Tune measurement URL parameters to get the advantages of Branch deep linking with Tune's fine-grained attribution data and ROI analysis.", 
            "title": "What does it look like?"
        }, 
        {
            "location": "/pages/integrations/tune/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/integrations/tune/#prerequisites", 
            "text": "This guide requires you to have already integrated the Branch SDK. You also need to be a Tune customer and have the Tune SDK ( iOS ,  Android ) installed in your app.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/integrations/tune/#get-credentials-from-your-tune-dashboard", 
            "text": "To set up the integration you will need your  Tune Advertiser ID  (an account-level identifier), your platform-specific Tune  Site IDs  (also known as App IDs) and a Tune  Publisher ID  for Branch.  You can find your  Advertiser ID  by navigating to \"Accounts   Advertiser Account\" in the left hand sidebar and finding the Advertiser ID in the Account Details.   You can find your  Site ID  by navigating to \"Mobile Apps\" in the left hand sidebar and getting the relevant Site ID from the table.   To retrieve Branch's  Publisher ID  from Tune it is first necessary to set Branch up as an  Integrated Partner  and find the Publisher ID:   Log in to Tune and go to Attribution Analytics  In the navigation bar on the left side of the portal, under the Partners section, click: Integrations  On the Integrated Partners page (on the right side), search for Branch  Select Branch and, in the far-right column, click: Enable  Click on the Branch logo, then click on the \"Attribution Settings\" tab and copy the Partner ID (also known as the Branch Publisher ID)", 
            "title": "Get credentials from your Tune dashboard"
        }, 
        {
            "location": "/pages/integrations/tune/#enable-the-tune-card-in-your-branch-dashboard", 
            "text": "On the Branch Dashboard ( https://dashboard.branch.io ) navigate to the  Integrations page .  Locate Tune and choose  Enable .  If you have not yet entered billing information, please do so now.  Enter your Branch Partner ID, the Tune Advertiser ID and your platform-specific Tune Site IDs.  Hit  Save .", 
            "title": "Enable the Tune card in your Branch dashboard"
        }, 
        {
            "location": "/pages/integrations/tune/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/integrations/tune/#what-branch-sends-to-tune", 
            "text": "Branch will send any parameters that you append to a link on to Tune (see  below for adding advanced attribution parameters ). By default, if you don't append any additional parameters to your link, Branch will pass Branch Analytics tags on to Tune with the below mapping.   Caution  If you enabled the Tune integration before August 10th 2016, your analytics tags will map to sub_publisher and sub_placement. To get the updated mappings please disable and re-enable the Tune card in your dashboard.      Branch Analytics Tag  Tune Data Placeholder Tag      Campaign  my_campaign    Channel  my_placement    Feature  my_keyword    Branch Click ID  tracking_id", 
            "title": "What Branch sends to Tune"
        }, 
        {
            "location": "/pages/integrations/tune/#what-are-the-methods-branch-uses-to-let-tune-know-an-install-came-from-branch", 
            "text": "We rely on 3 methods to match attributions into TUNE\u2019s dashboard.   The first is snapshotting, which is the most basic. This is when we send a click event to Tune with IP address and User Agent and Tune completes the attribution.  The next method is passing the Google Advertising Id or IDFA on iOS. This occurs when a Universal or App link drove open the app session via Branch (meaning a click never touched the browser). In this case, we can attribute Branch correctly in TUNE\u2019s dashboard 100% of the time, because TUNE receives the IDFA / GAID from Branch while also keeping reference to it through their own SDK.  The third method is passing along Branch\u2019s click ID through the install referrer on Android, and the URI scheme on iOS. The TUNE SDK consumes the click ID through these mechanisms and then Branch sends that same click id back to TUNE. This also results in a 100% match.   By following all the steps listed in this guide, you\u2019ll automatically have all 3 available.", 
            "title": "What are the methods Branch uses to let TUNE know an install came from Branch?"
        }, 
        {
            "location": "/pages/integrations/tune/#advanced-network-segmentation-with-tune", 
            "text": "If you are interested in advanced network attribution segmentation in Tune, you can use the same attribution parameters you'd append to a Tune Measurement URL with your Branch link.   Caution  If you enabled the Tune integration before August 10th 2016, you will need to disable and re-enable the Tune card in your dashboard before carrying out the instructions below. Please note this will change your default mapping of Branch analytics tags from the sub_publisher and sub_placement values into the my_partner values as noted above.    Start with an existing Branch link, for example, a  Quick Link .  Append  ?  to the end of your link to start the query params string. For example:  https://mylinks.app.link/8AHjQx0fyv ?  Next,  create a measurement URL  in Tune's Attribution Analytics Dashboard with the parameters you'd like to capture.  Select the \"Click\" URL (as opposed to the Impression URL)  After creating the measurement URL, copy everything after  action=click  and append the parameters to the end of your Branch link.  You should remove  site_id={value}  from the parameters, as Branch will automatically fill that in for your app depending on platform.      Your new URL will now pass useful parameters to Tune.  For example, here's a finalized link for Tapjoy:  https://mylinks.app.link/8AHjQx0fyv?\n     publisher_id = 334667 \n     sub_campaign = TapjoyBranchCampaign \n     my_publisher = Tapjoy \n     sub1 = customtapjoyparameter \n     android_id = TAPJOY_RESTORED_RAW_ADVERTISING_ID   Caution  Branch automatically uses the my_* parameters for its link data. If there is a conflict between the custom parameters you append to your Branch link and the default parameters Branch automatically sends to Tune, the custom parameters will override the default data.", 
            "title": "Advanced network segmentation with Tune"
        }, 
        {
            "location": "/pages/integrations/tune/#sending-google-valuetrack-parameters-to-tune", 
            "text": "For AdWords App Install Campaigns, you can append ValueTrack parameters to your Branch link by following the same instructions highlighted above.  When you create a Measurement URL in the Tune dashboard, the following URL parameters will automatically be generated and should be appended to the end of your Branch link (line breaks added for legibility):  https://mylinks.app.link/8AHjQx0fyv?\n     sub_publisher ={ network } \n     sub_placement ={ placement } \n     sub_ad ={ creative } \n     sub_campaign ={ campaignid } \n     attr_core = 1 \n     sub_keyword ={ keyword } \n     gdevice ={ device } \n     gmodel ={ devicemodel } \n     is_mobile ={ ifmobile: [ value ]}    Macros  With the macros  {} , Google will insert the relevant values for each parameter, values which will then be passed to Tune's Attribution Analytics.   For a full list of supported value parameters for AdWords, check out Tune's  Google AdWords Integration  documentation.", 
            "title": "Sending Google ValueTrack Parameters to Tune"
        }, 
        {
            "location": "/pages/integrations/tune/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/integrations/tune/#how-can-i-test-this-integration", 
            "text": "Enable the integration  Create a Branch link  Click the Branch link so the app opens or you are taken to the app store. If you're taken to the app store, download and open the app.  Log in to your Tune dashboard, and click \"Logs\" on the left hand side bar.  Check the \"Click\" logs for a click attributed to Branch (or the network if you are using measurement URL parameters)  Check the \"Installs\" or \"Opens\" logs for a correctly attributed install.  After 10-15 minutes, you should see an install or open appear in your Attribution Dashboard.   Please note that to produce installs, you must delete the app and reset your advertising identifier, then click a Branch link and install the app.", 
            "title": "How can I test this integration?"
        }, 
        {
            "location": "/pages/integrations/tune/#branch-data-not-appearing-in-tune", 
            "text": "Ensure Branch is an enabled provider under your  Partners  in your TUNE dashboard. This should happen automatically, but to verify, click into the  Integrated Partners  section on your TUNE dashboard. From there, enter in Branch inside the search box, and click enable.  In this section, click on  Attribution Settings . You'll see a section called  Attribution Windows . Ensure  Fingerprint Attribution Window  is set to 3 hours or more. If you have this disabled, events will not be attributed to Branch.", 
            "title": "Branch data not appearing in Tune"
        }, 
        {
            "location": "/pages/integrations/tune/#install-discrepancies", 
            "text": "", 
            "title": "Install discrepancies"
        }, 
        {
            "location": "/pages/integrations/tune/#capture-the-gaid-and-idfa-device-identifiers", 
            "text": "Ensure that you are capturing both the Google Advertising Identifier (GAID) on Android, and the IDFA on iOS.", 
            "title": "Capture the GAID and IDFA device identifiers"
        }, 
        {
            "location": "/pages/integrations/tune/#add-google-play-install-referrer-android", 
            "text": "When you integrate the Tune SDK, ensure you add the install referrer snippet provided Tune  here .", 
            "title": "Add Google Play Install Referrer (Android)"
        }, 
        {
            "location": "/pages/integrations/tune/#issues-with-facebook-data-discrepancies", 
            "text": "If you are finding data discrepancies between Branch, Tune and Facebook - please ensure you have followed the Facebook Ads setup and troubleshooting steps  here .  If you're using the Tune integration and Branch links in Facebook ads, Branch must initialize and complete before the Tune SDK. When this happens, Branch will be able fetch the necessary attribution parameters and pass them to Tune via the integration.", 
            "title": "Issues with Facebook data discrepancies."
        }, 
        {
            "location": "/pages/exports/api-v3/", 
            "text": "Overview\n\n\nBranch\u2019s new Data Export API for \nPeople-Based Attribution\n can be used to pull granular Branch event data directly. A few important notes for this API:\n\n\n\n\nThe data will only be retrievable for the last 7 days\n\n\nThe data will only appear after end of day since it's processed every 24 hours\n\n\nThe data will not be visible prior to your whitelisting date\n\n\nThe data will only be visible for your live key (not your test key)\n\n\n\n\n\n\nData Feeds is a premium solution\n\n\nThe Data Export API is included in Branch\u2019s \nData Feeds\n offering, which can be purchased according to Branch\u2019s \npricing schedule\n, and is available at no additional charge to customers who are on MAU plans for \nJourneys\n, \nDeep Linked Email\n, or \nUniversal Ads\n. Without Data Feeds, you can still export Branch data in CSV form directly from the Branch dashboard via \nSources\n or \nCSV Exports\n.\n\n\nIf you are looking for the legacy Data Export API\n, please see \nthese docs\n.\n\n\n\n\nSetup\n\n\nIn order to use this API you must have an App ID and a Branch Public Key. You must also be whitelisted to use the API. If you'd like to be whitelisted for the Export API, please contact \n.\n\n\nYou can find your keys in your \nAccount Settings\n.\n\n\nBase URL:\n\n\nhttps://api.branch.io/v3/export/\n\n\nEndpoint\n\n\n\n\nPOST \nhttps://api.branch.io/v3/export\n\n\nContent-Type: application/json\n\n\n\n\nQuery Parameters\n\n\nbranch_key\n \nrequired\n\n: The Branch key of the originating app\n\n\nbranch_secret\n \nrequired\n\n: The Branch secret key of the originating app\n\n\nexport_date\n \nrequired\n\n: The UTC date of the requested data export\n\n\nExample request:\n\n\ncurl -X POST api.branch.io/v3/export -H \ncontent-type:application/json\n -d \n{\nbranch_key\n:\nkey_live_gcASshuadd7l39m36NhdsDPWRjmkdcgh12jsg1\n, \nbranch_secret\n: \nsecret_live_ztPsdKIjUtcjkUYF732nsl81HJ75BJqiv24J86\n, \nexport_date\n: \n2017-10-01\n}\n\n\n\n\n\nResponse\n\n\nThe response payload will be in JSON format and for each export it will have an array of paths to files on s3 to download. Note that there may be multiple files (depending on the size of the day's export) and that each csv file will be gzipped.\n\n\n{\n  \neo_branch_cta_view\n: [\nhttps://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_branch_cta_view-v2-e458d6183650e6401ca017e673d23885abdf9250378ffce377f318a38e4f0017-u6mGkx.csv.gz\n],\n  \neo_click\n:[ \nhttps://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_click-v2-bbe7351be61c8797c1d80437dffcaa493a495e24a04c25b9131c9c042450319a-7bWLZr.csv.gz\n],\n  \neo_commerce_event\n: [\nhttps://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_commerce_event-v2-05f56947e843a51d785b8a03a615dfe0dccfda1abd3efad1010d5fae8b2fc19c-oiZ38C.csv.gz\n],\n  \neo_custom_event\n: [\nhttps://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_custom_event-v2-09fd3f0ff086364a2dc0155118a1b120a2837fd3c56ab250062bcb8f46ab731c-FHgAt3.csv.gz\n],\n  \neo_install\n: [\nhttps://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_install-v2-9db98c07dccd3d8c8a26a7fec1f1596bb5cdb526eb7dc633f6470a5e75566b33-zdHNVt.csv.gz\n],\n  \neo_open\n: [\nhttps://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_open-v2-9fafa230fa9f3b0fcef5d00f6bcfae990131d1fcbf497625ee504847c30530b8-3hvp1O.csv.gz\n],\n  \neo_pageview\n: [\nhttps://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_pageview-v2-9166aaea1e6c46fcf0a48d5a32c02c6b8272d3edb10c332db2ebc0cbb34d58c0-neWTEO.csv.gz\n],\n  \neo_reinstall\n: [\nhttps://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_reinstall-v2-b4188abf0635915c56be670ad988eab889f084b7d2109e3225a6974a80e2781f-htV3uL.csv.gz\n],\n  \neo_sms_sent\n: [\nhttps://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_sms_sent-v2-32ebf2131e1538fc180e27df8e5e5fbe8ea89ff5e971811056c449095f35e651-5xay42.csv.gz\n],\n  \neo_web_session_start\n: [\nhttps://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_web_session_start-v2-056d25078e665dab3d78d1eb00336ad27087da5593ba1003f8ad8923dfce31a0-06wAW2.csv.gz\n\n}\n\n\n\n\nAll exports via Data Feeds are powered by Branch's \nPeople-Based Attribution\n. For an exhaustive list of events included in these exports and more detailed definitions of each event, please see the \nEvent Ontology Data Schema\n.\n\n\n\n\nTip\n\n\nA full day's files will be available on our S3 bucket at that location to download around 8:00am UTC. It will return a blank array from s3 for any empty files until the UTC day is over and the data has been transfered to s3, therefore it is recommended you schedule any ETLs to fetch the data for the previous day around 8:00am UTC.\n\n\n\n\nSupport\n\n\nTime Limits\n\n\nData will be available through the API for 7 days after the date it's posted. It will be also available for 90 days after that upon request. After 90 days, we may delete the data to reduce unnecessary storage. If you need a record of your data for longer than 90 days, please set up a recurring export and store data in your systems.", 
            "title": "Data Export API"
        }, 
        {
            "location": "/pages/exports/api-v3/#overview", 
            "text": "Branch\u2019s new Data Export API for  People-Based Attribution  can be used to pull granular Branch event data directly. A few important notes for this API:   The data will only be retrievable for the last 7 days  The data will only appear after end of day since it's processed every 24 hours  The data will not be visible prior to your whitelisting date  The data will only be visible for your live key (not your test key)    Data Feeds is a premium solution  The Data Export API is included in Branch\u2019s  Data Feeds  offering, which can be purchased according to Branch\u2019s  pricing schedule , and is available at no additional charge to customers who are on MAU plans for  Journeys ,  Deep Linked Email , or  Universal Ads . Without Data Feeds, you can still export Branch data in CSV form directly from the Branch dashboard via  Sources  or  CSV Exports .  If you are looking for the legacy Data Export API , please see  these docs .", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/exports/api-v3/#setup", 
            "text": "In order to use this API you must have an App ID and a Branch Public Key. You must also be whitelisted to use the API. If you'd like to be whitelisted for the Export API, please contact  .  You can find your keys in your  Account Settings .", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/exports/api-v3/#base-url", 
            "text": "https://api.branch.io/v3/export/", 
            "title": "Base URL:"
        }, 
        {
            "location": "/pages/exports/api-v3/#endpoint", 
            "text": "POST  https://api.branch.io/v3/export  Content-Type: application/json", 
            "title": "Endpoint"
        }, 
        {
            "location": "/pages/exports/api-v3/#query-parameters", 
            "text": "branch_key   required \n: The Branch key of the originating app  branch_secret   required \n: The Branch secret key of the originating app  export_date   required \n: The UTC date of the requested data export  Example request:  curl -X POST api.branch.io/v3/export -H  content-type:application/json  -d  { branch_key : key_live_gcASshuadd7l39m36NhdsDPWRjmkdcgh12jsg1 ,  branch_secret :  secret_live_ztPsdKIjUtcjkUYF732nsl81HJ75BJqiv24J86 ,  export_date :  2017-10-01 }", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/pages/exports/api-v3/#response", 
            "text": "The response payload will be in JSON format and for each export it will have an array of paths to files on s3 to download. Note that there may be multiple files (depending on the size of the day's export) and that each csv file will be gzipped.  {\n   eo_branch_cta_view : [ https://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_branch_cta_view-v2-e458d6183650e6401ca017e673d23885abdf9250378ffce377f318a38e4f0017-u6mGkx.csv.gz ],\n   eo_click :[  https://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_click-v2-bbe7351be61c8797c1d80437dffcaa493a495e24a04c25b9131c9c042450319a-7bWLZr.csv.gz ],\n   eo_commerce_event : [ https://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_commerce_event-v2-05f56947e843a51d785b8a03a615dfe0dccfda1abd3efad1010d5fae8b2fc19c-oiZ38C.csv.gz ],\n   eo_custom_event : [ https://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_custom_event-v2-09fd3f0ff086364a2dc0155118a1b120a2837fd3c56ab250062bcb8f46ab731c-FHgAt3.csv.gz ],\n   eo_install : [ https://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_install-v2-9db98c07dccd3d8c8a26a7fec1f1596bb5cdb526eb7dc633f6470a5e75566b33-zdHNVt.csv.gz ],\n   eo_open : [ https://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_open-v2-9fafa230fa9f3b0fcef5d00f6bcfae990131d1fcbf497625ee504847c30530b8-3hvp1O.csv.gz ],\n   eo_pageview : [ https://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_pageview-v2-9166aaea1e6c46fcf0a48d5a32c02c6b8272d3edb10c332db2ebc0cbb34d58c0-neWTEO.csv.gz ],\n   eo_reinstall : [ https://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_reinstall-v2-b4188abf0635915c56be670ad988eab889f084b7d2109e3225a6974a80e2781f-htV3uL.csv.gz ],\n   eo_sms_sent : [ https://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_sms_sent-v2-32ebf2131e1538fc180e27df8e5e5fbe8ea89ff5e971811056c449095f35e651-5xay42.csv.gz ],\n   eo_web_session_start : [ https://branch-exports.s3.amazonaws.com/271025641725777235-2017-10-01-eo_web_session_start-v2-056d25078e665dab3d78d1eb00336ad27087da5593ba1003f8ad8923dfce31a0-06wAW2.csv.gz \n}  All exports via Data Feeds are powered by Branch's  People-Based Attribution . For an exhaustive list of events included in these exports and more detailed definitions of each event, please see the  Event Ontology Data Schema .   Tip  A full day's files will be available on our S3 bucket at that location to download around 8:00am UTC. It will return a blank array from s3 for any empty files until the UTC day is over and the data has been transfered to s3, therefore it is recommended you schedule any ETLs to fetch the data for the previous day around 8:00am UTC.", 
            "title": "Response"
        }, 
        {
            "location": "/pages/exports/api-v3/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/exports/api-v3/#time-limits", 
            "text": "Data will be available through the API for 7 days after the date it's posted. It will be also available for 90 days after that upon request. After 90 days, we may delete the data to reduce unnecessary storage. If you need a record of your data for longer than 90 days, please set up a recurring export and store data in your systems.", 
            "title": "Time Limits"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/", 
            "text": "Overview\n\n\nBranch\u2019s new webhook system for People-Based Attribution allows you to export install and down-funnel event data as it occurs. You can import this data into your internal systems for analysis. You simply need to specify a URL for the POST or GET requests.\n\n\nIf you are looking for postback integrations for ad networks, please visit our \nUniversal Ads documentation\n. For pre-configured integrations into popular analytics tools, please visit our \nData Integrations documentation\n.\n\n\nThe webhook system is highly customizable. You can register to only receive notifications for specific events, as well as specific subsections of events, filtered by link data, user data or event properties.\n\n\nOur new webhook infrastructure supports for all Branch events. The data is formatted according to our updated event naming and metadata format which will get you through implementation and onto analysis in no time.\n\n\n\n\nData Feeds is a premium solution\n\n\nThe Webhooks are included in Branch\u2019s \nData Feeds\n offering, which can be purchased according to Branch\u2019s \npricing schedule\n, and is available at no additional charge to customers who are on MAU plans for \nJourneys\n, \nDeep Linked Email\n, or \nUniversal Ads\n. Without Data Feeds, you can still export Branch data in CSV form directly from the Branch dashboard via \nSources\n or \nCSV Exports\n.\n\n\nIf you are looking for legacy webhooks\n, please see \nthese docs\n.\n\n\n\n\nSetup\n\n\nRegister webhook\n\n\n\n\nOpen the \nWebhooks\n page on the Branch dashboard.\n\n\nClick \n+ Add New Webhook\n:\n\n\n\n\n\n\nConfigure webhook criteria\n\n\n\n\nAs you fill out the configuration, you'll see the following options:\n\n\n\n\nSend a webhook to:\n Enter the URL where you would like the events to be sent. This URL can be written with Freemarker syntax to dynamically populate parameters and execute simple, logical expressions. There is more information on Freemarker support below.\n\n\nusing a GET/POST:\n Events can be sent either via POST or GET. POST events will be created with a default POST body. There is more information on POST bodies below.\n\n\nusers trigger event:\n When the selected event occurs, a webhook will fire:\n\n\n\n\n\n\n\n\n\n\nEvent\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninstall\n\n\nTriggered the first time a user ever launches your app on their device.\n\n\n\n\n\n\nreinstall\n\n\nTriggered if a user deletes and reinstalls your app on their device.\n\n\n\n\n\n\nopen\n\n\nTriggered whenever the app is opened (and the open is neither an install or reinstall)\n\n\n\n\n\n\nweb session start\n\n\nTriggered when the user views a webpage using the Branch Web SDK\n\n\n\n\n\n\nclick\n\n\nTriggered whenever a Branch link is clicked on any platform\n\n\n\n\n\n\n-- additional events --\n\n\nA complete list of events you track through the Branch Web or App SDKs.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nEvents will only appear in the event dropdown if at least one of those events has been recorded in the past 30 days.\n\n\n\n\nFor an exhaustive list of events and more detailed definitions of each event, please see the \nEvent Ontology Data Schema\n.\n\n\n\n\nNB\n: Event frequency is not yet supported. At this time webhooks can only be sent every time an event occurs. The option to send webhooks \nthe first time\n an event occurs is roadmapped for release in Q1 2018.\n\n\n\n\nBasic filtering\n\n\nIn the \nAdvanced\n section of the page you can create a filter. Only events that \npass the filter criteria\n will be sent. \n\n\nYou'll notice a default filter that checks to see whether the event is \nnot\n triggered by a known crawler/robot. To do this, we check if the Operating System does not equal \"robots.\" With that filter applied, only events without OS equal to robots (i.e. iOS and Android) will trigger a webhook.\n\n\nThe most popular filter options are available in a dropdown. This should help you get up and running quickly, while also providing an example structure for more \nadvanced filtering\n if you need it.\n\n\nTo create a filter:\n\n\n\n\nClick the \nAdd Filter\n button\n\n\nSelect the metadata you'd like to filter on. For example, if you only want \niOS\n installs, select \"Operating System\" from the dropdown. You'll see the text field to the right populate with the correct key. When doing advanced filtering later you will select \"Custom\" and manually set this key.\n\n\nSelect \"equals\" or \"does not equal\" from next dropdown.\n\n\nFinally, set the \nvalue\n of the key that you'd like to filter in or out. For example, if you want iOS installs, you'll have set up \"equals\" and \"IOS\" in the dropdowns. In this example, the robots filter is redundant, so let's remove it using the minus button.\n\n\n\n\nThis should be your final view before saving:\n\n\n\n\n\n\nExample: Filtering installs by attributed link campaign\n\n\nLet\u2019s say you\u2019re interested in receiving a webhook for every \ninstall\n event that is referred from a Branch link where you set the \nCampaign\n field to \nApp Install Campaign\n. You would configure a filter to fire a webhook only when \nCampaign\n is equal to \n\"App Install Campaign\"\n. You would select \nCampaign\n from the dropdown, the key would be be autofilled and would equal \nlast_attributed_touch_data.~campaign\n. Finally, you'd set the value equal to \nApp Install Campaign\n.\n\n\n\n\n\n\n\n\nExample: Filtering clicks by link channel\n\n\nLet\u2019s say you\u2019re interested in receiving a webhook for every \nclick\n event that is referred from a Branch link where you set the \nChannel\n field to \nAppLovin\n. You would configure a filter to fire a webhook only when \nChannel\n is equal to \nAppLovin\n. You would select \nChannel\n from the dropdown, the key would be be autofilled and would equal \nlast_attributed_touch_data.~channel\n. Finally, you'd set the value equal to \nAppLovin\n.\n\n\n\n\n\n\nSee the \nAdvanced Filtering\n page to read more about customizing when events are sent.\n\n\nTesting\n\n\nTo test whether your webhook is configured correctly, you can use \nrequestb.in\n. RequestBin gives you a URL that accepts events for 24 hours and allows you to see exactly what Branch is sending.\n\n\n\n\n\n\nGo to \nrequestb.in\n and click \n+ Create a RequestBin\n:\n\n\n\n\n\n\n\n\nCopy the \nBin URL\n:\n\n\n\n\n\n\n\n\nPaste this into the URL field of your Branch webhook's configuration screen:\n\n\n\n\n\n\n\n\nNow whenever your webhook is triggered, you will see a full report on RequestBin:\n\n\n\n\n\n\nCaution\n\n\nPlease archive your Requestbin webhook when you have finished testing. Requestbins only last for 24 hours and return errors once they expire.\n\n\n\n\n\n\n\n\nData Format\n\n\nOne of the major advantages of People-Based Attribution's data format is that metadata is consistently located across all events. We call this schema the \nEvent Ontology Data Schema\n. This consistent schema makes it easy to replicate Branch dashboards in your internal warehouse and compare large sets of data for different events.\n\n\nSetting up Advanced Filters or Freemarker macros requires an understanding of the Event Ontology data format. Before diving into the schema, you should understand some high level concepts about event metadata structure:\n\n\n\n\nEach event has top level fields, such as \"name\" and \"id\" that are not nested\n\n\nLink data is generally nested in \"Last Attributed Touch Data\"\n\n\nUser data (including device and OS data) is nested in \"User Data\"\n\n\nProduct or content level data is nested in \"Content Items\"\n\n\nTransaction and generic content data is nested in \"Event Data\"\n\n\nJourneys or Deepviews view data (e.g. Journey banners loads, not clicks) is \"Last CTA View Data\"\n\n\nClient-specified custom data (e.g. internal fields your company requires on specific events) is nested in \"Custom Data\"\n\n\n\n\nYou can find an \noverview of critical fields\n in that documentation, as well as an \nexhaustive list of fields\n.\n\n\nSample webhook POST body syntax\n\n\nThe POST body for all webhooks follows the same structure:\n\n\nPOST\n\n\nUser\n-\nagent\n:\n \nBranch\n \nMetrics\n \nAPI\n\n\nContent\n-\nType\n:\n \napplication\n/\njson\n\n\n{\n\n    \nname\n:\n \nevent name e.g. open\n,\n\n    \nuser_data\n:\n \n{},\n\n    \nlast_cta_view_data\n:\n \n{},\n\n    \nlast_attributed_touch_data\n:\n \n{},\n\n    \ncustom_data\n:\n \n{},\n\n    \nevent_data\n:\n \n{},\n\n    \ncontent_items\n:\n \n{},\n\n    \ntimestamp\n:\n \nexample timestamp (int)\n\n\n}\n\n\n\n\n\nIf any of these objects are empty, they will not appear in the POST body.\n\n\nHere's a POST body with example data for an attributed open:\n\n\n// Attributed open\n\n\nPOST\n\n\nUser\n-\nagent\n:\n \nBranch\n \nMetrics\n \nAPI\n\n\nContent\n-\nType\n:\n \napplication\n/\njson\n\n\n\n{\n\n  \nname\n:\n \nopen\n,\n\n  \nuser_data\n:\n \n{\n\n    \nos\n:\n \nIOS\n,\n\n    \nos_version\n:\n \n11.1.2\n,\n\n    \nenvironment\n:\n \nFULL_APP\n,\n\n    \nplatform\n:\n \nIOS_APP\n,\n\n    \nidfa\n:\n \nF520B35A-4165-4426-98F6-64F12F47E9BZ\n,\n\n    \nidfv\n:\n \nC6B869E7-7B0A-4A93-1C3D-960E8859DP5D\n,\n\n    \nlimit_ad_tracking\n:\n \nfalse\n,\n\n    \nuser_agent\n:\n \nMozilla/5.0 (iPhone; CPU iPhone OS 11_1_2 like Mac OS X) AppleWebKit/604.3.5 (KHTML, like Gecko) Mobile/15B202\n,\n\n    \nip\n:\n \n50.200.105.218\n,\n\n    \ndeveloper_identity\n:\n \nDB8C86A6-8B7C-4192-BD29-8107A5B788A1\n,\n\n    \ncountry\n:\n \nUS\n,\n\n    \nlanguage\n:\n \nEN\n,\n\n    \nbrand\n:\n \nApple\n\n  \n},\n\n  \nlast_cta_view_data\n:\n \n{\n\n    \n~id\n:\n \n457624031399716729\n,\n\n    \n~campaign\n:\n \n_test\n,\n\n    \n~feature\n:\n \njourneys\n,\n\n    \n+domain\n:\n \nbranchster.app.link\n,\n\n    \n+url\n:\n \nhttps://branchster.app.link/jeMczRn5XH\n,\n\n    \n$deeplink_path\n:\n \nopen/item/1234\n,\n\n    \n~creation_source\n:\n \n5\n,\n\n    \n+referrer\n:\n \nhttps://store.com/products/green-table\n,\n\n    \nfoo\n:\n \nbar\n,\n\n    \n$canonical_url\n:\n \nhttps://store.com/products/green-table\n,\n\n    \nmydata\n:\n \nset_branch_view_data_value\n,\n\n    \n~tags\n:\n \n[\n\n      \ntag1\n,\n\n      \ntag2\n,\n\n      \nbottom_banner_style\n\n    \n]\n\n  \n},\n\n  \nlast_attributed_touch_data\n:\n \n{\n\n    \n~id\n:\n \n467391383381228204\n,\n\n    \n~feature\n:\n \nmarketing\n,\n\n    \n~campaign\n:\n \ndecember_test\n,\n\n    \n~channel\n:\n \nFacebook Organic\n,\n\n    \nproduct_id\n:\n \nXBA8198j\n,\n\n    \nproduct_name\n:\n \nGreen Table AB10\n,\n\n    \n+url\n:\n \nhttps://branchster.app.link/test_linking\n,\n\n    \n$marketing_title\n:\n \nDeep Link Testing\n,\n\n    \n$ios_deepview\n:\n \nbranch_default\n,\n\n    \n+via_features\n:\n \n[\n\n      \nQUICK_LINKS\n\n    \n]\n\n  \n},\n\n  \ncustom_data\n:\n \n{\n\n    \nreinstall\n:\n \nfalse\n,\n\n    \nip\n:\n \n50.200.105.218\n,\n\n    \nreferred\n:\n \nfalse\n\n  \n},\n\n  \ntimestamp\n:\n \n1512681005807\n\n\n}\n\n\n\n\n\nAdvanced Filtering\n\n\nIn \nBasic Filtering\n we covered what filters do, and how to set basic filters. Branch supports more advanced filtering which allows customers to set filters based on almost any event metadata.\n\n\nMake sure you've taken a look at the \ndata format\n before you attempt to set advanced filters.\n\n\nTo create a filter:\n\n\n\n\nClick the \nAdd Filter\n button\n\n\nSelect the metadata you'd like to filter on. For advanced filtering, choose \"Custom\"\n\n\nType in the key that you'd like to filter on. To find the key you'd like to filter on, reference our quick introduction to the \nPeople-Based Attribution's data format\n to figure out where your key is likely nested. Another foolproof way to find your key is looking at your data in full before setting up your filter. You can do this by doing a \nCSV export\n, \nAPI export\n or send a single webhook with a POST body, and locate your key in that POST body.\n\n\nUnless your key is part of the top level data (e.g. \ntimestamp\n or \nid\n), it will likely be nested one level deep. Most keys will be of the format \nobject_name.key\n. For example, if you want to filter for a custom key in deep link data called \"product_deeplink_id\", that would take the form \nlast_attributed_touch_data.product_deeplink_id\n.\n\n\n\n\n\n\nExample: Filtering purchases for a specific coupon\n\n\nLet\u2019s say you\u2019re interested in receiving a webhook for every \nPurchase\n event using a specific coupon. When you set up the Purchase event in your app or on your website, you \nadded a specific piece of metadata for \"coupon\"\n. In the \nEvent Ontology Schema\n you saw that \"coupon\" is inside \"event_data\". To configure your filter to fire a webhook only when \ncoupon\n is equal to \nSUMMERDEALS10\n you will:\n\n\n\n\nSelect \"Custom\" from the filter key dropdown\n\n\nMake the key \nevent_data.coupon\n\n\nSelect \"equals\" on the equivalency dropdown\n\n\nEnter a value of \nSUMMERDEALS10\n\n\n\n\n\n\n\n\n\n\nArray filtering not yet available\n\n\nCurrently, webhooks do not support filtering on values inside arrays. Example arrays that cannot be filtered by value are \ntags\n, \n+via_features\n and \ncontent_items\n.\n\n\n\n\nTemplating your Postback URL\n\n\nIf you'd like to template your postback URL, you\u2019ll likely need to create one of our templated Postback URLs along side the aforementioned filters. These work very similarly to filters but use Freemarker syntax.\n\n\nGetting started with templates\n\n\nTo start, we can add a simple template. Let's say we want to add campaign as a query parameter. The correct syntax is \n\n\nhttps://webhook.com?campaign=${(last_attributed_touch_data.~campaign)!}\n\n\nLet's walk through the syntax:\n\n\n\n\nFirst, find the key for the value you want to template in. As with filtering, to find the key, reference our quick introduction to the \nPeople-Based Attribution's data format\n to figure out where your key is likely nested. Another foolproof way to find your key is looking at your data in full before setting up your filter. You can do this by doing a \nCSV export\n, \nAPI export\n or send a single webhook with a POST body, and locate your key in that POST body.\n\n\nThis exercise tells us that Campaign is nested inside \nlast_attributed_touch_data\n and is represented by \nlast_attributed_touch_data.~campaign\n.\n\n\nThe additional syntax around \nlast_attributed_touch_data.~campaign\n is because Branch's templating engine uses Freemarker. In Freemarker, you can print variables by surrounding them with \n${}\n. Finally, we add \n()!\n to the variable because we want to prevent errors in the case that there is no value.\n\n\nThis leaves us with \n${(last_attributed_touch_data.~campaign)!}\n.\n\n\n\n\nHere is some more example Freemarker for common templates:\n\n\n\n\n\n\n\n\nParent object\n\n\nCommon name\n\n\nFreemarker\n\n\n\n\n\n\n\n\n\n\nLast Attributed Touch Data\n\n\nFeature\n\n\n${(last_attributed_touch_data.~feature)!}\n\n\n\n\n\n\nLast Attributed Touch Data\n\n\nChannel\n\n\n${(last_attributed_touch_data.~channel)!}\n\n\n\n\n\n\nLast Attributed Touch Data\n\n\nCampaign\n\n\n${(last_attributed_touch_data.~campaign)!}\n\n\n\n\n\n\nLast Attributed Touch Data\n\n\nAd Partner Name\n\n\n${(last_attributed_touch_data.~advertising_partner_name)!}\n\n\n\n\n\n\nUser Data\n\n\nOS\n\n\n${(user_data.os)!}\n\n\n\n\n\n\nUser Data\n\n\nPlatform\n\n\n${(user_data.platform)!}\n\n\n\n\n\n\nUser Data\n\n\nIDFA\n\n\n${(user_data.idfa)!}\n\n\n\n\n\n\nUser Data\n\n\nIDFV\n\n\n${(user_data.idfv)!}\n\n\n\n\n\n\nUser Data\n\n\nAndroid Advertising ID\n\n\n${(user_data.aaid)!}\n\n\n\n\n\n\n\n\nFreemarker expressions\n\n\nDue to security restrictions, Branch does not support the full list of Freemarker expressions.\n\n\nHere is a list of blocked expressions:\n\n#import\n,\n \n#visit\n,\n \n#include\n,\n \n?eval\n,\n \n#recurse\n,\n \n#setting\n,\n \n#macro\n,\n \n#function\n,\n \n#nested\n,\n \n#return\n,\n \n#list\n\n\n\n\nAuthenticating webhook events\n\n\nTo request authentication headers for your webhooks, please contact \nintegrations@branch.io\n.\n\n\nSupport\n\n\nFAQs\n\n\nWhy is my webhook not firing?\n\n\nCheck to see if you are in \nTest Mode\n with your SDK. If you are in test mode, we will not send a webhook.", 
            "title": "Webhooks"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#overview", 
            "text": "Branch\u2019s new webhook system for People-Based Attribution allows you to export install and down-funnel event data as it occurs. You can import this data into your internal systems for analysis. You simply need to specify a URL for the POST or GET requests.  If you are looking for postback integrations for ad networks, please visit our  Universal Ads documentation . For pre-configured integrations into popular analytics tools, please visit our  Data Integrations documentation .  The webhook system is highly customizable. You can register to only receive notifications for specific events, as well as specific subsections of events, filtered by link data, user data or event properties.  Our new webhook infrastructure supports for all Branch events. The data is formatted according to our updated event naming and metadata format which will get you through implementation and onto analysis in no time.   Data Feeds is a premium solution  The Webhooks are included in Branch\u2019s  Data Feeds  offering, which can be purchased according to Branch\u2019s  pricing schedule , and is available at no additional charge to customers who are on MAU plans for  Journeys ,  Deep Linked Email , or  Universal Ads . Without Data Feeds, you can still export Branch data in CSV form directly from the Branch dashboard via  Sources  or  CSV Exports .  If you are looking for legacy webhooks , please see  these docs .", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#register-webhook", 
            "text": "Open the  Webhooks  page on the Branch dashboard.  Click  + Add New Webhook :", 
            "title": "Register webhook"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#configure-webhook-criteria", 
            "text": "As you fill out the configuration, you'll see the following options:   Send a webhook to:  Enter the URL where you would like the events to be sent. This URL can be written with Freemarker syntax to dynamically populate parameters and execute simple, logical expressions. There is more information on Freemarker support below.  using a GET/POST:  Events can be sent either via POST or GET. POST events will be created with a default POST body. There is more information on POST bodies below.  users trigger event:  When the selected event occurs, a webhook will fire:      Event  Description      install  Triggered the first time a user ever launches your app on their device.    reinstall  Triggered if a user deletes and reinstalls your app on their device.    open  Triggered whenever the app is opened (and the open is neither an install or reinstall)    web session start  Triggered when the user views a webpage using the Branch Web SDK    click  Triggered whenever a Branch link is clicked on any platform    -- additional events --  A complete list of events you track through the Branch Web or App SDKs.      Tip  Events will only appear in the event dropdown if at least one of those events has been recorded in the past 30 days.   For an exhaustive list of events and more detailed definitions of each event, please see the  Event Ontology Data Schema .   NB : Event frequency is not yet supported. At this time webhooks can only be sent every time an event occurs. The option to send webhooks  the first time  an event occurs is roadmapped for release in Q1 2018.", 
            "title": "Configure webhook criteria"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#basic-filtering", 
            "text": "In the  Advanced  section of the page you can create a filter. Only events that  pass the filter criteria  will be sent.   You'll notice a default filter that checks to see whether the event is  not  triggered by a known crawler/robot. To do this, we check if the Operating System does not equal \"robots.\" With that filter applied, only events without OS equal to robots (i.e. iOS and Android) will trigger a webhook.  The most popular filter options are available in a dropdown. This should help you get up and running quickly, while also providing an example structure for more  advanced filtering  if you need it.  To create a filter:   Click the  Add Filter  button  Select the metadata you'd like to filter on. For example, if you only want  iOS  installs, select \"Operating System\" from the dropdown. You'll see the text field to the right populate with the correct key. When doing advanced filtering later you will select \"Custom\" and manually set this key.  Select \"equals\" or \"does not equal\" from next dropdown.  Finally, set the  value  of the key that you'd like to filter in or out. For example, if you want iOS installs, you'll have set up \"equals\" and \"IOS\" in the dropdowns. In this example, the robots filter is redundant, so let's remove it using the minus button.   This should be your final view before saving:    Example: Filtering installs by attributed link campaign  Let\u2019s say you\u2019re interested in receiving a webhook for every  install  event that is referred from a Branch link where you set the  Campaign  field to  App Install Campaign . You would configure a filter to fire a webhook only when  Campaign  is equal to  \"App Install Campaign\" . You would select  Campaign  from the dropdown, the key would be be autofilled and would equal  last_attributed_touch_data.~campaign . Finally, you'd set the value equal to  App Install Campaign .     Example: Filtering clicks by link channel  Let\u2019s say you\u2019re interested in receiving a webhook for every  click  event that is referred from a Branch link where you set the  Channel  field to  AppLovin . You would configure a filter to fire a webhook only when  Channel  is equal to  AppLovin . You would select  Channel  from the dropdown, the key would be be autofilled and would equal  last_attributed_touch_data.~channel . Finally, you'd set the value equal to  AppLovin .    See the  Advanced Filtering  page to read more about customizing when events are sent.", 
            "title": "Basic filtering"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#testing", 
            "text": "To test whether your webhook is configured correctly, you can use  requestb.in . RequestBin gives you a URL that accepts events for 24 hours and allows you to see exactly what Branch is sending.    Go to  requestb.in  and click  + Create a RequestBin :     Copy the  Bin URL :     Paste this into the URL field of your Branch webhook's configuration screen:     Now whenever your webhook is triggered, you will see a full report on RequestBin:    Caution  Please archive your Requestbin webhook when you have finished testing. Requestbins only last for 24 hours and return errors once they expire.", 
            "title": "Testing"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#data-format", 
            "text": "One of the major advantages of People-Based Attribution's data format is that metadata is consistently located across all events. We call this schema the  Event Ontology Data Schema . This consistent schema makes it easy to replicate Branch dashboards in your internal warehouse and compare large sets of data for different events.  Setting up Advanced Filters or Freemarker macros requires an understanding of the Event Ontology data format. Before diving into the schema, you should understand some high level concepts about event metadata structure:   Each event has top level fields, such as \"name\" and \"id\" that are not nested  Link data is generally nested in \"Last Attributed Touch Data\"  User data (including device and OS data) is nested in \"User Data\"  Product or content level data is nested in \"Content Items\"  Transaction and generic content data is nested in \"Event Data\"  Journeys or Deepviews view data (e.g. Journey banners loads, not clicks) is \"Last CTA View Data\"  Client-specified custom data (e.g. internal fields your company requires on specific events) is nested in \"Custom Data\"   You can find an  overview of critical fields  in that documentation, as well as an  exhaustive list of fields .", 
            "title": "Data Format"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#sample-webhook-post-body-syntax", 
            "text": "The POST body for all webhooks follows the same structure:  POST  User - agent :   Branch   Metrics   API  Content - Type :   application / json  { \n     name :   event name e.g. open , \n     user_data :   {}, \n     last_cta_view_data :   {}, \n     last_attributed_touch_data :   {}, \n     custom_data :   {}, \n     event_data :   {}, \n     content_items :   {}, \n     timestamp :   example timestamp (int)  }   If any of these objects are empty, they will not appear in the POST body.  Here's a POST body with example data for an attributed open:  // Attributed open  POST  User - agent :   Branch   Metrics   API  Content - Type :   application / json  { \n   name :   open , \n   user_data :   { \n     os :   IOS , \n     os_version :   11.1.2 , \n     environment :   FULL_APP , \n     platform :   IOS_APP , \n     idfa :   F520B35A-4165-4426-98F6-64F12F47E9BZ , \n     idfv :   C6B869E7-7B0A-4A93-1C3D-960E8859DP5D , \n     limit_ad_tracking :   false , \n     user_agent :   Mozilla/5.0 (iPhone; CPU iPhone OS 11_1_2 like Mac OS X) AppleWebKit/604.3.5 (KHTML, like Gecko) Mobile/15B202 , \n     ip :   50.200.105.218 , \n     developer_identity :   DB8C86A6-8B7C-4192-BD29-8107A5B788A1 , \n     country :   US , \n     language :   EN , \n     brand :   Apple \n   }, \n   last_cta_view_data :   { \n     ~id :   457624031399716729 , \n     ~campaign :   _test , \n     ~feature :   journeys , \n     +domain :   branchster.app.link , \n     +url :   https://branchster.app.link/jeMczRn5XH , \n     $deeplink_path :   open/item/1234 , \n     ~creation_source :   5 , \n     +referrer :   https://store.com/products/green-table , \n     foo :   bar , \n     $canonical_url :   https://store.com/products/green-table , \n     mydata :   set_branch_view_data_value , \n     ~tags :   [ \n       tag1 , \n       tag2 , \n       bottom_banner_style \n     ] \n   }, \n   last_attributed_touch_data :   { \n     ~id :   467391383381228204 , \n     ~feature :   marketing , \n     ~campaign :   december_test , \n     ~channel :   Facebook Organic , \n     product_id :   XBA8198j , \n     product_name :   Green Table AB10 , \n     +url :   https://branchster.app.link/test_linking , \n     $marketing_title :   Deep Link Testing , \n     $ios_deepview :   branch_default , \n     +via_features :   [ \n       QUICK_LINKS \n     ] \n   }, \n   custom_data :   { \n     reinstall :   false , \n     ip :   50.200.105.218 , \n     referred :   false \n   }, \n   timestamp :   1512681005807  }", 
            "title": "Sample webhook POST body syntax"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#advanced-filtering", 
            "text": "In  Basic Filtering  we covered what filters do, and how to set basic filters. Branch supports more advanced filtering which allows customers to set filters based on almost any event metadata.  Make sure you've taken a look at the  data format  before you attempt to set advanced filters.  To create a filter:   Click the  Add Filter  button  Select the metadata you'd like to filter on. For advanced filtering, choose \"Custom\"  Type in the key that you'd like to filter on. To find the key you'd like to filter on, reference our quick introduction to the  People-Based Attribution's data format  to figure out where your key is likely nested. Another foolproof way to find your key is looking at your data in full before setting up your filter. You can do this by doing a  CSV export ,  API export  or send a single webhook with a POST body, and locate your key in that POST body.  Unless your key is part of the top level data (e.g.  timestamp  or  id ), it will likely be nested one level deep. Most keys will be of the format  object_name.key . For example, if you want to filter for a custom key in deep link data called \"product_deeplink_id\", that would take the form  last_attributed_touch_data.product_deeplink_id .    Example: Filtering purchases for a specific coupon  Let\u2019s say you\u2019re interested in receiving a webhook for every  Purchase  event using a specific coupon. When you set up the Purchase event in your app or on your website, you  added a specific piece of metadata for \"coupon\" . In the  Event Ontology Schema  you saw that \"coupon\" is inside \"event_data\". To configure your filter to fire a webhook only when  coupon  is equal to  SUMMERDEALS10  you will:   Select \"Custom\" from the filter key dropdown  Make the key  event_data.coupon  Select \"equals\" on the equivalency dropdown  Enter a value of  SUMMERDEALS10      Array filtering not yet available  Currently, webhooks do not support filtering on values inside arrays. Example arrays that cannot be filtered by value are  tags ,  +via_features  and  content_items .", 
            "title": "Advanced Filtering"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#templating-your-postback-url", 
            "text": "If you'd like to template your postback URL, you\u2019ll likely need to create one of our templated Postback URLs along side the aforementioned filters. These work very similarly to filters but use Freemarker syntax.", 
            "title": "Templating your Postback URL"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#getting-started-with-templates", 
            "text": "To start, we can add a simple template. Let's say we want to add campaign as a query parameter. The correct syntax is   https://webhook.com?campaign=${(last_attributed_touch_data.~campaign)!}  Let's walk through the syntax:   First, find the key for the value you want to template in. As with filtering, to find the key, reference our quick introduction to the  People-Based Attribution's data format  to figure out where your key is likely nested. Another foolproof way to find your key is looking at your data in full before setting up your filter. You can do this by doing a  CSV export ,  API export  or send a single webhook with a POST body, and locate your key in that POST body.  This exercise tells us that Campaign is nested inside  last_attributed_touch_data  and is represented by  last_attributed_touch_data.~campaign .  The additional syntax around  last_attributed_touch_data.~campaign  is because Branch's templating engine uses Freemarker. In Freemarker, you can print variables by surrounding them with  ${} . Finally, we add  ()!  to the variable because we want to prevent errors in the case that there is no value.  This leaves us with  ${(last_attributed_touch_data.~campaign)!} .   Here is some more example Freemarker for common templates:     Parent object  Common name  Freemarker      Last Attributed Touch Data  Feature  ${(last_attributed_touch_data.~feature)!}    Last Attributed Touch Data  Channel  ${(last_attributed_touch_data.~channel)!}    Last Attributed Touch Data  Campaign  ${(last_attributed_touch_data.~campaign)!}    Last Attributed Touch Data  Ad Partner Name  ${(last_attributed_touch_data.~advertising_partner_name)!}    User Data  OS  ${(user_data.os)!}    User Data  Platform  ${(user_data.platform)!}    User Data  IDFA  ${(user_data.idfa)!}    User Data  IDFV  ${(user_data.idfv)!}    User Data  Android Advertising ID  ${(user_data.aaid)!}", 
            "title": "Getting started with templates"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#freemarker-expressions", 
            "text": "Due to security restrictions, Branch does not support the full list of Freemarker expressions.  Here is a list of blocked expressions: #import ,   #visit ,   #include ,   ?eval ,   #recurse ,   #setting ,   #macro ,   #function ,   #nested ,   #return ,   #list", 
            "title": "Freemarker expressions"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#authenticating-webhook-events", 
            "text": "To request authentication headers for your webhooks, please contact  integrations@branch.io .", 
            "title": "Authenticating webhook events"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#faqs", 
            "text": "", 
            "title": "FAQs"
        }, 
        {
            "location": "/pages/exports/ua-webhooks/#why-is-my-webhook-not-firing", 
            "text": "Check to see if you are in  Test Mode  with your SDK. If you are in test mode, we will not send a webhook.", 
            "title": "Why is my webhook not firing?"
        }, 
        {
            "location": "/pages/exports/query-api/", 
            "text": "Query API\n\n\n\n\nGetting started\n\n\nFor newcomers to this API, we strongly suggest you check out our \nQuery Recipe Book\n. It has screenshots of Dashboard visualizations, accompanied by what queries you need to make to pull the same data. It's a quick way to get up and running with this API.\n\n\n\n\n\n\nDate format recently changed\n\n\nThe date format recently changed. You are no longer required or allowed to specify a time as part of \nstart_date\n and \nend_date\n. Instead, we use the timezone associated with your app. Visit the \nAccount Settings\n to see your timezone.\n\n\nExample change: instead of sending \n2017-11-29T08:00:00.000Z\n, send \n2017-11-29\n.\n\n\n\n\nAn HTTP API usable for programmatically querying pre-aggregated analytics. It can be used to fetch any of the same information displayed on nearly any the Branch dashboard, without accessing the Dashboard itself.\n\n\nAn individual query is constructed from three types of parameters:\n\n\n\n\nAuthentication parameters that control the access to the data\n\n\nData selection keys which define which events are eligible to be counted in the results (eg, filters)\n\n\nResult format specifiers that define which results are included in the HTTP response, and how the result is returned (eg, sorting)\n\n\n\n\nAn example query could look like:\n\n{\n\n  \n// Authentication\n\n  \nbranch_key\n:\nYOUR_BRANCH_KEY\n,\n\n  \nbranch_secret\n:\nYOUR_BRANCH_SECRET\n,\n\n  \n// Data selection\n\n  \nstart_date\n:\n \n2017-12-12\n,\n\n  \nend_date\n:\n \n2017-12-18\n,\n\n  \ndata_source\n:\n \neo_click\n,\n\n  \ndimensions\n:\n \n[\n\n    \nlast_attributed_touch_data_tilde_feature\n,\n\n    \nlast_attributed_touch_data_tilde_channel\n,\n\n    \nlast_attributed_touch_data_tilde_campaign\n,\n\n    \nlast_attributed_touch_data_plus_current_feature\n\n  \n],\n\n  \nfilters\n:\n \n{\n\n    \n!last_attributed_touch_data_plus_current_feature\n:\n \n[\n\n      \nMOBILE_DEEPVIEWS\n,\n\n      \nDESKTOP_DEEPVIEWS\n\n    \n]\n\n  \n},\n\n  \n// Result format\n\n  \nordered\n:\n \ndescending\n,\n\n  \nordered_by\n:\n \nunique_count\n,\n\n  \naggregation\n:\n \nunique_count\n,\n\n  \nzero_fill\n:\n \ntrue\n\n\n}\n\n\n\n\nEndpoint Definition\n\n\nPOST /v1/query/analytics\n\n\nContent-Type: application/json\n\n\nHost: api.branch.io\n\n\n\n\n\nParameters\n\n\nAuthentication\n\n\nbranch_key\n\n\ndescription\n: The Branch key of the app analytics information is being pulled for.\n\n\nrequired\n: true\n\n\nlocation\n: body\n\n\nformat\n: string\n\n\nbranch_secret\n\n\ndescription\n: The Branch secret of the app, used for authentication.\n\n\nrequired\n: true\n\n\nlocation\n: body\n\n\nformat\n: string\n\n\nData selection\n\n\nstart_date\n\n\ndescription\n: A timestamp representing the oldest date to return data for.\n\n\nrequired\n: true\n\n\nlocation\n: body\n\n\nrestrictions\n: Cannot be before 2017-10-14\n\n\nformat\n: An ISO-8601 compliant date-time string. Eg: \"2017-10-24T16:00:00-08:00\"\n\n\nend_date\n\n\ndescription\n: The last timestamp (exclusive) to return data for. No events that triggered after the end_date will be counted in the query results.\n\n\nrequired\n: true\n\n\nlocation\n: body\n\n\nrestrictions\n: Cannot be more than 7 days after the start_date\n\n\nformat\n: An ISO-8601 compliant date-time string. Eg: \"2017-10-24T16:00:00-08:00\"\n\n\ndata_source\n\n\ndescription\n: The type of event to query for, prefixed with the source (eg 'eo_' + 'open' pulls Branch app opens)\n\n\nrequired\n: true\n\n\nlocation\n: body\n\n\nvalid values\n:\nBranch data sources\n\n[\n  \neo_impression\n,\n  \neo_click\n,\n  \neo_web_to_app_auto_redirect\n,\n  \neo_branch_cta_view\n,\n  \neo_sms_sent\n,\n  \neo_open\n,\n  \neo_install\n,\n  \neo_reinstall\n,\n  \neo_web_session_start\n,\n  \neo_pageview\n,\n  \neo_commerce_event\n,\n  \neo_custom_event\n,\n  \neo_content_event\n,\n  \neo_user_lifecycle_event\n\n]\n\n\n\naggregation\n\n\ndescription\n: How to count events towards the final result count. When using unique_count, each event is only counted if an event by that user has not already been seen. Eg, if 10 users each trigger 3 opens:\n\ntotal_count = 30\nunique_count = 10\n\n\nWhen querying with a datasource of \"eo_commerce_event\", the aggregation may also be specified as \"revenue\", in which case the counts returned are the sum of revenue from matching events, and not the number of events themselves.\n\n\nrequired\n: true\n\n\nlocation\n: body\n\n\nformat\n: string\n\n\npossible values\n:\n\n[\n  \nunique_count\n,\n  \ntotal_count\n,\n  \nrevenue\n\n]\n\n\n\ndimensions\n\n\ndescription\n: List of event fields to use as splits for the query. Results counts are returned grouped with other events that have matchings values for each key provided in \"dimensions\".\n\n\nrequired\n: true\n\n\nlocation\n: body\n\n\nformat\n: array\n\n\npossible element values\n:\nGeneral info:\n\n[\n  \nname\n,\n  \norigin\n,\n  \ntimestamp\n,\n  \ndeep_linked\n,\n  \nfrom_desktop\n,\n]\n\n\nUser information:\n\n[\n  \nuser_data_os\n,\n  \nuser_data_country\n,\n  \nuser_data_language\n,\n  \nuser_data_platform\n,\n  \nuser_data_environment\n,\n  \nuser_data_geo_dma_code\n,\n  \nuser_data_geo_country_code\n,\n]\n\n\nLast attributed touch:\n\n[\n  \nlast_attributed_touch_type\n,\n  \nlast_attributed_touch_data_tilde_tags\n,\n  \nlast_attributed_touch_data_tilde_secondary_publisher\n,\n  \nlast_attributed_touch_data_plus_current_feature\n,\n  \nlast_attributed_touch_data_plus_via_features\n,\n  \nlast_attributed_touch_data_tilde_campaign\n,\n  \nlast_attributed_touch_data_tilde_advertising_partner_name\n,\n  \nlast_attributed_touch_data_tilde_feature\n,\n  \nlast_attributed_touch_data_tilde_creative_name\n,\n  \nlast_attributed_touch_data_plus_web_format\n,\n  \nlast_attributed_touch_data_tilde_creative_id\n,\n  \nlast_attributed_touch_data_tilde_ad_name\n,\n  \nlast_attributed_touch_data_tilde_ad_id\n,\n  \nlast_attributed_touch_data_tilde_campaign_id\n,\n  \nlast_attributed_touch_data_tilde_stage\n,\n  \nlast_attributed_touch_data_tilde_channel\n,\n  \nlast_attributed_touch_data_tilde_ad_set_name\n,\n  \nlast_attributed_touch_data_tilde_ad_set_id\n,\n]\n\n\nLast CTA view information:\n\n[\n  \nlast_cta_view_data_tilde_ad_name\n,\n  \nlast_cta_view_data_tilde_secondary_publisher\n,\n  \nlast_cta_view_data_tilde_campaign\n,\n  \nlast_cta_view_data_tilde_advertising_partner_name\n,\n  \nlast_cta_view_data_tilde_feature\n,\n  \nlast_cta_view_data_tilde_ad_set_name\n,\n  \nlast_cta_view_data_tilde_ad_set_id\n,\n  \nlast_cta_view_data_tilde_campaign_id\n,\n  \nlast_cta_view_data_tilde_creative_name\n,\n  \nlast_cta_view_data_tilde_creative_id\n,\n  \nlast_cta_view_data_plus_via_features\n,\n  \nlast_cta_view_data_dollar_3p\n,\n  \nlast_cta_view_data_tilde_tags\n,\n  \nlast_cta_view_data_plus_web_format\n,\n  \nlast_cta_view_data_tilde_channel\n,\n  \nlast_cta_view_data_tilde_ad_id\n,\n  \nlast_cta_view_data_tilde_stage\n\n]\n\n\nOther:\n\n[\n  \ndays_from_last_attributed_touch_to_event\n,\n  \ndays_from_last_cta_view_to_event\n,\n  \nevent_data_product_categories\n,\n  \nfirst_event_for_user\n,\n]\n\n\n\nfilters\n\n\ndescription\n: An object where each key is a valid \"dimension\", and each value is an array of string values. If a key is prefixed with a '!', then any event with a dimension value contained in the value of that key is excluded. Otherwise, only events with dimension values matching the filter will be counted.\n\n\nrequired\n: false\n\n\nlocation\n: body\n\n\nformat\n: Object\n, For example, a query with filters specified as:\n\n{\n  \nfilters\n: {\n    \nlast_attributed_touch_data_plus_current_feature\n: [\n      \nMOBILE_DEEPVIEWS\n,\n      \nDESKTOP_DEEPVIEWS\n\n    ],\n    \n!user_data_os\n: [ \niOS\n ]\n  }\n}\n\n\nwould count only events where\n  - last_attributed_touch_data_plus_current_feature was equal to \"MOBILE_DEEPVIEWS\" or \"DESKTOP_DEEPVIEWS\"\n\n\nand\n\n\n\n\nuser_data_os was \nnot\n equal to \"iOS\"\n\n\n\n\npossible keys\n: See \"dimensions\" definition for valid key values. Any key may also be used with a \"!\" prefix\n\n\nResult formatting\n\n\ngranularity\n\n\ndescription\n: Range of time to roll multiple events into a single result count. Eg, with a value of \"day\" the counts for each day are returned independently, where \"all\" would return a single count for the entire time range.\n\n\nrequired\n: false\n\n\nlocation\n: body\n\n\ndefault value\n: \"all\"\n\n\nformat\n: string\n\n\npossible values\n:\n\n[\n  \nall\n,\n  \nday\n\n]\n\n\n\nordered_by\n\n\ndescription\n: Which key of result to sort results on. Only supports 1 sort key\n\n\nrequired\n: false\n\n\nlocation\n: body\n\n\ndefault value\n: value of query \"aggregation\" property, or \"total_count\" if not defined\n\n\nformat\n: string\n\n\npossible values\n: Any element of query \"dimensions\" or the value of \"aggregation\" in the query\n\n\nordered\n\n\ndescription\n: Which direction to order the results\n\n\nrequired\n: false\n\n\nlocation\n: body\n\n\ndefault value\n: \"descending\"\"\n\n\nformat\n: string\n\n\npossible values\n:\n\n[\n  \nascending\n,\n  \ndescending\n\n]\n\n\n\nA note on sorts and the ordered_by parameter:\n\n\nIt is not possible to provide an explicit sort method to the query, so the sort type is chosen automatically based on the value of \"ordered_by\". Behavior for comparison of equal values is left undefined, and as such the sort is not considered order stable for identical values.\nordered_by value sort choices:\n  - unique_count, total_count, revenue -\n numerically sorted\n  - timestamp -\n chronologically ordered\n  - everything else -\n lexicographically sorted\n\n\nzero_fill\n\n\ndescription\n: Whether to return result objects where the result count was 0. If set to false, results with count = 0 will be omitted from the response.\n\n\nrequired\n: false\n\n\nlocation\n: body\n\n\ndefault value\n: false\n\n\nformat\n: boolean\n\n\nlimit\n\n\ndescription\n: Maximum number of results to return in the response\n\n\nrequired\n: false\n\n\nlocation\n: URL query\n\n\ndefault value\n: 100\n\n\nformat\n: integer\n\n\nafter\n\n\ndescription\n: A pagination parameter indicating the index of the first result to return in the response. Eg, with 100 results returned, setting \"after\" to 50 would return elements 51-100\n\n\nrequired\n: false\n\n\nlocation\n: URL\n\n\ndefault value\n: 0\n\n\nformat\n: integer\n\n\nquery_id\n\n\ndescription\n: Returned as query parameter on the \"paging\" object next_url and previous_url. Locks the last event to count for a query, so new events that occur between queries are not added to the results (prevents count change over time)\n\n\nrequired\n: false\n\n\nlocation\n: URL\n\n\ndefault value\n: null\n\n\nformat\n: string\n\n\nNote:\n The query id should be treated as ephemeral, and should only be used when retrieving pages of an existing query where the pagination URLs already have query_id set as a query parameter. You should not attempt to change the id between requests or include a query id with a different query request.\n\n\nExample Usage\n\n\nBasic query for pulling installs per day, split by OS of the device the user installed on, limited to 5 results:\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n  \nbranch_key\n:\nYOUR_BRANCH_KEY\n,\n  \nbranch_secret\n:\nYOUR_BRANCH_SECRET\n,\n  \nstart_date\n: \n2017-12-12\n,\n  \nend_date\n: \n2017-12-18\n,\n  \ndata_source\n: \neo_install\n,\n  \ndimensions\n: [\n    \nuser_data_os\n\n  ],\n  \ngranularity\n: \nday\n,\n  \naggregation\n: \ntotal_count\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=5\n\n\n\n\n\nExample results:\n\n\n{\n  \nresults\n: [\n    {\n      \nresult\n: {\n        \nuser_data_os\n: \nANDROID\n,\n        \ntotal_count\n: 144\n      },\n      \ntimestamp\n: \n2017-12-18T00:00:00.000Z\n\n    },\n    {\n      \nresult\n: {\n        \nuser_data_os\n: \nIOS\n,\n        \ntotal_count\n: 142\n      },\n      \ntimestamp\n: \n2017-12-18T00:00:00.000Z\n\n    },\n    {\n      \nresult\n: {\n        \nuser_data_os\n: \nIOS\n,\n        \ntotal_count\n: 191\n      },\n      \ntimestamp\n: \n2017-12-17T00:00:00.000Z\n\n    },\n    {\n      \nresult\n: {\n        \nuser_data_os\n: \nANDROID\n,\n        \ntotal_count\n: 194\n      },\n      \ntimestamp\n: \n2017-12-17T00:00:00.000Z\n\n    },\n    {\n      \nresult\n: {\n        \nuser_data_os\n: \nANDROID\n,\n        \ntotal_count\n: 246\n      },\n      \ntimestamp\n: \n2017-12-16T00:00:00.000Z\n\n    }\n  ],\n  \npaging\n: {\n    \nnext_url\n: \n/v1/query/analytics?query_id=CqdBOb\nlimit=5\nafter=5\n,\n    \ntotal_count\n: 14\n  }\n}\n\n\n\n\nMore complex query for pulling unique click counts, split by the last touch channel, campaign, feature and the +via_current_features values.\n\n\nHas a filter specified to filter out any clicks where last_attributed_touch_data_plus_current_feature was MOBILE_DEEPVIEWS or DESKTOP_DEEPVIEWS.\n\n\nA maximum of 5 results should be returned, in descending order of unique_count, with days that had 0 clicks returned (not filtered out):\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n  \nbranch_key\n:\nYOUR_BRANCH_KEY\n,\n  \nbranch_secret\n:\nYOUR_BRANCH_SECRET\n,\n  \nstart_date\n: \n2017-12-12\n,\n  \nend_date\n: \n2017-12-18\n,\n  \ndata_source\n: \neo_click\n,\n  \ndimensions\n: [\n    \nlast_attributed_touch_data_tilde_feature\n,\n    \nlast_attributed_touch_data_tilde_channel\n,\n    \nlast_attributed_touch_data_tilde_campaign\n,\n    \nlast_attributed_touch_data_plus_current_feature\n\n  ],\n  \nfilters\n: {\n    \n!last_attributed_touch_data_plus_current_feature\n: [\n      \nMOBILE_DEEPVIEWS\n,\n      \nDESKTOP_DEEPVIEWS\n\n    ]\n  },\n  \nordered\n: \ndescending\n,\n  \nordered_by\n: \nunique_count\n,\n  \naggregation\n: \nunique_count\n,\n  \nzero_fill\n: true\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=5\n\n\n\n\n\nExample Results:\n\n\n{\n  \nresults\n: [\n    {\n      \ntimestamp\n: \n2017-12-12T00:00:00.000Z\n,\n      \nresult\n: {\n        \nlast_attributed_touch_data_tilde_channel\n: \nFacebook#2\n,\n        \nlast_attributed_touch_data_tilde_campaign\n: \nFacebook#2\n,\n        \nlast_attributed_touch_data_tilde_feature\n: \npaid advertising\n,\n        \nlast_attributed_touch_data_plus_current_feature\n: \nADS\n,\n        \nunique_count\n: 750\n      }\n    },\n    {\n      \ntimestamp\n: \n2017-12-12T00:00:00.000Z\n,\n      \nresult\n: {\n        \nlast_attributed_touch_data_tilde_channel\n: \ntaptica#1\n,\n        \nlast_attributed_touch_data_tilde_campaign\n: \ntaptica#1\n,\n        \nlast_attributed_touch_data_tilde_feature\n: \npaid advertising\n,\n        \nlast_attributed_touch_data_plus_current_feature\n: \nADS\n,\n        \nunique_count\n: 723\n      }\n    },\n    {\n      \ntimestamp\n: \n2017-12-12T00:00:00.000Z\n,\n      \nresult\n: {\n        \nlast_attributed_touch_data_tilde_channel\n: \nJourneys\n,\n        \nlast_attributed_touch_data_tilde_campaign\n: \nDefault Banner\n,\n        \nlast_attributed_touch_data_tilde_feature\n: \njourneys\n,\n        \nlast_attributed_touch_data_plus_current_feature\n: \nMOBILE_JOURNEYS\n,\n        \nunique_count\n: 553\n      }\n    },\n    {\n      \ntimestamp\n: \n2017-12-12T00:00:00.000Z\n,\n      \nresult\n: {\n        \nlast_attributed_touch_data_tilde_channel\n: \nApple App Store\n,\n        \nlast_attributed_touch_data_tilde_campaign\n: null,\n        \nlast_attributed_touch_data_tilde_feature\n: \npaid advertising\n,\n        \nlast_attributed_touch_data_plus_current_feature\n: \nADS\n,\n        \nunique_count\n: 432\n      }\n    },\n    {\n      \ntimestamp\n: \n2017-12-12T00:00:00.000Z\n,\n      \nresult\n: {\n        \nlast_attributed_touch_data_tilde_channel\n: null,\n        \nlast_attributed_touch_data_tilde_campaign\n: null,\n        \nlast_attributed_touch_data_tilde_feature\n: \nmarketing\n,\n        \nlast_attributed_touch_data_plus_current_feature\n: \nQUICK_LINKS\n,\n        \nunique_count\n: 201\n      }\n    }\n  ],\n  \npaging\n: {\n    \nnext_url\n: \n/v1/query/analytics?query_id=EDdBOb\nlimit=5\nafter=5\n,\n    \ntotal_count\n: 143\n  }\n}\n\n\n\n\nRate Limits\n\n\n\n\n5 requests per second\n\n\n20 requests per minute\n\n\n150 requests per hour", 
            "title": "Query API"
        }, 
        {
            "location": "/pages/exports/query-api/#query-api", 
            "text": "Getting started  For newcomers to this API, we strongly suggest you check out our  Query Recipe Book . It has screenshots of Dashboard visualizations, accompanied by what queries you need to make to pull the same data. It's a quick way to get up and running with this API.    Date format recently changed  The date format recently changed. You are no longer required or allowed to specify a time as part of  start_date  and  end_date . Instead, we use the timezone associated with your app. Visit the  Account Settings  to see your timezone.  Example change: instead of sending  2017-11-29T08:00:00.000Z , send  2017-11-29 .   An HTTP API usable for programmatically querying pre-aggregated analytics. It can be used to fetch any of the same information displayed on nearly any the Branch dashboard, without accessing the Dashboard itself.  An individual query is constructed from three types of parameters:   Authentication parameters that control the access to the data  Data selection keys which define which events are eligible to be counted in the results (eg, filters)  Result format specifiers that define which results are included in the HTTP response, and how the result is returned (eg, sorting)   An example query could look like: { \n   // Authentication \n   branch_key : YOUR_BRANCH_KEY , \n   branch_secret : YOUR_BRANCH_SECRET , \n   // Data selection \n   start_date :   2017-12-12 , \n   end_date :   2017-12-18 , \n   data_source :   eo_click , \n   dimensions :   [ \n     last_attributed_touch_data_tilde_feature , \n     last_attributed_touch_data_tilde_channel , \n     last_attributed_touch_data_tilde_campaign , \n     last_attributed_touch_data_plus_current_feature \n   ], \n   filters :   { \n     !last_attributed_touch_data_plus_current_feature :   [ \n       MOBILE_DEEPVIEWS , \n       DESKTOP_DEEPVIEWS \n     ] \n   }, \n   // Result format \n   ordered :   descending , \n   ordered_by :   unique_count , \n   aggregation :   unique_count , \n   zero_fill :   true  }", 
            "title": "Query API"
        }, 
        {
            "location": "/pages/exports/query-api/#endpoint-definition", 
            "text": "POST /v1/query/analytics  Content-Type: application/json  Host: api.branch.io", 
            "title": "Endpoint Definition"
        }, 
        {
            "location": "/pages/exports/query-api/#parameters", 
            "text": "", 
            "title": "Parameters"
        }, 
        {
            "location": "/pages/exports/query-api/#authentication", 
            "text": "branch_key  description : The Branch key of the app analytics information is being pulled for.  required : true  location : body  format : string  branch_secret  description : The Branch secret of the app, used for authentication.  required : true  location : body  format : string", 
            "title": "Authentication"
        }, 
        {
            "location": "/pages/exports/query-api/#data-selection", 
            "text": "start_date  description : A timestamp representing the oldest date to return data for.  required : true  location : body  restrictions : Cannot be before 2017-10-14  format : An ISO-8601 compliant date-time string. Eg: \"2017-10-24T16:00:00-08:00\"  end_date  description : The last timestamp (exclusive) to return data for. No events that triggered after the end_date will be counted in the query results.  required : true  location : body  restrictions : Cannot be more than 7 days after the start_date  format : An ISO-8601 compliant date-time string. Eg: \"2017-10-24T16:00:00-08:00\"  data_source  description : The type of event to query for, prefixed with the source (eg 'eo_' + 'open' pulls Branch app opens)  required : true  location : body  valid values :\nBranch data sources [\n   eo_impression ,\n   eo_click ,\n   eo_web_to_app_auto_redirect ,\n   eo_branch_cta_view ,\n   eo_sms_sent ,\n   eo_open ,\n   eo_install ,\n   eo_reinstall ,\n   eo_web_session_start ,\n   eo_pageview ,\n   eo_commerce_event ,\n   eo_custom_event ,\n   eo_content_event ,\n   eo_user_lifecycle_event \n]  aggregation  description : How to count events towards the final result count. When using unique_count, each event is only counted if an event by that user has not already been seen. Eg, if 10 users each trigger 3 opens: total_count = 30\nunique_count = 10 \nWhen querying with a datasource of \"eo_commerce_event\", the aggregation may also be specified as \"revenue\", in which case the counts returned are the sum of revenue from matching events, and not the number of events themselves.  required : true  location : body  format : string  possible values : [\n   unique_count ,\n   total_count ,\n   revenue \n]  dimensions  description : List of event fields to use as splits for the query. Results counts are returned grouped with other events that have matchings values for each key provided in \"dimensions\".  required : true  location : body  format : array  possible element values :\nGeneral info: [\n   name ,\n   origin ,\n   timestamp ,\n   deep_linked ,\n   from_desktop ,\n] \nUser information: [\n   user_data_os ,\n   user_data_country ,\n   user_data_language ,\n   user_data_platform ,\n   user_data_environment ,\n   user_data_geo_dma_code ,\n   user_data_geo_country_code ,\n] \nLast attributed touch: [\n   last_attributed_touch_type ,\n   last_attributed_touch_data_tilde_tags ,\n   last_attributed_touch_data_tilde_secondary_publisher ,\n   last_attributed_touch_data_plus_current_feature ,\n   last_attributed_touch_data_plus_via_features ,\n   last_attributed_touch_data_tilde_campaign ,\n   last_attributed_touch_data_tilde_advertising_partner_name ,\n   last_attributed_touch_data_tilde_feature ,\n   last_attributed_touch_data_tilde_creative_name ,\n   last_attributed_touch_data_plus_web_format ,\n   last_attributed_touch_data_tilde_creative_id ,\n   last_attributed_touch_data_tilde_ad_name ,\n   last_attributed_touch_data_tilde_ad_id ,\n   last_attributed_touch_data_tilde_campaign_id ,\n   last_attributed_touch_data_tilde_stage ,\n   last_attributed_touch_data_tilde_channel ,\n   last_attributed_touch_data_tilde_ad_set_name ,\n   last_attributed_touch_data_tilde_ad_set_id ,\n] \nLast CTA view information: [\n   last_cta_view_data_tilde_ad_name ,\n   last_cta_view_data_tilde_secondary_publisher ,\n   last_cta_view_data_tilde_campaign ,\n   last_cta_view_data_tilde_advertising_partner_name ,\n   last_cta_view_data_tilde_feature ,\n   last_cta_view_data_tilde_ad_set_name ,\n   last_cta_view_data_tilde_ad_set_id ,\n   last_cta_view_data_tilde_campaign_id ,\n   last_cta_view_data_tilde_creative_name ,\n   last_cta_view_data_tilde_creative_id ,\n   last_cta_view_data_plus_via_features ,\n   last_cta_view_data_dollar_3p ,\n   last_cta_view_data_tilde_tags ,\n   last_cta_view_data_plus_web_format ,\n   last_cta_view_data_tilde_channel ,\n   last_cta_view_data_tilde_ad_id ,\n   last_cta_view_data_tilde_stage \n] \nOther: [\n   days_from_last_attributed_touch_to_event ,\n   days_from_last_cta_view_to_event ,\n   event_data_product_categories ,\n   first_event_for_user ,\n]  filters  description : An object where each key is a valid \"dimension\", and each value is an array of string values. If a key is prefixed with a '!', then any event with a dimension value contained in the value of that key is excluded. Otherwise, only events with dimension values matching the filter will be counted.  required : false  location : body  format : Object , For example, a query with filters specified as: {\n   filters : {\n     last_attributed_touch_data_plus_current_feature : [\n       MOBILE_DEEPVIEWS ,\n       DESKTOP_DEEPVIEWS \n    ],\n     !user_data_os : [  iOS  ]\n  }\n} \nwould count only events where\n  - last_attributed_touch_data_plus_current_feature was equal to \"MOBILE_DEEPVIEWS\" or \"DESKTOP_DEEPVIEWS\"  and   user_data_os was  not  equal to \"iOS\"   possible keys : See \"dimensions\" definition for valid key values. Any key may also be used with a \"!\" prefix", 
            "title": "Data selection"
        }, 
        {
            "location": "/pages/exports/query-api/#result-formatting", 
            "text": "granularity  description : Range of time to roll multiple events into a single result count. Eg, with a value of \"day\" the counts for each day are returned independently, where \"all\" would return a single count for the entire time range.  required : false  location : body  default value : \"all\"  format : string  possible values : [\n   all ,\n   day \n]  ordered_by  description : Which key of result to sort results on. Only supports 1 sort key  required : false  location : body  default value : value of query \"aggregation\" property, or \"total_count\" if not defined  format : string  possible values : Any element of query \"dimensions\" or the value of \"aggregation\" in the query  ordered  description : Which direction to order the results  required : false  location : body  default value : \"descending\"\"  format : string  possible values : [\n   ascending ,\n   descending \n]  A note on sorts and the ordered_by parameter:  It is not possible to provide an explicit sort method to the query, so the sort type is chosen automatically based on the value of \"ordered_by\". Behavior for comparison of equal values is left undefined, and as such the sort is not considered order stable for identical values.\nordered_by value sort choices:\n  - unique_count, total_count, revenue -  numerically sorted\n  - timestamp -  chronologically ordered\n  - everything else -  lexicographically sorted  zero_fill  description : Whether to return result objects where the result count was 0. If set to false, results with count = 0 will be omitted from the response.  required : false  location : body  default value : false  format : boolean  limit  description : Maximum number of results to return in the response  required : false  location : URL query  default value : 100  format : integer  after  description : A pagination parameter indicating the index of the first result to return in the response. Eg, with 100 results returned, setting \"after\" to 50 would return elements 51-100  required : false  location : URL  default value : 0  format : integer  query_id  description : Returned as query parameter on the \"paging\" object next_url and previous_url. Locks the last event to count for a query, so new events that occur between queries are not added to the results (prevents count change over time)  required : false  location : URL  default value : null  format : string  Note:  The query id should be treated as ephemeral, and should only be used when retrieving pages of an existing query where the pagination URLs already have query_id set as a query parameter. You should not attempt to change the id between requests or include a query id with a different query request.", 
            "title": "Result formatting"
        }, 
        {
            "location": "/pages/exports/query-api/#example-usage", 
            "text": "Basic query for pulling installs per day, split by OS of the device the user installed on, limited to 5 results:  curl -X POST -H  Content-Type: application/json  -d  {\n   branch_key : YOUR_BRANCH_KEY ,\n   branch_secret : YOUR_BRANCH_SECRET ,\n   start_date :  2017-12-12 ,\n   end_date :  2017-12-18 ,\n   data_source :  eo_install ,\n   dimensions : [\n     user_data_os \n  ],\n   granularity :  day ,\n   aggregation :  total_count \n}   http://api.branch.io/v1/query/analytics?limit=5   Example results:  {\n   results : [\n    {\n       result : {\n         user_data_os :  ANDROID ,\n         total_count : 144\n      },\n       timestamp :  2017-12-18T00:00:00.000Z \n    },\n    {\n       result : {\n         user_data_os :  IOS ,\n         total_count : 142\n      },\n       timestamp :  2017-12-18T00:00:00.000Z \n    },\n    {\n       result : {\n         user_data_os :  IOS ,\n         total_count : 191\n      },\n       timestamp :  2017-12-17T00:00:00.000Z \n    },\n    {\n       result : {\n         user_data_os :  ANDROID ,\n         total_count : 194\n      },\n       timestamp :  2017-12-17T00:00:00.000Z \n    },\n    {\n       result : {\n         user_data_os :  ANDROID ,\n         total_count : 246\n      },\n       timestamp :  2017-12-16T00:00:00.000Z \n    }\n  ],\n   paging : {\n     next_url :  /v1/query/analytics?query_id=CqdBOb limit=5 after=5 ,\n     total_count : 14\n  }\n}  More complex query for pulling unique click counts, split by the last touch channel, campaign, feature and the +via_current_features values.  Has a filter specified to filter out any clicks where last_attributed_touch_data_plus_current_feature was MOBILE_DEEPVIEWS or DESKTOP_DEEPVIEWS.  A maximum of 5 results should be returned, in descending order of unique_count, with days that had 0 clicks returned (not filtered out):  curl -X POST -H  Content-Type: application/json  -d  {\n   branch_key : YOUR_BRANCH_KEY ,\n   branch_secret : YOUR_BRANCH_SECRET ,\n   start_date :  2017-12-12 ,\n   end_date :  2017-12-18 ,\n   data_source :  eo_click ,\n   dimensions : [\n     last_attributed_touch_data_tilde_feature ,\n     last_attributed_touch_data_tilde_channel ,\n     last_attributed_touch_data_tilde_campaign ,\n     last_attributed_touch_data_plus_current_feature \n  ],\n   filters : {\n     !last_attributed_touch_data_plus_current_feature : [\n       MOBILE_DEEPVIEWS ,\n       DESKTOP_DEEPVIEWS \n    ]\n  },\n   ordered :  descending ,\n   ordered_by :  unique_count ,\n   aggregation :  unique_count ,\n   zero_fill : true\n}   http://api.branch.io/v1/query/analytics?limit=5   Example Results:  {\n   results : [\n    {\n       timestamp :  2017-12-12T00:00:00.000Z ,\n       result : {\n         last_attributed_touch_data_tilde_channel :  Facebook#2 ,\n         last_attributed_touch_data_tilde_campaign :  Facebook#2 ,\n         last_attributed_touch_data_tilde_feature :  paid advertising ,\n         last_attributed_touch_data_plus_current_feature :  ADS ,\n         unique_count : 750\n      }\n    },\n    {\n       timestamp :  2017-12-12T00:00:00.000Z ,\n       result : {\n         last_attributed_touch_data_tilde_channel :  taptica#1 ,\n         last_attributed_touch_data_tilde_campaign :  taptica#1 ,\n         last_attributed_touch_data_tilde_feature :  paid advertising ,\n         last_attributed_touch_data_plus_current_feature :  ADS ,\n         unique_count : 723\n      }\n    },\n    {\n       timestamp :  2017-12-12T00:00:00.000Z ,\n       result : {\n         last_attributed_touch_data_tilde_channel :  Journeys ,\n         last_attributed_touch_data_tilde_campaign :  Default Banner ,\n         last_attributed_touch_data_tilde_feature :  journeys ,\n         last_attributed_touch_data_plus_current_feature :  MOBILE_JOURNEYS ,\n         unique_count : 553\n      }\n    },\n    {\n       timestamp :  2017-12-12T00:00:00.000Z ,\n       result : {\n         last_attributed_touch_data_tilde_channel :  Apple App Store ,\n         last_attributed_touch_data_tilde_campaign : null,\n         last_attributed_touch_data_tilde_feature :  paid advertising ,\n         last_attributed_touch_data_plus_current_feature :  ADS ,\n         unique_count : 432\n      }\n    },\n    {\n       timestamp :  2017-12-12T00:00:00.000Z ,\n       result : {\n         last_attributed_touch_data_tilde_channel : null,\n         last_attributed_touch_data_tilde_campaign : null,\n         last_attributed_touch_data_tilde_feature :  marketing ,\n         last_attributed_touch_data_plus_current_feature :  QUICK_LINKS ,\n         unique_count : 201\n      }\n    }\n  ],\n   paging : {\n     next_url :  /v1/query/analytics?query_id=EDdBOb limit=5 after=5 ,\n     total_count : 143\n  }\n}", 
            "title": "Example Usage"
        }, 
        {
            "location": "/pages/exports/query-api/#rate-limits", 
            "text": "5 requests per second  20 requests per minute  150 requests per hour", 
            "title": "Rate Limits"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/", 
            "text": "Want to see a Query API reference?\n\n\nFor an exhaustive list of options for this Query API, flip over to the \nQuery API\n reference page.\n\n\n\n\n\n\nDate format recently changed\n\n\nThe date format recently changed. You are no longer required or allowed to specify a time as part of \nstart_date\n and \nend_date\n. Instead, we use the timezone associated with your app. Visit the \nAccount Settings\n to see your timezone.\n\n\nExample change: instead of sending \n2017-11-29T00:00:00-08:00\n, send \n2017-11-29\n.\n\n\n\n\nYou can find your Branch Key and Branch Secret on the \nAccount Settings\n page of the Branch Dashboard. Give the curls below a try from any terminal!\n\n\nSummary Page - Installs\n\n\n\n\n\n\nAll Installs\n\n\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-11-29\n,\n\n\n  \nend_date\n: \n2017-12-05\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nday\n,\n\n\n  \ndimensions\n: [\n\n\n    \ntimestamp\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nunique_count\n \n:\n \n246\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nunique_count\n \n:\n \n302\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nunique_count\n \n:\n \n277\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nunique_count\n \n:\n \n300\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nunique_count\n \n:\n \n264\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nunique_count\n \n:\n \n208\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nunique_count\n \n:\n \n225\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n7\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttributed Installs\n\n\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-11-29\n,\n\n\n  \nend_date\n: \n2017-12-05\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nday\n,\n\n\n  \ndimensions\n: [\n\n\n    \ntimestamp\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      \nnull\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \ntotal_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \ntotal_count\n \n:\n \n248.0\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \ntotal_count\n \n:\n \n296.0\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \ntotal_count\n \n:\n \n284.0\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \ntotal_count\n \n:\n \n291.0\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \ntotal_count\n \n:\n \n263.0\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \ntotal_count\n \n:\n \n214.0\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \ntotal_count\n \n:\n \n227.0\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n7\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttributed Installs, Split by Campaign\n\n\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-11-29\n,\n\n\n  \nend_date\n: \n2017-12-05\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nday\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      \nnull\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nunique_count\n \n:\n \n171\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nunique_count\n \n:\n \n158\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nunique_count\n \n:\n \n157\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nunique_count\n \n:\n \n148\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nunique_count\n \n:\n \n144\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nunique_count\n \n:\n \n124\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nunique_count\n \n:\n \n120\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nDefault Ads Journeys\n,\n\n      \nunique_count\n \n:\n \n77\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nDefault Ads Journeys\n,\n\n      \nunique_count\n \n:\n \n76\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nDefault Ads Journeys\n,\n\n      \nunique_count\n \n:\n \n68\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nDefault Ads Journeys\n,\n\n      \nunique_count\n \n:\n \n43\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nunique_count\n \n:\n \n40\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nDefault Ads Journeys\n,\n\n      \nunique_count\n \n:\n \n39\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nunique_count\n \n:\n \n37\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nunique_count\n \n:\n \n35\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nunique_count\n \n:\n \n35\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nunique_count\n \n:\n \n34\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nunique_count\n \n:\n \n33\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nDefault Ads Journeys\n,\n\n      \nunique_count\n \n:\n \n32\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nunique_count\n \n:\n \n32\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nCampaignName\n,\n\n      \nunique_count\n \n:\n \n26\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nDefault Ads Journeys\n,\n\n      \nunique_count\n \n:\n \n25\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nTesting Campaign #1\n,\n\n      \nunique_count\n \n:\n \n25\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nTesting Campaign #1\n,\n\n      \nunique_count\n \n:\n \n23\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nCampaignName\n,\n\n      \nunique_count\n \n:\n \n23\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nCampaignName\n,\n\n      \nunique_count\n \n:\n \n22\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nCampaignName\n,\n\n      \nunique_count\n \n:\n \n12\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nCampaignName\n,\n\n      \nunique_count\n \n:\n \n8\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nTesting Campaign #1\n,\n\n      \nunique_count\n \n:\n \n5\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqa0\n,\n\n      \nunique_count\n \n:\n \n5\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqa0\n,\n\n      \nunique_count\n \n:\n \n3\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqa0\n,\n\n      \nunique_count\n \n:\n \n3\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqa0\n,\n\n      \nunique_count\n \n:\n \n2\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqa0\n,\n\n      \nunique_count\n \n:\n \n2\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqa0\n,\n\n      \nunique_count\n \n:\n \n2\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqa0\n,\n\n      \nunique_count\n \n:\n \n2\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nv4o4endh3v1m583m\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nk7eemxrdnk12a1p9\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nvyzsy23zcctimd0c\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n2zx7s0ubz3kt9cu8\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ns9q1mtr614p09yxk\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ny6gadrelf15prahr\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nngp33osyfxclcfz2\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nf5tfpbaipwbaukk3\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nhzzlo3l0mqk1fj2g\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n07xe6qth3vckasq8\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n6zcs44qwj4m0ei5v\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \neu6q00cdnsa81mib\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nud3ux85ax566k8gr\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntsgh43d5m52uphci\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n3mmub272xazx8gag\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nbifwkqw9y6cnlg5m\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nobpfj155rlog98v0\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \na853s9xge85rpv8b\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ndvev0bpog6lwyd4k\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \na4g#1\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n56\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttributed Installs, With Filter on Campaign\n\n\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-08\n,\n\n\n  \nend_date\n: \n2017-12-14\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nday\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      \nnull\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n: [\n\n\n      \n09slukxuhqn8f821\n,\n\n\n      \n0x230602kyi18keo\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n09slukxuhqn8f821\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-11T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n0x230602kyi18keo\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-13T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttributed Installs, Split by Campaign, With Filter on Campaign\n\n\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-08\n,\n\n\n  \nend_date\n: \n2017-12-14\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nday\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      \nnull\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n: [\n\n\n      \n09slukxuhqn8f821\n,\n\n\n      \n0x230602kyi18keo\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n09slukxuhqn8f821\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-11T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n0x230602kyi18keo\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-13T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary Page - Click Flow\n\n\n\n\n\n\nNo filters\n\n\n\n\nPulling this data requires 6 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above. \n\n\n\"Click\" includes both eo_click and eo_web_to_app_auto_redirect.\n\n\n\"Re-open\" includes both eo_open and eo_reinstall.\n\n\nClick\n\n\n\n\n\n\nRequest 1\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_click\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n,\n\n\n    \nfrom_desktop\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n,\n\n\n      \nDESKTOP_WEB\n\n\n    ],\n\n\n    \n!last_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n,\n\n\n      \nDESKTOP_DEEPVIEWS\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 1\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_WEB\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n683\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_WEB\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n675\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_WEB\n,\n\n      \nfrom_desktop\n \n:\n \ntrue\n,\n\n      \nunique_count\n \n:\n \n49\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_WEB\n,\n\n      \nfrom_desktop\n \n:\n \ntrue\n,\n\n      \nunique_count\n \n:\n \n44\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nDESKTOP_WEB\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n17\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n5\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nWeb-to-App Auto-Redirect\n\n\n\n\n\n\nRequest 2\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_web_to_app_auto_redirect\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n,\n\n\n    \nfrom_desktop\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n,\n\n\n      \nDESKTOP_WEB\n\n\n    ],\n\n\n    \n!last_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n,\n\n\n      \nDESKTOP_DEEPVIEWS\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 2\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_WEB\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n6\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n1\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nSMS Sent\n\n\n\n\n\n\nRequest 3\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_sms_sent\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nDESKTOP_WEB\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 3\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nDESKTOP_WEB\n,\n\n      \nunique_count\n \n:\n \n17\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n1\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nInstall\n\n\n\n\n\n\nRequest 4\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n,\n\n\n    \nfrom_desktop\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 4\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_APP\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n657\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_APP\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n473\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_APP\n,\n\n      \nfrom_desktop\n \n:\n \ntrue\n,\n\n      \nunique_count\n \n:\n \n49\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_APP\n,\n\n      \nfrom_desktop\n \n:\n \ntrue\n,\n\n      \nunique_count\n \n:\n \n46\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n4\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nOpen\n\n\n\n\n\n\nRequest 5\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_open\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n,\n\n\n    \nfrom_desktop\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 5\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_APP\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n436\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_APP\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n395\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nReinstall\n\n\n\n\n\n\nRequest 6\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_reinstall\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n,\n\n\n    \nfrom_desktop\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 6\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_APP\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n361\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_APP\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n283\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter on Campaign\n\n\n\n\nThis example looks at feature: journeys. For a full list of dimensions that can be queried against, see our \nQuery API\n reference docs.\n\n\nClick, with a filter for feature: journeys\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_click\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n,\n\n\n    \nfrom_desktop\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n,\n\n\n      \nDESKTOP_WEB\n\n\n    ],\n\n\n    \n!last_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n,\n\n\n      \nDESKTOP_DEEPVIEWS\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_tilde_feature\n: [\n\n\n      \njourneys\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_WEB\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n167\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_WEB\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n166\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter for an individual Quick Link\n\n\n\n\nIt\u2019s also possible to pull Click Flow statistics for individual Quick Links. You simply need the id of the Quick Link, which can be found in the URL when viewing the individual link stats page. In the screenshot above, the Quick Link\u2019s ID is 271026075193177506.\n\n\nSimply plug in the link id into the request below.\n\n\nClick, with a filter for id: 271026075193177506\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-14\n,\n\n\n  \nend_date\n: \n2017-12-20\n,\n\n\n  \ndata_source\n: \neo_click\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n,\n\n\n    \nfrom_desktop\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n,\n\n\n      \nDESKTOP_WEB\n\n\n    ],\n\n\n    \n!last_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n,\n\n\n      \nDESKTOP_DEEPVIEWS\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_tilde_id\n: [\n\n\n      \n271026075193177506\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-14T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_WEB\n,\n\n      \nfrom_desktop\n \n:\n \nfalse\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n1\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary Page - Journeys\n\n\n\n\n\n\nNo filters\n\n\n\n\nPulling this data requires 6 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above. \n\n\n\"Clicks\" includes both eo_click and eo_web_to_app_auto_redirect.\n\n\n\"Opens\" includes both eo_open and eo_reinstall.\n\n\nBranch CTA View\n\n\n\n\n\n\nRequest 1\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_branch_cta_view\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_JOURNEYS\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 1\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_WEB\n,\n\n      \nunique_count\n \n:\n \n406\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_WEB\n,\n\n      \nunique_count\n \n:\n \n390\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nClick\n\n\n\n\n\n\nRequest 2\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_click\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_JOURNEYS\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 2\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_WEB\n,\n\n      \nunique_count\n \n:\n \n167\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_WEB\n,\n\n      \nunique_count\n \n:\n \n166\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nWeb-to-App Auto-Redirect\n\n\n\n\n\n\nRequest 3\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_web_to_app_auto_redirect\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_JOURNEYS\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 3\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n0\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nInstall\n\n\n\n\n\n\nRequest 4\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_via_features\n: [\n\n\n      \nMOBILE_JOURNEYS\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 4\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_APP\n,\n\n      \nunique_count\n \n:\n \n167\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_APP\n,\n\n      \nunique_count\n \n:\n \n10\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nOpen\n\n\n\n\n\n\nRequest 5\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_open\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_via_features\n: [\n\n\n      \nMOBILE_JOURNEYS\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 5\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n0\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nReinstall\n\n\n\n\n\n\nRequest 6\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_reinstall\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_via_features\n: [\n\n\n      \nMOBILE_JOURNEYS\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 6\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_APP\n,\n\n      \nunique_count\n \n:\n \n156\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_APP\n,\n\n      \nunique_count\n \n:\n \n75\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter on Tags\n\n\n\n\nThis example looks at tags: tag1. For a full list of dimensions that can be queried against, see our \nQuery API\n reference docs.\n\n\nBranch CTA View, with a filter for tags: tag1\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_branch_cta_view\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_JOURNEYS\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_tilde_tags\n: [\n\n\n      \ntag1\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_WEB\n,\n\n      \nunique_count\n \n:\n \n373\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_WEB\n,\n\n      \nunique_count\n \n:\n \n6\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummary Page - Deepviews\n\n\n\n\n\n\nNo filters\n\n\n\n\nPulling this data requires 6 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above. \n\n\n\"Clicks\" includes both eo_click and eo_web_to_app_auto_redirect.\n\n\n\"Upgrades\" includes both eo_open and eo_reinstall.\n\n\nBranch CTA View\n\n\n\n\n\n\nRequest 1\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_branch_cta_view\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 1\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_WEB\n,\n\n      \nunique_count\n \n:\n \n529\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_WEB\n,\n\n      \nunique_count\n \n:\n \n361\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nClick\n\n\n\n\n\n\nRequest 2\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_click\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 2\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_WEB\n,\n\n      \nunique_count\n \n:\n \n529\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_WEB\n,\n\n      \nunique_count\n \n:\n \n440\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nWeb-to-App Auto-Redirect\n\n\n\n\n\n\nRequest 3\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_web_to_app_auto_redirect\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 3\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n0\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nInstall\n\n\n\n\n\n\nRequest 4\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_via_features\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 4\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_APP\n,\n\n      \nunique_count\n \n:\n \n435\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_APP\n,\n\n      \nunique_count\n \n:\n \n393\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nOpen\n\n\n\n\n\n\nRequest 5\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_open\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_via_features\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 5\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_APP\n,\n\n      \nunique_count\n \n:\n \n167\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_APP\n,\n\n      \nunique_count\n \n:\n \n151\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nReinstall\n\n\n\n\n\n\nRequest 6\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_reinstall\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_via_features\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 6\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_APP\n,\n\n      \nunique_count\n \n:\n \n8\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_APP\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter on Stage\n\n\n\n\nThis example looks at stage: stage88. For a full list of dimensions that can be queried against, see our \nQuery API\n reference docs.\n\n\nBranch CTA View, with a filter for stage: stage88\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_branch_cta_view\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nuser_data_platform\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_tilde_stage\n: [\n\n\n      \nstage88\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nANDROID_WEB\n,\n\n      \nunique_count\n \n:\n \n90\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nuser_data_platform\n \n:\n \nIOS_WEB\n,\n\n      \nunique_count\n \n:\n \n86\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuick Links\n\n\n\n\n\n\nNo filters\n\n\n\n\nPulling this data requires 6 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above. \n\n\n\"Clicks\" includes both eo_click and eo_web_to_app_auto_redirect.\n\n\n\"Opens\" includes both eo_open and eo_reinstall.\n\n\nClick\n\n\n\n\n\n\nRequest 1\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-14\n,\n\n\n  \nend_date\n: \n2017-12-20\n,\n\n\n  \ndata_source\n: \neo_click\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_id\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \n!last_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n,\n\n\n      \nDESKTOP_DEEPVIEWS\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_tilde_id\n: [\n\n\n      \n458794678159033945\n,\n\n\n      \n456130187302684655\n,\n\n\n      \n400390887617834597\n,\n\n\n      \n271026075193177506\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 1\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_id\n \n:\n \n271026075193177506\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-14T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n1\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nWeb-to-App Auto-Redirect\n\n\n\n\n\n\nRequest 2\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-14\n,\n\n\n  \nend_date\n: \n2017-12-20\n,\n\n\n  \ndata_source\n: \neo_web_to_app_auto_redirect\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_id\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \n!last_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n,\n\n\n      \nDESKTOP_DEEPVIEWS\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_tilde_id\n: [\n\n\n      \n458794678159033945\n,\n\n\n      \n456130187302684655\n,\n\n\n      \n400390887617834597\n,\n\n\n      \n271026075193177506\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 2\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n0\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nInstall\n\n\n\n\n\n\nRequest 3\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-14\n,\n\n\n  \nend_date\n: \n2017-12-20\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_id\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_id\n: [\n\n\n      \n458794678159033945\n,\n\n\n      \n456130187302684655\n,\n\n\n      \n400390887617834597\n,\n\n\n      \n271026075193177506\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 3\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n0\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nOpen\n\n\n\n\n\n\nRequest 4\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-14\n,\n\n\n  \nend_date\n: \n2017-12-20\n,\n\n\n  \ndata_source\n: \neo_open\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_id\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_id\n: [\n\n\n      \n458794678159033945\n,\n\n\n      \n456130187302684655\n,\n\n\n      \n400390887617834597\n,\n\n\n      \n271026075193177506\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 4\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_id\n \n:\n \n271026075193177506\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-14T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n1\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nReinstall\n\n\n\n\n\n\nRequest 5\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-14\n,\n\n\n  \nend_date\n: \n2017-12-20\n,\n\n\n  \ndata_source\n: \neo_reinstall\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_id\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_id\n: [\n\n\n      \n458794678159033945\n,\n\n\n      \n456130187302684655\n,\n\n\n      \n400390887617834597\n,\n\n\n      \n271026075193177506\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 5\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n0\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nWeb Session Start\n\n\n\n\n\n\nRequest 6\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-14\n,\n\n\n  \nend_date\n: \n2017-12-20\n,\n\n\n  \ndata_source\n: \neo_web_session_start\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_id\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_id\n: [\n\n\n      \n458794678159033945\n,\n\n\n      \n456130187302684655\n,\n\n\n      \n400390887617834597\n,\n\n\n      \n271026075193177506\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 6\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n0\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource Analytics\n\n\n\n\n\n\nNo filters\n\n\n\n\nPulling this data requires 6 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above. \n\n\nIf you add additional columns, then you will need to adjust the requests accordingly. For a full list of events and dimensions that can be queried against, see our \nQuery API\n reference docs. If you are still not sure how to query for data, write in to \n and we\u2019ll (1) get you a response, and (2) add to this documentation.\n\n\n\"Clicks\" does \nnot\n include eo_web_to_app_auto_redirect on this visualization. This is different from the Summary page charts and Quick Links. Those visualizations have historically included Web-to-App Auto-Redirects, folded into the Clicks number. This visualization breaks them out separately.\n\n\n\"Opens\" does \nnot\n include eo_reinstall on this visualization. This is different from the Summary page charts and Quick Links. Those visualizations have historically included Reinstalls, folded into the Opens number. This visualization breaks them out separately.\n\n\nClick\n\n\n\n\n\n\nRequest 1\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_click\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n,\n\n\n      \nDESKTOP_WEB\n\n\n    ],\n\n\n    \n!last_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n,\n\n\n      \nDESKTOP_DEEPVIEWS\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 1\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nunique_count\n \n:\n \n495\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \na4g#1\n,\n\n      \nunique_count\n \n:\n \n490\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nDefault Ads Journeys\n,\n\n      \nunique_count\n \n:\n \n330\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nCampaignName\n,\n\n      \nunique_count\n \n:\n \n193\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nunique_count\n \n:\n \n30\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n5\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nInstall\n\n\n\n\n\n\nRequest 2\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 2\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nunique_count\n \n:\n \n425\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \na4g#1\n,\n\n      \nunique_count\n \n:\n \n328\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nDefault Ads Journeys\n,\n\n      \nunique_count\n \n:\n \n201\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nunique_count\n \n:\n \n82\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nCampaignName\n,\n\n      \nunique_count\n \n:\n \n66\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqa0\n,\n\n      \nunique_count\n \n:\n \n54\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nv2x6mfmep5t3429d\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nuws6ibt9bdmjs93h\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nukmfqoai5jt05h90\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nugpaf50d40w3h7nv\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntj88zdgl87btlsew\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nswmbrfb8uetcceca\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqf01mu2skor5276c\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \npevfjx3yhmkl6q20\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnkq4sewytblugtyx\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nndef09e4tqogta3e\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nmoueuf2f2gng0xtt\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nlof2d8phlxib2jsu\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nl0tj5y7vywpbnqrt\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nktjp5fkmqlaynmhu\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nkbsi96yyu2luxro0\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nk0ri60p6h1wfdlsg\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \njiqqk1szmwu3389k\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nink7z7o2niwpt1l3\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nifutq3dwfb9e9s4p\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \niezqkvwev3iwvofe\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nhtlpek2btalb9b6h\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nhiefuih5ijsczi2n\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ngdo2nsb41isjwecn\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ngcfsu5d45fespfrg\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nfq78bun0gild6e3s\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nfokhum3bshzewf70\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nf6lf2d6sb1gfwq0b\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ndj07vvjvhz0zz72b\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nd2770bus2fspnep2\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nchyq5jrmxl7x3f4r\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nbmvlp0xk09rycm2v\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nairra0l6vv815g3j\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nai0xr4ywznoqxch5\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n9jc8zostyp21ywnz\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n91n80s0wkot3swh7\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n8ph9zt5rsoigi3gu\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n7pflpco7e54h4mmf\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n4tmmfp6pcu6znx9t\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n4b211n6wyjgefsrs\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n3ti2mxbgr6jb2p7s\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n3ieqalbk7u6amb09\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n2qplxc9p8cz5q49i\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n1o1n3gznt58aggbh\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n1l65lo2mc5arkz2v\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n0yqw86ud220cg88d\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n0x230602kyi18keo\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n09slukxuhqn8f821\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nxkeeamlknxevem2q\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nxc4ssq0dooex0yj0\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ny2tn5sg4dlnxeven\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nw2fgkfquzdk805mq\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nx9fvq4hg87169r8f\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n58\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nOpen\n\n\n\n\n\n\nRequest 3\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_open\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 3\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \na4g#1\n,\n\n      \nunique_count\n \n:\n \n312\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nunique_count\n \n:\n \n284\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nCampaignName\n,\n\n      \nunique_count\n \n:\n \n194\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqa0\n,\n\n      \nunique_count\n \n:\n \n17\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nunique_count\n \n:\n \n16\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nmoueuf2f2gng0xtt\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nink7z7o2niwpt1l3\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \niezqkvwev3iwvofe\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nhtlpek2btalb9b6h\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nhiefuih5ijsczi2n\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ngcfsu5d45fespfrg\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nf6lf2d6sb1gfwq0b\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ndj07vvjvhz0zz72b\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nbmvlp0xk09rycm2v\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nairra0l6vv815g3j\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n4b9ra2zzxxq4lzj6\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n3ti2mxbgr6jb2p7s\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n2qplxc9p8cz5q49i\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n1o1n3gznt58aggbh\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n1l65lo2mc5arkz2v\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n09slukxuhqn8f821\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nugpaf50d40w3h7nv\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nxc4ssq0dooex0yj0\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nx9fvq4hg87169r8f\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \npevfjx3yhmkl6q20\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n25\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nWeb Session Start\n\n\n\n\n\n\nRequest 4\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_web_session_start\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n,\n\n\n      \nDESKTOP_WEB\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 4\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nunique_count\n \n:\n \n15\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \na4g#1\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n2\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nPurchase\n\n\n\n\n\n\nRequest 5\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_commerce_event\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n,\n\n\n    \nname\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n,\n\n\n      \nDESKTOP_WEB\n,\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 5\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nDefault Ads Journeys\n,\n\n      \nname\n \n:\n \nADD_TO_CART\n,\n\n      \nunique_count\n \n:\n \n268\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \na4g#1\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n169\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nCampaignName\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n154\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n131\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n68\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqa0\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n25\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ngcfsu5d45fespfrg\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nx9fvq4hg87169r8f\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nugpaf50d40w3h7nv\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntj88zdgl87btlsew\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n3ti2mxbgr6jb2p7s\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nxc4ssq0dooex0yj0\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nxkeeamlknxevem2q\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \npevfjx3yhmkl6q20\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nmoueuf2f2gng0xtt\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nukmfqoai5jt05h90\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \njiqqk1szmwu3389k\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \niezqkvwev3iwvofe\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nhiefuih5ijsczi2n\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nfq78bun0gild6e3s\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nfokhum3bshzewf70\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nf6lf2d6sb1gfwq0b\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nbmvlp0xk09rycm2v\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nairra0l6vv815g3j\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nl0tj5y7vywpbnqrt\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n2qplxc9p8cz5q49i\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n1xosk74azwbxtdyn\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n4b9ra2zzxxq4lzj6\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nswmbrfb8uetcceca\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ny2tn5sg4dlnxeven\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n1o1n3gznt58aggbh\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n0x230602kyi18keo\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n32\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nRevenue\n\n\nNote that revenue also has data_source \neo_purchase\n, but with a different \naggregation\n.\n\n\n\n\n\n\nRequest 6\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_commerce_event\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n,\n\n\n    \nname\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n,\n\n\n      \nDESKTOP_WEB\n,\n\n\n      \nIOS_APP\n,\n\n\n      \nANDROID_APP\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nrevenue\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 6\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \na4g#1\n,\n\n      \nrevenue\n \n:\n \n220439.2490234375\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nCampaignName\n,\n\n      \nrevenue\n \n:\n \n182050.3577928543\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nrevenue\n \n:\n \n170676.8486328125\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nnull\n,\n\n      \nrevenue\n \n:\n \n43980.580078125\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nqa0\n,\n\n      \nrevenue\n \n:\n \n32342.879272460938\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntj88zdgl87btlsew\n,\n\n      \nrevenue\n \n:\n \n4041.510009765625\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nugpaf50d40w3h7nv\n,\n\n      \nrevenue\n \n:\n \n2680.56005859375\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nl0tj5y7vywpbnqrt\n,\n\n      \nrevenue\n \n:\n \n2350.080078125\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nhiefuih5ijsczi2n\n,\n\n      \nrevenue\n \n:\n \n1853.0899658203125\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nxkeeamlknxevem2q\n,\n\n      \nrevenue\n \n:\n \n1679.3199462890625\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nfokhum3bshzewf70\n,\n\n      \nrevenue\n \n:\n \n1504.2099609375\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n3ti2mxbgr6jb2p7s\n,\n\n      \nrevenue\n \n:\n \n1455.699951171875\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ngcfsu5d45fespfrg\n,\n\n      \nrevenue\n \n:\n \n1434.8599853515625\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nx9fvq4hg87169r8f\n,\n\n      \nrevenue\n \n:\n \n1346.8199462890625\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nfq78bun0gild6e3s\n,\n\n      \nrevenue\n \n:\n \n981.6799926757812\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nswmbrfb8uetcceca\n,\n\n      \nrevenue\n \n:\n \n914.9199829101562\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \njiqqk1szmwu3389k\n,\n\n      \nrevenue\n \n:\n \n874.25\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n0x230602kyi18keo\n,\n\n      \nrevenue\n \n:\n \n533.5800170898438\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \niezqkvwev3iwvofe\n,\n\n      \nrevenue\n \n:\n \n499.9200134277344\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n1xosk74azwbxtdyn\n,\n\n      \nrevenue\n \n:\n \n469.5299987792969\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ny2tn5sg4dlnxeven\n,\n\n      \nrevenue\n \n:\n \n463.69000244140625\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nairra0l6vv815g3j\n,\n\n      \nrevenue\n \n:\n \n449.54998779296875\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \npevfjx3yhmkl6q20\n,\n\n      \nrevenue\n \n:\n \n321.9800109863281\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n1o1n3gznt58aggbh\n,\n\n      \nrevenue\n \n:\n \n231.3300018310547\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n2qplxc9p8cz5q49i\n,\n\n      \nrevenue\n \n:\n \n202.74000549316406\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nmoueuf2f2gng0xtt\n,\n\n      \nrevenue\n \n:\n \n30.950000762939453\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nbmvlp0xk09rycm2v\n,\n\n      \nrevenue\n \n:\n \n20.050000190734863\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nxc4ssq0dooex0yj0\n,\n\n      \nrevenue\n \n:\n \n16.290000915527344\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nukmfqoai5jt05h90\n,\n\n      \nrevenue\n \n:\n \n13.979999542236328\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \n4b9ra2zzxxq4lzj6\n,\n\n      \nrevenue\n \n:\n \n13.9399995803833\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nf6lf2d6sb1gfwq0b\n,\n\n      \nrevenue\n \n:\n \n11.399999618530273\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \nDefault Ads Journeys\n,\n\n      \nrevenue\n \n:\n \n0.0\n,\n\n      \nname\n \n:\n \nADD_TO_CART\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n32\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nFilter on Ad Partner\n\n\n\n\nThis example looks at ad partner name: Taptica. For a full list of dimensions that can be queried against, see our \nQuery API\n reference docs.\n\n\nClick, with a filter for ad partner name: Taptica\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_click\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_campaign\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_WEB\n,\n\n\n      \nANDROID_WEB\n,\n\n\n      \nDESKTOP_WEB\n\n\n    ],\n\n\n    \n!last_attributed_touch_data_plus_current_feature\n: [\n\n\n      \nMOBILE_DEEPVIEWS\n,\n\n\n      \nDESKTOP_DEEPVIEWS\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_tilde_advertising_partner_name\n: [\n\n\n      \nTaptica\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_campaign\n \n:\n \ntaptica#1\n,\n\n      \nunique_count\n \n:\n \n495\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n1\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAds Analytics - Trends\n\n\n\n\n\n\nInstalls, Split by Campaign\n\n\n\n\nInstall\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-11-29\n,\n\n\n  \nend_date\n: \n2017-12-05\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nday\n,\n\n\n  \ndimensions\n: \nlast_attributed_touch_data_tilde_advertising_partner_name\n,\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_feature\n: [\n\n\n      \npaid advertising\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n40\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n37\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n35\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n35\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n34\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n33\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n32\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n26\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n23\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n22\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n20\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n15\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n12\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n12\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n11\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n10\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n9\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n8\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n7\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nA4G\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n20\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstalls, Split by Campaign, With Filter on Platform\n\n\n\n\nInstall\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-11-29\n,\n\n\n  \nend_date\n: \n2017-12-05\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nday\n,\n\n\n  \ndimensions\n: \nlast_attributed_touch_data_tilde_advertising_partner_name\n,\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_feature\n: [\n\n\n      \npaid advertising\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ],\n\n\n    \nuser_data_platform\n: [\n\n\n      \nIOS_APP\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n26\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n23\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n22\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n20\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n15\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n12\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n12\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n11\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n10\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n9\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n8\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n7\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n5\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-01T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n5\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-05T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n2\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n2\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-30T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n2\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-04T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n2\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-02T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nA4G\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-11-29T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n1\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-03T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n20\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nAds Analytics - Events\n\n\n\n\n\n\nSplit by Ad Partner\n\n\n\n\nPulling this data requires 7 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above.\n\n\nIf you add additional columns, then you will need to adjust the requests accordingly. For a full list of events and dimensions that can be queried against, see our \nQuery API\n reference docs. If you are still not sure how to query for data, write in to \n and we\u2019ll (1) get you a response, and (2) add to this documentation.\n\n\n\"Clicks\" does \nnot\n include eo_web_to_app_auto_redirect on this visualization. This is different from the Summary page charts and Quick Links. Those visualizations have historically included Web-to-App Auto-Redirects, folded into the Clicks number. This visualization breaks them out separately.\n\n\n\"Opens\" does \nnot\n include eo_reinstall on this visualization. This is different from the Summary page charts and Quick Links. Those visualizations have historically included Reinstalls, folded into the Opens number. This visualization breaks them out separately.\n\n\nClick\n\n\n\n\n\n\nRequest 1\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_click\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_advertising_partner_name\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_feature\n: [\n\n\n      \npaid advertising\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 1\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nA4G\n,\n\n      \nunique_count\n \n:\n \n579\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n507\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n193\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n30\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n4\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nInstall\n\n\n\n\n\n\nRequest 2\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_install\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_advertising_partner_name\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_feature\n: [\n\n\n      \npaid advertising\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 2\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n425\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nA4G\n,\n\n      \nunique_count\n \n:\n \n328\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n188\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n66\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n4\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nOpen\n\n\n\n\n\n\nRequest 3\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_open\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_advertising_partner_name\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_feature\n: [\n\n\n      \npaid advertising\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 3\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nA4G\n,\n\n      \nunique_count\n \n:\n \n312\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n284\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n194\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n54\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n4\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nReinstall\n\n\n\n\n\n\nRequest 4\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_reinstall\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_advertising_partner_name\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_feature\n: [\n\n\n      \npaid advertising\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 4\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nA4G\n,\n\n      \nunique_count\n \n:\n \n123\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n119\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nunique_count\n \n:\n \n108\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n57\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n4\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nWeb Session Start\n\n\n\n\n\n\nRequest 5\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_web_session_start\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_advertising_partner_name\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_feature\n: [\n\n\n      \npaid advertising\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 5\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n190\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nA4G\n,\n\n      \nunique_count\n \n:\n \n179\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n},\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nunique_count\n \n:\n \n60\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n3\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nPurchase\n\n\n\n\n\n\nRequest 6\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_commerce_event\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_advertising_partner_name\n,\n\n\n    \nname\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_feature\n: [\n\n\n      \npaid advertising\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 6\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nA4G\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n169\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n154\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n131\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nname\n \n:\n \nPURCHASE\n,\n\n      \nunique_count\n \n:\n \n122\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n4\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nRevenue\n\n\nNote that revenue also has data_source \neo_purchase\n, but with a different \naggregation\n.\n\n\n\n\n\n\nRequest 7\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_commerce_event\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_advertising_partner_name\n,\n\n\n    \nname\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_feature\n: [\n\n\n      \npaid advertising\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \n!days_from_last_attributed_touch_to_event\n: [\n\n\n      null\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nrevenue\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse 7\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nrevenue\n \n:\n \n220439.2490234375\n,\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nA4G\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nrevenue\n \n:\n \n182050.3577928543\n,\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApple Search Ads\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nrevenue\n \n:\n \n170676.8486328125\n,\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n},\n \n{\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n,\n\n    \nresult\n \n:\n \n{\n\n      \nrevenue\n \n:\n \n100719.38818359375\n,\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nApplovin\n,\n\n      \nname\n \n:\n \nPURCHASE\n\n    \n}\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n4\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nSplit by Ad Partner, With Filter on Ad Partner\n\n\n\n\nThis example looks at ad partner name: Taptica. For a full list of dimensions that can be queried against, see our \nQuery API\n reference docs.\n\n\nClick, with a filter for ad partner name: Taptica\n\n\n\n\n\n\nRequest\n\n\ncurl -X POST -H \nContent-Type: application/json\n -d \n{\n\n\n  \nbranch_key\n: \nYOUR_BRANCH_KEY\n,\n\n\n  \nbranch_secret\n: \nYOUR_BRANCH_SECRET\n,\n\n\n  \nstart_date\n: \n2017-12-07\n,\n\n\n  \nend_date\n: \n2017-12-13\n,\n\n\n  \ndata_source\n: \neo_click\n,\n\n\n  \ngranularity\n: \nall\n,\n\n\n  \ndimensions\n: [\n\n\n    \nlast_attributed_touch_data_tilde_advertising_partner_name\n\n\n  ],\n\n\n  \nfilters\n: {\n\n\n    \nlast_attributed_touch_data_tilde_feature\n: [\n\n\n      \npaid advertising\n\n\n    ],\n\n\n    \n!user_data_platform\n: [\n\n\n      \nROBOT\n\n\n    ],\n\n\n    \nlast_attributed_touch_data_tilde_advertising_partner_name\n: [\n\n\n      \nTaptica\n\n\n    ]\n\n\n  },\n\n\n  \naggregation\n: \nunique_count\n\n\n}\n \nhttp://api.branch.io/v1/query/analytics?limit=100\n\n\n\n\n\n\n\n\n\nResponse\n\n\n{\n\n  \nresults\n \n:\n \n[\n \n{\n\n    \nresult\n \n:\n \n{\n\n      \nlast_attributed_touch_data_tilde_advertising_partner_name\n \n:\n \nTaptica\n,\n\n      \nunique_count\n \n:\n \n507\n\n    \n},\n\n    \ntimestamp\n \n:\n \n2017-12-07T08:00:00.000Z\n\n  \n}\n \n],\n\n  \npaging\n \n:\n \n{\n\n    \ntotal_count\n \n:\n \n1\n\n  \n}\n\n\n}", 
            "title": "Query Recipe Book"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#summary-page-installs", 
            "text": "", 
            "title": "Summary Page - Installs"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#all-installs", 
            "text": "Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-11-29 ,     end_date :  2017-12-05 ,     data_source :  eo_install ,     granularity :  day ,     dimensions : [       timestamp    ],     filters : {       !user_data_platform : [         ROBOT      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     timestamp   :   2017-12-05T08:00:00.000Z , \n     result   :   { \n       unique_count   :   246 \n     } \n   },   { \n     timestamp   :   2017-12-04T08:00:00.000Z , \n     result   :   { \n       unique_count   :   302 \n     } \n   },   { \n     timestamp   :   2017-12-03T08:00:00.000Z , \n     result   :   { \n       unique_count   :   277 \n     } \n   },   { \n     timestamp   :   2017-12-02T08:00:00.000Z , \n     result   :   { \n       unique_count   :   300 \n     } \n   },   { \n     timestamp   :   2017-12-01T08:00:00.000Z , \n     result   :   { \n       unique_count   :   264 \n     } \n   },   { \n     timestamp   :   2017-11-30T08:00:00.000Z , \n     result   :   { \n       unique_count   :   208 \n     } \n   },   { \n     timestamp   :   2017-11-29T08:00:00.000Z , \n     result   :   { \n       unique_count   :   225 \n     } \n   }   ], \n   paging   :   { \n     total_count   :   7 \n   }  }", 
            "title": "All Installs"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#attributed-installs", 
            "text": "Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-11-29 ,     end_date :  2017-12-05 ,     data_source :  eo_install ,     granularity :  day ,     dimensions : [       timestamp    ],     filters : {       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [         null      ]    },     aggregation :  total_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     timestamp   :   2017-12-05T08:00:00.000Z , \n     result   :   { \n       total_count   :   248.0 \n     } \n   },   { \n     timestamp   :   2017-12-04T08:00:00.000Z , \n     result   :   { \n       total_count   :   296.0 \n     } \n   },   { \n     timestamp   :   2017-12-03T08:00:00.000Z , \n     result   :   { \n       total_count   :   284.0 \n     } \n   },   { \n     timestamp   :   2017-12-02T08:00:00.000Z , \n     result   :   { \n       total_count   :   291.0 \n     } \n   },   { \n     timestamp   :   2017-12-01T08:00:00.000Z , \n     result   :   { \n       total_count   :   263.0 \n     } \n   },   { \n     timestamp   :   2017-11-30T08:00:00.000Z , \n     result   :   { \n       total_count   :   214.0 \n     } \n   },   { \n     timestamp   :   2017-11-29T08:00:00.000Z , \n     result   :   { \n       total_count   :   227.0 \n     } \n   }   ], \n   paging   :   { \n     total_count   :   7 \n   }  }", 
            "title": "Attributed Installs"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#attributed-installs-split-by-campaign", 
            "text": "Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-11-29 ,     end_date :  2017-12-05 ,     data_source :  eo_install ,     granularity :  day ,     dimensions : [       last_attributed_touch_data_tilde_campaign    ],     filters : {       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [         null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       unique_count   :   171 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       unique_count   :   158 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       unique_count   :   157 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       unique_count   :   148 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       unique_count   :   144 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       unique_count   :   124 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       unique_count   :   120 \n     }, \n     timestamp   :   2017-11-30T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Default Ads Journeys , \n       unique_count   :   77 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Default Ads Journeys , \n       unique_count   :   76 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Default Ads Journeys , \n       unique_count   :   68 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Default Ads Journeys , \n       unique_count   :   43 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       unique_count   :   40 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Default Ads Journeys , \n       unique_count   :   39 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       unique_count   :   37 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       unique_count   :   35 \n     }, \n     timestamp   :   2017-11-30T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       unique_count   :   35 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       unique_count   :   34 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       unique_count   :   33 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Default Ads Journeys , \n       unique_count   :   32 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       unique_count   :   32 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   CampaignName , \n       unique_count   :   26 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Default Ads Journeys , \n       unique_count   :   25 \n     }, \n     timestamp   :   2017-11-30T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Testing Campaign #1 , \n       unique_count   :   25 \n     }, \n     timestamp   :   2017-11-30T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Testing Campaign #1 , \n       unique_count   :   23 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   CampaignName , \n       unique_count   :   23 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   CampaignName , \n       unique_count   :   22 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   CampaignName , \n       unique_count   :   12 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   CampaignName , \n       unique_count   :   8 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Testing Campaign #1 , \n       unique_count   :   5 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qa0 , \n       unique_count   :   5 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qa0 , \n       unique_count   :   3 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qa0 , \n       unique_count   :   3 \n     }, \n     timestamp   :   2017-11-30T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qa0 , \n       unique_count   :   2 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qa0 , \n       unique_count   :   2 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qa0 , \n       unique_count   :   2 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qa0 , \n       unique_count   :   2 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   v4o4endh3v1m583m , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   k7eemxrdnk12a1p9 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-11-30T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   vyzsy23zcctimd0c , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   2zx7s0ubz3kt9cu8 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   s9q1mtr614p09yxk , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   y6gadrelf15prahr , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ngp33osyfxclcfz2 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   f5tfpbaipwbaukk3 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   hzzlo3l0mqk1fj2g , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   07xe6qth3vckasq8 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   6zcs44qwj4m0ei5v , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-11-30T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   eu6q00cdnsa81mib , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ud3ux85ax566k8gr , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   tsgh43d5m52uphci , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   3mmub272xazx8gag , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   bifwkqw9y6cnlg5m , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   obpfj155rlog98v0 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   a853s9xge85rpv8b , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   dvev0bpog6lwyd4k , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   a4g#1 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   56 \n   }  }", 
            "title": "Attributed Installs, Split by Campaign"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#attributed-installs-with-filter-on-campaign", 
            "text": "Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-08 ,     end_date :  2017-12-14 ,     data_source :  eo_install ,     granularity :  day ,     dimensions : [       last_attributed_touch_data_tilde_campaign    ],     filters : {       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [         null      ],       last_attributed_touch_data_tilde_campaign : [         09slukxuhqn8f821 ,         0x230602kyi18keo      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   09slukxuhqn8f821 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-11T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   0x230602kyi18keo , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-13T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }", 
            "title": "Attributed Installs, With Filter on Campaign"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#attributed-installs-split-by-campaign-with-filter-on-campaign", 
            "text": "Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-08 ,     end_date :  2017-12-14 ,     data_source :  eo_install ,     granularity :  day ,     dimensions : [       last_attributed_touch_data_tilde_campaign    ],     filters : {       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [         null      ],       last_attributed_touch_data_tilde_campaign : [         09slukxuhqn8f821 ,         0x230602kyi18keo      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   09slukxuhqn8f821 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-11T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   0x230602kyi18keo , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-13T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }", 
            "title": "Attributed Installs, Split by Campaign, With Filter on Campaign"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#summary-page-click-flow", 
            "text": "", 
            "title": "Summary Page - Click Flow"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#no-filters", 
            "text": "Pulling this data requires 6 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above.   \"Click\" includes both eo_click and eo_web_to_app_auto_redirect.  \"Re-open\" includes both eo_open and eo_reinstall.  Click    Request 1  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_click ,     granularity :  all ,     dimensions : [       user_data_platform ,       from_desktop    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB ,         DESKTOP_WEB      ],       !last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS ,         DESKTOP_DEEPVIEWS      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 1  { \n   results   :   [   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   ANDROID_WEB , \n       from_desktop   :   false , \n       unique_count   :   683 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   IOS_WEB , \n       from_desktop   :   false , \n       unique_count   :   675 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   ANDROID_WEB , \n       from_desktop   :   true , \n       unique_count   :   49 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   IOS_WEB , \n       from_desktop   :   true , \n       unique_count   :   44 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   DESKTOP_WEB , \n       from_desktop   :   false , \n       unique_count   :   17 \n     } \n   }   ], \n   paging   :   { \n     total_count   :   5 \n   }  }     Web-to-App Auto-Redirect    Request 2  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_web_to_app_auto_redirect ,     granularity :  all ,     dimensions : [       user_data_platform ,       from_desktop    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB ,         DESKTOP_WEB      ],       !last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS ,         DESKTOP_DEEPVIEWS      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 2  { \n   results   :   [   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   IOS_WEB , \n       from_desktop   :   false , \n       unique_count   :   6 \n     } \n   }   ], \n   paging   :   { \n     total_count   :   1 \n   }  }     SMS Sent    Request 3  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_sms_sent ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         DESKTOP_WEB      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 3  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   DESKTOP_WEB , \n       unique_count   :   17 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   1 \n   }  }     Install    Request 4  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_install ,     granularity :  all ,     dimensions : [       user_data_platform ,       from_desktop    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 4  { \n   results   :   [   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   ANDROID_APP , \n       from_desktop   :   false , \n       unique_count   :   657 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   IOS_APP , \n       from_desktop   :   false , \n       unique_count   :   473 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   ANDROID_APP , \n       from_desktop   :   true , \n       unique_count   :   49 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   IOS_APP , \n       from_desktop   :   true , \n       unique_count   :   46 \n     } \n   }   ], \n   paging   :   { \n     total_count   :   4 \n   }  }     Open    Request 5  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_open ,     granularity :  all ,     dimensions : [       user_data_platform ,       from_desktop    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 5  { \n   results   :   [   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   IOS_APP , \n       from_desktop   :   false , \n       unique_count   :   436 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   ANDROID_APP , \n       from_desktop   :   false , \n       unique_count   :   395 \n     } \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }     Reinstall    Request 6  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_reinstall ,     granularity :  all ,     dimensions : [       user_data_platform ,       from_desktop    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 6  { \n   results   :   [   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   IOS_APP , \n       from_desktop   :   false , \n       unique_count   :   361 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   ANDROID_APP , \n       from_desktop   :   false , \n       unique_count   :   283 \n     } \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }", 
            "title": "No filters"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#filter-on-campaign", 
            "text": "This example looks at feature: journeys. For a full list of dimensions that can be queried against, see our  Query API  reference docs.  Click, with a filter for feature: journeys    Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_click ,     granularity :  all ,     dimensions : [       user_data_platform ,       from_desktop    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB ,         DESKTOP_WEB      ],       !last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS ,         DESKTOP_DEEPVIEWS      ],       last_attributed_touch_data_tilde_feature : [         journeys      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   ANDROID_WEB , \n       from_desktop   :   false , \n       unique_count   :   167 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   IOS_WEB , \n       from_desktop   :   false , \n       unique_count   :   166 \n     } \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }", 
            "title": "Filter on Campaign"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#filter-for-an-individual-quick-link", 
            "text": "It\u2019s also possible to pull Click Flow statistics for individual Quick Links. You simply need the id of the Quick Link, which can be found in the URL when viewing the individual link stats page. In the screenshot above, the Quick Link\u2019s ID is 271026075193177506.  Simply plug in the link id into the request below.  Click, with a filter for id: 271026075193177506    Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-14 ,     end_date :  2017-12-20 ,     data_source :  eo_click ,     granularity :  all ,     dimensions : [       user_data_platform ,       from_desktop    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB ,         DESKTOP_WEB      ],       !last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS ,         DESKTOP_DEEPVIEWS      ],       last_attributed_touch_data_tilde_id : [         271026075193177506      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     timestamp   :   2017-12-14T08:00:00.000Z , \n     result   :   { \n       user_data_platform   :   IOS_WEB , \n       from_desktop   :   false , \n       unique_count   :   1 \n     } \n   }   ], \n   paging   :   { \n     total_count   :   1 \n   }  }", 
            "title": "Filter for an individual Quick Link"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#summary-page-journeys", 
            "text": "", 
            "title": "Summary Page - Journeys"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#no-filters_1", 
            "text": "Pulling this data requires 6 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above.   \"Clicks\" includes both eo_click and eo_web_to_app_auto_redirect.  \"Opens\" includes both eo_open and eo_reinstall.  Branch CTA View    Request 1  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_branch_cta_view ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB      ],       last_attributed_touch_data_plus_current_feature : [         MOBILE_JOURNEYS      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 1  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   IOS_WEB , \n       unique_count   :   406 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       user_data_platform   :   ANDROID_WEB , \n       unique_count   :   390 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }     Click    Request 2  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_click ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB      ],       last_attributed_touch_data_plus_current_feature : [         MOBILE_JOURNEYS      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 2  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   ANDROID_WEB , \n       unique_count   :   167 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       user_data_platform   :   IOS_WEB , \n       unique_count   :   166 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }     Web-to-App Auto-Redirect    Request 3  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_web_to_app_auto_redirect ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB      ],       last_attributed_touch_data_plus_current_feature : [         MOBILE_JOURNEYS      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 3  { \n   results   :   [   ], \n   paging   :   { \n     total_count   :   0 \n   }  }     Install    Request 4  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_install ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP      ],       last_attributed_touch_data_plus_via_features : [         MOBILE_JOURNEYS      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 4  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   ANDROID_APP , \n       unique_count   :   167 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       user_data_platform   :   IOS_APP , \n       unique_count   :   10 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }     Open    Request 5  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_open ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP      ],       last_attributed_touch_data_plus_via_features : [         MOBILE_JOURNEYS      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 5  { \n   results   :   [   ], \n   paging   :   { \n     total_count   :   0 \n   }  }     Reinstall    Request 6  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_reinstall ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP      ],       last_attributed_touch_data_plus_via_features : [         MOBILE_JOURNEYS      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 6  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   IOS_APP , \n       unique_count   :   156 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       user_data_platform   :   ANDROID_APP , \n       unique_count   :   75 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }", 
            "title": "No filters"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#filter-on-tags", 
            "text": "This example looks at tags: tag1. For a full list of dimensions that can be queried against, see our  Query API  reference docs.  Branch CTA View, with a filter for tags: tag1    Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_branch_cta_view ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB      ],       last_attributed_touch_data_plus_current_feature : [         MOBILE_JOURNEYS      ],       last_attributed_touch_data_tilde_tags : [         tag1      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   ANDROID_WEB , \n       unique_count   :   373 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       user_data_platform   :   IOS_WEB , \n       unique_count   :   6 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }", 
            "title": "Filter on Tags"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#summary-page-deepviews", 
            "text": "", 
            "title": "Summary Page - Deepviews"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#no-filters_2", 
            "text": "Pulling this data requires 6 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above.   \"Clicks\" includes both eo_click and eo_web_to_app_auto_redirect.  \"Upgrades\" includes both eo_open and eo_reinstall.  Branch CTA View    Request 1  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_branch_cta_view ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB      ],       last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 1  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   ANDROID_WEB , \n       unique_count   :   529 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       user_data_platform   :   IOS_WEB , \n       unique_count   :   361 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }     Click    Request 2  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_click ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB      ],       last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 2  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   ANDROID_WEB , \n       unique_count   :   529 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       user_data_platform   :   IOS_WEB , \n       unique_count   :   440 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }     Web-to-App Auto-Redirect    Request 3  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_web_to_app_auto_redirect ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB      ],       last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 3  { \n   results   :   [   ], \n   paging   :   { \n     total_count   :   0 \n   }  }     Install    Request 4  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_install ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP      ],       last_attributed_touch_data_plus_via_features : [         MOBILE_DEEPVIEWS      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 4  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   ANDROID_APP , \n       unique_count   :   435 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       user_data_platform   :   IOS_APP , \n       unique_count   :   393 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }     Open    Request 5  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_open ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP      ],       last_attributed_touch_data_plus_via_features : [         MOBILE_DEEPVIEWS      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 5  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   ANDROID_APP , \n       unique_count   :   167 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       user_data_platform   :   IOS_APP , \n       unique_count   :   151 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }     Reinstall    Request 6  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_reinstall ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP      ],       last_attributed_touch_data_plus_via_features : [         MOBILE_DEEPVIEWS      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 6  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   ANDROID_APP , \n       unique_count   :   8 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       user_data_platform   :   IOS_APP , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }", 
            "title": "No filters"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#filter-on-stage", 
            "text": "This example looks at stage: stage88. For a full list of dimensions that can be queried against, see our  Query API  reference docs.  Branch CTA View, with a filter for stage: stage88    Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_branch_cta_view ,     granularity :  all ,     dimensions : [       user_data_platform    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB      ],       last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS      ],       last_attributed_touch_data_tilde_stage : [         stage88      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     result   :   { \n       user_data_platform   :   ANDROID_WEB , \n       unique_count   :   90 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       user_data_platform   :   IOS_WEB , \n       unique_count   :   86 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }", 
            "title": "Filter on Stage"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#quick-links", 
            "text": "", 
            "title": "Quick Links"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#no-filters_3", 
            "text": "Pulling this data requires 6 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above.   \"Clicks\" includes both eo_click and eo_web_to_app_auto_redirect.  \"Opens\" includes both eo_open and eo_reinstall.  Click    Request 1  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-14 ,     end_date :  2017-12-20 ,     data_source :  eo_click ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_id    ],     filters : {       !last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS ,         DESKTOP_DEEPVIEWS      ],       last_attributed_touch_data_tilde_id : [         458794678159033945 ,         456130187302684655 ,         400390887617834597 ,         271026075193177506      ],       !user_data_platform : [         ROBOT      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 1  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_id   :   271026075193177506 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-14T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   1 \n   }  }     Web-to-App Auto-Redirect    Request 2  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-14 ,     end_date :  2017-12-20 ,     data_source :  eo_web_to_app_auto_redirect ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_id    ],     filters : {       !last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS ,         DESKTOP_DEEPVIEWS      ],       last_attributed_touch_data_tilde_id : [         458794678159033945 ,         456130187302684655 ,         400390887617834597 ,         271026075193177506      ],       !user_data_platform : [         ROBOT      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 2  { \n   results   :   [   ], \n   paging   :   { \n     total_count   :   0 \n   }  }     Install    Request 3  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-14 ,     end_date :  2017-12-20 ,     data_source :  eo_install ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_id    ],     filters : {       last_attributed_touch_data_tilde_id : [         458794678159033945 ,         456130187302684655 ,         400390887617834597 ,         271026075193177506      ],       !user_data_platform : [         ROBOT      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 3  { \n   results   :   [   ], \n   paging   :   { \n     total_count   :   0 \n   }  }     Open    Request 4  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-14 ,     end_date :  2017-12-20 ,     data_source :  eo_open ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_id    ],     filters : {       last_attributed_touch_data_tilde_id : [         458794678159033945 ,         456130187302684655 ,         400390887617834597 ,         271026075193177506      ],       !user_data_platform : [         ROBOT      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 4  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_id   :   271026075193177506 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-14T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   1 \n   }  }     Reinstall    Request 5  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-14 ,     end_date :  2017-12-20 ,     data_source :  eo_reinstall ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_id    ],     filters : {       last_attributed_touch_data_tilde_id : [         458794678159033945 ,         456130187302684655 ,         400390887617834597 ,         271026075193177506      ],       !user_data_platform : [         ROBOT      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 5  { \n   results   :   [   ], \n   paging   :   { \n     total_count   :   0 \n   }  }     Web Session Start    Request 6  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-14 ,     end_date :  2017-12-20 ,     data_source :  eo_web_session_start ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_id    ],     filters : {       last_attributed_touch_data_tilde_id : [         458794678159033945 ,         456130187302684655 ,         400390887617834597 ,         271026075193177506      ],       !user_data_platform : [         ROBOT      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 6  { \n   results   :   [   ], \n   paging   :   { \n     total_count   :   0 \n   }  }", 
            "title": "No filters"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#source-analytics", 
            "text": "", 
            "title": "Source Analytics"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#no-filters_4", 
            "text": "Pulling this data requires 6 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above.   If you add additional columns, then you will need to adjust the requests accordingly. For a full list of events and dimensions that can be queried against, see our  Query API  reference docs. If you are still not sure how to query for data, write in to   and we\u2019ll (1) get you a response, and (2) add to this documentation.  \"Clicks\" does  not  include eo_web_to_app_auto_redirect on this visualization. This is different from the Summary page charts and Quick Links. Those visualizations have historically included Web-to-App Auto-Redirects, folded into the Clicks number. This visualization breaks them out separately.  \"Opens\" does  not  include eo_reinstall on this visualization. This is different from the Summary page charts and Quick Links. Those visualizations have historically included Reinstalls, folded into the Opens number. This visualization breaks them out separately.  Click    Request 1  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_click ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_campaign    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB ,         DESKTOP_WEB      ],       !last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS ,         DESKTOP_DEEPVIEWS      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 1  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       unique_count   :   495 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   a4g#1 , \n       unique_count   :   490 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Default Ads Journeys , \n       unique_count   :   330 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   CampaignName , \n       unique_count   :   193 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       unique_count   :   30 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   5 \n   }  }     Install    Request 2  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_install ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_campaign    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 2  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       unique_count   :   425 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   a4g#1 , \n       unique_count   :   328 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Default Ads Journeys , \n       unique_count   :   201 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       unique_count   :   82 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   CampaignName , \n       unique_count   :   66 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qa0 , \n       unique_count   :   54 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   v2x6mfmep5t3429d , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   uws6ibt9bdmjs93h , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ukmfqoai5jt05h90 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ugpaf50d40w3h7nv , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   tj88zdgl87btlsew , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   swmbrfb8uetcceca , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qf01mu2skor5276c , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   pevfjx3yhmkl6q20 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   nkq4sewytblugtyx , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ndef09e4tqogta3e , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   moueuf2f2gng0xtt , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   lof2d8phlxib2jsu , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   l0tj5y7vywpbnqrt , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ktjp5fkmqlaynmhu , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   kbsi96yyu2luxro0 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   k0ri60p6h1wfdlsg , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   jiqqk1szmwu3389k , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ink7z7o2niwpt1l3 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ifutq3dwfb9e9s4p , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   iezqkvwev3iwvofe , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   htlpek2btalb9b6h , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   hiefuih5ijsczi2n , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   gdo2nsb41isjwecn , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   gcfsu5d45fespfrg , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   fq78bun0gild6e3s , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   fokhum3bshzewf70 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   f6lf2d6sb1gfwq0b , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   dj07vvjvhz0zz72b , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   d2770bus2fspnep2 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   chyq5jrmxl7x3f4r , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   bmvlp0xk09rycm2v , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   airra0l6vv815g3j , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ai0xr4ywznoqxch5 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   9jc8zostyp21ywnz , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   91n80s0wkot3swh7 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   8ph9zt5rsoigi3gu , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   7pflpco7e54h4mmf , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   4tmmfp6pcu6znx9t , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   4b211n6wyjgefsrs , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   3ti2mxbgr6jb2p7s , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   3ieqalbk7u6amb09 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   2qplxc9p8cz5q49i , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   1o1n3gznt58aggbh , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   1l65lo2mc5arkz2v , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   0yqw86ud220cg88d , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   0x230602kyi18keo , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   09slukxuhqn8f821 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   xkeeamlknxevem2q , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   xc4ssq0dooex0yj0 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   y2tn5sg4dlnxeven , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   w2fgkfquzdk805mq , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   x9fvq4hg87169r8f , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   58 \n   }  }     Open    Request 3  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_open ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_campaign    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 3  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   a4g#1 , \n       unique_count   :   312 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       unique_count   :   284 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   CampaignName , \n       unique_count   :   194 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qa0 , \n       unique_count   :   17 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       unique_count   :   16 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   moueuf2f2gng0xtt , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ink7z7o2niwpt1l3 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   iezqkvwev3iwvofe , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   htlpek2btalb9b6h , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   hiefuih5ijsczi2n , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   gcfsu5d45fespfrg , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   f6lf2d6sb1gfwq0b , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   dj07vvjvhz0zz72b , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   bmvlp0xk09rycm2v , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   airra0l6vv815g3j , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   4b9ra2zzxxq4lzj6 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   3ti2mxbgr6jb2p7s , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   2qplxc9p8cz5q49i , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   1o1n3gznt58aggbh , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   1l65lo2mc5arkz2v , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   09slukxuhqn8f821 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ugpaf50d40w3h7nv , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   xc4ssq0dooex0yj0 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   x9fvq4hg87169r8f , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   pevfjx3yhmkl6q20 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   25 \n   }  }     Web Session Start    Request 4  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_web_session_start ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_campaign    ],     filters : {       user_data_platform : [         IOS_APP ,         ANDROID_APP ,         DESKTOP_WEB      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 4  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       unique_count   :   15 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   a4g#1 , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   2 \n   }  }     Purchase    Request 5  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_commerce_event ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_campaign ,       name    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB ,         DESKTOP_WEB ,         IOS_APP ,         ANDROID_APP      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 5  { \n   results   :   [   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Default Ads Journeys , \n       name   :   ADD_TO_CART , \n       unique_count   :   268 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   a4g#1 , \n       name   :   PURCHASE , \n       unique_count   :   169 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   CampaignName , \n       name   :   PURCHASE , \n       unique_count   :   154 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       name   :   PURCHASE , \n       unique_count   :   131 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       name   :   PURCHASE , \n       unique_count   :   68 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qa0 , \n       name   :   PURCHASE , \n       unique_count   :   25 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   gcfsu5d45fespfrg , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   x9fvq4hg87169r8f , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ugpaf50d40w3h7nv , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   tj88zdgl87btlsew , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   3ti2mxbgr6jb2p7s , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   xc4ssq0dooex0yj0 , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   xkeeamlknxevem2q , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   pevfjx3yhmkl6q20 , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   moueuf2f2gng0xtt , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ukmfqoai5jt05h90 , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   jiqqk1szmwu3389k , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   iezqkvwev3iwvofe , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   hiefuih5ijsczi2n , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   fq78bun0gild6e3s , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   fokhum3bshzewf70 , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   f6lf2d6sb1gfwq0b , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   bmvlp0xk09rycm2v , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   airra0l6vv815g3j , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   l0tj5y7vywpbnqrt , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   2qplxc9p8cz5q49i , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   1xosk74azwbxtdyn , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   4b9ra2zzxxq4lzj6 , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   swmbrfb8uetcceca , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   y2tn5sg4dlnxeven , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   1o1n3gznt58aggbh , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   0x230602kyi18keo , \n       name   :   PURCHASE , \n       unique_count   :   1 \n     } \n   }   ], \n   paging   :   { \n     total_count   :   32 \n   }  }     Revenue  Note that revenue also has data_source  eo_purchase , but with a different  aggregation .    Request 6  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_commerce_event ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_campaign ,       name    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB ,         DESKTOP_WEB ,         IOS_APP ,         ANDROID_APP      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  revenue  }   http://api.branch.io/v1/query/analytics?limit=100     Response 6  { \n   results   :   [   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   a4g#1 , \n       revenue   :   220439.2490234375 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   CampaignName , \n       revenue   :   182050.3577928543 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       revenue   :   170676.8486328125 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   null , \n       revenue   :   43980.580078125 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   qa0 , \n       revenue   :   32342.879272460938 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   tj88zdgl87btlsew , \n       revenue   :   4041.510009765625 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ugpaf50d40w3h7nv , \n       revenue   :   2680.56005859375 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   l0tj5y7vywpbnqrt , \n       revenue   :   2350.080078125 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   hiefuih5ijsczi2n , \n       revenue   :   1853.0899658203125 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   xkeeamlknxevem2q , \n       revenue   :   1679.3199462890625 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   fokhum3bshzewf70 , \n       revenue   :   1504.2099609375 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   3ti2mxbgr6jb2p7s , \n       revenue   :   1455.699951171875 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   gcfsu5d45fespfrg , \n       revenue   :   1434.8599853515625 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   x9fvq4hg87169r8f , \n       revenue   :   1346.8199462890625 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   fq78bun0gild6e3s , \n       revenue   :   981.6799926757812 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   swmbrfb8uetcceca , \n       revenue   :   914.9199829101562 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   jiqqk1szmwu3389k , \n       revenue   :   874.25 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   0x230602kyi18keo , \n       revenue   :   533.5800170898438 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   iezqkvwev3iwvofe , \n       revenue   :   499.9200134277344 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   1xosk74azwbxtdyn , \n       revenue   :   469.5299987792969 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   y2tn5sg4dlnxeven , \n       revenue   :   463.69000244140625 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   airra0l6vv815g3j , \n       revenue   :   449.54998779296875 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   pevfjx3yhmkl6q20 , \n       revenue   :   321.9800109863281 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   1o1n3gznt58aggbh , \n       revenue   :   231.3300018310547 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   2qplxc9p8cz5q49i , \n       revenue   :   202.74000549316406 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   moueuf2f2gng0xtt , \n       revenue   :   30.950000762939453 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   bmvlp0xk09rycm2v , \n       revenue   :   20.050000190734863 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   xc4ssq0dooex0yj0 , \n       revenue   :   16.290000915527344 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   ukmfqoai5jt05h90 , \n       revenue   :   13.979999542236328 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   4b9ra2zzxxq4lzj6 , \n       revenue   :   13.9399995803833 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   f6lf2d6sb1gfwq0b , \n       revenue   :   11.399999618530273 , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   Default Ads Journeys , \n       revenue   :   0.0 , \n       name   :   ADD_TO_CART \n     } \n   }   ], \n   paging   :   { \n     total_count   :   32 \n   }  }", 
            "title": "No filters"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#filter-on-ad-partner", 
            "text": "This example looks at ad partner name: Taptica. For a full list of dimensions that can be queried against, see our  Query API  reference docs.  Click, with a filter for ad partner name: Taptica    Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_click ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_campaign    ],     filters : {       user_data_platform : [         IOS_WEB ,         ANDROID_WEB ,         DESKTOP_WEB      ],       !last_attributed_touch_data_plus_current_feature : [         MOBILE_DEEPVIEWS ,         DESKTOP_DEEPVIEWS      ],       last_attributed_touch_data_tilde_advertising_partner_name : [         Taptica      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_campaign   :   taptica#1 , \n       unique_count   :   495 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   1 \n   }  }", 
            "title": "Filter on Ad Partner"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#ads-analytics-trends", 
            "text": "", 
            "title": "Ads Analytics - Trends"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#installs-split-by-campaign", 
            "text": "Install    Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-11-29 ,     end_date :  2017-12-05 ,     data_source :  eo_install ,     granularity :  day ,     dimensions :  last_attributed_touch_data_tilde_advertising_partner_name ,     filters : {       last_attributed_touch_data_tilde_feature : [         paid advertising      ],       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   40 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   37 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   35 \n     }, \n     timestamp   :   2017-11-30T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   35 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   34 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   33 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   32 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   26 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   23 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   22 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   20 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   15 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   12 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   12 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   11 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   10 \n     }, \n     timestamp   :   2017-11-30T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   9 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   8 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   7 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   A4G , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   20 \n   }  }", 
            "title": "Installs, Split by Campaign"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#installs-split-by-campaign-with-filter-on-platform", 
            "text": "Install    Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-11-29 ,     end_date :  2017-12-05 ,     data_source :  eo_install ,     granularity :  day ,     dimensions :  last_attributed_touch_data_tilde_advertising_partner_name ,     filters : {       last_attributed_touch_data_tilde_feature : [         paid advertising      ],       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [        null      ],       user_data_platform : [         IOS_APP      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   26 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   23 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   22 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   20 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   15 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   12 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   12 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   11 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   10 \n     }, \n     timestamp   :   2017-11-30T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   9 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   8 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   7 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   5 \n     }, \n     timestamp   :   2017-12-01T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   5 \n     }, \n     timestamp   :   2017-12-05T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   2 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   2 \n     }, \n     timestamp   :   2017-11-30T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   2 \n     }, \n     timestamp   :   2017-12-04T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   2 \n     }, \n     timestamp   :   2017-12-02T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   A4G , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-11-29T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   1 \n     }, \n     timestamp   :   2017-12-03T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   20 \n   }  }", 
            "title": "Installs, Split by Campaign, With Filter on Platform"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#ads-analytics-events", 
            "text": "", 
            "title": "Ads Analytics - Events"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#split-by-ad-partner", 
            "text": "Pulling this data requires 7 requests. For ease of understanding, we show the requests and responses below that correspond exactly to the data above.  If you add additional columns, then you will need to adjust the requests accordingly. For a full list of events and dimensions that can be queried against, see our  Query API  reference docs. If you are still not sure how to query for data, write in to   and we\u2019ll (1) get you a response, and (2) add to this documentation.  \"Clicks\" does  not  include eo_web_to_app_auto_redirect on this visualization. This is different from the Summary page charts and Quick Links. Those visualizations have historically included Web-to-App Auto-Redirects, folded into the Clicks number. This visualization breaks them out separately.  \"Opens\" does  not  include eo_reinstall on this visualization. This is different from the Summary page charts and Quick Links. Those visualizations have historically included Reinstalls, folded into the Opens number. This visualization breaks them out separately.  Click    Request 1  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_click ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_advertising_partner_name    ],     filters : {       last_attributed_touch_data_tilde_feature : [         paid advertising      ],       !user_data_platform : [         ROBOT      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 1  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   A4G , \n       unique_count   :   579 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   507 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   193 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   30 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   4 \n   }  }     Install    Request 2  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_install ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_advertising_partner_name    ],     filters : {       last_attributed_touch_data_tilde_feature : [         paid advertising      ],       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 2  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   425 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   A4G , \n       unique_count   :   328 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   188 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   66 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   4 \n   }  }     Open    Request 3  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_open ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_advertising_partner_name    ],     filters : {       last_attributed_touch_data_tilde_feature : [         paid advertising      ],       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 3  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   A4G , \n       unique_count   :   312 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   284 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   194 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   54 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   4 \n   }  }     Reinstall    Request 4  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_reinstall ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_advertising_partner_name    ],     filters : {       last_attributed_touch_data_tilde_feature : [         paid advertising      ],       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 4  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   A4G , \n       unique_count   :   123 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   119 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       unique_count   :   108 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   57 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   4 \n   }  }     Web Session Start    Request 5  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_web_session_start ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_advertising_partner_name    ],     filters : {       last_attributed_touch_data_tilde_feature : [         paid advertising      ],       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 5  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   190 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   A4G , \n       unique_count   :   179 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   },   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       unique_count   :   60 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   3 \n   }  }     Purchase    Request 6  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_commerce_event ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_advertising_partner_name ,       name    ],     filters : {       last_attributed_touch_data_tilde_feature : [         paid advertising      ],       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response 6  { \n   results   :   [   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   A4G , \n       name   :   PURCHASE , \n       unique_count   :   169 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       name   :   PURCHASE , \n       unique_count   :   154 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       name   :   PURCHASE , \n       unique_count   :   131 \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       name   :   PURCHASE , \n       unique_count   :   122 \n     } \n   }   ], \n   paging   :   { \n     total_count   :   4 \n   }  }     Revenue  Note that revenue also has data_source  eo_purchase , but with a different  aggregation .    Request 7  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_commerce_event ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_advertising_partner_name ,       name    ],     filters : {       last_attributed_touch_data_tilde_feature : [         paid advertising      ],       !user_data_platform : [         ROBOT      ],       !days_from_last_attributed_touch_to_event : [        null      ]    },     aggregation :  revenue  }   http://api.branch.io/v1/query/analytics?limit=100     Response 7  { \n   results   :   [   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       revenue   :   220439.2490234375 , \n       last_attributed_touch_data_tilde_advertising_partner_name   :   A4G , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       revenue   :   182050.3577928543 , \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Apple Search Ads , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       revenue   :   170676.8486328125 , \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       name   :   PURCHASE \n     } \n   },   { \n     timestamp   :   2017-12-07T08:00:00.000Z , \n     result   :   { \n       revenue   :   100719.38818359375 , \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Applovin , \n       name   :   PURCHASE \n     } \n   }   ], \n   paging   :   { \n     total_count   :   4 \n   }  }", 
            "title": "Split by Ad Partner"
        }, 
        {
            "location": "/pages/exports/query-recipe-book/#split-by-ad-partner-with-filter-on-ad-partner", 
            "text": "This example looks at ad partner name: Taptica. For a full list of dimensions that can be queried against, see our  Query API  reference docs.  Click, with a filter for ad partner name: Taptica    Request  curl -X POST -H  Content-Type: application/json  -d  {     branch_key :  YOUR_BRANCH_KEY ,     branch_secret :  YOUR_BRANCH_SECRET ,     start_date :  2017-12-07 ,     end_date :  2017-12-13 ,     data_source :  eo_click ,     granularity :  all ,     dimensions : [       last_attributed_touch_data_tilde_advertising_partner_name    ],     filters : {       last_attributed_touch_data_tilde_feature : [         paid advertising      ],       !user_data_platform : [         ROBOT      ],       last_attributed_touch_data_tilde_advertising_partner_name : [         Taptica      ]    },     aggregation :  unique_count  }   http://api.branch.io/v1/query/analytics?limit=100     Response  { \n   results   :   [   { \n     result   :   { \n       last_attributed_touch_data_tilde_advertising_partner_name   :   Taptica , \n       unique_count   :   507 \n     }, \n     timestamp   :   2017-12-07T08:00:00.000Z \n   }   ], \n   paging   :   { \n     total_count   :   1 \n   }  }", 
            "title": "Split by Ad Partner, With Filter on Ad Partner"
        }, 
        {
            "location": "/pages/resources/matching/", 
            "text": "Overview\n\n\nThere are several mechanisms Branch uses to pass data through to the app and attribute app sessions back to the source. We always use the method with the highest match confidence rate. When we are 100% confident, the deep link data will contain the variable \n+match_guaranteed=true\n.\n\n\nMethods with 100% match accuracy\n\n\nDirect deeplinking\n\n\nIf the app is currently installed on the phone, and you've configured your Branch links with your app's URI scheme (\nmyapp://\n) or to use Universal or App Links, we will open the app immediately and pass a click identifier through to our native library. This click identifier is then sent to the Branch servers to retrieve the dictionary of data associated with the link.\n\n\nFor example, we'd call \nmyapp://open?link_click_id=123456\n to open the app immediately. The Branch native library parses out \nlink_click_id: 123456\n and passes it back to the Branch API to retrieve the data dictionary associated with that link click.\n\n\nDevice ID token matching across the Branch Network\n\n\nWhen a user clicks a Branch link for your app, and we've seen that user click a link for \nanother\n app on our partner network, we've already matched them up to a corresponding device identifier. This means that when they install the app, we know with 100% certainty that they just came from that link click.\n\n\nThe fact that we have such a global network of apps with hundreds of millions of users clicking links, means that when you join the platform, you can benefit from the crowd-sourced accuracy gained through all our apps contributing the browser-app profiles. Read more about how important this is on \nour blog\n.\n\n\nLeveraging other match techniques\n\n\nWe've built out custom deep linking mechanisms that are specific to each platform to ensure that deep linking is accurate. Here are some of those techniques we use:\n\n\n\n\n\n\n\n\nMatch Method\n\n\nImplementation Details\n\n\n\n\n\n\n\n\n\n\nFacebook deferred deep linking API\n\n\nWe've built a custom integration with Facebook where if a user originates from an app invite or advertisement, we connect with Facebook's API to know with 100% certainty if the install originated from this source. You'll need to authenticate with Facebook on the Branch dash if you want to support this.\n\n\n\n\n\n\nAndroid Google Play referrer\n\n\nGoogle Play supports passing a referrer through the install process that we listen for. It's notoriously unreliable and currently unsupported when redirecting from Chrome. However, we'll use it when available. Enabling this method is covered in the \nSDK Integration Guide\n.\n\n\n\n\n\n\niOS 9/10 Safari cookie passthrough\n\n\nWe built a custom technique into our iOS SDK that will guarantee 100% accuracy on iOS 9/10 when a user clicks from the Safari browser. This only applies if you include SafariServices.framework in your app. Please see our new recommended \npath to use this feature\n. Note that this method has some risks due to a policy change on iOS on 9/1/16.\n\n\n\n\n\n\nAndroid Chrome Tabs cookie passthrough\n\n\nWe built a custom technique into our Android SDK that will guarantee 100% accuracy when a user originates from the Chrome browser. We're automatically cookie match based on app.link, but you can configure the domain depending on your use case. Please see \nthe guide here\n.\n\n\n\n\n\n\n\n\nMethods without 100% match accuracy\n\n\nBrowser to app snapshot match\n\n\nBranch collects information about devices both when a user is in the browser -- via a click on a Branch link -- and then after they open the app. This information includes \nIP Address\n, \nOS\n, \nOS version\n, \ndevice model\n and other parameters. This is the user's \ndigital snapshot\n and can be obtained in the browser and in the app.\n\n\nWhen no 100% match method is available, we connect the unique snapshot collected in the app to the unique snapshot collected in the browser to determine where user originated.\n\n\n\n\nCustomize the snapshot matching criteria\n\n\nIf you are concerned that users may potentially have the same snapshot, you can choose to have us not match users if two identical snapshots are outstanding. On the Dashboard's \nLink Settings\n page, under advanced options, you should set \nMatch Type\n to \nUnique\n. You can also modify the 7200 second (2 hour) default expiration for all links, or \nconfigure it for individual links\n by using the \n$match_duration\n control parameter.\n\n\n\n\nThis means that if two users with the same snapshot, on the same wifi, were to click a Branch link for your app, we would blacklist those digital snapshots for the expiration duration. Therefore, when either user opens up your app, no match would be made.\n\n\n\n\nConfiguring Your iOS App for 100% Match\n\n\n100% match is a bit of a misnomer, as it is only 100% match from when a user clicks from the Safari browser. According to our analysis, clicking through Safari happens about 50-75% of the time depending on the use case. For example, clicking from Facebook or Chrome won't trigger a 100% match here. However, it's still beneficial to the matching accuracy, so we recommend employing it.\n\n\nInclude SafariServices.framework\n\n\nFirst off, you'll need to include the \nSafariServices.framework\n into your app to leverage this. Currently, as soon as you add the Framework, Branch will start triggering the Safari-based 100% match technique. To add the framework, simply go to your Xcode project:\n\n\n\n\nSelect the right build target\n\n\nSelect the \nGeneral\n tab\n\n\nScroll down to \nLinked Frameworks and Libraries\n\n\nClick the \n+\n button\n\n\nAdd \nSafariServices.framework\n\n\n\n\nSet the matching domain to app.link\n\n\nBecause our Safari View Controller matching method works based on comparing the cookie Branch set on a click to the cookie set with the View Controller, the domains must be consistent. iOS assumes that you're on the \nbnc.lt\n domain, so if you're using \napp.link\n domain as your default (most apps), you must specify this domain in your PLIST file.\n\n\nPlease set the \nbranch_app_domain\n to \napp.link\n in your PLIST as shown below:\n\n\n\n\nNeed to disable SafariViewController?\n\n\nNote that this mechanism can be \ndisabled\n using the following method, which should be called \nbefore\n \ninitSession\n.\n\n\n\n\n\n\nObjective-C\n\n\n[[\nBranch\n \ngetInstance\n]\n \ndisableCookieBasedMatching\n];\n\n\n\n\n\n\n\n\n\nSwift\n\n\nBranch\n.\ngetInstance\n().\ndisableCookieBasedMatching\n()\n\n\n\n\n\n\n\n\n\nConfiguring Your Android App for 100% Match\n\n\nSimilar to iOS, 100% match is a bit of a misnomer since this method will only work if a user clicks via the Chrome browser. Other browsers such as Facebook and Twitter will not benefit from this method. We haven't pull the stats on usage like we do on iOS, but we'd assume it's similar to Safari (50-75% of clicks).\n\n\nEnable cookie matching\n\n\nAdd \ncompile 'com.android.support:customtabs:23.3.0'\n to the dependencies section of your \nbuild.gradle\n file.\n\n\nUse the legacy bnc.lt domain for cookie matching\n\n\nUnlike on iOS where we assume that your domain is on \nbnc.lt\n, on Android we assume it is the \napp.link\n domain. If you want to override it, you must set the domain you want via a call to Branch like so:\n\n\n// call before calling getAutoInstance in the Application class\n\n\nBranch\n.\nenableCookieBasedMatching\n(\nbnc.lt\n);\n\n\nBranch\n.\ngetAutoInstance\n(\nthis\n);", 
            "title": "Branch Matching Overview"
        }, 
        {
            "location": "/pages/resources/matching/#overview", 
            "text": "There are several mechanisms Branch uses to pass data through to the app and attribute app sessions back to the source. We always use the method with the highest match confidence rate. When we are 100% confident, the deep link data will contain the variable  +match_guaranteed=true .", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/resources/matching/#methods-with-100-match-accuracy", 
            "text": "", 
            "title": "Methods with 100% match accuracy"
        }, 
        {
            "location": "/pages/resources/matching/#direct-deeplinking", 
            "text": "If the app is currently installed on the phone, and you've configured your Branch links with your app's URI scheme ( myapp:// ) or to use Universal or App Links, we will open the app immediately and pass a click identifier through to our native library. This click identifier is then sent to the Branch servers to retrieve the dictionary of data associated with the link.  For example, we'd call  myapp://open?link_click_id=123456  to open the app immediately. The Branch native library parses out  link_click_id: 123456  and passes it back to the Branch API to retrieve the data dictionary associated with that link click.", 
            "title": "Direct deeplinking"
        }, 
        {
            "location": "/pages/resources/matching/#device-id-token-matching-across-the-branch-network", 
            "text": "When a user clicks a Branch link for your app, and we've seen that user click a link for  another  app on our partner network, we've already matched them up to a corresponding device identifier. This means that when they install the app, we know with 100% certainty that they just came from that link click.  The fact that we have such a global network of apps with hundreds of millions of users clicking links, means that when you join the platform, you can benefit from the crowd-sourced accuracy gained through all our apps contributing the browser-app profiles. Read more about how important this is on  our blog .", 
            "title": "Device ID token matching across the Branch Network"
        }, 
        {
            "location": "/pages/resources/matching/#leveraging-other-match-techniques", 
            "text": "We've built out custom deep linking mechanisms that are specific to each platform to ensure that deep linking is accurate. Here are some of those techniques we use:     Match Method  Implementation Details      Facebook deferred deep linking API  We've built a custom integration with Facebook where if a user originates from an app invite or advertisement, we connect with Facebook's API to know with 100% certainty if the install originated from this source. You'll need to authenticate with Facebook on the Branch dash if you want to support this.    Android Google Play referrer  Google Play supports passing a referrer through the install process that we listen for. It's notoriously unreliable and currently unsupported when redirecting from Chrome. However, we'll use it when available. Enabling this method is covered in the  SDK Integration Guide .    iOS 9/10 Safari cookie passthrough  We built a custom technique into our iOS SDK that will guarantee 100% accuracy on iOS 9/10 when a user clicks from the Safari browser. This only applies if you include SafariServices.framework in your app. Please see our new recommended  path to use this feature . Note that this method has some risks due to a policy change on iOS on 9/1/16.    Android Chrome Tabs cookie passthrough  We built a custom technique into our Android SDK that will guarantee 100% accuracy when a user originates from the Chrome browser. We're automatically cookie match based on app.link, but you can configure the domain depending on your use case. Please see  the guide here .", 
            "title": "Leveraging other match techniques"
        }, 
        {
            "location": "/pages/resources/matching/#methods-without-100-match-accuracy", 
            "text": "", 
            "title": "Methods without 100% match accuracy"
        }, 
        {
            "location": "/pages/resources/matching/#browser-to-app-snapshot-match", 
            "text": "Branch collects information about devices both when a user is in the browser -- via a click on a Branch link -- and then after they open the app. This information includes  IP Address ,  OS ,  OS version ,  device model  and other parameters. This is the user's  digital snapshot  and can be obtained in the browser and in the app.  When no 100% match method is available, we connect the unique snapshot collected in the app to the unique snapshot collected in the browser to determine where user originated.   Customize the snapshot matching criteria  If you are concerned that users may potentially have the same snapshot, you can choose to have us not match users if two identical snapshots are outstanding. On the Dashboard's  Link Settings  page, under advanced options, you should set  Match Type  to  Unique . You can also modify the 7200 second (2 hour) default expiration for all links, or  configure it for individual links  by using the  $match_duration  control parameter.   This means that if two users with the same snapshot, on the same wifi, were to click a Branch link for your app, we would blacklist those digital snapshots for the expiration duration. Therefore, when either user opens up your app, no match would be made.", 
            "title": "Browser to app snapshot match"
        }, 
        {
            "location": "/pages/resources/matching/#configuring-your-ios-app-for-100-match", 
            "text": "100% match is a bit of a misnomer, as it is only 100% match from when a user clicks from the Safari browser. According to our analysis, clicking through Safari happens about 50-75% of the time depending on the use case. For example, clicking from Facebook or Chrome won't trigger a 100% match here. However, it's still beneficial to the matching accuracy, so we recommend employing it.", 
            "title": "Configuring Your iOS App for 100% Match"
        }, 
        {
            "location": "/pages/resources/matching/#include-safariservicesframework", 
            "text": "First off, you'll need to include the  SafariServices.framework  into your app to leverage this. Currently, as soon as you add the Framework, Branch will start triggering the Safari-based 100% match technique. To add the framework, simply go to your Xcode project:   Select the right build target  Select the  General  tab  Scroll down to  Linked Frameworks and Libraries  Click the  +  button  Add  SafariServices.framework", 
            "title": "Include SafariServices.framework"
        }, 
        {
            "location": "/pages/resources/matching/#set-the-matching-domain-to-applink", 
            "text": "Because our Safari View Controller matching method works based on comparing the cookie Branch set on a click to the cookie set with the View Controller, the domains must be consistent. iOS assumes that you're on the  bnc.lt  domain, so if you're using  app.link  domain as your default (most apps), you must specify this domain in your PLIST file.  Please set the  branch_app_domain  to  app.link  in your PLIST as shown below:", 
            "title": "Set the matching domain to app.link"
        }, 
        {
            "location": "/pages/resources/matching/#need-to-disable-safariviewcontroller", 
            "text": "Note that this mechanism can be  disabled  using the following method, which should be called  before   initSession .    Objective-C  [[ Branch   getInstance ]   disableCookieBasedMatching ];     Swift  Branch . getInstance (). disableCookieBasedMatching ()", 
            "title": "Need to disable SafariViewController?"
        }, 
        {
            "location": "/pages/resources/matching/#configuring-your-android-app-for-100-match", 
            "text": "Similar to iOS, 100% match is a bit of a misnomer since this method will only work if a user clicks via the Chrome browser. Other browsers such as Facebook and Twitter will not benefit from this method. We haven't pull the stats on usage like we do on iOS, but we'd assume it's similar to Safari (50-75% of clicks).", 
            "title": "Configuring Your Android App for 100% Match"
        }, 
        {
            "location": "/pages/resources/matching/#enable-cookie-matching", 
            "text": "Add  compile 'com.android.support:customtabs:23.3.0'  to the dependencies section of your  build.gradle  file.", 
            "title": "Enable cookie matching"
        }, 
        {
            "location": "/pages/resources/matching/#use-the-legacy-bnclt-domain-for-cookie-matching", 
            "text": "Unlike on iOS where we assume that your domain is on  bnc.lt , on Android we assume it is the  app.link  domain. If you want to override it, you must set the domain you want via a call to Branch like so:  // call before calling getAutoInstance in the Application class  Branch . enableCookieBasedMatching ( bnc.lt );  Branch . getAutoInstance ( this );", 
            "title": "Use the legacy bnc.lt domain for cookie matching"
        }, 
        {
            "location": "/pages/resources/validation-tools/", 
            "text": "Branch CLI for Automated iOS Integration\n\n\nOverview\n\n\nThe \nBranch CLI\n is a simple plugin which integrates Branch into your \niOS\n project for you.\n\n\nOther Important Features:\n\n\n\n\nValidates Universal Links\n: The CLI ensures that your app supports Universal Links by comparing your project\u2019s bundle identifier, team id, and domain entries in your entitlements file against what is stored in Branch\u2019s Apple App Site Association file for your link domain.\n\n\nSupports multiple targets\n: To install for a specific target, use the \n--target\n flag, or use the configuration editor to change the inferred target each time. If the target in question is an extension, the tool will add the SDK, set the keys into the Info.plist, and patch source (if it's a Messages extension, for example).\n\n\nIncludes Rake for Task Management\n: This gem has a rake for Task Management that is available \nhere\n.\n\n\nFastlane Plugin\n: There is also a Fastlane plugin available \nhere\n, should you prefer to use it instead.\n\n\n\n\nPrerequisites:\n\n\n\n\nEnsure that you\u2019ve set up your Branch Dashboard using the instructions \nhere\n, and have your Branch Key and Branch link domain handy.\n\n\nAn iOS project with which you\u2019d like to integrate Branch.\n\n\n\n\nInstallation\n\n\n\n\nFrom terminal, cd into your iOS app\u2019s project directory (the one that includes the xcodeproj file).\n\n\n\n\nType \ngem install branch_io_cli\n into terminal.\n\n\nNote\n: If you get an error saying that you don\u2019t have permissions to perform this operation, try installing with sudo.\n\n\n\n\n\n\nExample: Using the CLI on a project with no third party SDKs\n\n\n\n\n\n\nType \nbr setup\n into terminal, and you\u2019ll be greeted with a few options on the following screen:\n\n\n\n\n\n\n\n\nFill out your Branch Key from \nAccount Settings\n, and your app\u2019s link domain information from your \nLink Settings\n pages.\n\n\nNote\n: You don\u2019t need to add your -alternate.app.link domain. The CLI will take care of that for you.\n\n\n\n\n\n\nOnce complete, you\u2019ll see the following set of instructions:\n\n\n\n\n\n\n\n\nIf your app does not have any third party SDKs integrated, pick option 2: \nSet this project up to use CocoaPods and add the Branch SDK\n.\n\n\n\n\n\n\nBefore modifying your project, the CLI will confirm your inputs. If something is entered incorrectly, you\u2019ll have the option to return and change your values:\n\n\n\n\n\n\n\n\nTo make changes to your URI scheme for example, enter \nN\n to the prompt.\n\n\n\n\n\n\nTo insert your app\u2019s URI scheme, enter \n4\n into the prompt:\n\n\n\n\n\n\n\n\n\n\nAfter entering a URI scheme, enter option \n19: Accept and Continue\n, which starts the Universal Link validation process:\n\n\n\n\n\n\n\n\nIf your link domains, are found in your app's \napple-app-site-association\n file, the rest of the process will continue as expected.\n\n\n\n\n\n\n\n\nAfter installing cocoapods, the CLI will install the Branch plugin and inject values and various snippets from your app into your project.\n\n\n\n\n\n\n\n\nYou're all done! \n\n\nAASA Validator\n\n\nIn case you need to validate your domain, use the \nAASA Validator\n to check universal linking is set up properly.\n\n\nApp Indexing Validator\n\n\nCheck your app to see if it can properly index and surface content for Firebase through our \nApp Indexing Validator\n.\n\n\nUniversal Link Validator\n\n\nOverview\n\n\nThe Universal Link Validator compares an app\u2019s local project settings to its dashboard settings and helps pinpoint errors that may prevent Universal Links from functioning properly. This service verifies that:\n\n\n\n\nthe entries in the project\u2019s .entitlements file are correct\n\n\nthe entries in the project\u2019s info.plist file are correct\n\n\nthe .entitlements file has the correct build target selected\n\n\nthe Apple App Prefix on the Dashboard matches the Apple Developer ID specified for the project\n\n\n\n\nRunning the script\n\n\n\n\nDownload and extract the \nscript\n\n\n\n\nExecute the script with the path to your .xcodeproj file\n\n\nbash ulv_script.sh /Users/jbauer/Desktop/BranchStuff/Branch-TestBed-Swift/TestBed-Swift.xcodeproj\n`\n\n\n\n\n\n\n\n\n\nUpon execution, the script will return\n\n\n#####################################################\n\n Click the link generated to \ntest\n your configuration\n\n#####################################################\n\n\n{\nurl\n:\nhttps://ulv.app.link/RPyaHjpYJd\n}\n\n\n\n\n\n\n\n\n\nClicking the generated link, or copying \n pasting it into a browser, will open the validator and display the test results.", 
            "title": "Validation Tools"
        }, 
        {
            "location": "/pages/resources/validation-tools/#branch-cli-for-automated-ios-integration", 
            "text": "", 
            "title": "Branch CLI for Automated iOS Integration"
        }, 
        {
            "location": "/pages/resources/validation-tools/#overview", 
            "text": "The  Branch CLI  is a simple plugin which integrates Branch into your  iOS  project for you.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/resources/validation-tools/#other-important-features", 
            "text": "Validates Universal Links : The CLI ensures that your app supports Universal Links by comparing your project\u2019s bundle identifier, team id, and domain entries in your entitlements file against what is stored in Branch\u2019s Apple App Site Association file for your link domain.  Supports multiple targets : To install for a specific target, use the  --target  flag, or use the configuration editor to change the inferred target each time. If the target in question is an extension, the tool will add the SDK, set the keys into the Info.plist, and patch source (if it's a Messages extension, for example).  Includes Rake for Task Management : This gem has a rake for Task Management that is available  here .  Fastlane Plugin : There is also a Fastlane plugin available  here , should you prefer to use it instead.", 
            "title": "Other Important Features:"
        }, 
        {
            "location": "/pages/resources/validation-tools/#prerequisites", 
            "text": "Ensure that you\u2019ve set up your Branch Dashboard using the instructions  here , and have your Branch Key and Branch link domain handy.  An iOS project with which you\u2019d like to integrate Branch.", 
            "title": "Prerequisites:"
        }, 
        {
            "location": "/pages/resources/validation-tools/#installation", 
            "text": "From terminal, cd into your iOS app\u2019s project directory (the one that includes the xcodeproj file).   Type  gem install branch_io_cli  into terminal.  Note : If you get an error saying that you don\u2019t have permissions to perform this operation, try installing with sudo.", 
            "title": "Installation"
        }, 
        {
            "location": "/pages/resources/validation-tools/#example-using-the-cli-on-a-project-with-no-third-party-sdks", 
            "text": "Type  br setup  into terminal, and you\u2019ll be greeted with a few options on the following screen:     Fill out your Branch Key from  Account Settings , and your app\u2019s link domain information from your  Link Settings  pages.  Note : You don\u2019t need to add your -alternate.app.link domain. The CLI will take care of that for you.    Once complete, you\u2019ll see the following set of instructions:     If your app does not have any third party SDKs integrated, pick option 2:  Set this project up to use CocoaPods and add the Branch SDK .    Before modifying your project, the CLI will confirm your inputs. If something is entered incorrectly, you\u2019ll have the option to return and change your values:     To make changes to your URI scheme for example, enter  N  to the prompt.    To insert your app\u2019s URI scheme, enter  4  into the prompt:      After entering a URI scheme, enter option  19: Accept and Continue , which starts the Universal Link validation process:     If your link domains, are found in your app's  apple-app-site-association  file, the rest of the process will continue as expected.     After installing cocoapods, the CLI will install the Branch plugin and inject values and various snippets from your app into your project.     You're all done!", 
            "title": "Example: Using the CLI on a project with no third party SDKs"
        }, 
        {
            "location": "/pages/resources/validation-tools/#aasa-validator", 
            "text": "In case you need to validate your domain, use the  AASA Validator  to check universal linking is set up properly.", 
            "title": "AASA Validator"
        }, 
        {
            "location": "/pages/resources/validation-tools/#app-indexing-validator", 
            "text": "Check your app to see if it can properly index and surface content for Firebase through our  App Indexing Validator .", 
            "title": "App Indexing Validator"
        }, 
        {
            "location": "/pages/resources/validation-tools/#universal-link-validator", 
            "text": "", 
            "title": "Universal Link Validator"
        }, 
        {
            "location": "/pages/resources/validation-tools/#overview_1", 
            "text": "The Universal Link Validator compares an app\u2019s local project settings to its dashboard settings and helps pinpoint errors that may prevent Universal Links from functioning properly. This service verifies that:   the entries in the project\u2019s .entitlements file are correct  the entries in the project\u2019s info.plist file are correct  the .entitlements file has the correct build target selected  the Apple App Prefix on the Dashboard matches the Apple Developer ID specified for the project", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/resources/validation-tools/#running-the-script", 
            "text": "Download and extract the  script   Execute the script with the path to your .xcodeproj file  bash ulv_script.sh /Users/jbauer/Desktop/BranchStuff/Branch-TestBed-Swift/TestBed-Swift.xcodeproj `     Upon execution, the script will return  ##################################################### \n Click the link generated to  test  your configuration #####################################################  { url : https://ulv.app.link/RPyaHjpYJd }     Clicking the generated link, or copying   pasting it into a browser, will open the validator and display the test results.", 
            "title": "Running the script"
        }, 
        {
            "location": "/pages/resources/case-studies/", 
            "text": "Case Studies\n\n\nIf you need inspiration on what to build next, take a look at our \ncase studies\n.\n\n\nDatasheets\n\n\nUse datasheets to understand how we work with 3rd party partners, and send data out of \nBranch\n.\n\n\nInfographics\n\n\nUniversal Link Routing\n\n\nConfused at how Universal Linking works? Take a look at our \nInfographic\n.\n\n\nBranch API Overview\n\n\nWe have a simplified graphic that showcases what our \nAPI\n.", 
            "title": "Case Studies and Infographics"
        }, 
        {
            "location": "/pages/resources/case-studies/#case-studies", 
            "text": "If you need inspiration on what to build next, take a look at our  case studies .", 
            "title": "Case Studies"
        }, 
        {
            "location": "/pages/resources/case-studies/#datasheets", 
            "text": "Use datasheets to understand how we work with 3rd party partners, and send data out of  Branch .", 
            "title": "Datasheets"
        }, 
        {
            "location": "/pages/resources/case-studies/#infographics", 
            "text": "", 
            "title": "Infographics"
        }, 
        {
            "location": "/pages/resources/case-studies/#universal-link-routing", 
            "text": "Confused at how Universal Linking works? Take a look at our  Infographic .", 
            "title": "Universal Link Routing"
        }, 
        {
            "location": "/pages/resources/case-studies/#branch-api-overview", 
            "text": "We have a simplified graphic that showcases what our  API .", 
            "title": "Branch API Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/", 
            "text": "Google Search App Install Ads\n\n\nOverview\n\n\nIf you're running Google AdWords Search Mobile Install Campaigns, you'll find everything you need right here.\n\n\nThis documentation supports the following Google Campaign types:\n\n\n\n\n\n\n\n\nGoogle Campaign\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nSearch Network\n\n\nMobile App Installs\n\n\nApp Only: Install\n\n\n\n\n\n\n\n\nOS Support and Major Differences\n\n\n\n\n\n\n\n\nOperating System\n\n\nSupported by AdWords Search Install Ads?\n\n\nKey Differences\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nYes\n\n\nUses tracking template, must redirect to iOS app store\n\n\nlink\n\n\n\n\n\n\nAndroid\n\n\nYes\n\n\nUses Final URL with ValueTrack Parameters, no tracking template\n\n\nlink\n\n\n\n\n\n\n\n\n\n\nLooking for other Google Ad campaign types? Please check out our \nGoogle Ads Overview guide\n.\n\n\n\n\nSetup\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Google Ads you should integrate the Branch SDK into your app.\n\n\n If you want to deep link from your ads directly to content, you should configure deep link routing.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Google as an Ad Partner\n\n\nIf you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nGoogle AdWords\n.\n\n\n\n\n\n\n\n\n\n\nEnter values for the \nconversion IDs and labels\n. You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out \nGoogle Conversion Setup\n.\n\n\n\n\n\n\nClick the \nSave and Enable\n button in the lower right hand corner.\n\n\n\n\n\n\n\n\n\n\n\n\nGoogle AdWords is now enabled as an ad partner.\n\n\n\n\n\n\nFinally, to create a Google ads link click the \nCreate Google AdWords Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\niOS\n\n\nCreate an Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nApp Install or Engagement\n\n\n\n\n\n\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\n\n\n\n\nConfigure the link with the Ad Format set to \nApp Only\n, the Ad Partner set to \nGoogle Adwords\n, and the Secondary Ad Format set to \nGoogle Search Install iOS\n\n\n\n\n\n\n\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS redirect is set to the desired app being promoted by the ad campaign.\n\n\n\n\n\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure Adwords Ad\n\n\nTo set up a Search Network Mobile App Install Campaign on iOS, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nSelect \nSearch Network only\n on Adwords\n\n\n\n\n\n\n\n\nFor the type of Search campaign select \nMobile app installs\n\n\n\n\n\n\n\n\nContinue setting the campaign and ad group parameters\n\n\n\n\nAd Creation\n\n\n\n\nGrab your app's iTunes App Store URL and fill it into the \nFinal URL\n field of your ad setup\n\n\nExpand the \nAd URL options\n. and place your Branch Ad link from the first section in the \nTracking template\n field. Ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.\n\n\n\n\n\n\n\n\n\n\nBecause the \nFinal URL\n for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the \nTracking template\n configuration.\n\n\n\n\nAndroid\n\n\n\n\nAndroid SDK v2.10.0\n\n\nEnsure the application being promoted by the Ad campaign has the SDK version of \nv2.10.0\n or later. Starting at this version, accurate measurement of the Google Play link referrer is used which is required to support this Adwords campaign type.\n\n\n\n\nCreate an Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nApp Install or Engagement\n\n\n\n\n\n\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\n\n\n\n\nConfigure the link with the Ad Format set to \nApp Only\n, the Ad Partner set to \nGoogle Adwords\n, and the Secondary Ad Format set to \nGoogle Search Install Android\n, while leaving the Campaign field blank\n\n\n\n\n\n\n\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure Adwords Ad\n\n\nTo set up a Search Network Mobile App Install Campaign on Android, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nSelect \nSearch Network only\n on Adwords\n\n\n\n\n\n\n\n\nFor the type of Search campaign select \nMobile app installs\n\n\n\n\n\n\n\n\nContinue setting the campaign and ad group parameters\n\n\n\n\nAd Creation\n\n\n\n\nCopy the final Branch Ad link generated from the previous section. Note: This link should begin with \nhttps://play.google.com\n...\n instead of the normal Branch link domain. Refer to the \nCreate A Branch Ad Link\n section if the link is not in this format to ensure the link creation was setup properly.\n\n\n\n\n\n\n\n\nPaste this Ad link into the \nFinal URL\n field\n\n\n\n\n\n\n\n\nUsing the Final URL\n\n\nGoogle Adwords current implementation of the Search Network Mobile App Install Campaign for Android \nfails to support Tracking Templates\n despite the option to set them up in the Ad creation process.\n\n\nTherefore, a unique Play Store link is used in this setup which corresponds to a Branch link. All install capturing and deep linking of content is still possible through this setup.\n\n\n\n\n\n\nLimited Click Attribution\n\n\nAs of June 2017, due to the current Adwords Search Network Mobile App Install Campaign implementation, Branch's \nAndroid Click attribution\n is only measured when a user installs the mobile application.\n\n\n\n\nView Your Data\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nGoogle Adwords Valuetrack Parameters\n\n\nBranch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's \ncampaign id\n and \nnetwork parameters\n to a Branch link's campaign analytics \nCampaign\n and \nChannel\n tags respectively. Leave these tags blank to have them dynamically mapped.\n\n\nSee below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in \nGoogle's Valuetrack docs\n for more parameters to append.\n\n\n\n\n\n\n\n\nDefault Valuetrack Parameters on Branch Ad links\n\n\nWhat it returns\n\n\n\n\n\n\n\n\n\n\n{campaignid}\n\n\nThe ad's campaign ID\n\n\n\n\n\n\n{adgroupid}\n\n\nThe ad's ad group ID\n\n\n\n\n\n\n{keyword}\n\n\nFor the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.\n\n\n\n\n\n\n{placement}\n\n\nThe content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)\n\n\n\n\n\n\n{network}\n\n\nWhere the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network\n\n\n\n\n\n\n{lpurl}\n\n\nThe final URL of the ad link clicked\n\n\n\n\n\n\n\n\nFAQ / Debugging\n\n\nQ: Why is my advertisement being disapproved on Adwords?\n\n\nA:\n For App Install/Engagement Campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to Google Play or App Store when clicked on a desktop. Please ensure that for the Branch link you're using to track installs, Deepviews are disabled and a desktop redirect is set to either the App / Play store.\n\n\nQ: Why am I seeing inaccurate click attribution values for my Search Network Mobile App Install Campaign on Android?\n\n\nA:\n Google Adwords current implementation of the Search Network Mobile App Install Campaign for Android \nfails to support Tracking Templates\n despite the option to set them up in the Ad creation process.\n\n\nTherefore, a unique Play Store link is used in this setup which corresponds to a Branch link. All install capturing and deep linking of content is still possible through this setup.", 
            "title": "Google Search App Install Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#google-search-app-install-ads", 
            "text": "", 
            "title": "Google Search App Install Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#overview", 
            "text": "If you're running Google AdWords Search Mobile Install Campaigns, you'll find everything you need right here.  This documentation supports the following Google Campaign types:     Google Campaign  Campaign Type/Objective  Branch Ad Format      Search Network  Mobile App Installs  App Only: Install", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#os-support-and-major-differences", 
            "text": "Operating System  Supported by AdWords Search Install Ads?  Key Differences  Documentation      iOS  Yes  Uses tracking template, must redirect to iOS app store  link    Android  Yes  Uses Final URL with ValueTrack Parameters, no tracking template  link      Looking for other Google Ad campaign types? Please check out our  Google Ads Overview guide .", 
            "title": "OS Support and Major Differences"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#setup", 
            "text": "Prerequisites    To track installs from Google Ads you should integrate the Branch SDK into your app.   If you want to deep link from your ads directly to content, you should configure deep link routing.   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#enable-google-as-an-ad-partner", 
            "text": "If you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.   Navigate to the  Partner Management tab .     Search for  Google AdWords .      Enter values for the  conversion IDs and labels . You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out  Google Conversion Setup .    Click the  Save and Enable  button in the lower right hand corner.       Google AdWords is now enabled as an ad partner.    Finally, to create a Google ads link click the  Create Google AdWords Link  button in the top right hand corner.", 
            "title": "Enable Google as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#ios", 
            "text": "", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#create-an-ad-link", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  App Install or Engagement      Under the Define Section, pick a Link Name for later reference    Configure the link with the Ad Format set to  App Only , the Ad Partner set to  Google Adwords , and the Secondary Ad Format set to  Google Search Install iOS      Under the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS redirect is set to the desired app being promoted by the ad campaign.     Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.     Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#configure-adwords-ad", 
            "text": "To set up a Search Network Mobile App Install Campaign on iOS, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available  here .", 
            "title": "Configure Adwords Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#create-your-campaign", 
            "text": "Select  Search Network only  on Adwords     For the type of Search campaign select  Mobile app installs     Continue setting the campaign and ad group parameters", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#ad-creation", 
            "text": "Grab your app's iTunes App Store URL and fill it into the  Final URL  field of your ad setup  Expand the  Ad URL options . and place your Branch Ad link from the first section in the  Tracking template  field. Ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.      Because the  Final URL  for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the  Tracking template  configuration.", 
            "title": "Ad Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#android", 
            "text": "Android SDK v2.10.0  Ensure the application being promoted by the Ad campaign has the SDK version of  v2.10.0  or later. Starting at this version, accurate measurement of the Google Play link referrer is used which is required to support this Adwords campaign type.", 
            "title": "Android"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#create-an-ad-link_1", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  App Install or Engagement      Under the Define Section, pick a Link Name for later reference    Configure the link with the Ad Format set to  App Only , the Ad Partner set to  Google Adwords , and the Secondary Ad Format set to  Google Search Install Android , while leaving the Campaign field blank      Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.     Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#configure-adwords-ad_1", 
            "text": "To set up a Search Network Mobile App Install Campaign on Android, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available  here .", 
            "title": "Configure Adwords Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#create-your-campaign_1", 
            "text": "Select  Search Network only  on Adwords     For the type of Search campaign select  Mobile app installs     Continue setting the campaign and ad group parameters", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#ad-creation_1", 
            "text": "Copy the final Branch Ad link generated from the previous section. Note: This link should begin with  https://play.google.com ...  instead of the normal Branch link domain. Refer to the  Create A Branch Ad Link  section if the link is not in this format to ensure the link creation was setup properly.     Paste this Ad link into the  Final URL  field     Using the Final URL  Google Adwords current implementation of the Search Network Mobile App Install Campaign for Android  fails to support Tracking Templates  despite the option to set them up in the Ad creation process.  Therefore, a unique Play Store link is used in this setup which corresponds to a Branch link. All install capturing and deep linking of content is still possible through this setup.    Limited Click Attribution  As of June 2017, due to the current Adwords Search Network Mobile App Install Campaign implementation, Branch's  Android Click attribution  is only measured when a user installs the mobile application.", 
            "title": "Ad Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#view-your-data", 
            "text": "The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#google-adwords-valuetrack-parameters", 
            "text": "Branch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's  campaign id  and  network parameters  to a Branch link's campaign analytics  Campaign  and  Channel  tags respectively. Leave these tags blank to have them dynamically mapped.  See below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in  Google's Valuetrack docs  for more parameters to append.     Default Valuetrack Parameters on Branch Ad links  What it returns      {campaignid}  The ad's campaign ID    {adgroupid}  The ad's ad group ID    {keyword}  For the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.    {placement}  The content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)    {network}  Where the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network    {lpurl}  The final URL of the ad link clicked", 
            "title": "Google Adwords Valuetrack Parameters"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-install-ads/#faq-debugging", 
            "text": "Q: Why is my advertisement being disapproved on Adwords?  A:  For App Install/Engagement Campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to Google Play or App Store when clicked on a desktop. Please ensure that for the Branch link you're using to track installs, Deepviews are disabled and a desktop redirect is set to either the App / Play store.  Q: Why am I seeing inaccurate click attribution values for my Search Network Mobile App Install Campaign on Android?  A:  Google Adwords current implementation of the Search Network Mobile App Install Campaign for Android  fails to support Tracking Templates  despite the option to set them up in the Ad creation process.  Therefore, a unique Play Store link is used in this setup which corresponds to a Branch link. All install capturing and deep linking of content is still possible through this setup.", 
            "title": "FAQ / Debugging"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/", 
            "text": "Google Search App Engagement Ads\n\n\nOverview\n\n\nIf you're running Google AdWords Search Mobile Engagement Campaigns, you'll find everything you need right here.\n\n\nThis documentation supports the following Google Campaign types:\n\n\n\n\n\n\n\n\nGoogle Campaign\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nSearch Network\n\n\nMobile App Engagement\n\n\nApp Only: Engagement\n\n\n\n\n\n\n\n\nOS Support and Major Differences\n\n\n\n\n\n\n\n\nOperating System\n\n\nSupported by AdWords Search Engagement Ads?\n\n\nKey differences\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nNo\n\n\nThe Search Mobile Engagement Campaign type currently does not support iOS\n\n\nN/A\n\n\n\n\n\n\nAndroid\n\n\nYes\n\n\nUses Final URL with ValueTrack Parameters, no tracking template\n\n\nlink\n\n\n\n\n\n\n\n\n\n\nLooking for other Google Ad campaign types? Please check out our \nGoogle Ads Overview guide\n.\n\n\n\n\nSetup\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Google Ads you should \nintegrate the Branch SDK\n into your app.\n\n\n If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n Ensure you have entered your Android application's URI scheme under \nLink Settings \n Android URI Scheme\n in your Branch dashboard.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Google as an Ad Partner\n\n\nIf you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nGoogle AdWords\n.\n\n\n\n\n\n\n\n\n\n\nEnter values for the \nconversion IDs and labels\n. You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out \nGoogle Conversion Setup\n.\n\n\n\n\n\n\nClick the \nSave and Enable\n button in the lower right hand corner.\n\n\n\n\n\n\n\n\n\n\n\n\nGoogle AdWords is now enabled as an ad partner.\n\n\n\n\n\n\nFinally, to create a Google ads link click the \nCreate Google AdWords Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\nAndroid\n\n\nCreate an Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nApp Install or Engagement\n\n\n\n\n\n\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\n\n\n\n\nConfigure the link with the Ad Format set to \nApp Only\n, the Ad Partner set to \nGoogle Adwords\n, and the Secondary Ad Format set to \nGoogle Search App Engagement Android\n.\n\n\n\n\n\n\n\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure an Ad\n\n\nTo set up a Search Network Mobile App Engagement Campaign on Android, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nSelect \nSearch Network only\n on Adwords\n\n\n\n\n\n\n\n\nFor the type of Search campaign select \nMobile app engagement\n\n\n\n\n\n\n\n\nContinue setting the campaign and ad group parameters\n\n\n\n\nAd Creation\n\n\n\n\nCopy the Branch Ad link from the first section and ensure that it is in the format \nApp URI://open?link_click_id=link-...\n. Refer to the \nCreate A Branch Ad Link\n section if the link is not in this format to ensure the link creation was setup properly.\n\n\n\n\n\n\n\n\n\n\nIn the Ad creator, locate the \nScheme\n field and enter the scheme portion of the Branch Ad link. This should be the portion of the link before the \n://\n symbol.\n\n\n\n\n\n\nNow locate the \nHost and path\n field and enter the rest of your Branch Ad link following the \n://\n symbol.\n\n\n\n\n\n\n\n\nView Your Data\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nFAQ / Debugging\n\n\nQ: Why is my advertisement being disapproved on Adwords?\n\n\nA:\n For App Install/Engagement Campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to Google Play or App Store when clicked on a desktop. Please ensure that for the Branch link you're using to track installs, Deepviews are disabled and a desktop redirect is set to either the App / Play store.\n\n\nQ: Can I run a Adwords Search Network Mobile Engagement Campaign for iOS?\n\n\nA:\n As of June 2017, Google Adwords currently does not support this campaign type. We'll update our documentation if the campaign type gets supported in the future!\n\n\nQ: How can I test the Branch Ad link?\n\n\nA:\n On the Adwords Ad creator page or the when editing your ad, locate and click the \nTest this app URI\n button. With an Android phone that has your mobile app installed, use a QR code reader application to read the generated QR code to simulate a click on your Ad. Now you can verify that your Branch Ad link works and deep linked data is passed through to the app.", 
            "title": "Google Search App Engagement Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#google-search-app-engagement-ads", 
            "text": "", 
            "title": "Google Search App Engagement Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#overview", 
            "text": "If you're running Google AdWords Search Mobile Engagement Campaigns, you'll find everything you need right here.  This documentation supports the following Google Campaign types:     Google Campaign  Campaign Type/Objective  Branch Ad Format      Search Network  Mobile App Engagement  App Only: Engagement", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#os-support-and-major-differences", 
            "text": "Operating System  Supported by AdWords Search Engagement Ads?  Key differences  Documentation      iOS  No  The Search Mobile Engagement Campaign type currently does not support iOS  N/A    Android  Yes  Uses Final URL with ValueTrack Parameters, no tracking template  link      Looking for other Google Ad campaign types? Please check out our  Google Ads Overview guide .", 
            "title": "OS Support and Major Differences"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#setup", 
            "text": "Prerequisites    To track installs from Google Ads you should  integrate the Branch SDK  into your app.   If you want to deep link from your ads directly to content, you should  configure deep link routing .   Ensure you have entered your Android application's URI scheme under  Link Settings   Android URI Scheme  in your Branch dashboard.   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#enable-google-as-an-ad-partner", 
            "text": "If you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.   Navigate to the  Partner Management tab .     Search for  Google AdWords .      Enter values for the  conversion IDs and labels . You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out  Google Conversion Setup .    Click the  Save and Enable  button in the lower right hand corner.       Google AdWords is now enabled as an ad partner.    Finally, to create a Google ads link click the  Create Google AdWords Link  button in the top right hand corner.", 
            "title": "Enable Google as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#android", 
            "text": "", 
            "title": "Android"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#create-an-ad-link", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  App Install or Engagement      Under the Define Section, pick a Link Name for later reference    Configure the link with the Ad Format set to  App Only , the Ad Partner set to  Google Adwords , and the Secondary Ad Format set to  Google Search App Engagement Android .      Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.     Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#configure-an-ad", 
            "text": "To set up a Search Network Mobile App Engagement Campaign on Android, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#create-your-campaign", 
            "text": "Select  Search Network only  on Adwords     For the type of Search campaign select  Mobile app engagement     Continue setting the campaign and ad group parameters", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#ad-creation", 
            "text": "Copy the Branch Ad link from the first section and ensure that it is in the format  App URI://open?link_click_id=link-... . Refer to the  Create A Branch Ad Link  section if the link is not in this format to ensure the link creation was setup properly.      In the Ad creator, locate the  Scheme  field and enter the scheme portion of the Branch Ad link. This should be the portion of the link before the  ://  symbol.    Now locate the  Host and path  field and enter the rest of your Branch Ad link following the  ://  symbol.", 
            "title": "Ad Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#view-your-data", 
            "text": "The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-search-engagement-ads/#faq-debugging", 
            "text": "Q: Why is my advertisement being disapproved on Adwords?  A:  For App Install/Engagement Campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to Google Play or App Store when clicked on a desktop. Please ensure that for the Branch link you're using to track installs, Deepviews are disabled and a desktop redirect is set to either the App / Play store.  Q: Can I run a Adwords Search Network Mobile Engagement Campaign for iOS?  A:  As of June 2017, Google Adwords currently does not support this campaign type. We'll update our documentation if the campaign type gets supported in the future!  Q: How can I test the Branch Ad link?  A:  On the Adwords Ad creator page or the when editing your ad, locate and click the  Test this app URI  button. With an Android phone that has your mobile app installed, use a QR code reader application to read the generated QR code to simulate a click on your Ad. Now you can verify that your Branch Ad link works and deep linked data is passed through to the app.", 
            "title": "FAQ / Debugging"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/", 
            "text": "Google Search App Install Ads\n\n\nOverview\n\n\nIf you're running Google AdWords Display Mobile Install Campaigns, you'll find everything you need right here.\n\n\nThis documentation supports the following Google Campaign types:\n\n\n\n\n\n\n\n\nGoogle Campaign\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nDisplay Network\n\n\nMobile App Installs\n\n\nApp Only: Install\n\n\n\n\n\n\n\n\nOS Support and Major Differences\n\n\n\n\n\n\n\n\nOperating System\n\n\nSupported by AdWords Display Install Ads?\n\n\nKey Differences\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nYes\n\n\nUses tracking template, must redirect to iOS app store\n\n\nlink\n\n\n\n\n\n\nAndroid\n\n\nYes\n\n\nUses tracking template, must redirect to Google Play store\n\n\nlink\n\n\n\n\n\n\n\n\n\n\nLooking for other Google Ad campaign types? Please check out our \nGoogle Ads Overview guide\n.\n\n\n\n\nSetup\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Google Ads you should \nintegrate the Branch SDK\n into your app.\n\n\n If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Google as an Ad Partner\n\n\nIf you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nGoogle AdWords\n.\n\n\n\n\n\n\n\n\n\n\nEnter values for the \nconversion IDs and labels\n. You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out \nGoogle Conversion Setup\n.\n\n\n\n\n\n\nClick the \nSave and Enable\n button in the lower right hand corner.\n\n\n\n\n\n\n\n\n\n\n\n\nGoogle AdWords is now enabled as an ad partner.\n\n\n\n\n\n\nFinally, to create a Google ads link click the \nCreate Google AdWords Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\niOS\n\n\nCreate a Branch Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nApp Install or Engagement\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\nConfigure the link with the Ad Format set to \nApp Only\n, the Ad Partner set to \nGoogle Adwords\n, and the Secondary Ad Format set to \nGoogle Display Install iOS\n.\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS redirect is set to the desired app being promoted by the ad campaign.\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure an Ad\n\n\nTo set up a Display Network Mobile App Install Campaign on iOS, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nSelect \nDisplay Network only\n on Adwords\n\n\n\nFor the type of Display campaign select \nInstall your mobile app\n\n\n\n\nContinue setting the campaign and ad group parameters\n\n\n\n\nAd Creation\n\n\n\n\nGrab your app's iTunes App Store URL and fill it into the \nFinal URL\n field of the ad setup.\n\n\nExpand the \nAd URL options\n and place your Branch Ad link from the first section in the \nTracking template\n box. Ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.\n\n\n\n\n\n\n\n\n\n\nBecause the \nFinal URL\n for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the \nTracking template\n configuration.\n\n\n\n\nAndroid\n\n\nCreate a Branch Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nApp Install or Engagement\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\nConfigure the link with the Ad Format set to \nApp Only\n, the Ad Partner set to \nGoogle Adwords\n, and the Secondary Ad Format set to \nGoogle Display Install Android\n.\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the Android redirect is set to the desired app being promoted by the ad campaign.\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure an Ad\n\n\nTo set up a Display Network Mobile App Install Campaign on Android, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nSelect \nDisplay Network only\n on Adwords\n\n\n\nFor the type of Display campaign select \nInstall your mobile app\n\n\n\n\nContinue setting the campaign and ad group parameters\n\n\n\n\nAd Creation\n\n\n\n\nGrab your app's Google Play Store URL and fill it into the \nFinal URL\n field of your ad setup\n\n\nExpand the \nAd URL options\n. and place your Branch Ad link from the first section in the \nTracking template\n box. Ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.\n\n\n\n\n\n\n\n\n\n\nBecause the \nFinal URL\n for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the \nTracking template\n configuration.\n\n\n\n\nView Your Data\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nGoogle Adwords Valuetrack Parameters\n\n\nBranch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's \ncampaign id\n and \nnetwork parameters\n to a Branch link's campaign analytics \nCampaign\n and \nChannel\n tags respectively. Leave these tags blank to have them dynamically mapped.\n\n\nSee below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in \nGoogle's Valuetrack docs\n for more parameters to append.\n\n\n\n\n\n\n\n\nDefault Valuetrack Parameters on Branch Ad links\n\n\nWhat it returns\n\n\n\n\n\n\n\n\n\n\n{campaignid}\n\n\nThe ad's campaign ID\n\n\n\n\n\n\n{adgroupid}\n\n\nThe ad's ad group ID\n\n\n\n\n\n\n{keyword}\n\n\nFor the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.\n\n\n\n\n\n\n{placement}\n\n\nThe content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)\n\n\n\n\n\n\n{network}\n\n\nWhere the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network\n\n\n\n\n\n\n{lpurl}\n\n\nThe final URL of the ad link clicked\n\n\n\n\n\n\n\n\nFAQ / Debugging\n\n\nQ: Why is my advertisement being disapproved on Adwords?\n\n\nA:\n For App Install/Engagement Campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to Google Play or App Store when clicked on a desktop. Please ensure that for the Branch link you're using to track installs, Deepviews are disabled and a desktop redirect is set to either the App / Play store.", 
            "title": "Google Display App Install Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#google-search-app-install-ads", 
            "text": "", 
            "title": "Google Search App Install Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#overview", 
            "text": "If you're running Google AdWords Display Mobile Install Campaigns, you'll find everything you need right here.  This documentation supports the following Google Campaign types:     Google Campaign  Campaign Type/Objective  Branch Ad Format      Display Network  Mobile App Installs  App Only: Install", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#os-support-and-major-differences", 
            "text": "Operating System  Supported by AdWords Display Install Ads?  Key Differences  Documentation      iOS  Yes  Uses tracking template, must redirect to iOS app store  link    Android  Yes  Uses tracking template, must redirect to Google Play store  link      Looking for other Google Ad campaign types? Please check out our  Google Ads Overview guide .", 
            "title": "OS Support and Major Differences"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#setup", 
            "text": "Prerequisites    To track installs from Google Ads you should  integrate the Branch SDK  into your app.   If you want to deep link from your ads directly to content, you should  configure deep link routing .   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#enable-google-as-an-ad-partner", 
            "text": "If you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.   Navigate to the  Partner Management tab .     Search for  Google AdWords .      Enter values for the  conversion IDs and labels . You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out  Google Conversion Setup .    Click the  Save and Enable  button in the lower right hand corner.       Google AdWords is now enabled as an ad partner.    Finally, to create a Google ads link click the  Create Google AdWords Link  button in the top right hand corner.", 
            "title": "Enable Google as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#ios", 
            "text": "", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#create-a-branch-ad-link", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  App Install or Engagement   Under the Define Section, pick a Link Name for later reference  Configure the link with the Ad Format set to  App Only , the Ad Partner set to  Google Adwords , and the Secondary Ad Format set to  Google Display Install iOS .  Under the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS redirect is set to the desired app being promoted by the ad campaign.  Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.    Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.    Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create a Branch Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#configure-an-ad", 
            "text": "To set up a Display Network Mobile App Install Campaign on iOS, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#create-your-campaign", 
            "text": "Select  Display Network only  on Adwords  For the type of Display campaign select  Install your mobile app   Continue setting the campaign and ad group parameters", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#ad-creation", 
            "text": "Grab your app's iTunes App Store URL and fill it into the  Final URL  field of the ad setup.  Expand the  Ad URL options  and place your Branch Ad link from the first section in the  Tracking template  box. Ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.      Because the  Final URL  for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the  Tracking template  configuration.", 
            "title": "Ad Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#android", 
            "text": "", 
            "title": "Android"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#create-a-branch-ad-link_1", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  App Install or Engagement   Under the Define Section, pick a Link Name for later reference  Configure the link with the Ad Format set to  App Only , the Ad Partner set to  Google Adwords , and the Secondary Ad Format set to  Google Display Install Android .  Under the Configure Options tab, navigate to the Redirects sub section and ensure that the Android redirect is set to the desired app being promoted by the ad campaign.  Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.    Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.    Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create a Branch Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#configure-an-ad_1", 
            "text": "To set up a Display Network Mobile App Install Campaign on Android, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#create-your-campaign_1", 
            "text": "Select  Display Network only  on Adwords  For the type of Display campaign select  Install your mobile app   Continue setting the campaign and ad group parameters", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#ad-creation_1", 
            "text": "Grab your app's Google Play Store URL and fill it into the  Final URL  field of your ad setup  Expand the  Ad URL options . and place your Branch Ad link from the first section in the  Tracking template  box. Ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.      Because the  Final URL  for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the  Tracking template  configuration.", 
            "title": "Ad Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#view-your-data", 
            "text": "The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#google-adwords-valuetrack-parameters", 
            "text": "Branch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's  campaign id  and  network parameters  to a Branch link's campaign analytics  Campaign  and  Channel  tags respectively. Leave these tags blank to have them dynamically mapped.  See below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in  Google's Valuetrack docs  for more parameters to append.     Default Valuetrack Parameters on Branch Ad links  What it returns      {campaignid}  The ad's campaign ID    {adgroupid}  The ad's ad group ID    {keyword}  For the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.    {placement}  The content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)    {network}  Where the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network    {lpurl}  The final URL of the ad link clicked", 
            "title": "Google Adwords Valuetrack Parameters"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-install-ads/#faq-debugging", 
            "text": "Q: Why is my advertisement being disapproved on Adwords?  A:  For App Install/Engagement Campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to Google Play or App Store when clicked on a desktop. Please ensure that for the Branch link you're using to track installs, Deepviews are disabled and a desktop redirect is set to either the App / Play store.", 
            "title": "FAQ / Debugging"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/", 
            "text": "Overview\n\n\nIf you're running Google AdWords Display Mobile Engagement Campaigns, you'll find everything you need right here.\n\n\nThis documentation supports the following Google Campaign types:\n\n\n\n\n\n\n\n\nGoogle Campaign\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nDisplay Network\n\n\nMobile App Engagement\n\n\nApp Only: Engagement\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOperating System\n\n\nSupported by AdWords Display Engagement Ads?\n\n\nKey Differences\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nYes\n\n\nUses tracking template, must redirect to iOS app store\n\n\nlink\n\n\n\n\n\n\nAndroid\n\n\nYes\n\n\nUses tracking template, must redirect to Google Play store\n\n\nlink\n\n\n\n\n\n\n\n\n\n\nLooking for other Google Ad campaign types? Please check out our \nGoogle Ads Overview guide\n.\n\n\n\n\nSetup\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Google Ads you should \nintegrate the Branch SDK\n into your app.\n\n\n If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Google as an Ad Partner\n\n\nIf you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nGoogle AdWords\n.\n\n\n\n\n\n\n\n\n\n\nEnter values for the \nconversion IDs and labels\n. You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out \nGoogle Conversion Setup\n.\n\n\n\n\n\n\nClick the \nSave and Enable\n button in the lower right hand corner.\n\n\n\n\n\n\n\n\n\n\n\n\nGoogle AdWords is now enabled as an ad partner.\n\n\n\n\n\n\nFinally, to create a Google ads link click the \nCreate Google AdWords Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\niOS\n\n\nCreate an Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nApp Install or Engagement\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\nConfigure the link with the Ad Format set to \nApp Only\n, the Ad Partner set to \nGoogle Adwords\n, and the Secondary Ad Format set to \nGoogle Display App Engagement iOS\n.\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS redirect is set to the desired app being promoted by the ad campaign.\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure an Ad\n\n\nTo set up a Display Network Mobile App Engagement Campaign on iOS, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\n\n\nSelect \nDisplay Network only\n on Adwords\n\n\n\n\n\n\n\n\nFor the type of Display campaign select \nEngage with your mobile app\n\n\n\n\n\n\n\n\nContinue setting the campaign and ad group parameters\n\n\n\n\n\n\nAd Creation\n\n\n\n\nCopy your Branch Ad Link from the last section and ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.\n\n\nPaste the link into the \nDirect link\n field of the ad creator\n\n\n\n\n\n\n\n\nAndroid\n\n\nCreate an Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nApp Install or Engagement\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\nConfigure the link with the Ad Format set to \nApp Only\n, the Ad Partner set to \nGoogle Adwords\n, and the Secondary Ad Format set to \nGoogle Display App Engagement Android\n.\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the Android redirect is set to the desired app being promoted by the ad campaign.\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure an Ad\n\n\nTo set up a Display Network Mobile App Install Campaign on iOS, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\n\n\nSelect \nDisplay Network only\n on Adwords\n\n\n\n\n\n\n\n\nFor the type of Display campaign select \nEngage with your mobile app\n\n\n\n\n\n\n\n\nContinue setting the campaign and ad group parameters\n\n\n\n\n\n\nConfigure an Ad\n\n\n\n\nCopy your Branch Ad Link from the last section and ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.\n\n\nPaste the link into the \nDirect link\n field of the ad creator\n\n\n\n\n\n\n\n\nView Your Data\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nGoogle Adwords Valuetrack Parameters\n\n\nBranch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's \ncampaign id\n and \nnetwork parameters\n to a Branch link's campaign analytics \nCampaign\n and \nChannel\n tags respectively. Leave these tags blank to have them dynamically mapped.\n\n\nSee below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in \nGoogle's Valuetrack docs\n for more parameters to append.\n\n\n\n\n\n\n\n\nDefault Valuetrack Parameters on Branch Ad links\n\n\nWhat it returns\n\n\n\n\n\n\n\n\n\n\n{campaignid}\n\n\nThe ad's campaign ID\n\n\n\n\n\n\n{adgroupid}\n\n\nThe ad's ad group ID\n\n\n\n\n\n\n{keyword}\n\n\nFor the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.\n\n\n\n\n\n\n{placement}\n\n\nThe content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)\n\n\n\n\n\n\n{network}\n\n\nWhere the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network\n\n\n\n\n\n\n{lpurl}\n\n\nThe final URL of the ad link clicked\n\n\n\n\n\n\n\n\nFAQ / Debugging\n\n\nQ: Why is my advertisement being disapproved on Adwords?\n\n\nA:\n For App Install/Engagement Campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to Google Play or App Store when clicked on a desktop. Please ensure that for the Branch link you're using to track installs, Deepviews are disabled and a desktop redirect is set to either the App / Play store.", 
            "title": "Google Display App Engagement Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#overview", 
            "text": "If you're running Google AdWords Display Mobile Engagement Campaigns, you'll find everything you need right here.  This documentation supports the following Google Campaign types:     Google Campaign  Campaign Type/Objective  Branch Ad Format      Display Network  Mobile App Engagement  App Only: Engagement        Operating System  Supported by AdWords Display Engagement Ads?  Key Differences  Documentation      iOS  Yes  Uses tracking template, must redirect to iOS app store  link    Android  Yes  Uses tracking template, must redirect to Google Play store  link      Looking for other Google Ad campaign types? Please check out our  Google Ads Overview guide .", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#setup", 
            "text": "Prerequisites    To track installs from Google Ads you should  integrate the Branch SDK  into your app.   If you want to deep link from your ads directly to content, you should  configure deep link routing .   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#enable-google-as-an-ad-partner", 
            "text": "If you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.   Navigate to the  Partner Management tab .     Search for  Google AdWords .      Enter values for the  conversion IDs and labels . You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out  Google Conversion Setup .    Click the  Save and Enable  button in the lower right hand corner.       Google AdWords is now enabled as an ad partner.    Finally, to create a Google ads link click the  Create Google AdWords Link  button in the top right hand corner.", 
            "title": "Enable Google as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#ios", 
            "text": "", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#create-an-ad-link", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  App Install or Engagement   Under the Define Section, pick a Link Name for later reference  Configure the link with the Ad Format set to  App Only , the Ad Partner set to  Google Adwords , and the Secondary Ad Format set to  Google Display App Engagement iOS .  Under the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS redirect is set to the desired app being promoted by the ad campaign.  Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.    Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.    Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#configure-an-ad", 
            "text": "To set up a Display Network Mobile App Engagement Campaign on iOS, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#create-your-campaign", 
            "text": "Select  Display Network only  on Adwords     For the type of Display campaign select  Engage with your mobile app     Continue setting the campaign and ad group parameters", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#ad-creation", 
            "text": "Copy your Branch Ad Link from the last section and ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.  Paste the link into the  Direct link  field of the ad creator", 
            "title": "Ad Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#android", 
            "text": "", 
            "title": "Android"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#create-an-ad-link_1", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  App Install or Engagement   Under the Define Section, pick a Link Name for later reference  Configure the link with the Ad Format set to  App Only , the Ad Partner set to  Google Adwords , and the Secondary Ad Format set to  Google Display App Engagement Android .  Under the Configure Options tab, navigate to the Redirects sub section and ensure that the Android redirect is set to the desired app being promoted by the ad campaign.  Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.    Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.    Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#configure-an-ad_1", 
            "text": "To set up a Display Network Mobile App Install Campaign on iOS, you will need to first create your campaign and then setup a tracking template on the ad. Adwords campaign creation documentation is available  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#create-your-campaign_1", 
            "text": "Select  Display Network only  on Adwords     For the type of Display campaign select  Engage with your mobile app     Continue setting the campaign and ad group parameters", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#configure-an-ad_2", 
            "text": "Copy your Branch Ad Link from the last section and ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.  Paste the link into the  Direct link  field of the ad creator", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#view-your-data", 
            "text": "The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#google-adwords-valuetrack-parameters", 
            "text": "Branch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's  campaign id  and  network parameters  to a Branch link's campaign analytics  Campaign  and  Channel  tags respectively. Leave these tags blank to have them dynamically mapped.  See below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in  Google's Valuetrack docs  for more parameters to append.     Default Valuetrack Parameters on Branch Ad links  What it returns      {campaignid}  The ad's campaign ID    {adgroupid}  The ad's ad group ID    {keyword}  For the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.    {placement}  The content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)    {network}  Where the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network    {lpurl}  The final URL of the ad link clicked", 
            "title": "Google Adwords Valuetrack Parameters"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-display-engagement-ads/#faq-debugging", 
            "text": "Q: Why is my advertisement being disapproved on Adwords?  A:  For App Install/Engagement Campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to Google Play or App Store when clicked on a desktop. Please ensure that for the Branch link you're using to track installs, Deepviews are disabled and a desktop redirect is set to either the App / Play store.", 
            "title": "FAQ / Debugging"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-uac/", 
            "text": "Google Universal App Campaigns\n\n\nOverview\n\n\nIf you're running Universal App Campaigns, Branch can track attributions from Google and send across events.\n\n\nBranch uses Google Adwords' server to server \nApp Conversion Confirmation\n for attribution data which reports on conversion events. Therefore, we only collect \ninstall (conversion) data\n. Click data is not supported for this campaign type.\n\n\n\n\nNew AdWords UI\n\n\nAdWords has rolled out a new user interface and functionality. If you are on the old AdWords experience, please switch to the new experience.\n\n\n\n\nSetup (New AdWords UI)\n\n\nFollow the instructions list \nhere\n. Once this is complete, you can run Universal App Campaigns using the new interface.\n\n\n\n\nDeep linking not supported with new integration\n\n\nUnfortunately, because the new integration with Univeral App Campaigns is truly linkless, Branch cannot support deep linking from this campaign style.\n\n\n\n\nData\n\n\nWith the new set up, here's how the data is mapped.\n\n\n\n\n\n\n\n\nGoogle Data\n\n\nBranch Data\n\n\n\n\n\n\n\n\n\n\n\n\nCampaign ID\n\n\n~campaign_id\n\n\n\n\n\n\n\n\nCampaign Name\n\n\n~campaign\n\n\n\n\n\n\n\n\nad_type\n\n\n~ad_type\n\n\n\n\n\n\n\n\nnetwork_type\n\n\n~channel\n\n\n\n\n\n\n\n\nnetwork_subtype\n\n\n~secondary_publisher\n\n\n\n\n\n\n\n\n\n\nEvents\n\n\nBranch currently supports the ability to send installs, opens, and purchases. In the near future, we will support the ability to send all custom events tracked through the Branch SDK. \n\n\nTroubleshooting\n\n\nFAQ / Debugging\n\n\nQ: I'm not seeing any click data for my campaign.\n\n\nA:\n Branch uses Google Adwords' server to server \nApp Conversion Confirmation\n for attribution data which reports on conversion events. Therefore, we only collect \ninstall (conversion) data\n. Click data is not supported for this campaign type.\n\n\nQ: I'm getting discrepancy between conversion counts in Branch and Google Adwords\n\n\nA:\n While we should always expect around a 5% discrepancy due to time zone differences and the like, if you are seeing significant discrepancies, it could be an indication of a broader problem.\n\n\nQ: There's an issue with iOS 10 and Limit Ad Tracking\n\n\nA:\n In iOS 10, Apple broke the ability for app developers to collect the \nIDFA\n if the user had enabled \nLimit Ad Tracking\n. In this case, Branch and Google cannot compare notes to see who drove the install. This will account for about 15% discrepancy in counts across both platforms, where Branch's tracked installs will be lower.\n\n\nQ: I'm not seeing any data coming through for the Universal App Campaign?\n\n\nA:\n If you see absolutely 0 data coming through from your integration, it's possible that you're not collecting Google Advertising ID (GAID) on Android or IDFA on iOS.\n\n\n\n\niOS: Add the AdSupport.framework.\n\n\nAndroid: Add Google Play Services so that we can collect GAID.\n\n\n\n\nQ: There seems to be a discrepancy between the Install and Opens values?\n\n\nA:\n One discrepancy root cause we've seen before is the scenario where Branch will classify an install as an 'open'. We remember the history of a particular user via their IDFA (in addition to using a few other methods) and will detect whether the user is actually a new user or a returning user who had previously uninstalled your app. Facebook doesn't do this.\n\n\nWe've seen Google classify 're-installs' as fresh installs, where Branch will correctly classify them as 're-opens'. If you're comparing the raw install numbers on Branch, and ignoring the 're-opens', it's possible you'll see a discrepancy. To check sum up the 'installs' and 'reopens' for the given link and compare it to Google's total installs.\n\n\nIf it's close, you know that this is the root cause.", 
            "title": "Google Universal App Campaigns"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-uac/#google-universal-app-campaigns", 
            "text": "", 
            "title": "Google Universal App Campaigns"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-uac/#overview", 
            "text": "If you're running Universal App Campaigns, Branch can track attributions from Google and send across events.  Branch uses Google Adwords' server to server  App Conversion Confirmation  for attribution data which reports on conversion events. Therefore, we only collect  install (conversion) data . Click data is not supported for this campaign type.   New AdWords UI  AdWords has rolled out a new user interface and functionality. If you are on the old AdWords experience, please switch to the new experience.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-uac/#setup-new-adwords-ui", 
            "text": "Follow the instructions list  here . Once this is complete, you can run Universal App Campaigns using the new interface.   Deep linking not supported with new integration  Unfortunately, because the new integration with Univeral App Campaigns is truly linkless, Branch cannot support deep linking from this campaign style.", 
            "title": "Setup (New AdWords UI)"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-uac/#data", 
            "text": "With the new set up, here's how the data is mapped.     Google Data  Branch Data       Campaign ID  ~campaign_id     Campaign Name  ~campaign     ad_type  ~ad_type     network_type  ~channel     network_subtype  ~secondary_publisher", 
            "title": "Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-uac/#events", 
            "text": "Branch currently supports the ability to send installs, opens, and purchases. In the near future, we will support the ability to send all custom events tracked through the Branch SDK.", 
            "title": "Events"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-uac/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-uac/#faq-debugging", 
            "text": "Q: I'm not seeing any click data for my campaign.  A:  Branch uses Google Adwords' server to server  App Conversion Confirmation  for attribution data which reports on conversion events. Therefore, we only collect  install (conversion) data . Click data is not supported for this campaign type.  Q: I'm getting discrepancy between conversion counts in Branch and Google Adwords  A:  While we should always expect around a 5% discrepancy due to time zone differences and the like, if you are seeing significant discrepancies, it could be an indication of a broader problem.  Q: There's an issue with iOS 10 and Limit Ad Tracking  A:  In iOS 10, Apple broke the ability for app developers to collect the  IDFA  if the user had enabled  Limit Ad Tracking . In this case, Branch and Google cannot compare notes to see who drove the install. This will account for about 15% discrepancy in counts across both platforms, where Branch's tracked installs will be lower.  Q: I'm not seeing any data coming through for the Universal App Campaign?  A:  If you see absolutely 0 data coming through from your integration, it's possible that you're not collecting Google Advertising ID (GAID) on Android or IDFA on iOS.   iOS: Add the AdSupport.framework.  Android: Add Google Play Services so that we can collect GAID.   Q: There seems to be a discrepancy between the Install and Opens values?  A:  One discrepancy root cause we've seen before is the scenario where Branch will classify an install as an 'open'. We remember the history of a particular user via their IDFA (in addition to using a few other methods) and will detect whether the user is actually a new user or a returning user who had previously uninstalled your app. Facebook doesn't do this.  We've seen Google classify 're-installs' as fresh installs, where Branch will correctly classify them as 're-opens'. If you're comparing the raw install numbers on Branch, and ignoring the 're-opens', it's possible you'll see a discrepancy. To check sum up the 'installs' and 'reopens' for the given link and compare it to Google's total installs.  If it's close, you know that this is the root cause.", 
            "title": "FAQ / Debugging"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/", 
            "text": "Google Search Network Ads\n\n\nOverview\n\n\nIf you're running Google AdWords Search Network ads, you'll find everything you need right here.\n\n\nThis documentation supports the following Google Campaign types:\n\n\n\n\n\n\n\n\nGoogle Campaign\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nSearch Network\n\n\nStandard\n\n\nCross-platform Search\n\n\n\n\n\n\nSearch Network\n\n\nDynamic Search Ads\n\n\nCross-platform Search\n\n\n\n\n\n\n\n\nOS Support and Major Differences\n\n\n\n\n\n\n\n\nOperating System\n\n\nSupported by AdWords Search Network Ads?\n\n\nKey Differences\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nWeb\n\n\nYes\n\n\nUses tracking template, must redirect to to Final Website\n\n\nlink\n\n\n\n\n\n\niOS\n\n\nYes\n\n\nUses tracking template, must redirect to iOS app store\n\n\nlink\n\n\n\n\n\n\nAndroid\n\n\nYes\n\n\nUses tracking template, must redirect to Google Play store\n\n\nlink\n\n\n\n\n\n\n\n\n\n\nLooking for other Google Ad campaign types? Please check out our \nGoogle Ads Overview guide\n.\n\n\n\n\nSetup\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Google Ads you should \nintegrate the Branch SDK\n into your app.\n\n\n If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Google as an Ad Partner\n\n\nIf you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nGoogle AdWords\n.\n\n\n\n\n\n\n\n\n\n\nEnter values for the \nconversion IDs and labels\n. You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out \nGoogle Conversion Setup\n.\n\n\n\n\n\n\nClick the \nSave and Enable\n button in the lower right hand corner.\n\n\n\n\n\n\n\n\n\n\n\n\nGoogle AdWords is now enabled as an ad partner.\n\n\n\n\n\n\nFinally, to create a Google ads link click the \nCreate Google AdWords Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\nStandard Search Ads\n\n\nCreate an Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nCreate Search Link\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\nConfigure the link with the Ad Format set to \nSearch\n and the Ad Partner set to \nGoogle Adwords\n.\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the Web redirect is set to the desired final website promoted by the ad campaign.\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure an Ad\n\n\nTo set up a Search Network Campaign, you will need to first create your campaign and then setup a tracking template on the ad. Additional Adwords information on Search Network campaigns can be found \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nSelect \nSearch Network only\n on Adwords\n\n\n\nSelect the \nStandard\n campaign type\n\n\n\nContinue setting the campaign and ad group parameters\n\n\n\n\nAd Creation\n\n\n\n\nFor Standard Search Ads first copy your generated Branch Ad link from the previous section.\n\n\nIn the ad editor, locate the \nAd URL options (advanced)\n section and expand it. Now paste your link into the \nTracking Template\n field.\n\nNote: The \nAd URL options (advanced)\n may not be available in the campaign set up procedure. In this case, finish setting up the campaign and then access the ad editor after for access to the advanced URL options.\n\n\n\n\n\n\n\n\n\n\nBecause the \nFinal URL\n for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the \nTracking template\n configuration.\n\n\n\n\nDynamic Search Ads\n\n\nCreate an Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nCreate Search Link\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\nConfigure the link with the Ad Format set to \nSearch\n and the Ad Partner set to \nGoogle Adwords\n.\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the Web redirect is set to the desired final website promoted by the ad campaign.\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure an Ad\n\n\nTo set up a Dynamic Search Network Campaign, you will need to first create your campaign and then setup a tracking template on the ad. Additional Adwords information on Dynamic Search campaigns can be found \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nSelect \nSearch Network only\n on Adwords\n\n\n\nSelect the \nDynamic Search Ads\n campaign type\n\n\n\nSet the \nWebsite\n field to equal to the final website that the dynamic ads will route to. This should be the same website that your Branch link redirects to on desktop.\n\n\n\nContinue setting the campaign and ad group parameters\n\n\n\n\nAd Creation\n\n\n\n\nIn the ad editor, locate the \nAd URL options (advanced)\n section and expand it. Now copy your Branch Ad link from the previous step into the \nTracking Template\n field.\n\n\n\n\n\n\n\n\n\n\nBecause the \nFinal URL\n for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the \nTracking template\n configuration.\n\n\n\n\nView Your Data\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nFAQ / Debugging\n\n\nGoogle Adwords Valuetrack Parameters\n\n\nBranch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's \ncampaign id\n and \nnetwork parameters\n to a Branch link's campaign analytics \nCampaign\n and \nChannel\n tags respectively. Leave these tags blank to have them dynamically mapped.\n\n\nSee below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in \nGoogle's Valuetrack docs\n for more parameters to append.\n\n\n\n\n\n\n\n\nDefault Valuetrack Parameters on Branch Ad links\n\n\nWhat it returns\n\n\n\n\n\n\n\n\n\n\n{campaignid}\n\n\nThe ad's campaign ID\n\n\n\n\n\n\n{adgroupid}\n\n\nThe ad's ad group ID\n\n\n\n\n\n\n{keyword}\n\n\nFor the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.\n\n\n\n\n\n\n{placement}\n\n\nThe content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)\n\n\n\n\n\n\n{network}\n\n\nWhere the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network\n\n\n\n\n\n\n{lpurl}\n\n\nThe final URL of the ad link clicked\n\n\n\n\n\n\n\n\nQ: Why is my advertisement being disapproved on Adwords?\n\n\nA:\n For Cross Platform campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to your Final destination URL specified in the ad. Please ensure that your Branch link redirects to your Final URL specified in your ad. To ensure install tracking is functional please ensure that for the Branch link you're using to track installs, Deepviews are disabled and your Branch link's iOS/Android redirects are set to their respective App / Play Store.", 
            "title": "Google Search Network Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#google-search-network-ads", 
            "text": "", 
            "title": "Google Search Network Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#overview", 
            "text": "If you're running Google AdWords Search Network ads, you'll find everything you need right here.  This documentation supports the following Google Campaign types:     Google Campaign  Campaign Type/Objective  Branch Ad Format      Search Network  Standard  Cross-platform Search    Search Network  Dynamic Search Ads  Cross-platform Search", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#os-support-and-major-differences", 
            "text": "Operating System  Supported by AdWords Search Network Ads?  Key Differences  Documentation      Web  Yes  Uses tracking template, must redirect to to Final Website  link    iOS  Yes  Uses tracking template, must redirect to iOS app store  link    Android  Yes  Uses tracking template, must redirect to Google Play store  link      Looking for other Google Ad campaign types? Please check out our  Google Ads Overview guide .", 
            "title": "OS Support and Major Differences"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#setup", 
            "text": "Prerequisites    To track installs from Google Ads you should  integrate the Branch SDK  into your app.   If you want to deep link from your ads directly to content, you should  configure deep link routing .   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#enable-google-as-an-ad-partner", 
            "text": "If you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.   Navigate to the  Partner Management tab .     Search for  Google AdWords .      Enter values for the  conversion IDs and labels . You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out  Google Conversion Setup .    Click the  Save and Enable  button in the lower right hand corner.       Google AdWords is now enabled as an ad partner.    Finally, to create a Google ads link click the  Create Google AdWords Link  button in the top right hand corner.", 
            "title": "Enable Google as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#standard-search-ads", 
            "text": "", 
            "title": "Standard Search Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#create-an-ad-link", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  Create Search Link   Under the Define Section, pick a Link Name for later reference  Configure the link with the Ad Format set to  Search  and the Ad Partner set to  Google Adwords .  Under the Configure Options tab, navigate to the Redirects sub section and ensure that the Web redirect is set to the desired final website promoted by the ad campaign.  Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.    Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.    Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#configure-an-ad", 
            "text": "To set up a Search Network Campaign, you will need to first create your campaign and then setup a tracking template on the ad. Additional Adwords information on Search Network campaigns can be found  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#create-your-campaign", 
            "text": "Select  Search Network only  on Adwords  Select the  Standard  campaign type  Continue setting the campaign and ad group parameters", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#ad-creation", 
            "text": "For Standard Search Ads first copy your generated Branch Ad link from the previous section.  In the ad editor, locate the  Ad URL options (advanced)  section and expand it. Now paste your link into the  Tracking Template  field. Note: The  Ad URL options (advanced)  may not be available in the campaign set up procedure. In this case, finish setting up the campaign and then access the ad editor after for access to the advanced URL options.      Because the  Final URL  for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the  Tracking template  configuration.", 
            "title": "Ad Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#dynamic-search-ads", 
            "text": "", 
            "title": "Dynamic Search Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#create-an-ad-link_1", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  Create Search Link   Under the Define Section, pick a Link Name for later reference  Configure the link with the Ad Format set to  Search  and the Ad Partner set to  Google Adwords .  Under the Configure Options tab, navigate to the Redirects sub section and ensure that the Web redirect is set to the desired final website promoted by the ad campaign.  Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.    Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.    Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#configure-an-ad_1", 
            "text": "To set up a Dynamic Search Network Campaign, you will need to first create your campaign and then setup a tracking template on the ad. Additional Adwords information on Dynamic Search campaigns can be found  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#create-your-campaign_1", 
            "text": "Select  Search Network only  on Adwords  Select the  Dynamic Search Ads  campaign type  Set the  Website  field to equal to the final website that the dynamic ads will route to. This should be the same website that your Branch link redirects to on desktop.  Continue setting the campaign and ad group parameters", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#ad-creation_1", 
            "text": "In the ad editor, locate the  Ad URL options (advanced)  section and expand it. Now copy your Branch Ad link from the previous step into the  Tracking Template  field.      Because the  Final URL  for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the  Tracking template  configuration.", 
            "title": "Ad Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#view-your-data", 
            "text": "The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#faq-debugging", 
            "text": "", 
            "title": "FAQ / Debugging"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-search-ads/#google-adwords-valuetrack-parameters", 
            "text": "Branch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's  campaign id  and  network parameters  to a Branch link's campaign analytics  Campaign  and  Channel  tags respectively. Leave these tags blank to have them dynamically mapped.  See below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in  Google's Valuetrack docs  for more parameters to append.     Default Valuetrack Parameters on Branch Ad links  What it returns      {campaignid}  The ad's campaign ID    {adgroupid}  The ad's ad group ID    {keyword}  For the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.    {placement}  The content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)    {network}  Where the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network    {lpurl}  The final URL of the ad link clicked     Q: Why is my advertisement being disapproved on Adwords?  A:  For Cross Platform campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to your Final destination URL specified in the ad. Please ensure that your Branch link redirects to your Final URL specified in your ad. To ensure install tracking is functional please ensure that for the Branch link you're using to track installs, Deepviews are disabled and your Branch link's iOS/Android redirects are set to their respective App / Play Store.", 
            "title": "Google Adwords Valuetrack Parameters"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/", 
            "text": "Google Display Network Ads\n\n\nOverview\n\n\nIf you're running Google AdWords Display Network ads, you'll find everything you need right here.\n\n\nThis documentation supports the following Google Campaign types:\n\n\n\n\n\n\n\n\nGoogle Campaign\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nDisplay Network\n\n\nBuild Awareness: See your ad\n\n\nCross-platform Display\n\n\n\n\n\n\nDisplay Network\n\n\nInfluence Consideration: Engage with your content\n\n\nCross-platform Display\n\n\n\n\n\n\nDisplay Network\n\n\nInfluence Consideration: Visit your website\n\n\nCross-platform Display\n\n\n\n\n\n\nDisplay Network\n\n\nDrive Action: Buy on your website\n\n\nCross-platform Display\n\n\n\n\n\n\nDisplay Network\n\n\nDrive Action: Take an action on your website\n\n\nCross-platform Display\n\n\n\n\n\n\n\n\nOS Support and Major Differences\n\n\n\n\n\n\n\n\nOperating System\n\n\nSupported by AdWords Display Network Ads?\n\n\nKey Differences\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nWeb\n\n\nYes\n\n\nUses tracking template, must redirect to to Final Website\n\n\nlink\n\n\n\n\n\n\niOS\n\n\nYes\n\n\nUses tracking template, must redirect to iOS app store\n\n\nlink\n\n\n\n\n\n\nAndroid\n\n\nYes\n\n\nUses tracking template, must redirect to Google Play store\n\n\nlink\n\n\n\n\n\n\n\n\n\n\nLooking for other Google Ad campaign types? Please check out our \nGoogle Ads Overview guide\n.\n\n\n\n\nSetup\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Google Ads you should \nintegrate the Branch SDK\n into your app.\n\n\n If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Google as an Ad Partner\n\n\nIf you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nGoogle AdWords\n.\n\n\n\n\n\n\n\n\n\n\nEnter values for the \nconversion IDs and labels\n. You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out \nGoogle Conversion Setup\n.\n\n\n\n\n\n\nClick the \nSave and Enable\n button in the lower right hand corner.\n\n\n\n\n\n\n\n\n\n\n\n\nGoogle AdWords is now enabled as an ad partner.\n\n\n\n\n\n\nFinally, to create a Google ads link click the \nCreate Google AdWords Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\nCreate a Branch Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nCreate Display Link\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\nConfigure the link with the Ad Format set to \nDisplay\n and the Ad Partner set to \nGoogle Adwords\n.\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the Web redirect is set to the desired final website promoted by the ad campaign.\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure an Ad\n\n\nTo set up a Display Network Campaign, you will need to first create your campaign and then setup a tracking template on the ad. Additional Adwords information on Display Network campaigns can be found \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nSelect \nDisplay Network only\n on Adwords\n\n\n\nSelect the desired type of Display Campaign\n\n\n\nContinue setting the campaign and ad group parameters\n\n\n\n\nAd Creation\n\n\n\n\nEnter your desired Final Website into the \nFinal URL\n field. This should be the same website that your Branch link routes to.\n\n\nCopy your Branch Ad Link from the last section and ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.\n\n\nExpand the \nAdvanced URL options\n and paste your Branch Ad link into the \nTracking URL template\n field.\n\n\n\n\n\n\n\n\n\n\nBecause the \nFinal URL\n for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the \nTracking template\n configuration.\n\n\n\n\nView Your Data\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nFAQ / Debugging\n\n\nGoogle Adwords Valuetrack Parameters\n\n\nBranch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's \ncampaign id\n and \nnetwork parameters\n to a Branch link's campaign analytics \nCampaign\n and \nChannel\n tags respectively. Leave these tags blank to have them dynamically mapped.\n\n\nSee below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in \nGoogle's Valuetrack docs\n for more parameters to append.\n\n\n\n\n\n\n\n\nDefault Valuetrack Parameters on Branch Ad links\n\n\nWhat it returns\n\n\n\n\n\n\n\n\n\n\n{campaignid}\n\n\nThe ad's campaign ID\n\n\n\n\n\n\n{adgroupid}\n\n\nThe ad's ad group ID\n\n\n\n\n\n\n{keyword}\n\n\nFor the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.\n\n\n\n\n\n\n{placement}\n\n\nThe content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)\n\n\n\n\n\n\n{network}\n\n\nWhere the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network\n\n\n\n\n\n\n{lpurl}\n\n\nThe final URL of the ad link clicked\n\n\n\n\n\n\n\n\nQ: Why is my advertisement being disapproved on Adwords?\n\n\nA:\n For Cross Platform campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to your Final destination URL specified in the ad. Please ensure that your Branch link redirects to your Final URL specified in your ad. To ensure install tracking is functional please ensure that for the Branch link you're using to track installs, Deepviews are disabled and your Branch link's iOS/Android redirects are set to their respective App / Play Store.", 
            "title": "Google Display Network Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#google-display-network-ads", 
            "text": "", 
            "title": "Google Display Network Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#overview", 
            "text": "If you're running Google AdWords Display Network ads, you'll find everything you need right here.  This documentation supports the following Google Campaign types:     Google Campaign  Campaign Type/Objective  Branch Ad Format      Display Network  Build Awareness: See your ad  Cross-platform Display    Display Network  Influence Consideration: Engage with your content  Cross-platform Display    Display Network  Influence Consideration: Visit your website  Cross-platform Display    Display Network  Drive Action: Buy on your website  Cross-platform Display    Display Network  Drive Action: Take an action on your website  Cross-platform Display", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#os-support-and-major-differences", 
            "text": "Operating System  Supported by AdWords Display Network Ads?  Key Differences  Documentation      Web  Yes  Uses tracking template, must redirect to to Final Website  link    iOS  Yes  Uses tracking template, must redirect to iOS app store  link    Android  Yes  Uses tracking template, must redirect to Google Play store  link      Looking for other Google Ad campaign types? Please check out our  Google Ads Overview guide .", 
            "title": "OS Support and Major Differences"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#setup", 
            "text": "Prerequisites    To track installs from Google Ads you should  integrate the Branch SDK  into your app.   If you want to deep link from your ads directly to content, you should  configure deep link routing .   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#enable-google-as-an-ad-partner", 
            "text": "If you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.   Navigate to the  Partner Management tab .     Search for  Google AdWords .      Enter values for the  conversion IDs and labels . You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out  Google Conversion Setup .    Click the  Save and Enable  button in the lower right hand corner.       Google AdWords is now enabled as an ad partner.    Finally, to create a Google ads link click the  Create Google AdWords Link  button in the top right hand corner.", 
            "title": "Enable Google as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#create-a-branch-ad-link", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  Create Display Link   Under the Define Section, pick a Link Name for later reference  Configure the link with the Ad Format set to  Display  and the Ad Partner set to  Google Adwords .  Under the Configure Options tab, navigate to the Redirects sub section and ensure that the Web redirect is set to the desired final website promoted by the ad campaign.  Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.    Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.    Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create a Branch Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#configure-an-ad", 
            "text": "To set up a Display Network Campaign, you will need to first create your campaign and then setup a tracking template on the ad. Additional Adwords information on Display Network campaigns can be found  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#create-your-campaign", 
            "text": "Select  Display Network only  on Adwords  Select the desired type of Display Campaign  Continue setting the campaign and ad group parameters", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#ad-creation", 
            "text": "Enter your desired Final Website into the  Final URL  field. This should be the same website that your Branch link routes to.  Copy your Branch Ad Link from the last section and ensure the copied link has the appropriate additional params (~campaign_id, ~ad_set_id, lpurl, etc.) which should be automatically generated on your Branch dashboard.  Expand the  Advanced URL options  and paste your Branch Ad link into the  Tracking URL template  field.      Because the  Final URL  for your app install campaigns must match your app store domain, you cannot put a Branch link in that box. However, capturing installs and deep linking users through content is still possible due to the  Tracking template  configuration.", 
            "title": "Ad Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#view-your-data", 
            "text": "The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#faq-debugging", 
            "text": "", 
            "title": "FAQ / Debugging"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-xplatform-display-ads/#google-adwords-valuetrack-parameters", 
            "text": "Branch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's  campaign id  and  network parameters  to a Branch link's campaign analytics  Campaign  and  Channel  tags respectively. Leave these tags blank to have them dynamically mapped.  See below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in  Google's Valuetrack docs  for more parameters to append.     Default Valuetrack Parameters on Branch Ad links  What it returns      {campaignid}  The ad's campaign ID    {adgroupid}  The ad's ad group ID    {keyword}  For the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.    {placement}  The content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)    {network}  Where the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network    {lpurl}  The final URL of the ad link clicked     Q: Why is my advertisement being disapproved on Adwords?  A:  For Cross Platform campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to your Final destination URL specified in the ad. Please ensure that your Branch link redirects to your Final URL specified in your ad. To ensure install tracking is functional please ensure that for the Branch link you're using to track installs, Deepviews are disabled and your Branch link's iOS/Android redirects are set to their respective App / Play Store.", 
            "title": "Google Adwords Valuetrack Parameters"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/", 
            "text": "Google Shopping Ads\n\n\nOverview\n\n\nThis guide will walk through how to use Branch links in a Google Shopping Ads feed stored in Merchant Center.\n\n\nThis documentation supports the following Google Campaign types:\n\n\n\n\n\n\n\n\nGoogle Campaign\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nShopping\n\n\nWeb and App Purchases\n\n\nCross Platform\n\n\n\n\n\n\n\n\nOS Support and Major Differences\n\n\n\n\n\n\n\n\nOperating System\n\n\nSupported by AdWords Shopping Ads?\n\n\nKey Differences\n\n\n\n\n\n\n\n\n\n\niOS\n\n\nYes\n\n\nUses Branch link, must redirect to web\n\n\n\n\n\n\nAndroid\n\n\nYes\n\n\nUses Branch link, must redirect to web\n\n\n\n\n\n\nWeb\n\n\nYes\n\n\nUses Branch link, must redirect to web\n\n\n\n\n\n\n\n\n\n\nLooking for other Google Ad campaign types? Please check out our \nGoogle Ads Overview guide\n.\n\n\n\n\nSetup\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Google Ads you should \nintegrate the Branch SDK\n into your app.\n\n\n If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Google as an Ad Partner\n\n\nIf you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nGoogle AdWords\n.\n\n\n\n\n\n\n\n\n\n\nEnter values for the \nconversion IDs and labels\n. You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out \nGoogle Conversion Setup\n.\n\n\n\n\n\n\nClick the \nSave and Enable\n button in the lower right hand corner.\n\n\n\n\n\n\n\n\n\n\n\n\nGoogle AdWords is now enabled as an ad partner.\n\n\n\n\n\n\nFinally, to create a Google ads link click the \nCreate Google AdWords Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\nFeed Creation\n\n\nManual Method\n\n\nIf you need more customization for any reason, you can also convert your feed manually.\n\n\n\n\nTell your Branch account manager, or \n, that you'd like to use Google Shopping Ads so they can enable your account. \n\n\nFind your Branch base domain by going to the \nLink Settings Page\n of your Branch Dashboard.\n\n\n\nTake the link in the \nlink\n column of your existing product feed, and URL encode it.\n\n\nPrepend the encoded link from the previous step with your Branch base domain and the following parameters:\n\n3p?$3p=a_google_adwords\n~advertising_partner_name=Google%20AdWords\n~campaign_id={campaignid}\n~ad_set_id={adgroupid}\n~keyword_text={keyword}\n~placement={placement}\n$original_url=\n\n\n\n\nFor example, if your Branch base domain was \nexample.app.link\n, your initial link:\n\n\nhttps://www.example.com/?foo=bar\n\n\nWould become:\n\n\nhttps://example.app.link/3p?$3p=a_google_adwords\n~advertising_partner_name=Google%20AdWords\n~campaign_id={campaignid}\n~ad_set_id={adgroupid}\n~keyword_text={keyword}\n~placement={placement}\n$original_url=https%3A%2F%2Fwww.example.com%2F%3Ffoo%3Dbar\n~campaign=GoogleShoppingCampaign\n\n\nFinally, replace the column \nadwords_redirect\n in your feed with the resulting link (create the column if it is absent). Repeat for each row in your feed.\n\n\n\n\nInclude all link data\n\n\nIf you want to track analytics in Branch, and you want to deep link to specific content in the app, be sure to append all necessary parameters, including deep link data and analytics tags, to the end of the link as URI encoded query parameters. In the example above, the customer uses \n$original_url\n as their deep link key, and \n~campaign\n to set the campaign name that will appear in analytics.\n\n\n\n\nNow that you have your feed, it's time to upload it to Google Merchant Center and use it in an Adwords Campaign.\n\n\nUsing Your Feed\n\n\n\n\nPrerequisites\n\n\n\n\n Be sure you have both a Google Adwords account, and a Google Merchant Center account, and that the two accounts are linked.\n\n\n\n\n\n\nUploading to Google Merchant Center\n\n\n\n\nIn Google Merchant Center, navigate to \nProducts\n then \nFeeds\n.\n\n\n\nClick the large blue plus button to add a new feed.\n\n\nFollow the prompts to name your feed, select feed language, and upload or connect your feed.\n\n\nOnce your feed has been created, Merchant Center will take a few minutes to process it. Once that has finished, you're feed is ready to be used in your Adwords campaigns.\n\n\n\n\nUsing your Merchant Center Feed in Adwords\n\n\n\n\nIn your Adwords dashboard, navigate to the All Campaigns page.\n\n\n\nClick the red campaign button, and create a new Shopping Campaign.\n\n\nOn the Shopping Ads Setup page, make sure the correct Merchant Identifier is selected (this should match the value in your Merchant Center Dashboard).\n\n\n\nComplete the ad configuration and name your ad group.\n\n\nYou should see your new Campaign and Ad Group.\n\n\n\n\nAdwords will automatically pull products from your Primary Feeds defined in Google Merchant Center for these Shopping campaigns.\n\n\nView Your Data\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nGoogle Adwords Valuetrack Parameters\n\n\nBranch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's \ncampaign id\n and \nnetwork parameters\n to a Branch link's campaign analytics \nCampaign\n and \nChannel\n tags respectively. Leave these tags blank to have them dynamically mapped.\n\n\nSee below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in \nGoogle's Valuetrack docs\n for more parameters to append.\n\n\n\n\n\n\n\n\nDefault Valuetrack Parameters on Branch Ad links\n\n\nWhat it returns\n\n\n\n\n\n\n\n\n\n\n{campaignid}\n\n\nThe ad's campaign ID\n\n\n\n\n\n\n{adgroupid}\n\n\nThe ad's ad group ID\n\n\n\n\n\n\n{keyword}\n\n\nFor the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.\n\n\n\n\n\n\n{placement}\n\n\nThe content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)\n\n\n\n\n\n\n{network}\n\n\nWhere the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network\n\n\n\n\n\n\n{lpurl}\n\n\nThe final URL of the ad link clicked\n\n\n\n\n\n\n\n\nFAQ / Debugging\n\n\nQ: Why is my feed not being approved in Google Merchant Center?\n\n\nA:\n Take not of the warnings shown. Often these errors come from incorrect formatting of the original feed. Additionally, make sure your site ownership has been verified on Google Merchant Center.", 
            "title": "Google Shopping Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#google-shopping-ads", 
            "text": "", 
            "title": "Google Shopping Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#overview", 
            "text": "This guide will walk through how to use Branch links in a Google Shopping Ads feed stored in Merchant Center.  This documentation supports the following Google Campaign types:     Google Campaign  Campaign Type/Objective  Branch Ad Format      Shopping  Web and App Purchases  Cross Platform", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#os-support-and-major-differences", 
            "text": "Operating System  Supported by AdWords Shopping Ads?  Key Differences      iOS  Yes  Uses Branch link, must redirect to web    Android  Yes  Uses Branch link, must redirect to web    Web  Yes  Uses Branch link, must redirect to web      Looking for other Google Ad campaign types? Please check out our  Google Ads Overview guide .", 
            "title": "OS Support and Major Differences"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#setup", 
            "text": "Prerequisites    To track installs from Google Ads you should  integrate the Branch SDK  into your app.   If you want to deep link from your ads directly to content, you should  configure deep link routing .   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#enable-google-as-an-ad-partner", 
            "text": "If you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.   Navigate to the  Partner Management tab .     Search for  Google AdWords .      Enter values for the  conversion IDs and labels . You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out  Google Conversion Setup .    Click the  Save and Enable  button in the lower right hand corner.       Google AdWords is now enabled as an ad partner.    Finally, to create a Google ads link click the  Create Google AdWords Link  button in the top right hand corner.", 
            "title": "Enable Google as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#feed-creation", 
            "text": "", 
            "title": "Feed Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#manual-method", 
            "text": "If you need more customization for any reason, you can also convert your feed manually.   Tell your Branch account manager, or  , that you'd like to use Google Shopping Ads so they can enable your account.   Find your Branch base domain by going to the  Link Settings Page  of your Branch Dashboard.  Take the link in the  link  column of your existing product feed, and URL encode it.  Prepend the encoded link from the previous step with your Branch base domain and the following parameters: 3p?$3p=a_google_adwords ~advertising_partner_name=Google%20AdWords ~campaign_id={campaignid} ~ad_set_id={adgroupid} ~keyword_text={keyword} ~placement={placement} $original_url=   For example, if your Branch base domain was  example.app.link , your initial link:  https://www.example.com/?foo=bar  Would become:  https://example.app.link/3p?$3p=a_google_adwords ~advertising_partner_name=Google%20AdWords ~campaign_id={campaignid} ~ad_set_id={adgroupid} ~keyword_text={keyword} ~placement={placement} $original_url=https%3A%2F%2Fwww.example.com%2F%3Ffoo%3Dbar ~campaign=GoogleShoppingCampaign  Finally, replace the column  adwords_redirect  in your feed with the resulting link (create the column if it is absent). Repeat for each row in your feed.   Include all link data  If you want to track analytics in Branch, and you want to deep link to specific content in the app, be sure to append all necessary parameters, including deep link data and analytics tags, to the end of the link as URI encoded query parameters. In the example above, the customer uses  $original_url  as their deep link key, and  ~campaign  to set the campaign name that will appear in analytics.   Now that you have your feed, it's time to upload it to Google Merchant Center and use it in an Adwords Campaign.", 
            "title": "Manual Method"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#using-your-feed", 
            "text": "Prerequisites    Be sure you have both a Google Adwords account, and a Google Merchant Center account, and that the two accounts are linked.", 
            "title": "Using Your Feed"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#uploading-to-google-merchant-center", 
            "text": "In Google Merchant Center, navigate to  Products  then  Feeds .  Click the large blue plus button to add a new feed.  Follow the prompts to name your feed, select feed language, and upload or connect your feed.  Once your feed has been created, Merchant Center will take a few minutes to process it. Once that has finished, you're feed is ready to be used in your Adwords campaigns.", 
            "title": "Uploading to Google Merchant Center"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#using-your-merchant-center-feed-in-adwords", 
            "text": "In your Adwords dashboard, navigate to the All Campaigns page.  Click the red campaign button, and create a new Shopping Campaign.  On the Shopping Ads Setup page, make sure the correct Merchant Identifier is selected (this should match the value in your Merchant Center Dashboard).  Complete the ad configuration and name your ad group.  You should see your new Campaign and Ad Group.   Adwords will automatically pull products from your Primary Feeds defined in Google Merchant Center for these Shopping campaigns.", 
            "title": "Using your Merchant Center Feed in Adwords"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#view-your-data", 
            "text": "The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#google-adwords-valuetrack-parameters", 
            "text": "Branch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's  campaign id  and  network parameters  to a Branch link's campaign analytics  Campaign  and  Channel  tags respectively. Leave these tags blank to have them dynamically mapped.  See below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in  Google's Valuetrack docs  for more parameters to append.     Default Valuetrack Parameters on Branch Ad links  What it returns      {campaignid}  The ad's campaign ID    {adgroupid}  The ad's ad group ID    {keyword}  For the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.    {placement}  The content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)    {network}  Where the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network    {lpurl}  The final URL of the ad link clicked", 
            "title": "Google Adwords Valuetrack Parameters"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-shopping-ads/#faq-debugging", 
            "text": "Q: Why is my feed not being approved in Google Merchant Center?  A:  Take not of the warnings shown. Often these errors come from incorrect formatting of the original feed. Additionally, make sure your site ownership has been verified on Google Merchant Center.", 
            "title": "FAQ / Debugging"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-conversions/", 
            "text": "", 
            "title": "Google Adwords Conversion Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/", 
            "text": "Google Video Ads\n\n\nOverview\n\n\nIf you're running Google AdWords Video Campaigns, you'll find everything you need right here.\n\n\nThis documentation supports the following Google Campaign types:\n\n\n\n\n\n\n\n\nGoogle Campaign\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nVideo\n\n\nStandard - Instream\n\n\nCross-platform Search\n\n\n\n\n\n\nVideo\n\n\nStandard - Bumper\n\n\nCross-platform Search\n\n\n\n\n\n\nVideo\n\n\nMobile App Install - Instream\n\n\nApp Only: Install\n\n\n\n\n\n\n\n\nOS Support and Major Differences\n\n\n\n\n\n\n\n\nOperating System\n\n\nSupported by Adwords Video Ads?\n\n\nKey Differences\n\n\nDocumentation\n\n\n\n\n\n\n\n\n\n\nWeb\n\n\nYes\n\n\nUses tracking template, must redirect to Final Website\n\n\nlink\n\n\n\n\n\n\niOS\n\n\nYes\n\n\nUses tracking template, must redirect to iOS app store\n\n\nlink\n\n\n\n\n\n\nAndroid\n\n\nYes\n\n\nUses tracking template, must redirect to Google Play store\n\n\nlink\n\n\n\n\n\n\n\n\n\n\nLooking for other Google Ad campaign types? Please check out our \nGoogle Ads Overview guide\n.\n\n\n\n\nSetup\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Google Ads you should \nintegrate the Branch SDK\n into your app.\n\n\n If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Google as an Ad Partner\n\n\nIf you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nGoogle AdWords\n.\n\n\n\n\n\n\n\n\n\n\nEnter values for the \nconversion IDs and labels\n. You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out \nGoogle Conversion Setup\n.\n\n\n\n\n\n\nClick the \nSave and Enable\n button in the lower right hand corner.\n\n\n\n\n\n\n\n\n\n\n\n\nGoogle AdWords is now enabled as an ad partner.\n\n\n\n\n\n\nFinally, to create a Google ads link click the \nCreate Google AdWords Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\nVideo App Install Ads\n\n\nCreate an Ad Link\n\n\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nCreate Display Link\n\n\n\n\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\n\n\n\n\nConfigure the link with the Ad Format set to \nDisplay\n and the Ad Partner set to \nGoogle Adwords\n.\n\n\n\n\n\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS/Android redirect is set to the desired app being promoted by the ad campaign.\n\n\n\n\n\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure an Ad\n\n\nTo set up a Video Campaign, you will need to first create your campaign and then setup a tracking template on the ad. Additional Adwords information on Video campaigns can be found \nhere\n. To set up a Video App Install campaign, you must first complete the entire creation flow for the campaign and ad on Google Adwords.\n\n\nCreate Your Campaign\n\n\n\n\n\n\nSelect \nVideo\n on Adwords\n\n\n\n\n\n\n\n\nSelect the 'Mobile app installs' campaign type\n\n\n\n\n\n\n\n\nComplete the rest of the ad campaign setup\n\n\n\n\n\n\nAd Creation\n\n\n\n\nVideo Discovery Ad Support\n\n\nAs of June 2017, Adwords does not support Tracking Templates on Video discovery ads. This means Branch links won't work for this specific ad type.\n\n\n\n\n\n\nNavigate to the Video ad to edit on the Adwords portal.\n\n\nSelect the ad and select \nEdit \n Change URL options\n.\n\n\nIn the Change URL options window, copy and paste your Branch Ad link from the previous section into the Tracking template field and confirm the change.\n\n\n\n\n\n\n\n\n\n\nBecause the video ad directly links to the App store to install the app, Branch links can't be used as the video link directly. However, capturing installs and deep linking users through content is still possible due to the \nTracking template\n configuration.\n\n\n\n\nVideo Standard Ads\n\n\nCreate an Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Google Adwords Link\n button under the Google Adwords Partner and select \nCreate Display Link\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference\n\n\nConfigure the link with the Ad Format set to \nDisplay\n and the Ad Partner set to \nGoogle Adwords\n.\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS/Android redirect is set to the desired app being promoted by the ad campaign.\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.\n\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\n\n\nSetting Attribution Windows\n\n\nYou can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to \nChanging attribution windows\n for instructions.\n\n\n\n\nConfigure an Ad\n\n\nTo set up a Video Campaign, you will need to first create your campaign and then setup a tracking template on the ad. Additional Adwords information on Video campaigns can be found \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\n\n\nSelect \nVideo\n on Adwords\n\n\n\n\n\n\n\n\nSelect the 'Standard' campaign type\n\n\n\n\n\n\n\n\nComplete the rest of the campaign and ad group setup\n\n\n\n\n\n\nAd Creation\n\n\n\n\nVideo Discovery Ad Support\n\n\nAs of June 2017, Adwords does not support Tracking Templates on Video discovery ads. This means Branch links won't work for this specific ad type.\n\n\n\n\n\n\nOn the ad creation section, select your desired Video ad format and fill in the \nFinal URL\n field with the final website URL of your ad\n\n\n\n\nLocate the \nAd URL options (advanced)\n section and expand it. Now copy your Branch Ad link from the previous step into the \nTracking Template\n field.\n\n\n\n\n\n\n\n\nInstream Video Setup\n\n\n\n\nBumper Video Setup\n\n\n\n\n\n\nBecause the video ad directly links to the App store to install the app, Branch links can't be used as the video link directly. However, capturing installs and deep linking users through content is still possible due to the \nTracking template\n configuration.\n\n\n\n\nView Your Data\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nGoogle Adwords Valuetrack Parameters\n\n\nBranch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's \ncampaign id\n and \nnetwork parameters\n to a Branch link's campaign analytics \nCampaign\n and \nChannel\n tags respectively. Leave these tags blank to have them dynamically mapped.\n\n\nSee below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in \nGoogle's Valuetrack docs\n for more parameters to append.\n\n\n\n\n\n\n\n\nDefault Valuetrack Parameters on Branch Ad links\n\n\nWhat it returns\n\n\n\n\n\n\n\n\n\n\n{campaignid}\n\n\nThe ad's campaign ID\n\n\n\n\n\n\n{adgroupid}\n\n\nThe ad's ad group ID\n\n\n\n\n\n\n{keyword}\n\n\nFor the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.\n\n\n\n\n\n\n{placement}\n\n\nThe content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)\n\n\n\n\n\n\n{network}\n\n\nWhere the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network\n\n\n\n\n\n\n{lpurl}\n\n\nThe final URL of the ad link clicked\n\n\n\n\n\n\n\n\nQ: Why is my advertisement being disapproved on Adwords?\n\n\nA:\n For Video Campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to Google Play or App Store when clicked on a desktop. Please ensure that for the Branch link you're using to track installs, Deepviews are disabled and a desktop redirect is set to either the App / Play store.\n\n\nFor Cross Platform campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to your Final destination URL specified in the ad. Please ensure that your Branch link redirects to your Final URL specified in your ad. To ensure install tracking is functional please ensure that for the Branch link you're using to track installs, Deepviews are disabled and your Branch link's iOS/Android redirects are set to their respective App / Play Store.\n\n\nQ: Why can't I use a Branch link in a Video discovery ad?\n\n\nA:\n As of June 2017, Adwords does not support Tracking Templates on Video discovery ads. This means Branch links won't work for this specific ad type. However, we're working on support in the future and will update these docs accordingly.", 
            "title": "Google Video Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#google-video-ads", 
            "text": "", 
            "title": "Google Video Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#overview", 
            "text": "If you're running Google AdWords Video Campaigns, you'll find everything you need right here.  This documentation supports the following Google Campaign types:     Google Campaign  Campaign Type/Objective  Branch Ad Format      Video  Standard - Instream  Cross-platform Search    Video  Standard - Bumper  Cross-platform Search    Video  Mobile App Install - Instream  App Only: Install", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#os-support-and-major-differences", 
            "text": "Operating System  Supported by Adwords Video Ads?  Key Differences  Documentation      Web  Yes  Uses tracking template, must redirect to Final Website  link    iOS  Yes  Uses tracking template, must redirect to iOS app store  link    Android  Yes  Uses tracking template, must redirect to Google Play store  link      Looking for other Google Ad campaign types? Please check out our  Google Ads Overview guide .", 
            "title": "OS Support and Major Differences"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#setup", 
            "text": "Prerequisites    To track installs from Google Ads you should  integrate the Branch SDK  into your app.   If you want to deep link from your ads directly to content, you should  configure deep link routing .   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#enable-google-as-an-ad-partner", 
            "text": "If you haven't enabled Google as an Ad Partner on the Branch dashboard follow this section to do so.   Navigate to the  Partner Management tab .     Search for  Google AdWords .      Enter values for the  conversion IDs and labels . You can put in placeholders for now, but we recommend setting up install conversion tracking in AdWords before launching your campaign. For setup instructions on conversion tracking, check out  Google Conversion Setup .    Click the  Save and Enable  button in the lower right hand corner.       Google AdWords is now enabled as an ad partner.    Finally, to create a Google ads link click the  Create Google AdWords Link  button in the top right hand corner.", 
            "title": "Enable Google as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#video-app-install-ads", 
            "text": "", 
            "title": "Video App Install Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#create-an-ad-link", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  Create Display Link     Under the Define Section, pick a Link Name for later reference    Configure the link with the Ad Format set to  Display  and the Ad Partner set to  Google Adwords .     Under the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS/Android redirect is set to the desired app being promoted by the ad campaign.     Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.      Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.    Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#configure-an-ad", 
            "text": "To set up a Video Campaign, you will need to first create your campaign and then setup a tracking template on the ad. Additional Adwords information on Video campaigns can be found  here . To set up a Video App Install campaign, you must first complete the entire creation flow for the campaign and ad on Google Adwords.", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#create-your-campaign", 
            "text": "Select  Video  on Adwords     Select the 'Mobile app installs' campaign type     Complete the rest of the ad campaign setup", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#ad-creation", 
            "text": "Video Discovery Ad Support  As of June 2017, Adwords does not support Tracking Templates on Video discovery ads. This means Branch links won't work for this specific ad type.    Navigate to the Video ad to edit on the Adwords portal.  Select the ad and select  Edit   Change URL options .  In the Change URL options window, copy and paste your Branch Ad link from the previous section into the Tracking template field and confirm the change.      Because the video ad directly links to the App store to install the app, Branch links can't be used as the video link directly. However, capturing installs and deep linking users through content is still possible due to the  Tracking template  configuration.", 
            "title": "Ad Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#video-standard-ads", 
            "text": "", 
            "title": "Video Standard Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#create-an-ad-link_1", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Google Adwords Link  button under the Google Adwords Partner and select  Create Display Link   Under the Define Section, pick a Link Name for later reference  Configure the link with the Ad Format set to  Display  and the Ad Partner set to  Google Adwords .  Under the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS/Android redirect is set to the desired app being promoted by the ad campaign.  Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Google Adwords and set the campaign field to the same ad campaign name used in Adwords.    Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.    Setting Attribution Windows  You can specify the attribution windows for your links either at an overall account or per link level. Use these windows to accurately measure attribution data for your Branch links. Refer to  Changing attribution windows  for instructions.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#configure-an-ad_1", 
            "text": "To set up a Video Campaign, you will need to first create your campaign and then setup a tracking template on the ad. Additional Adwords information on Video campaigns can be found  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#create-your-campaign_1", 
            "text": "Select  Video  on Adwords     Select the 'Standard' campaign type     Complete the rest of the campaign and ad group setup", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#ad-creation_1", 
            "text": "Video Discovery Ad Support  As of June 2017, Adwords does not support Tracking Templates on Video discovery ads. This means Branch links won't work for this specific ad type.    On the ad creation section, select your desired Video ad format and fill in the  Final URL  field with the final website URL of your ad   Locate the  Ad URL options (advanced)  section and expand it. Now copy your Branch Ad link from the previous step into the  Tracking Template  field.", 
            "title": "Ad Creation"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#instream-video-setup", 
            "text": "", 
            "title": "Instream Video Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#bumper-video-setup", 
            "text": "Because the video ad directly links to the App store to install the app, Branch links can't be used as the video link directly. However, capturing installs and deep linking users through content is still possible due to the  Tracking template  configuration.", 
            "title": "Bumper Video Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#view-your-data", 
            "text": "The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/google-video-ads/#google-adwords-valuetrack-parameters", 
            "text": "Branch utilizes Google's Valuetrack parameters to collect more detailed information on the source of an ad click. Furthermore, we dynamically map Adword's  campaign id  and  network parameters  to a Branch link's campaign analytics  Campaign  and  Channel  tags respectively. Leave these tags blank to have them dynamically mapped.  See below for a table of Valuetrack parameters collected by default through Branch's Ad links and refer to the table in  Google's Valuetrack docs  for more parameters to append.     Default Valuetrack Parameters on Branch Ad links  What it returns      {campaignid}  The ad's campaign ID    {adgroupid}  The ad's ad group ID    {keyword}  For the Search Network: the keyword from your account that matches the search query, unless you are using a Dynamic Search ad, which returns a blank value. For the Display Network: the keyword from your account that matches the content.    {placement}  The content site where your ad was clicked (for keyword-targeted campaigns), or the matching placement targeting criteria for the site where your ad was clicked (for placement-targeted campaigns)    {network}  Where the click came from: \"g\" for Google search, \"s\" for a search partner, or \"d\" for the Display Network    {lpurl}  The final URL of the ad link clicked     Q: Why is my advertisement being disapproved on Adwords?  A:  For Video Campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to Google Play or App Store when clicked on a desktop. Please ensure that for the Branch link you're using to track installs, Deepviews are disabled and a desktop redirect is set to either the App / Play store.  For Cross Platform campaigns, sometimes your ad may be disapproved if the Branch link does not re-direct to your Final destination URL specified in the ad. Please ensure that your Branch link redirects to your Final URL specified in your ad. To ensure install tracking is functional please ensure that for the Branch link you're using to track installs, Deepviews are disabled and your Branch link's iOS/Android redirects are set to their respective App / Play Store.  Q: Why can't I use a Branch link in a Video discovery ad?  A:  As of June 2017, Adwords does not support Tracking Templates on Video discovery ads. This means Branch links won't work for this specific ad type. However, we're working on support in the future and will update these docs accordingly.", 
            "title": "Google Adwords Valuetrack Parameters"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-app-install-ads/", 
            "text": "Facebook App Install Ads\n\n\nOverview\n\n\nBranch links can be used together with Facebook App Install Campaign ads, allowing you to track ad-driven installs on the Branch dashboard and deep link those new users directly to content the first time they open your app.\n\n\nNote: This documentation applies for Ad placements across Facebook and the Audience Network.\n\n\nThis documentation supports the following Facebook Ad Campaign types:\n\n\n\n\n\n\n\n\nFacebook Campaign Category\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nConsideration\n\n\nApp Installs\n\n\nApp Only: Install\n\n\n\n\n\n\n\n\nFacebook Campaign Advert Format Support Table\n\n\n\n\n\n\n\n\nFacebook Campaign Type\n\n\nPhoto\n\n\nVideo\n\n\nCarousel\n\n\nSlideshow\n\n\nCollection\n\n\nDynamic\n\n\n\n\n\n\n\n\n\n\nApp Installs\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooking for other Facebook Ad campaign types? Please check out our \nFacebook Ads Overview guide\n.\n\n\n\n\nSetup\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Facebook Ads you should \nintegrate the Branch SDK\n into your app.\n\n\n To use Branch links in Facebook App Install Ads ensure you have Universal Links set up on iOS or App Links enabled on Android to ensure correct routing behavior. For setup, checkout \nUniversal\n and \nApp Links\n.\n\n\n If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Facebook as an Ad Partner\n\n\n\n\nNote\n\n\nCompleting this section -- \"Enable Facebook as an Ad Partner\" -- will result in Branch sending app events to Facebook in order to attribute them back to ad campaigns.\n\n\n\n\nIf you haven't enabled Facebook as an Ad Partner on the Branch dashboard follow this section to do so. Advanced options for sending events can be found \nhere\n.\n\n\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nFacebook\n.\n\n\n\n\n\n\n\n\nClick \nConnect With Facebook\n\n\n\n\n\n\n\n\nLogin to Facebook if you are not logged in\n\n\n\n\n\n\n\n\nConfirm that Branch can receive your public profile\n\n\n\n\n\n\n\n\nConfirm that Branch can have permissions \nads_read\n and \nbusiness_management\n\n\n\n\nads_read\n is used to surface impressions and clicks on the Branch Dashboard. \nbusiness_management\n is used to add Branch's system user to your ad account(s) with \nREPORTS_ONLY\n access. We will not make any other changes to your business.\n\n\n\n\n\n\nSelect the ad accounts for which you want to run app install ads or app engagement ads\n\n\n\n\n\n\nNote\n\n\nIf you are having trouble finding or selecting the ad account(s) for which you want to run ads, please visit our \nFAQ\n.\n\n\n\n\n\n\n\n\nClick to select a Facebook app id for which you want to run Facebook ads\n\n\n\n\n\n\n\n\nCopy the app id\n\n\n\n\n\n\n\n\nPaste the app id and press \nSave\n\n\n\n\n\n\n\n\nFacebook is now enabled as an ad partner!\n\n\nNote that if you have different attribution windows between Facebook and Branch, those will be highlighted. The warning has a link to the docs on how to align these attribution windows.\n\n\n\n\n\n\n\n\nFinally, to create a Facebook Ads link click the \nCreate Facebook Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\nCreate an Ad Link\n\n\n\n\nNote\n\n\nThis section is optional if you are running app-only ads. We will automatically pull in campaign, ad set, ad, and creative information from Facebook. However, if you want users to be deep linked, you should follow the instructions in this section.\n\n\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Facebook Link\n button under the Facebook Partner and select \nApp Install or Engagement\n\n\n\n\nEnter a Link Name for later reference.\n\n\nConfigure the link with the Ad Format set to \nApp Only\n, the Ad Partner set to \nFacebook\n, and the Secondary Ad Format set to \nApp Install Ads\n.\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS/Android redirect is set to the desired app being promoted by the ad campaign.\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Facebook Ads and set the campaign field to the same ad campaign name used in Facebook Ads.\n\n\n\n\n\n\n\nIn order for your campaign to run effectively, be sure to disable Deepviews. You can either \ndisable Deepviews\n for your entire account or \ndisable Deepviews for one link\n.\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\nConfigure an Ad\n\n\nTo set up a Facebook App Install campaign, you will need to first create your campaign and use a Branch link as the Deep Link URL for the advertisements. Facebook App Install Campaign information is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nNavigate to \nhttps://www.facebook.com/ads/create\n while logged in to the account that owns your Facebook app.\n\n\nSelect \nApp Installs\n as the campaign marketing objective.\n\n\n\nContinue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.\n\n\nNow select an advertisement format and customize your ad\n\n\nUnder the \nDestination\n field, you can select to direct your advertisement to the App Store or a Facebook Canvas Advertisement.\n\n\nIf you select the App Store, fill in the \nDeep Link\n field with your Branch Ad link\n\n\n\nIf you select Canvas, add your Branch Ad link as the \nDestination\n Website URL for your canvas advertisement components\n\n\n\n\n\n\n\nComplete the rest of the ad campaign setup.\n\n\n\n\nYour Facebook Ad Campaign is now setup to use Branch Links to handle App Installs!\n\n\n\n\nOptional: Ad formats with Multiple Links\n\n\nSome ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.\n\n\n\n\nView Your Data\n\n\n\n\nFacebook prevents Branch from measuring the number of clicks on their ads for install campaigns, so Branch's \nClicks\n numbers for Facebook Ads are inaccurate when users are being directed to the App Store to download your app.\n\n\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nWe now have a dedicated \nFAQ page for Facebook app ads\n. If you are having any issues with app ads, please review the FAQ.\n\n\nIf you are having issues with web-only ads, you can check out the FAQ. Then please \ncontact us\n and include \"Facebook web-only ads issues\" in the subject.", 
            "title": "Facebook App Install Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-app-install-ads/#facebook-app-install-ads", 
            "text": "", 
            "title": "Facebook App Install Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-app-install-ads/#overview", 
            "text": "Branch links can be used together with Facebook App Install Campaign ads, allowing you to track ad-driven installs on the Branch dashboard and deep link those new users directly to content the first time they open your app.  Note: This documentation applies for Ad placements across Facebook and the Audience Network.  This documentation supports the following Facebook Ad Campaign types:     Facebook Campaign Category  Campaign Type/Objective  Branch Ad Format      Consideration  App Installs  App Only: Install", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-app-install-ads/#facebook-campaign-advert-format-support-table", 
            "text": "Facebook Campaign Type  Photo  Video  Carousel  Slideshow  Collection  Dynamic      App Installs  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e        Looking for other Facebook Ad campaign types? Please check out our  Facebook Ads Overview guide .", 
            "title": "Facebook Campaign Advert Format Support Table"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-app-install-ads/#setup", 
            "text": "Prerequisites    To track installs from Facebook Ads you should  integrate the Branch SDK  into your app.   To use Branch links in Facebook App Install Ads ensure you have Universal Links set up on iOS or App Links enabled on Android to ensure correct routing behavior. For setup, checkout  Universal  and  App Links .   If you want to deep link from your ads directly to content, you should  configure deep link routing .   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-app-install-ads/#enable-facebook-as-an-ad-partner", 
            "text": "Note  Completing this section -- \"Enable Facebook as an Ad Partner\" -- will result in Branch sending app events to Facebook in order to attribute them back to ad campaigns.   If you haven't enabled Facebook as an Ad Partner on the Branch dashboard follow this section to do so. Advanced options for sending events can be found  here .    Navigate to the  Partner Management tab .     Search for  Facebook .     Click  Connect With Facebook     Login to Facebook if you are not logged in     Confirm that Branch can receive your public profile     Confirm that Branch can have permissions  ads_read  and  business_management   ads_read  is used to surface impressions and clicks on the Branch Dashboard.  business_management  is used to add Branch's system user to your ad account(s) with  REPORTS_ONLY  access. We will not make any other changes to your business.    Select the ad accounts for which you want to run app install ads or app engagement ads    Note  If you are having trouble finding or selecting the ad account(s) for which you want to run ads, please visit our  FAQ .     Click to select a Facebook app id for which you want to run Facebook ads     Copy the app id     Paste the app id and press  Save     Facebook is now enabled as an ad partner!  Note that if you have different attribution windows between Facebook and Branch, those will be highlighted. The warning has a link to the docs on how to align these attribution windows.     Finally, to create a Facebook Ads link click the  Create Facebook Link  button in the top right hand corner.", 
            "title": "Enable Facebook as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-app-install-ads/#create-an-ad-link", 
            "text": "Note  This section is optional if you are running app-only ads. We will automatically pull in campaign, ad set, ad, and creative information from Facebook. However, if you want users to be deep linked, you should follow the instructions in this section.    Create a Branch Ad link from the  Partner Management page 's  Create Facebook Link  button under the Facebook Partner and select  App Install or Engagement   Enter a Link Name for later reference.  Configure the link with the Ad Format set to  App Only , the Ad Partner set to  Facebook , and the Secondary Ad Format set to  App Install Ads .  Under the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS/Android redirect is set to the desired app being promoted by the ad campaign.  Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Facebook Ads and set the campaign field to the same ad campaign name used in Facebook Ads.    In order for your campaign to run effectively, be sure to disable Deepviews. You can either  disable Deepviews  for your entire account or  disable Deepviews for one link .    Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-app-install-ads/#configure-an-ad", 
            "text": "To set up a Facebook App Install campaign, you will need to first create your campaign and use a Branch link as the Deep Link URL for the advertisements. Facebook App Install Campaign information is available  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-app-install-ads/#create-your-campaign", 
            "text": "Navigate to  https://www.facebook.com/ads/create  while logged in to the account that owns your Facebook app.  Select  App Installs  as the campaign marketing objective.  Continue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.  Now select an advertisement format and customize your ad  Under the  Destination  field, you can select to direct your advertisement to the App Store or a Facebook Canvas Advertisement.  If you select the App Store, fill in the  Deep Link  field with your Branch Ad link  If you select Canvas, add your Branch Ad link as the  Destination  Website URL for your canvas advertisement components    Complete the rest of the ad campaign setup.   Your Facebook Ad Campaign is now setup to use Branch Links to handle App Installs!   Optional: Ad formats with Multiple Links  Some ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-app-install-ads/#view-your-data", 
            "text": "Facebook prevents Branch from measuring the number of clicks on their ads for install campaigns, so Branch's  Clicks  numbers for Facebook Ads are inaccurate when users are being directed to the App Store to download your app.   The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-app-install-ads/#troubleshooting", 
            "text": "We now have a dedicated  FAQ page for Facebook app ads . If you are having any issues with app ads, please review the FAQ.  If you are having issues with web-only ads, you can check out the FAQ. Then please  contact us  and include \"Facebook web-only ads issues\" in the subject.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/", 
            "text": "Facebook Traffic and Conversion Ads\n\n\nOverview\n\n\nBranch links can be used together with Facebook Traffic and Conversion ads, allowing you to track engagement with your advertisements and ad-driven installs which deep link new users directly to content the first time they open your app.\n\n\nNote: This documentation applies for Ad placements across Facebook and the Audience Network.\n\n\nThis documentation supports the following Facebook Ad Campaign types:\n\n\n\n\n\n\n\n\nFacebook Campaign Category\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nConsideration\n\n\nTraffic\n\n\nCross-platform Display\n\n\n\n\n\n\nConversion\n\n\nConversions\n\n\nCross-platform Display\n\n\n\n\n\n\n\n\nFacebook Campaign Advert Format Support Table\n\n\n\n\n\n\n\n\nFacebook Campaign Type\n\n\nPhoto\n\n\nVideo\n\n\nCarousel\n\n\nSlideshow\n\n\nCollection\n\n\nDynamic\n\n\n\n\n\n\n\n\n\n\nTraffic\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\n\n\n\nConversion\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooking for other Facebook Ad campaign types? Please check out our \nFacebook Ads Overview guide\n.\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Facebook Ads you should \nintegrate the Branch SDK\n into your app.\n\n\n To use Branch links in Facebook App Install Ads ensure you have Universal Links set up on iOS or App Links enabled on Android to ensure correct routing behavior. For setup, checkout \nUniversal\n and \nApp Links\n.\n\n\n If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Facebook as an Ad Partner\n\n\n\n\nNote\n\n\nCompleting this section -- \"Enable Facebook as an Ad Partner\" -- will result in Branch sending app events to Facebook in order to attribute them back to ad campaigns.\n\n\n\n\nIf you haven't enabled Facebook as an Ad Partner on the Branch dashboard follow this section to do so. Advanced options for sending events can be found \nhere\n.\n\n\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nFacebook\n.\n\n\n\n\n\n\n\n\nClick \nConnect With Facebook\n\n\n\n\n\n\n\n\nLogin to Facebook if you are not logged in\n\n\n\n\n\n\n\n\nConfirm that Branch can receive your public profile\n\n\n\n\n\n\n\n\nConfirm that Branch can have permissions \nads_read\n and \nbusiness_management\n\n\n\n\nads_read\n is used to surface impressions and clicks on the Branch Dashboard. \nbusiness_management\n is used to add Branch's system user to your ad account(s) with \nREPORTS_ONLY\n access. We will not make any other changes to your business.\n\n\n\n\n\n\nSelect the ad accounts for which you want to run app install ads or app engagement ads\n\n\n\n\n\n\nNote\n\n\nIf you are having trouble finding or selecting the ad account(s) for which you want to run ads, please visit our \nFAQ\n.\n\n\n\n\n\n\n\n\nClick to select a Facebook app id for which you want to run Facebook ads\n\n\n\n\n\n\n\n\nCopy the app id\n\n\n\n\n\n\n\n\nPaste the app id and press \nSave\n\n\n\n\n\n\n\n\nFacebook is now enabled as an ad partner!\n\n\nNote that if you have different attribution windows between Facebook and Branch, those will be highlighted. The warning has a link to the docs on how to align these attribution windows.\n\n\n\n\n\n\n\n\nFinally, to create a Facebook Ads link click the \nCreate Facebook Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\nSetup\n\n\nCreate an Ad Link\n\n\n\n\nNote\n\n\nThis section is optional if you are running app-only ads. We will automatically pull in campaign, ad set, ad, and creative information from Facebook. However, if you want users to be deep linked, you should follow the instructions in this section.\n\n\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Facebook Link\n button under the Facebook Partner and select \nCreate Display Link\n\n\n\n\nUnder the Define Section, pick a Link Name for later reference.\n\n\nConfigure the link with the Ad Partner set to \nFacebook\n, and the Ad Format set to \nCross-platform Display\n.\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS/Android and Desktop redirects are set to the desired destinations being promoted by the ad campaign.\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Facebook Ads and set the campaign field to the same ad campaign name used in Facebook Ads.\n\n\n\n\n\n\n\nIn order for your campaign to run effectively, be sure to disable Deepviews. You can either \ndisable Deepviews\n for your entire account or \ndisable Deepviews for one link\n.\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\nTraffic Campaign Setup\n\n\nConfigure an Ad\n\n\nTo set up a Facebook Traffic campaign, you will need to first create your campaign and use a Branch link as the Deep Link URL for the advertisements. Facebook Traffic Campaign information is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nNavigate to \nhttps://www.facebook.com/ads/create\n while logged in to the account that owns your Facebook app.\n\n\nSelect \nTraffic\n as the campaign marketing objective.\n\n\n\nSelect either to drive traffic to your \nWebsite\n or your \nApp\n\n\nContinue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.\n\n\nNow select an advertisement format and customize your ad\n\n\n\n\nAdd your Branch Ad Link to your advertisement\n\n\n\n\n\n\nIf you chose to drive traffic to an App, locate the \nDeep Link\n field and copy and paste your Branch link there.\n\n\n\n\n\n\n\n\nIf you chose to drive traffic to a Website, paste your Branch Ad link into the \nWebsite URL\n field.\n\n\n\n\n\n\n\n\nIf you chose to drive traffic to a Website and are using a full-screen Canvas, add your Branch Ad link as the \nDestination URL\n for your canvas advertisement components.\n\n\n\n\nComplete the rest of the ad campaign setup.\n\n\n\n\n\n\n\n\n\n\nOptional: Ad formats with Multiple Links\n\n\nSome ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.\n\n\n\n\nConversions Campaign Setup\n\n\nConfigure an Ad\n\n\nTo set up a Facebook Conversions campaign, you will need to first create your campaign and use a Branch link as the Deep Link URL for the advertisements. Facebook Conversions Campaign information is available \nhere\n.\n\n\n\n\nPrerequisites\n\n\nAs a prerequisite, Facebook requires you to report events about your users interacting with your content, for example: viewing, adding to cart, and purchasing. To add the Facebook Pixel to your website, and the Facebook SDK to your app, follow these instructions:\n\n\n\n\nSending App Events with the Facebook SDK\n\n\nSending Web Events with the Facebook Pixel\n\n\n\n\n\n\nCreate Your Campaign\n\n\n\n\nNavigate to \nhttps://www.facebook.com/ads/create\n while logged in to the account that owns your Facebook app.\n\n\nSelect \nConversions\n as the campaign marketing objective.\n\n\n\nSelect either to have the goal of having conversions on a \nWebsite\n or in an \nApp\n\n\nContinue with campaign creation selecting audience, placement, and budget. Then press continue to enter the Advert creation step.\n\n\nNow select an advertisement format and customize your ad\n\n\n\n\nAdd your Branch Ad Link to your advertisement\n\n\n\n\n\n\nIf you chose app conversions App, locate the \nDeep Link\n field and copy and paste your Branch link there.\n\n\n\n\n\n\n\n\nIf you chose Website conversions, paste your Branch Ad link into the \nWebsite URL\n field.\n\n\n\n\n\n\n\n\nIf you chose Website conversions and are using a full-screen Canvas, add your Branch Ad link as the \nDestination URL\n for your canvas advertisement components.\n\n\n\n\nComplete the rest of the ad campaign setup.\n\n\n\n\n\n\n\n\n\n\nOptional: Ad formats with Multiple Links\n\n\nSome ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.\n\n\n\n\nView Your Data\n\n\n\n\nFacebook prevents Branch from measuring the number of clicks on their ads for install campaigns, so Branch's \nClicks\n numbers for Facebook Ads are inaccurate when users are being directed to the App Store to download your app.\n\n\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nWe now have a dedicated \nFAQ page for Facebook app ads\n. If you are having any issues with app ads, please review the FAQ.\n\n\nIf you are having issues with web-only ads, you can check out the FAQ. Then please \ncontact us\n and include \"Facebook web-only ads issues\" in the subject.", 
            "title": "Facebook Traffic and Conversion Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#facebook-traffic-and-conversion-ads", 
            "text": "", 
            "title": "Facebook Traffic and Conversion Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#overview", 
            "text": "Branch links can be used together with Facebook Traffic and Conversion ads, allowing you to track engagement with your advertisements and ad-driven installs which deep link new users directly to content the first time they open your app.  Note: This documentation applies for Ad placements across Facebook and the Audience Network.  This documentation supports the following Facebook Ad Campaign types:     Facebook Campaign Category  Campaign Type/Objective  Branch Ad Format      Consideration  Traffic  Cross-platform Display    Conversion  Conversions  Cross-platform Display", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#facebook-campaign-advert-format-support-table", 
            "text": "Facebook Campaign Type  Photo  Video  Carousel  Slideshow  Collection  Dynamic      Traffic  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e    Conversion  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e        Looking for other Facebook Ad campaign types? Please check out our  Facebook Ads Overview guide .    Prerequisites    To track installs from Facebook Ads you should  integrate the Branch SDK  into your app.   To use Branch links in Facebook App Install Ads ensure you have Universal Links set up on iOS or App Links enabled on Android to ensure correct routing behavior. For setup, checkout  Universal  and  App Links .   If you want to deep link from your ads directly to content, you should  configure deep link routing .   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Facebook Campaign Advert Format Support Table"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#enable-facebook-as-an-ad-partner", 
            "text": "Note  Completing this section -- \"Enable Facebook as an Ad Partner\" -- will result in Branch sending app events to Facebook in order to attribute them back to ad campaigns.   If you haven't enabled Facebook as an Ad Partner on the Branch dashboard follow this section to do so. Advanced options for sending events can be found  here .    Navigate to the  Partner Management tab .     Search for  Facebook .     Click  Connect With Facebook     Login to Facebook if you are not logged in     Confirm that Branch can receive your public profile     Confirm that Branch can have permissions  ads_read  and  business_management   ads_read  is used to surface impressions and clicks on the Branch Dashboard.  business_management  is used to add Branch's system user to your ad account(s) with  REPORTS_ONLY  access. We will not make any other changes to your business.    Select the ad accounts for which you want to run app install ads or app engagement ads    Note  If you are having trouble finding or selecting the ad account(s) for which you want to run ads, please visit our  FAQ .     Click to select a Facebook app id for which you want to run Facebook ads     Copy the app id     Paste the app id and press  Save     Facebook is now enabled as an ad partner!  Note that if you have different attribution windows between Facebook and Branch, those will be highlighted. The warning has a link to the docs on how to align these attribution windows.     Finally, to create a Facebook Ads link click the  Create Facebook Link  button in the top right hand corner.", 
            "title": "Enable Facebook as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#create-an-ad-link", 
            "text": "Note  This section is optional if you are running app-only ads. We will automatically pull in campaign, ad set, ad, and creative information from Facebook. However, if you want users to be deep linked, you should follow the instructions in this section.    Create a Branch Ad link from the  Partner Management page 's  Create Facebook Link  button under the Facebook Partner and select  Create Display Link   Under the Define Section, pick a Link Name for later reference.  Configure the link with the Ad Partner set to  Facebook , and the Ad Format set to  Cross-platform Display .  Under the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS/Android and Desktop redirects are set to the desired destinations being promoted by the ad campaign.  Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Facebook Ads and set the campaign field to the same ad campaign name used in Facebook Ads.    In order for your campaign to run effectively, be sure to disable Deepviews. You can either  disable Deepviews  for your entire account or  disable Deepviews for one link .    Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#traffic-campaign-setup", 
            "text": "", 
            "title": "Traffic Campaign Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#configure-an-ad", 
            "text": "To set up a Facebook Traffic campaign, you will need to first create your campaign and use a Branch link as the Deep Link URL for the advertisements. Facebook Traffic Campaign information is available  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#create-your-campaign", 
            "text": "Navigate to  https://www.facebook.com/ads/create  while logged in to the account that owns your Facebook app.  Select  Traffic  as the campaign marketing objective.  Select either to drive traffic to your  Website  or your  App  Continue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.  Now select an advertisement format and customize your ad   Add your Branch Ad Link to your advertisement    If you chose to drive traffic to an App, locate the  Deep Link  field and copy and paste your Branch link there.     If you chose to drive traffic to a Website, paste your Branch Ad link into the  Website URL  field.     If you chose to drive traffic to a Website and are using a full-screen Canvas, add your Branch Ad link as the  Destination URL  for your canvas advertisement components.   Complete the rest of the ad campaign setup.      Optional: Ad formats with Multiple Links  Some ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#conversions-campaign-setup", 
            "text": "", 
            "title": "Conversions Campaign Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#configure-an-ad_1", 
            "text": "To set up a Facebook Conversions campaign, you will need to first create your campaign and use a Branch link as the Deep Link URL for the advertisements. Facebook Conversions Campaign information is available  here .   Prerequisites  As a prerequisite, Facebook requires you to report events about your users interacting with your content, for example: viewing, adding to cart, and purchasing. To add the Facebook Pixel to your website, and the Facebook SDK to your app, follow these instructions:   Sending App Events with the Facebook SDK  Sending Web Events with the Facebook Pixel", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#create-your-campaign_1", 
            "text": "Navigate to  https://www.facebook.com/ads/create  while logged in to the account that owns your Facebook app.  Select  Conversions  as the campaign marketing objective.  Select either to have the goal of having conversions on a  Website  or in an  App  Continue with campaign creation selecting audience, placement, and budget. Then press continue to enter the Advert creation step.  Now select an advertisement format and customize your ad   Add your Branch Ad Link to your advertisement    If you chose app conversions App, locate the  Deep Link  field and copy and paste your Branch link there.     If you chose Website conversions, paste your Branch Ad link into the  Website URL  field.     If you chose Website conversions and are using a full-screen Canvas, add your Branch Ad link as the  Destination URL  for your canvas advertisement components.   Complete the rest of the ad campaign setup.      Optional: Ad formats with Multiple Links  Some ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#view-your-data", 
            "text": "Facebook prevents Branch from measuring the number of clicks on their ads for install campaigns, so Branch's  Clicks  numbers for Facebook Ads are inaccurate when users are being directed to the App Store to download your app.   The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-traffic-conversion-ads/#troubleshooting", 
            "text": "We now have a dedicated  FAQ page for Facebook app ads . If you are having any issues with app ads, please review the FAQ.  If you are having issues with web-only ads, you can check out the FAQ. Then please  contact us  and include \"Facebook web-only ads issues\" in the subject.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/", 
            "text": "Facebook Platform Ads\n\n\nOverview\n\n\nBranch links can be used together with a variety of Facebook ads, allowing you to track ad performance on the Branch dashboard and to deep link new users from ad-driven installs directly to content the first time they open your app.\n\n\nNote: This documentation applies for Ad placements across Facebook and the Audience Network.\n\n\nThis documentation supports the following Facebook Ad Campaign types:\n\n\n\n\n\n\n\n\nFacebook Campaign Category\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nAwareness\n\n\nBrand Awareness\n\n\nCross-platform Display\n\n\n\n\n\n\nAwareness\n\n\nReach\n\n\nCross-platform Display\n\n\n\n\n\n\nConsideration\n\n\nVideo Views\n\n\nCross-platform Display\n\n\n\n\n\n\nConsideration\n\n\nLead Generation\n\n\nCross-platform Display\n\n\n\n\n\n\n\n\nFacebook Campaign Advert Format Support Table\n\n\n\n\n\n\n\n\nFacebook Campaign Type\n\n\nPhoto\n\n\nVideo\n\n\nCarousel\n\n\nSlideshow\n\n\nCollection\n\n\nDynamic\n\n\n\n\n\n\n\n\n\n\nBrand Awareness\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\n\n\n\n\n\n\n\nReach\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\n\n\n\n\n\n\n\nVideo Views\n\n\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\n\n\n\n\n\n\n\nLead Generation\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\u2714\ufe0e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooking for other Facebook Ad campaign types? Please check out our \nFacebook Ads Overview guide\n.\n\n\n\n\nSetup\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Facebook Ads you should \nintegrate the Branch SDK\n into your app.\n\n\n To use Branch links in Facebook App Install Ads ensure you have Universal Links set up on iOS or App Links enabled on Android to ensure correct routing behavior. For setup, checkout \nUniversal\n and \nApp Links\n.\n\n\n If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Facebook as an Ad Partner\n\n\n\n\nNote\n\n\nCompleting this section -- \"Enable Facebook as an Ad Partner\" -- will result in Branch sending app events to Facebook in order to attribute them back to ad campaigns.\n\n\n\n\nIf you haven't enabled Facebook as an Ad Partner on the Branch dashboard follow this section to do so. Advanced options for sending events can be found \nhere\n.\n\n\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nFacebook\n.\n\n\n\n\n\n\n\n\nClick \nConnect With Facebook\n\n\n\n\n\n\n\n\nLogin to Facebook if you are not logged in\n\n\n\n\n\n\n\n\nConfirm that Branch can receive your public profile\n\n\n\n\n\n\n\n\nConfirm that Branch can have permissions \nads_read\n and \nbusiness_management\n\n\n\n\nads_read\n is used to surface impressions and clicks on the Branch Dashboard. \nbusiness_management\n is used to add Branch's system user to your ad account(s) with \nREPORTS_ONLY\n access. We will not make any other changes to your business.\n\n\n\n\n\n\nSelect the ad accounts for which you want to run app install ads or app engagement ads\n\n\n\n\n\n\nNote\n\n\nIf you are having trouble finding or selecting the ad account(s) for which you want to run ads, please visit our \nFAQ\n.\n\n\n\n\n\n\n\n\nClick to select a Facebook app id for which you want to run Facebook ads\n\n\n\n\n\n\n\n\nCopy the app id\n\n\n\n\n\n\n\n\nPaste the app id and press \nSave\n\n\n\n\n\n\n\n\nFacebook is now enabled as an ad partner!\n\n\nNote that if you have different attribution windows between Facebook and Branch, those will be highlighted. The warning has a link to the docs on how to align these attribution windows.\n\n\n\n\n\n\n\n\nFinally, to create a Facebook Ads link click the \nCreate Facebook Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\nCreate an Ad Link\n\n\n\n\nCreate a Branch Ad link from the \nPartner Management page\n's \nCreate Facebook Link\n button under the Facebook Partner and select \nCreate Display Link\n or \nCreate Display Link\n depending on your campaign type.\n\n\n\nPick a Link Name for later reference.\n\n\nConfigure the link the Ad Partner set to \nFacebook\n and the Ad Format set to \nCross-Platform Display\n or \nCross-platform Display\n.\n\n\n\nUnder the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS/Android and Desktop redirects are set to the desired destinations being promoted by the ad campaign.\n\n\n\nUnder the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Facebook Ads and set the campaign field to the same ad campaign name used in Facebook Ads.\n\n\n\n\n\n\n\nIn order for your campaign to run effectively, be sure to disable Deepviews. You can either \ndisable Deepviews\n for your entire account or \ndisable Deepviews for one link\n.\n\n\n\n\n\n\nOptional: Deep Link Data\n\n\nYou can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the \nDeep Link Routing\n page to learn more.\n\n\n\n\nBrand Awareness Campaign Setup\n\n\nConfigure an Ad\n\n\nTo set up Facebook Brand Awareness Campaigns, you will need to insert your Branch Ad Link as the Website destination for the created ad. Facebook's Ad guide for Brand Awareness Campaigns is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nNavigate to \nhttps://www.facebook.com/ads/create\n while logged in to the account that owns your Facebook app.\n\n\nSelect \nBrand Awareness\n as the campaign marketing objective.\n\n\n\nContinue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.\n\n\nNow select an advertisement format and customize your ad\n\n\nNow add your Branch link to your advertisement\n\n\nSelect the \nAdd a Website URL\n checkbox and copy your Branch Ad Link into the \nWebsite URL\n field.\n    \n\n\nIf you selected to add a full screen Canvas advertisement, add your Branch Ad link as the \nDestination URL\n for your canvas advertisement components\n\n\n\n\n\n\nComplete the rest of the ad campaign setup.\n\n\n\n\n\n\nOptional: Ad formats with Multiple Links\n\n\nSome ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.\n\n\n\n\nReach Campaign Setup\n\n\nConfigure an Ad\n\n\nTo set up Facebook Reach Campaigns, you will need to insert your Branch Ad Link as the Website destination for the created ad. Facebook's Ad guide for Reach Campaigns is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nNavigate to \nhttps://www.facebook.com/ads/create\n while logged in to the account that owns your Facebook app.\n\n\nSelect \nReach\n as the campaign marketing objective.\n\n\n\nContinue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.\n\n\nNow select an advertisement format and customize your ad\n\n\nNow add your Branch link to your advertisement\n\n\nSelect the \nAdd a Website URL\n checkbox and copy your Branch Ad Link into the \nWebsite URL\n field.\n    \n\n\nIf you selected to add a full screen Canvas advertisement, add your Branch Ad link as the \nDestination URL\n for your canvas advertisement components\n\n\n\n\n\n\nComplete the rest of the ad campaign setup.\n\n\n\n\n\n\nOptional: Ad formats with Multiple Links\n\n\nSome ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.\n\n\n\n\nVideo Views Campaign Setup\n\n\nConfigure an Ad\n\n\nTo set up Facebook Video Views Campaigns, you will need to insert your Branch Ad Link as the Website destination for the created ad. Facebook's Ad guide for Video Views Campaigns is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nNavigate to \nhttps://www.facebook.com/ads/create\n while logged in to the account that owns your Facebook app.\n\n\nSelect \nVideo Views\n as the campaign marketing objective.\n\n\n\nContinue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.\n\n\nNow select an advertisement format and customize your ad\n\n\nNow add your Branch link to your advertisement\n\n\nSelect the \nAdd a Website URL\n checkbox and copy your Branch Ad Link into the \nWebsite URL\n field.\n    \n\n\nIf you selected to add a full screen Canvas advertisement, add your Branch Ad link as the \nDestination URL\n for your canvas advertisement components\n\n\n\n\n\n\nComplete the rest of the ad campaign setup.\n\n\n\n\n\n\nOptional: Ad formats with Multiple Links\n\n\nSome ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.\n\n\n\n\nLead Generation Campaign Setup\n\n\nConfigure an Ad\n\n\nTo set up Facebook Lead Generation Campaigns, you will need to insert your Branch Ad Link as the Website destination for the created ad. After users fill out the lead form, they'll be directed to your website or app after through the Branch Ad link. Facebook's Ad guide for Lead Generation Campaigns is available \nhere\n.\n\n\nCreate Your Campaign\n\n\n\n\nNavigate to \nhttps://www.facebook.com/ads/create\n while logged in to the account that owns your Facebook app.\n\n\nSelect \nLead Generation\n as the campaign marketing objective.\n\n\n\nContinue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.\n\n\nNow select an advertisement format and customize your ad\n\n\nEnter the Lead form creation portal and setup your form.\n\n\nOn the final \"Thank you\" screen, locate and paste your Branch Ad Link into the \nWebsite link\n field.\n\n\n\nComplete the rest of the ad campaign setup.\n\n\n\n\nView Your Data\n\n\n\n\nFacebook prevents Branch from measuring the number of clicks on their ads for install campaigns, so Branch's \nClicks\n numbers for Facebook Ads are inaccurate when users are being directed to the App Store to download your app.\n\n\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nWe now have a dedicated \nFAQ page for Facebook app ads\n. If you are having any issues with app ads, please review the FAQ.\n\n\nIf you are having issues with web-only ads, you can check out the FAQ. Then please \ncontact us\n and include \"Facebook web-only ads issues\" in the subject.", 
            "title": "Facebook Platform Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#facebook-platform-ads", 
            "text": "", 
            "title": "Facebook Platform Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#overview", 
            "text": "Branch links can be used together with a variety of Facebook ads, allowing you to track ad performance on the Branch dashboard and to deep link new users from ad-driven installs directly to content the first time they open your app.  Note: This documentation applies for Ad placements across Facebook and the Audience Network.  This documentation supports the following Facebook Ad Campaign types:     Facebook Campaign Category  Campaign Type/Objective  Branch Ad Format      Awareness  Brand Awareness  Cross-platform Display    Awareness  Reach  Cross-platform Display    Consideration  Video Views  Cross-platform Display    Consideration  Lead Generation  Cross-platform Display", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#facebook-campaign-advert-format-support-table", 
            "text": "Facebook Campaign Type  Photo  Video  Carousel  Slideshow  Collection  Dynamic      Brand Awareness  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e      Reach  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e      Video Views   \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e      Lead Generation  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e  \u2714\ufe0e        Looking for other Facebook Ad campaign types? Please check out our  Facebook Ads Overview guide .", 
            "title": "Facebook Campaign Advert Format Support Table"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#setup", 
            "text": "Prerequisites    To track installs from Facebook Ads you should  integrate the Branch SDK  into your app.   To use Branch links in Facebook App Install Ads ensure you have Universal Links set up on iOS or App Links enabled on Android to ensure correct routing behavior. For setup, checkout  Universal  and  App Links .   If you want to deep link from your ads directly to content, you should  configure deep link routing .   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#enable-facebook-as-an-ad-partner", 
            "text": "Note  Completing this section -- \"Enable Facebook as an Ad Partner\" -- will result in Branch sending app events to Facebook in order to attribute them back to ad campaigns.   If you haven't enabled Facebook as an Ad Partner on the Branch dashboard follow this section to do so. Advanced options for sending events can be found  here .    Navigate to the  Partner Management tab .     Search for  Facebook .     Click  Connect With Facebook     Login to Facebook if you are not logged in     Confirm that Branch can receive your public profile     Confirm that Branch can have permissions  ads_read  and  business_management   ads_read  is used to surface impressions and clicks on the Branch Dashboard.  business_management  is used to add Branch's system user to your ad account(s) with  REPORTS_ONLY  access. We will not make any other changes to your business.    Select the ad accounts for which you want to run app install ads or app engagement ads    Note  If you are having trouble finding or selecting the ad account(s) for which you want to run ads, please visit our  FAQ .     Click to select a Facebook app id for which you want to run Facebook ads     Copy the app id     Paste the app id and press  Save     Facebook is now enabled as an ad partner!  Note that if you have different attribution windows between Facebook and Branch, those will be highlighted. The warning has a link to the docs on how to align these attribution windows.     Finally, to create a Facebook Ads link click the  Create Facebook Link  button in the top right hand corner.", 
            "title": "Enable Facebook as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#create-an-ad-link", 
            "text": "Create a Branch Ad link from the  Partner Management page 's  Create Facebook Link  button under the Facebook Partner and select  Create Display Link  or  Create Display Link  depending on your campaign type.  Pick a Link Name for later reference.  Configure the link the Ad Partner set to  Facebook  and the Ad Format set to  Cross-Platform Display  or  Cross-platform Display .  Under the Configure Options tab, navigate to the Redirects sub section and ensure that the iOS/Android and Desktop redirects are set to the desired destinations being promoted by the ad campaign.  Under the Analytics Tags sub section additional tags can be set. It is recommended to fill in these fields as they can be used as filters in Branch's Ads Analytics view. To best connect your ad link with your Adwords Campaign, set the channel field to Facebook Ads and set the campaign field to the same ad campaign name used in Facebook Ads.    In order for your campaign to run effectively, be sure to disable Deepviews. You can either  disable Deepviews  for your entire account or  disable Deepviews for one link .    Optional: Deep Link Data  You can use this configuration section to specify custom link parameters that will be deep linked into the app after install. These could include a coupon code or a page identifier to route the user. Visit the  Deep Link Routing  page to learn more.", 
            "title": "Create an Ad Link"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#brand-awareness-campaign-setup", 
            "text": "", 
            "title": "Brand Awareness Campaign Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#configure-an-ad", 
            "text": "To set up Facebook Brand Awareness Campaigns, you will need to insert your Branch Ad Link as the Website destination for the created ad. Facebook's Ad guide for Brand Awareness Campaigns is available  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#create-your-campaign", 
            "text": "Navigate to  https://www.facebook.com/ads/create  while logged in to the account that owns your Facebook app.  Select  Brand Awareness  as the campaign marketing objective.  Continue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.  Now select an advertisement format and customize your ad  Now add your Branch link to your advertisement  Select the  Add a Website URL  checkbox and copy your Branch Ad Link into the  Website URL  field.\n      If you selected to add a full screen Canvas advertisement, add your Branch Ad link as the  Destination URL  for your canvas advertisement components    Complete the rest of the ad campaign setup.    Optional: Ad formats with Multiple Links  Some ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#reach-campaign-setup", 
            "text": "", 
            "title": "Reach Campaign Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#configure-an-ad_1", 
            "text": "To set up Facebook Reach Campaigns, you will need to insert your Branch Ad Link as the Website destination for the created ad. Facebook's Ad guide for Reach Campaigns is available  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#create-your-campaign_1", 
            "text": "Navigate to  https://www.facebook.com/ads/create  while logged in to the account that owns your Facebook app.  Select  Reach  as the campaign marketing objective.  Continue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.  Now select an advertisement format and customize your ad  Now add your Branch link to your advertisement  Select the  Add a Website URL  checkbox and copy your Branch Ad Link into the  Website URL  field.\n      If you selected to add a full screen Canvas advertisement, add your Branch Ad link as the  Destination URL  for your canvas advertisement components    Complete the rest of the ad campaign setup.    Optional: Ad formats with Multiple Links  Some ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#video-views-campaign-setup", 
            "text": "", 
            "title": "Video Views Campaign Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#configure-an-ad_2", 
            "text": "To set up Facebook Video Views Campaigns, you will need to insert your Branch Ad Link as the Website destination for the created ad. Facebook's Ad guide for Video Views Campaigns is available  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#create-your-campaign_2", 
            "text": "Navigate to  https://www.facebook.com/ads/create  while logged in to the account that owns your Facebook app.  Select  Video Views  as the campaign marketing objective.  Continue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.  Now select an advertisement format and customize your ad  Now add your Branch link to your advertisement  Select the  Add a Website URL  checkbox and copy your Branch Ad Link into the  Website URL  field.\n      If you selected to add a full screen Canvas advertisement, add your Branch Ad link as the  Destination URL  for your canvas advertisement components    Complete the rest of the ad campaign setup.    Optional: Ad formats with Multiple Links  Some ad formats such as Carousel format can handle multiple deep links. To have link performance data on each image or component of the advertisement, create multiple Branch Ad links to be used in each part of the multiple link advertisement format. This format is useful if you want to drive customers to different content pieces or products.", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#lead-generation-campaign-setup", 
            "text": "", 
            "title": "Lead Generation Campaign Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#configure-an-ad_3", 
            "text": "To set up Facebook Lead Generation Campaigns, you will need to insert your Branch Ad Link as the Website destination for the created ad. After users fill out the lead form, they'll be directed to your website or app after through the Branch Ad link. Facebook's Ad guide for Lead Generation Campaigns is available  here .", 
            "title": "Configure an Ad"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#create-your-campaign_3", 
            "text": "Navigate to  https://www.facebook.com/ads/create  while logged in to the account that owns your Facebook app.  Select  Lead Generation  as the campaign marketing objective.  Continue with campaign creation selecting the app to advertise, audience, placement, and budget. Then press continue to enter the Advert creation step.  Now select an advertisement format and customize your ad  Enter the Lead form creation portal and setup your form.  On the final \"Thank you\" screen, locate and paste your Branch Ad Link into the  Website link  field.  Complete the rest of the ad campaign setup.", 
            "title": "Create Your Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#view-your-data", 
            "text": "Facebook prevents Branch from measuring the number of clicks on their ads for install campaigns, so Branch's  Clicks  numbers for Facebook Ads are inaccurate when users are being directed to the App Store to download your app.   The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-platform-ads/#troubleshooting", 
            "text": "We now have a dedicated  FAQ page for Facebook app ads . If you are having any issues with app ads, please review the FAQ.  If you are having issues with web-only ads, you can check out the FAQ. Then please  contact us  and include \"Facebook web-only ads issues\" in the subject.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/", 
            "text": "Facebook Dynamic Ads\n\n\nOverview\n\n\nBranch links can be used in conjunction with Facebook's dynamic advertisements. Dynamic remarketing campaigns on desktop have been proven to deliver 16x return on ad spend. Now you can easily set up Facebook Dynamic Ads on mobile to drive incredible results.\n\n\nNote: This documentation applies for Ad placements across Facebook and the Audience Network.\n\n\nThis documentation supports the following Facebook Ad Campaign types:\n\n\n\n\n\n\n\n\nFacebook Campaign Category\n\n\nCampaign Type/Objective\n\n\nBranch Ad Format\n\n\n\n\n\n\n\n\n\n\nConversion\n\n\nProduct Catalogue Sales\n\n\nCross-platform Product Links\n\n\n\n\n\n\n\n\nFacebook Campaign Advert Format Support Table\n\n\n\n\n\n\n\n\nFacebook Campaign Type\n\n\nPhoto\n\n\nVideo\n\n\nCarousel\n\n\nSlideshow\n\n\nCollection\n\n\nDynamic\n\n\n\n\n\n\n\n\n\n\nProduct Catalogue Sales\n\n\n\u2714\ufe0e\n\n\n\n\n\u2714\ufe0e\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooking for other Facebook Ad campaign types? Please check out our \nFacebook Ads Overview guide\n.\n\n\n\n\n\n\nPrerequisites\n\n\n\n\n To track installs from Facebook Ads you should \nintegrate the Branch SDK\n into your app.\n\n\n To use Branch links in Facebook App Install Ads ensure you have Universal Links set up on iOS or App Links enabled on Android to ensure correct routing behavior. For setup, checkout \nUniversal\n and \nApp Links\n.\n\n\n If you want to deep link from your ads directly to content, you should \nconfigure deep link routing\n.\n\n\n Use \nBranch Deep Linked Feeds\n to create your Facebook Dynamic Ad compatible deep links.\n\n\n Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.\n\n\n\n\n\n\nEnable Facebook as an Ad Partner\n\n\n\n\nNote\n\n\nCompleting this section -- \"Enable Facebook as an Ad Partner\" -- will result in Branch sending app events to Facebook in order to attribute them back to ad campaigns.\n\n\n\n\nIf you haven't enabled Facebook as an Ad Partner on the Branch dashboard follow this section to do so. Advanced options for sending events can be found \nhere\n.\n\n\n\n\n\n\nNavigate to the \nPartner Management tab\n.\n\n\n\n\n\n\n\n\nSearch for \nFacebook\n.\n\n\n\n\n\n\n\n\nClick \nConnect With Facebook\n\n\n\n\n\n\n\n\nLogin to Facebook if you are not logged in\n\n\n\n\n\n\n\n\nConfirm that Branch can receive your public profile\n\n\n\n\n\n\n\n\nConfirm that Branch can have permissions \nads_read\n and \nbusiness_management\n\n\n\n\nads_read\n is used to surface impressions and clicks on the Branch Dashboard. \nbusiness_management\n is used to add Branch's system user to your ad account(s) with \nREPORTS_ONLY\n access. We will not make any other changes to your business.\n\n\n\n\n\n\nSelect the ad accounts for which you want to run app install ads or app engagement ads\n\n\n\n\n\n\nNote\n\n\nIf you are having trouble finding or selecting the ad account(s) for which you want to run ads, please visit our \nFAQ\n.\n\n\n\n\n\n\n\n\nClick to select a Facebook app id for which you want to run Facebook ads\n\n\n\n\n\n\n\n\nCopy the app id\n\n\n\n\n\n\n\n\nPaste the app id and press \nSave\n\n\n\n\n\n\n\n\nFacebook is now enabled as an ad partner!\n\n\nNote that if you have different attribution windows between Facebook and Branch, those will be highlighted. The warning has a link to the docs on how to align these attribution windows.\n\n\n\n\n\n\n\n\nFinally, to create a Facebook Ads link click the \nCreate Facebook Link\n button in the top right hand corner.\n\n\n\n\n\n\n\n\nSetup\n\n\nCreate a Deep Linked Ad Feed\n\n\nBranch makes it easy for you to create and manage feeds with Facebook-compatible deep links.\n\n\n\n\nCreate a Branch Deep Linked Ad Feed from the \nPartner Management page\n's \nCreate Facebook Link\n button under the Google Adwords Partner and select \nCreate Product Link\n\n\n\n\nEnter a Deep Linked Feed Name.\n\n\nEnter a already set up feed source or upload a new source.\n\n\nConfigure the feed with the Ad Partner set to \nFacebook\n, and the Ad Format set to \nProduct\n.\n\n\n\nOn the next section, select any keys from your feed that you'd like to include in the deep linked data contained in the generated links.\n\n\n\nIf you used a Feed Source hosted on a URL (recommended), you will see two options for accessing your feed. We recommend selecting \u201cSchedule Refresh.\u201d If you select this option, Branch will host a URL for your Deep Linked Feed that will update itself from your Feed Source URL at regular intervals.\n\n\n\nDownload the feed data or copy the deep linked feed URL (for hosted feeds) to be used in your Ad Campaign.\n\n\n\n\nUpload your feed to Facebook\n\n\nTo set up a Facebook Product Catalogue campaign, you will need to first create your campaign and use a Branch link as the Deep Link URL for the advertisements. Facebook Dynamic Ads information is available \nhere\n.\n\n\n\n\nNavigate to your \nFacebook Ads Manager\n.\n\n\nIn the top left hand corner, click into the menu, select \nAll tools\n, and select \nProduct Catalogues\n.\n\n\n\nFrom the drop down menu click \"Create new catalog...\", name it (remember this name, you'll need it later) and select \"Products sold online\".\n\n\n\nNow that you have a product catalog, you can add a new feed. Click \"Add Product Feed.\"\n\n\n\nIf you have a \nHosted Deep Linked Feed\n (recommended), select the option \"Scheduled recurring uploads.\" Paste your Branch-provided URL into the \nFeed URL\n text field.\n\n\n\n\n\nIf you've created a Deep Linked Feed CSV file to upload, select the option \"Single upload: Upload a single file feed now.\" Select the Deep Linked Feed URL or CSV file you would like to upload to Facebook, and click \"Upload\".\n\n\n\nWait for the upload to complete successfully. If you'd like to create a \"Product set\" (a subset of products in your catalog for use in specific ad sets) you can do that now.\n\n\n\n\nSetting up App Events and the Facebook Pixel\n\n\nFacebook requires you to report events about your users interacting with your content, for example: viewing, adding to cart, and purchasing. To add the Facebook Pixel to your website, and the Facebook SDK to your app, follow these instructions:\n\n\n\n\nSending App Events with the Facebook SDK\n\n\nSending Web Events with the Facebook Pixel\n\n\n\n\nUse the \"Product events\" tab in your Product Catalog view to ensure that Facebook is registering the events against your Product Catalog items correctly.\n\n\nCreating a Dynamic Ad Campaign\n\n\n\n\nNavigate to \nhttps://www.facebook.com/ads/create\n while logged in to the account that owns your Facebook app.\n\n\nChoose \nProduct Catalog Sales\n. Select the Product Catalog to which you uploaded your Deep Linked Feed.\n\n\n\nSelect the targeting, bid, budget and placements that you'd like.\n\n\nSelect your desired ad format and launch your campaign. The Branch deep linked feed will be automatically set up in your Facebook product catalogue ads.\n\n\n\n\n\n\nDriving Installs with Dynamic Ads\n\n\nBy default, Facebook sends customers without the app to your mobile website. To drive installs, you can send customers without your app the app store by adding a \nweb_should_fallback\n column to your Feed Source and setting each row to \nfalse\n. Then, after you've created your campaign, edit the ad within your ad set. Under \"Creative,\" set your \"App link destination\" to \"Deep link, app store backup.\"\n\n\n\n\nView Your Data\n\n\n\n\nFacebook prevents Branch from measuring the number of clicks on their ads for install campaigns, so Branch's \nClicks\n numbers for Facebook Ads are inaccurate when users are being directed to the App Store to download your app.\n\n\n\n\nThe \nAds Analytics Page\n on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.\n\n\n\n\nThe table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a \ndownload button\n to retrieve the chart's content as a CSV file.\n\n\n\n\n\n\nInteracting with your data\n\n\nBreakdown and compare aspects of your Ad campaigns' performance by using the \nCompare by +\n button to add a parameter to split the data displayed data by.\n\n\nThen use the \nand +\n button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.\n\n\n\n\nTroubleshooting\n\n\nWe now have a dedicated \nFAQ page for Facebook app ads\n. If you are having any issues with app ads, please review the FAQ.\n\n\nIf you are having issues with web-only ads, you can check out the FAQ. Then please \ncontact us\n and include \"Facebook web-only ads issues\" in the subject.", 
            "title": "Facebook Dynamic Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/#facebook-dynamic-ads", 
            "text": "", 
            "title": "Facebook Dynamic Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/#overview", 
            "text": "Branch links can be used in conjunction with Facebook's dynamic advertisements. Dynamic remarketing campaigns on desktop have been proven to deliver 16x return on ad spend. Now you can easily set up Facebook Dynamic Ads on mobile to drive incredible results.  Note: This documentation applies for Ad placements across Facebook and the Audience Network.  This documentation supports the following Facebook Ad Campaign types:     Facebook Campaign Category  Campaign Type/Objective  Branch Ad Format      Conversion  Product Catalogue Sales  Cross-platform Product Links", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/#facebook-campaign-advert-format-support-table", 
            "text": "Facebook Campaign Type  Photo  Video  Carousel  Slideshow  Collection  Dynamic      Product Catalogue Sales  \u2714\ufe0e   \u2714\ufe0e         Looking for other Facebook Ad campaign types? Please check out our  Facebook Ads Overview guide .    Prerequisites    To track installs from Facebook Ads you should  integrate the Branch SDK  into your app.   To use Branch links in Facebook App Install Ads ensure you have Universal Links set up on iOS or App Links enabled on Android to ensure correct routing behavior. For setup, checkout  Universal  and  App Links .   If you want to deep link from your ads directly to content, you should  configure deep link routing .   Use  Branch Deep Linked Feeds  to create your Facebook Dynamic Ad compatible deep links.   Ads is a premium product priced on Monthly Active Users. Sign up for the Ads product to enable this functionality.", 
            "title": "Facebook Campaign Advert Format Support Table"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/#enable-facebook-as-an-ad-partner", 
            "text": "Note  Completing this section -- \"Enable Facebook as an Ad Partner\" -- will result in Branch sending app events to Facebook in order to attribute them back to ad campaigns.   If you haven't enabled Facebook as an Ad Partner on the Branch dashboard follow this section to do so. Advanced options for sending events can be found  here .    Navigate to the  Partner Management tab .     Search for  Facebook .     Click  Connect With Facebook     Login to Facebook if you are not logged in     Confirm that Branch can receive your public profile     Confirm that Branch can have permissions  ads_read  and  business_management   ads_read  is used to surface impressions and clicks on the Branch Dashboard.  business_management  is used to add Branch's system user to your ad account(s) with  REPORTS_ONLY  access. We will not make any other changes to your business.    Select the ad accounts for which you want to run app install ads or app engagement ads    Note  If you are having trouble finding or selecting the ad account(s) for which you want to run ads, please visit our  FAQ .     Click to select a Facebook app id for which you want to run Facebook ads     Copy the app id     Paste the app id and press  Save     Facebook is now enabled as an ad partner!  Note that if you have different attribution windows between Facebook and Branch, those will be highlighted. The warning has a link to the docs on how to align these attribution windows.     Finally, to create a Facebook Ads link click the  Create Facebook Link  button in the top right hand corner.", 
            "title": "Enable Facebook as an Ad Partner"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/#create-a-deep-linked-ad-feed", 
            "text": "Branch makes it easy for you to create and manage feeds with Facebook-compatible deep links.   Create a Branch Deep Linked Ad Feed from the  Partner Management page 's  Create Facebook Link  button under the Google Adwords Partner and select  Create Product Link   Enter a Deep Linked Feed Name.  Enter a already set up feed source or upload a new source.  Configure the feed with the Ad Partner set to  Facebook , and the Ad Format set to  Product .  On the next section, select any keys from your feed that you'd like to include in the deep linked data contained in the generated links.  If you used a Feed Source hosted on a URL (recommended), you will see two options for accessing your feed. We recommend selecting \u201cSchedule Refresh.\u201d If you select this option, Branch will host a URL for your Deep Linked Feed that will update itself from your Feed Source URL at regular intervals.  Download the feed data or copy the deep linked feed URL (for hosted feeds) to be used in your Ad Campaign.", 
            "title": "Create a Deep Linked Ad Feed"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/#upload-your-feed-to-facebook", 
            "text": "To set up a Facebook Product Catalogue campaign, you will need to first create your campaign and use a Branch link as the Deep Link URL for the advertisements. Facebook Dynamic Ads information is available  here .   Navigate to your  Facebook Ads Manager .  In the top left hand corner, click into the menu, select  All tools , and select  Product Catalogues .  From the drop down menu click \"Create new catalog...\", name it (remember this name, you'll need it later) and select \"Products sold online\".  Now that you have a product catalog, you can add a new feed. Click \"Add Product Feed.\"  If you have a  Hosted Deep Linked Feed  (recommended), select the option \"Scheduled recurring uploads.\" Paste your Branch-provided URL into the  Feed URL  text field.   If you've created a Deep Linked Feed CSV file to upload, select the option \"Single upload: Upload a single file feed now.\" Select the Deep Linked Feed URL or CSV file you would like to upload to Facebook, and click \"Upload\".  Wait for the upload to complete successfully. If you'd like to create a \"Product set\" (a subset of products in your catalog for use in specific ad sets) you can do that now.", 
            "title": "Upload your feed to Facebook"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/#setting-up-app-events-and-the-facebook-pixel", 
            "text": "Facebook requires you to report events about your users interacting with your content, for example: viewing, adding to cart, and purchasing. To add the Facebook Pixel to your website, and the Facebook SDK to your app, follow these instructions:   Sending App Events with the Facebook SDK  Sending Web Events with the Facebook Pixel   Use the \"Product events\" tab in your Product Catalog view to ensure that Facebook is registering the events against your Product Catalog items correctly.", 
            "title": "Setting up App Events and the Facebook Pixel"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/#creating-a-dynamic-ad-campaign", 
            "text": "Navigate to  https://www.facebook.com/ads/create  while logged in to the account that owns your Facebook app.  Choose  Product Catalog Sales . Select the Product Catalog to which you uploaded your Deep Linked Feed.  Select the targeting, bid, budget and placements that you'd like.  Select your desired ad format and launch your campaign. The Branch deep linked feed will be automatically set up in your Facebook product catalogue ads.    Driving Installs with Dynamic Ads  By default, Facebook sends customers without the app to your mobile website. To drive installs, you can send customers without your app the app store by adding a  web_should_fallback  column to your Feed Source and setting each row to  false . Then, after you've created your campaign, edit the ad within your ad set. Under \"Creative,\" set your \"App link destination\" to \"Deep link, app store backup.\"", 
            "title": "Creating a Dynamic Ad Campaign"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/#view-your-data", 
            "text": "Facebook prevents Branch from measuring the number of clicks on their ads for install campaigns, so Branch's  Clicks  numbers for Facebook Ads are inaccurate when users are being directed to the App Store to download your app.   The  Ads Analytics Page  on the Branch dashboard provides an interactive time series graph and table to view the performance of your Ad campaigns.   The table shows summary data on the performance of each Ad campaign. On the right top side of the table you can find a  download button  to retrieve the chart's content as a CSV file.    Interacting with your data  Breakdown and compare aspects of your Ad campaigns' performance by using the  Compare by +  button to add a parameter to split the data displayed data by.  Then use the  and +  button to refine the data displayed to gain deeper insight into the performance of your Ad campaigns.", 
            "title": "View Your Data"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-dynamic-ads/#troubleshooting", 
            "text": "We now have a dedicated  FAQ page for Facebook app ads . If you are having any issues with app ads, please review the FAQ.  If you are having issues with web-only ads, you can check out the FAQ. Then please  contact us  and include \"Facebook web-only ads issues\" in the subject.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/pages/apps/v2event/", 
            "text": "V2 Event\n\n\nOverview\n\n\nIt's always been possible to track events with the Branch SDK, including installs, opens, purchases, and more. Now we're introducing a new way to track events that make reporting and analytics a whole lot better and easier.\n\n\nThe new v2 events have better tracking and analytics options in the Branch dashboard, and the new event structure makes integration with third party analytics providers quicker and tighter.\n\n\nWe're standardizing the way you track \"classes\" of events. For example: all events related to a customer purchasing are bucketed into a \"purchase\" class of data items, and all events related to users interacting with your in-app content are linked to a \"content\" class of data items.\n\n\nBelow are examples of the kinds of events you'll likely be interested in tracking, and we'll show you the way to track through our SDKs.\n\n\nPrerequisites\n\n\nWith event tracking, it's important to track the objects related to the event occurring. Branch provides a class to describe your in-app content items  called the \nBranch Universal Object\n. For any of the events tracked below, make sure to include the universal object(s) involved. For example, if you want to track when someone purchases 3 items, you'd want to create a Branch Universal Object per item, and pass them along when tracking the event.\n\n\nRefer to the above document to set up Branch Universal Objects.\n\n\nCurrent Compatibility\n\n\nThere are a few products and features unsupported by this new method of tracking events. We clarify what's currently supported and what isn't below.\n\n\nAcceptance\n\n\nTracking these events will propagate to Ad Networks, like Criteo. For example, if you track the purchase event through Branch, this will map to Criteo's Purchase event.\n\n\nThese events will also have analytics, so you can understand their performance, using the new \nPeople-Based Attribution\n.\n\n\nLimitations\n\n\nAs of now, any calls made through these SDK methods will \nnot\n yet:\n\n\n\n\nAppear in Liveview.\n\n\nBe settable events for Data Integrations.\n\n\nBe events you can target a Journey with.\n\n\nSee Analytics on the old Analytics pipeline. Read more about our new \nPeople-Based Attribution\n.\n\n\n\n\nAvailable Events\n\n\nUse the table below to quickly find the event you want to track.\n\n\n\n\n\n\n\n\nEvent Name\n\n\nEvent Category\n\n\niOS\n\n\nAndroid\n\n\nAPI\n\n\n\n\n\n\n\n\n\n\nAdd To Cart\n\n\nCommerce Event\n\n\nBranchStandardEventAddToCart\n\n\nBRANCH_STANDARD_EVENT.ADD_TO_CART\n\n\nADD_TO_CART\n\n\n\n\n\n\nAdd To Wishlist\n\n\nCommerce Event\n\n\nBranchStandardEventAddToWishlist\n\n\nBRANCH_STANDARD_EVENT.ADD_TO_WISHLIST\n\n\nADD_TO_WISHLIST\n\n\n\n\n\n\nView Cart\n\n\nCommerce Event\n\n\nBranchStandardEventViewCart\n\n\nBRANCH_STANDARD_EVENT.VIEW_CART\n\n\nVIEW_CART\n\n\n\n\n\n\nInitiate Purchase\n\n\nCommerce Event\n\n\nBranchStandardEventInitiatePurchase\n\n\nBRANCH_STANDARD_EVENT.INITIATE_PURCHASE\n\n\nINITIATE_PURCHASE\n\n\n\n\n\n\nAdd Payment Info\n\n\nCommerce Event\n\n\nBranchStandardEventAddPaymentInfo\n\n\nBRANCH_STANDARD_EVENT.ADD_PAYMENT_INFO\n\n\nADD_PAYMENT_INFO\n\n\n\n\n\n\nPurchase\n\n\nCommerce Event\n\n\nBranchStandardEventPurchase\n\n\nBRANCH_STANDARD_EVENT.PURCHASE\n\n\nPURCHASE\n\n\n\n\n\n\nSpend Credits\n\n\nCommerce Event\n\n\nBranchStandardEventSpendCredits\n\n\nBRANCH_STANDARD_EVENT.SPEND_CREDITS\n\n\nSPEND_CREDITS\n\n\n\n\n\n\nSearch\n\n\nContent Event\n\n\nBranchStandardEventSearch\n\n\nBRANCH_STANDARD_EVENT.SEARCH\n\n\nSEARCH\n\n\n\n\n\n\nView Item\n\n\nContent Event\n\n\nBranchStandardEventViewItem\n\n\nBRANCH_STANDARD_EVENT.VIEW_ITEM\n\n\nVIEW_ITEM\n\n\n\n\n\n\nView Items\n\n\nContent Event\n\n\nBranchStandardEventViewItems\n\n\nBRANCH_STANDARD_EVENT.VIEW_ITEMS\n\n\nVIEW_ITEMS\n\n\n\n\n\n\nRate\n\n\nContent Event\n\n\nBranchStandardEventRate\n\n\nBRANCH_STANDARD_EVENT.RATE\n\n\nRATE\n\n\n\n\n\n\nShare\n\n\nContent Event\n\n\nBranchStandardEventShare\n\n\nBRANCH_STANDARD_EVENT.SHARE\n\n\nSHARE\n\n\n\n\n\n\nComplete Registration\n\n\nLifecycle Event\n\n\nBranchStandardEventCompleteRegistration\n\n\nBRANCH_STANDARD_EVENT.COMPLETE_REGISTRATION\n\n\nCOMPLETE_REGISTRATION\n\n\n\n\n\n\nComplete Tutorial\n\n\nLifecycle Event\n\n\nBranchStandardEventCompleteTutorial\n\n\nBRANCH_STANDARD_EVENT.COMPLETE_TUTORIAL\n\n\nCOMPLETE_TUTORIAL\n\n\n\n\n\n\nAchieve Level\n\n\nLifecycle Event\n\n\nBranchStandardEventAchieveLevel\n\n\nBRANCH_STANDARD_EVENT.ACHIEVE_LEVEL\n\n\nACHIEVE_LEVEL\n\n\n\n\n\n\nUnlock Achievement\n\n\nLifecycle Event\n\n\nBranchStandardEventUnlockAchievement\n\n\nBRANCH_STANDARD_EVENT.UNLOCK_ACHIEVEMENT\n\n\nUNLOCK_ACHIEVEMENT\n\n\n\n\n\n\n\n\nTrack Commerce Events\n\n\nCommerce events describe events that relate to a customer interacting with your products and converting by purchasing. These are events like adding payment information, purchasing, viewing products, etc. If you have enabled Branch Universal Ads, these events will automatically map to certain Ad Partners. Start by creating a Branch Universal Object for each product that is associated with the event you're tracking.\n\n\nFrom there, add the Branch universal object to the tracked event, and use the right predefined constant. For example, the code snippet below is to track when a user adds to cart, but simply replace that constant with another constant to track a different event.\n\n\nA note on currency and exchange rates:\n\nIf you track commerce events without a currency, we assume they are USD. If you track commerce events with a currency other than USD, we will convert the \nrevenue\n specified to USD, using a recent exchange rate. This allows you to easily visualize revenue on the Dashboard, across many countries and currencies, because all units are USD. The exchange rate is pulled from \nopenexchangerates.org\n regularly, and is generally within an hour of the realtime exchange rate. If you view raw Branch events via either Webhooks or Exports, you can see the exchange rate used.\n\n\niOS\n\n\n\n\n\n\nSwift\n\n\n// Create a BranchUniversalObject with your content data:\n\n\nlet\n \nbranchUniversalObject\n \n=\n \nBranchUniversalObject\n.\ninit\n()\n\n\n\n// ...add data to the branchUniversalObject as needed...\n\n\nbranchUniversalObject\n.\ncanonicalIdentifier\n \n=\n \nitem/12345\n\n\nbranchUniversalObject\n.\ncanonicalUrl\n        \n=\n \nhttps://branch.io/item/12345\n\n\nbranchUniversalObject\n.\ntitle\n               \n=\n \nMy Item Title\n\n\n\n// Create a BranchEvent:\n\n\nlet\n \nevent\n \n=\n \nBranchEvent\n.\nstandardEvent\n(.\npurchase\n)\n\n\n\n// Add the BranchUniversalObjects with the content:\n\n\nevent\n.\ncontentItems\n     \n=\n \n[\n \nbranchUniversalObject\n \n]\n\n\n\n// Add relevant event data:\n\n\nevent\n.\ntransactionID\n    \n=\n \n12344555\n\n\nevent\n.\ncurrency\n         \n=\n \n.\nUSD\n;\n\n\nevent\n.\nrevenue\n          \n=\n \n1.5\n\n\nevent\n.\nshipping\n         \n=\n \n10.2\n\n\nevent\n.\ntax\n              \n=\n \n12.3\n\n\nevent\n.\ncoupon\n           \n=\n \ntest_coupon\n;\n\n\nevent\n.\naffiliation\n      \n=\n \ntest_affiliation\n;\n\n\nevent\n.\neventDescription\n \n=\n \nEvent_description\n;\n\n\nevent\n.\nsearchQuery\n      \n=\n \nitem 123\n\n\nevent\n.\ncustomData\n       \n=\n \n[\n\n    \nCustom_Event_Property_Key1\n:\n \nCustom_Event_Property_val1\n,\n\n    \nCustom_Event_Property_Key2\n:\n \nCustom_Event_Property_val2\n\n\n]\n\n\nevent\n.\nlogEvent\n()\n \n// Log the event.\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n// Create a BranchUniversalObject with your content data:\n\n\nBranchUniversalObject\n \n*\nbranchUniversalObject\n \n=\n \n[\nBranchUniversalObject\n \nnew\n];\n\n\n\n// ...add data to the branchUniversalObject as needed...\n\n\nbranchUniversalObject\n.\ncanonicalIdentifier\n \n=\n \n@\nitem/12345\n;\n\n\nbranchUniversalObject\n.\ncanonicalUrl\n        \n=\n \n@\nhttps://branch.io/item/12345\n;\n\n\nbranchUniversalObject\n.\ntitle\n               \n=\n \n@\nMy Item Title\n;\n\n\n\n// Create an event and add the BranchUniversalObject to it.\n\n\nBranchEvent\n \n*\nevent\n     \n=\n \n[\nBranchEvent\n \nstandardEvent\n:\nBranchStandardEventAddToCart\n];\n\n\n\n// Add the BranchUniversalObjects with the content:\n\n\nevent\n.\ncontentItems\n     \n=\n \n(\nid\n)\n \n@[\n \nbranchUniversalObject\n \n]\n;\n\n\n\n// Add relevant event data:\n\n\nevent\n.\ntransactionID\n    \n=\n \n@\n12344555\n;\n\n\nevent\n.\ncurrency\n         \n=\n \nBNCCurrencyUSD\n;\n\n\nevent\n.\nrevenue\n          \n=\n \n[\nNSDecimalNumber\n \ndecimalNumberWithString\n:\n@\n1.5\n];\n\n\nevent\n.\nshipping\n         \n=\n \n[\nNSDecimalNumber\n \ndecimalNumberWithString\n:\n@\n10.2\n];\n\n\nevent\n.\ntax\n              \n=\n \n[\nNSDecimalNumber\n \ndecimalNumberWithString\n:\n@\n12.3\n];\n\n\nevent\n.\ncoupon\n           \n=\n \n@\ntest_coupon\n;\n\n\nevent\n.\naffiliation\n      \n=\n \n@\ntest_affiliation\n;\n\n\nevent\n.\neventDescription\n \n=\n \n@\nEvent_description\n;\n\n\nevent\n.\nsearchQuery\n      \n=\n \n@\nitem 123\n;\n\n\nevent\n.\ncustomData\n       \n=\n \n(\nNSMutableDictionary\n*\n)\n \n@{\n\n    \n@\nCustom_Event_Property_Key1\n:\n \n@\nCustom_Event_Property_val1\n,\n\n    \n@\nCustom_Event_Property_Key2\n:\n \n@\nCustom_Event_Property_val2\n\n\n}\n;\n\n\n[\nevent\n \nlogEvent\n];\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nBranchUniversalObject\n \nbuo\n \n=\n \nnew\n \nBranchUniversalObject\n()\n\n    \n.\nsetCanonicalIdentifier\n(\nmyprod/1234\n)\n\n    \n.\nsetCanonicalUrl\n(\nhttps://test_canonical_url\n)\n\n    \n.\nsetTitle\n(\ntest_title\n)\n\n    \n.\nsetContentMetadata\n(\n\n        \nnew\n \nContentMetadata\n()\n\n        \n.\naddCustomMetadata\n(\ncustom_metadata_key1\n,\n \ncustom_metadata_val1\n)\n\n        \n.\naddCustomMetadata\n(\ncustom_metadata_key1\n,\n \ncustom_metadata_val1\n)\n\n        \n.\naddImageCaptions\n(\nimage_caption_1\n,\n \nimage_caption2\n,\n \nimage_caption3\n)\n\n        \n.\nsetAddress\n(\nStreet_Name\n,\n \ntest city\n,\n \ntest_state\n,\n \ntest_country\n,\n \ntest_postal_code\n)\n\n        \n.\nsetRating\n(\n5.2\n,\n \n6.0\n,\n \n5\n)\n\n        \n.\nsetLocation\n(-\n151.67\n,\n \n-\n124.0\n)\n\n        \n.\nsetPrice\n(\n10.0\n,\n \nCurrencyType\n.\nUSD\n)\n\n        \n.\nsetProductBrand\n(\ntest_prod_brand\n)\n\n        \n.\nsetProductCategory\n(\nProductCategory\n.\nAPPAREL_AND_ACCESSORIES\n)\n\n        \n.\nsetProductName\n(\ntest_prod_name\n)\n\n        \n.\nsetProductCondition\n(\nContentMetadata\n.\nCONDITION\n.\nEXCELLENT\n)\n\n        \n.\nsetProductVariant\n(\ntest_prod_variant\n)\n\n        \n.\nsetQuantity\n(\n1.5\n)\n\n        \n.\nsetSku\n(\ntest_sku\n)\n\n        \n.\nsetContentSchema\n(\nBranchContentSchema\n.\nCOMMERCE_PRODUCT\n))\n\n        \n.\naddKeyWord\n(\nkeyword1\n)\n\n        \n.\naddKeyWord\n(\nkeyword2\n);\n\n\n\nnew\n \nBranchEvent\n(\nBRANCH_STANDARD_EVENT\n.\nADD_TO_CART\n)\n\n        \n.\nsetAffiliation\n(\ntest_affiliation\n)\n\n        \n.\nsetCoupon\n(\nCoupon Code\n)\n\n        \n.\nsetCurrency\n(\nCurrencyType\n.\nUSD\n)\n\n        \n.\nsetDescription\n(\nCustomer added item to cart\n)\n\n        \n.\nsetShipping\n(\n0.0\n)\n\n        \n.\nsetTax\n(\n9.75\n)\n\n        \n.\nsetRevenue\n(\n1.5\n)\n\n        \n.\nsetSearchQuery\n(\nTest Search query\n)\n\n        \n.\naddCustomDataProperty\n(\nCustom_Event_Property_Key1\n,\n \nCustom_Event_Property_val1\n)\n\n        \n.\naddCustomDataProperty\n(\nCustom_Event_Property_Key2\n,\n \nCustom_Event_Property_val2\n)\n\n        \n.\naddContentItems\n(\nbuo\n)\n\n        \n.\nlogEvent\n(\ncontext\n);\n\n\n\n\n\nHTTP API\n\n\ncurl -vvv -d \n{\n\n\n  \nname\n: \nPURCHASE\n,\n\n\n  \nuser_data\n: {\n\n\n    \nos\n: \nAndroid\n,\n\n\n    \nos_version\n: 25,\n\n\n    \nenvironment\n: \nFULL_APP\n,\n\n\n    \naaid\n: \nabcdabcd-0123-0123-00f0-000000000000\n,\n\n\n    \nandroid_id\n: \na12300000000\n,\n\n\n    \nlimit_ad_tracking\n: false,\n\n\n    \ndeveloper_identity\n: \nuser123\n,\n\n\n    \ncountry\n: \nUS\n,\n\n\n    \nlanguage\n: \nen\n,\n\n\n    \nlocal_ip\n: \n192.168.1.2\n,\n\n\n    \nbrand\n: \nLGE\n,\n\n\n    \napp_version\n: \n1.0.0\n,\n\n\n    \nmodel\n: \nNexus 5X\n,\n\n\n    \nscreen_dpi\n: 420,\n\n\n    \nscreen_height\n: 1794,\n\n\n    \nscreen_width\n: 1080\n\n\n  },\n\n\n  \ncustom_data\n: {\n\n\n    \npurchase_loc\n: \nPalo Alto\n,\n\n\n    \nstore_pickup\n: \nunavailable\n\n\n  },\n\n\n  \nevent_data\n: {\n\n\n    \ntransaction_id\n: \ntrans_Id_1232343434\n,\n\n\n    \ncurrency\n: \nUSD\n,\n\n\n    \nrevenue\n: 180.2,\n\n\n    \nshipping\n: 10.5,\n\n\n    \ntax\n: 13.5,\n\n\n    \ncoupon\n: \npromo-1234\n,\n\n\n    \naffiliation\n: \nhigh_fi\n,\n\n\n    \ndescription\n: \nPreferred purchase\n\n\n  },\n\n\n  \ncontent_items\n: [\n\n\n    {\n\n\n      \n$content_schema\n: \nCOMMERCE_PRODUCT\n,\n\n\n      \n$og_title\n: \nNike Shoe\n,\n\n\n      \n$og_description\n: \nStart loving your steps\n,\n\n\n      \n$og_image_url\n: \nhttp://example.com/img1.jpg\n,\n\n\n      \n$canonical_identifier\n: \nnike/1234\n,\n\n\n      \n$publicly_indexable\n: false,\n\n\n      \n$price\n: 101.2,\n\n\n      \n$locally_indexable\n: true,\n\n\n      \n$quantity\n: 1,\n\n\n      \n$sku\n: \n1101123445\n,\n\n\n      \n$product_name\n: \nRunner\n,\n\n\n      \n$product_brand\n: \nNike\n,\n\n\n      \n$product_category\n: \nSporting Goods\n,\n\n\n      \n$product_variant\n: \nXL\n,\n\n\n      \n$rating_average\n: 4.2,\n\n\n      \n$rating_count\n: 5,\n\n\n      \n$rating_max\n: 2.2,\n\n\n      \n$creation_timestamp\n: 1499892854966,\n\n\n      \n$exp_date\n: 1499892854966,\n\n\n      \n$keywords\n: [\n\n\n        \nsneakers\n,\n\n\n        \nshoes\n\n\n      ],\n\n\n      \n$address_street\n: \n230 South LaSalle Street\n,\n\n\n      \n$address_city\n: \nChicago\n,\n\n\n      \n$address_region\n: \nIL\n,\n\n\n      \n$address_country\n: \nUS\n,\n\n\n      \n$address_postal_code\n: \n60604\n,\n\n\n      \n$latitude\n: 12.07,\n\n\n      \n$longitude\n: -97.5,\n\n\n      \n$image_captions\n: [\n\n\n        \nmy_img_caption1\n,\n\n\n        \nmy_img_caption_2\n\n\n      ],\n\n\n      \n$condition\n: \nNEW\n,\n\n\n      \n$custom_fields\n: \n{\\\nfoo1\\\n:\\\nbar1\\\n,\\\nfoo2\\\n:\\\nbar2\\\n}\n\n\n    },\n\n\n    {\n\n\n      \n$og_title\n: \nNike Woolen Sox\n,\n\n\n      \n$canonical_identifier\n: \nnike/5324\n,\n\n\n      \n$og_description\n: \nFine combed woolen sox for those who love your foot\n,\n\n\n      \n$publicly_indexable\n: false,\n\n\n      \n$price\n: 80.2,\n\n\n      \n$locally_indexable\n: true,\n\n\n      \n$quantity\n: 5,\n\n\n      \n$sku\n: \n110112467\n,\n\n\n      \n$product_name\n: \nWoolen Sox\n,\n\n\n      \n$product_brand\n: \nNike\n,\n\n\n      \n$product_category\n: \nApparel \n Accessories\n,\n\n\n      \n$product_variant\n: \nXl\n,\n\n\n      \n$rating_average\n: 3.3,\n\n\n      \n$rating_count\n: 5,\n\n\n       \n$rating_max\n: 2.8,\n\n\n      \n$creation_timestamp\n: 1499892854966\n\n\n     }\n\n\n   ],\n\n\n   \nmetadata\n: {},\n\n\n   \nbranch_key\n: \nkey_test_hdcBLUy1xZ1JD0tKg7qrLcgirFmPPVJc\n\n\n }\n https://api.branch.io/v2/event/standard\n\n\n\n\nSee \nfull API docs here\n.\n\n\nTrack Content Events\n\n\nContent events are events that occur when a user engages with your in-app content. For example, if you have in-app articles, you would want to track events related to when users search, view content, rate the content, and share. This can apply to a wide variety of in-app content, such as blog posts, music, video, pictures, and e-commerce catalogue items.\n\n\niOS\n\n\n\n\n\n\nSwift\n\n\nlet\n \nevent\n \n=\n \nBranchEvent\n.\nstandardEvent\n(.\nsearch\n)\n\n\nevent\n.\neventDescription\n \n=\n \nProduct Search\n\n\nevent\n.\nsearchQuery\n \n=\n \nuser search query terms for product xyz\n\n\nevent\n.\ncustomData\n[\nCustom_Event_Property_Key1\n]\n \n=\n \nCustom_Event_Property_val1\n\n\nevent\n.\nlogEvent\n()\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\nBranchEvent\n \n*\nevent\n \n=\n \n[\nBranchEvent\n \nstandardEvent\n:\nBranchStandardEventSearch\n];\n\n\nevent\n.\neventDescription\n \n=\n \n@\nProduct Search\n;\n\n\nevent\n.\nsearchQuery\n \n=\n \n@\nuser search query terms for product xyz\n;\n\n\nevent\n.\ncustomData\n[\n@\nCustom_Event_Property_Key1\n]\n \n=\n \n@\nCustom_Event_Property_val1\n;\n\n\n[\nevent\n \nlogEvent\n];\n\n\n\n\n\n\n\n\n\nAndroid\n\n\n \nnew\n \nBranchEvent\n(\nBRANCH_STANDARD_EVENT\n.\nSEARCH\n)\n\n    \n.\nsetDescription\n(\nProduct Search\n)\n\n    \n.\nsetSearchQuery\n(\nproduct name\n)\n\n    \n.\naddCustomDataProperty\n(\nCustom_Event_Property_Key1\n,\n \nCustom_Event_Property_val1\n)\n\n    \n.\nlogEvent\n(\ncontext\n);\n\n\n\n\n\nHTTP API\n\n\ncurl -vvv -d \n{\n  \nname\n: \nVIEW_ITEMS\n,\n  \nuser_data\n: {\n    \nos\n: \nAndroid\n,\n    \nos_version\n: 25,\n    \nenvironment\n: \nFULL_APP\n,\n    \naaid\n: \nabcdabcd-0123-0123-00f0-000000000000\n,\n    \nandroid_id\n: \na12300000000\n,\n    \nlimit_ad_tracking\n: false,\n    \ndeveloper_identity\n: \nuser123\n,\n    \ncountry\n: \nUS\n,\n    \nlanguage\n: \nen\n,\n    \nlocal_ip\n: \n192.168.1.2\n,\n    \nbrand\n: \nLGE\n,\n    \napp_version\n: \n1.0.0\n,\n    \nmodel\n: \nNexus 5X\n,\n    \nscreen_dpi\n: 420,\n    \nscreen_height\n: 1794,\n    \nscreen_width\n: 1080\n  },\n  \ncustom_data\n: {\n    \npurchase_loc\n: \nPalo Alto\n,\n    \nstore_pickup\n: \nunavailable\n\n  },\n  \nevent_data\n: {\n    \nsearch_query\n: \nred sneakers\n,\n    \ndescription\n: \nPreferred purchase\n\n  },\n  \ncontent_items\n: [\n    {\n      \n$content_schema\n: \nCOMMERCE_PRODUCT\n,\n      \n$og_title\n: \nNike Shoe\n,\n      \n$og_description\n: \nStart loving your steps\n,\n      \n$og_image_url\n: \nhttp://example.com/img1.jpg\n,\n      \n$canonical_identifier\n: \nnike/1234\n,\n      \n$publicly_indexable\n: false,\n      \n$price\n: 101.2,\n      \n$locally_indexable\n: true,\n      \n$sku\n: \n1101123445\n,\n      \n$product_name\n: \nRunner\n,\n      \n$product_brand\n: \nNike\n,\n      \n$product_category\n: \nSporting Goods\n,\n      \n$product_variant\n: \nXL\n,\n      \n$rating_average\n: 4.2,\n      \n$rating_count\n: 5,\n      \n$rating_max\n: 2.2,\n      \n$creation_timestamp\n: 1499892854966,\n      \n$exp_date\n: 1499892854966,\n      \n$keywords\n: [\n        \nsneakers\n,\n        \nshoes\n\n      ],\n      \n$address_street\n: \n230 South LaSalle Street\n,\n      \n$address_city\n: \nChicago\n,\n      \n$address_region\n: \nIL\n,\n      \n$address_country\n: \nUS\n,\n      \n$address_postal_code\n: \n60604\n,\n      \n$latitude\n: 12.07,\n      \n$longitude\n: -97.5,\n      \n$image_captions\n: [\n        \nmy_img_caption1\n,\n        \nmy_img_caption_2\n\n      ],\n      \n$condition\n: \nNEW\n,\n      \n$custom_fields\n: \n{\\\nfoo1\\\n:\\\nbar1\\\n,\\\nfoo2\\\n:\\\nbar2\\\n}\n\n    },\n    {\n      \n$og_title\n: \nNike Woolen Sox\n,\n      \n$canonical_identifier\n: \nnike/5324\n,\n      \n$og_description\n: \nFine combed woolen sox for those who love your foot\n,\n      \n$publicly_indexable\n: false,\n      \n$price\n: 80.2,\n      \n$locally_indexable\n: true,\n      \n$sku\n: \n110112467\n,\n      \n$product_name\n: \nWoolen Sox\n,\n      \n$product_brand\n: \nNike\n,\n      \n$product_category\n: \nApparel \n Accessories\n,\n      \n$product_variant\n: \nXl\n,\n      \n$rating_average\n: 3.3,\n      \n$rating_count\n: 5,\n      \n$rating_max\n: 2.8,\n      \n$creation_timestamp\n: 1499892854966\n    }\n  ],\n  \nmetadata\n: {},\n  \nbranch_key\n: \nkey_test_hdcBLUy1xZ1JD0tKg7qrLcgirFmPPVJc\n\n}\n https://api.branch.io/v2/event/standard\n\n\n\n\nSee \nfull API docs here\n.\n\n\nTrack Lifecycle Events\n\n\nLifecycle events can be described as events a user takes in your app to continue progressing. These events can apply to game apps, as well as non game apps, for when a user completes a user profile, registration or tutorial.\n\n\niOS\n\n\n\n\n\n\nSwift\n\n\nlet\n \nevent\n \n=\n \nBranchEvent\n.\nstandardEvent\n(.\ncompleteRegistration\n)\n\n\nevent\n.\ntransactionID\n \n=\n \ntx1234\n\n\nevent\n.\neventDescription\n \n=\n \nUser completed registration.\n\n\nevent\n.\ncustomData\n[\nregistrationID\n]\n \n=\n \n12345\n\n\nevent\n.\nlogEvent\n()\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\nBranchEvent\n \n*\nevent\n \n=\n \n[\nBranchEvent\n \nstandardEvent\n:\nBranchStandardEventCompleteRegistration\n];\n\n\nevent\n.\ntransactionID\n \n=\n \n@\ntx1234\n\n\nevent\n.\neventDescription\n \n=\n \n@\nUser completed registration.\n;\n\n\nevent\n.\ncustomData\n[\n@\nregistrationID\n]\n \n=\n \n@\n12345\n;\n\n\n[\nevent\n \nlogEvent\n];\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nnew\n \nBranchEvent\n(\nBRANCH_STANDARD_EVENT\n.\nCOMPLETE_REGISTRATION\n)\n\n    \n.\nsetTransactionID\n(\ntx1234\n)\n\n    \n.\nsetDescription\n(\nUser created an account\n)\n\n    \n.\naddCustomDataProperty\n(\nregistrationID\n,\n \n12345\n)\n\n    \n.\nlogEvent\n(\ncontext\n);\n\n\n\n\n\nHTTP\n\n\ncurl -vvv -d \n{\n  \nname\n: \nCOMPLETE_REGISTRATION\n,\n  \nuser_data\n: {\n    \nos\n: \nAndroid\n,\n    \nos_version\n: 25,\n    \nenvironment\n: \nFULL_APP\n,\n    \naaid\n: \nabcdabcd-0123-0123-00f0-000000000000\n,\n    \nandroid_id\n: \na12300000000\n,\n    \nlimit_ad_tracking\n: false,\n    \ndeveloper_identity\n: \nuser123\n,\n    \ncountry\n: \nUS\n,\n    \nlanguage\n: \nen\n,\n    \nlocal_ip\n: \n192.168.1.2\n,\n    \nbrand\n: \nLGE\n,\n    \napp_version\n: \n1.0.0\n,\n    \nmodel\n: \nNexus 5X\n,\n    \nscreen_dpi\n: 420,\n    \nscreen_height\n: 1794,\n    \nscreen_width\n: 1080\n  },\n  \ncustom_data\n: {\n    \nfoo\n: \nbar\n\n  },\n  \nevent_data\n: {\n    \ndescription\n: \nPreferred purchase\n\n  },\n  \nmetadata\n: {},\n  \nbranch_key\n: \nkey_test_hdcBLUy1xZ1JD0tKg7qrLcgirFmPPVJc\n\n}\n https://api.branch.io/v2/event/standard\n\n\n\n\nSee \nfull API docs here\n.\n\n\nTrack Custom Events\n\n\nIf you want to track an event that isn't a predefined event, simply do the following:\n\n\niOS\n\n\n\n\n\n\nSwift\n\n\nBranchEvent\n.\ncustomEventWithName\n(\nUser_Scanned_Item\n).\nlogEvent\n()\n\n\n\n\n\n\n\n\n\nObjective-C\n\n\n[\nBranchEvent\n.\ncustomEventWithName\n(\n@\nUser_Scanned_Item\n)\n \nlogEvent\n];\n\n\n\n\n\n\n\n\n\nAndroid\n\n\nnew\n \nBranchEvent\n(\nSome Custom Event\n)\n\n    \n.\naddCustomDataProperty\n(\nCustom_Event_Property_Key11\n,\n \nCustom_Event_Property_val11\n)\n\n    \n.\naddCustomDataProperty\n(\nCustom_Event_Property_Key22\n,\n \nCustom_Event_Property_val22\n)\n\n    \n.\nlogEvent\n(\nMainActivity\n.\nthis\n);\n\n\n}\n\n\n\n\n\nHTTP API\n\n\ncurl -vvv -d \n{\n  \nname\n: \npicture swiped\n,\n  \nuser_data\n: {\n    \nos\n: \nAndroid\n,\n    \nos_version\n: 25,\n    \nenvironment\n: \nFULL_APP\n,\n    \naaid\n: \nabcdabcd-0123-0123-00f0-000000000000\n,\n    \nandroid_id\n: \na12300000000\n,\n    \nlimit_ad_tracking\n: false,\n    \ndeveloper_identity\n: \nuser123\n,\n    \ncountry\n: \nUS\n,\n    \nlanguage\n: \nen\n,\n    \nlocal_ip\n: \n192.168.1.2\n,\n    \nbrand\n: \nLGE\n,\n    \napp_version\n: \n1.0.0\n,\n    \nmodel\n: \nNexus 5X\n,\n    \nscreen_dpi\n: 420,\n    \nscreen_height\n: 1794,\n    \nscreen_width\n: 1080\n  },\n  \ncustom_data\n: {\n    \nfoo\n: \nbar\n\n  },\n  \nmetadata\n: {},\n  \nbranch_key\n: \nkey_test_hdcBLUy1xZ1JD0tKg7qrLcgirFmPPVJc\n\n}\n https://api.branch.io/v2/event/custom\n\n\n\n\nSee \nfull API docs here\n.", 
            "title": "V2 Event"
        }, 
        {
            "location": "/pages/apps/v2event/#v2-event", 
            "text": "", 
            "title": "V2 Event"
        }, 
        {
            "location": "/pages/apps/v2event/#overview", 
            "text": "It's always been possible to track events with the Branch SDK, including installs, opens, purchases, and more. Now we're introducing a new way to track events that make reporting and analytics a whole lot better and easier.  The new v2 events have better tracking and analytics options in the Branch dashboard, and the new event structure makes integration with third party analytics providers quicker and tighter.  We're standardizing the way you track \"classes\" of events. For example: all events related to a customer purchasing are bucketed into a \"purchase\" class of data items, and all events related to users interacting with your in-app content are linked to a \"content\" class of data items.  Below are examples of the kinds of events you'll likely be interested in tracking, and we'll show you the way to track through our SDKs.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/apps/v2event/#prerequisites", 
            "text": "With event tracking, it's important to track the objects related to the event occurring. Branch provides a class to describe your in-app content items  called the  Branch Universal Object . For any of the events tracked below, make sure to include the universal object(s) involved. For example, if you want to track when someone purchases 3 items, you'd want to create a Branch Universal Object per item, and pass them along when tracking the event.  Refer to the above document to set up Branch Universal Objects.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/apps/v2event/#current-compatibility", 
            "text": "There are a few products and features unsupported by this new method of tracking events. We clarify what's currently supported and what isn't below.", 
            "title": "Current Compatibility"
        }, 
        {
            "location": "/pages/apps/v2event/#acceptance", 
            "text": "Tracking these events will propagate to Ad Networks, like Criteo. For example, if you track the purchase event through Branch, this will map to Criteo's Purchase event.  These events will also have analytics, so you can understand their performance, using the new  People-Based Attribution .", 
            "title": "Acceptance"
        }, 
        {
            "location": "/pages/apps/v2event/#limitations", 
            "text": "As of now, any calls made through these SDK methods will  not  yet:   Appear in Liveview.  Be settable events for Data Integrations.  Be events you can target a Journey with.  See Analytics on the old Analytics pipeline. Read more about our new  People-Based Attribution .", 
            "title": "Limitations"
        }, 
        {
            "location": "/pages/apps/v2event/#available-events", 
            "text": "Use the table below to quickly find the event you want to track.     Event Name  Event Category  iOS  Android  API      Add To Cart  Commerce Event  BranchStandardEventAddToCart  BRANCH_STANDARD_EVENT.ADD_TO_CART  ADD_TO_CART    Add To Wishlist  Commerce Event  BranchStandardEventAddToWishlist  BRANCH_STANDARD_EVENT.ADD_TO_WISHLIST  ADD_TO_WISHLIST    View Cart  Commerce Event  BranchStandardEventViewCart  BRANCH_STANDARD_EVENT.VIEW_CART  VIEW_CART    Initiate Purchase  Commerce Event  BranchStandardEventInitiatePurchase  BRANCH_STANDARD_EVENT.INITIATE_PURCHASE  INITIATE_PURCHASE    Add Payment Info  Commerce Event  BranchStandardEventAddPaymentInfo  BRANCH_STANDARD_EVENT.ADD_PAYMENT_INFO  ADD_PAYMENT_INFO    Purchase  Commerce Event  BranchStandardEventPurchase  BRANCH_STANDARD_EVENT.PURCHASE  PURCHASE    Spend Credits  Commerce Event  BranchStandardEventSpendCredits  BRANCH_STANDARD_EVENT.SPEND_CREDITS  SPEND_CREDITS    Search  Content Event  BranchStandardEventSearch  BRANCH_STANDARD_EVENT.SEARCH  SEARCH    View Item  Content Event  BranchStandardEventViewItem  BRANCH_STANDARD_EVENT.VIEW_ITEM  VIEW_ITEM    View Items  Content Event  BranchStandardEventViewItems  BRANCH_STANDARD_EVENT.VIEW_ITEMS  VIEW_ITEMS    Rate  Content Event  BranchStandardEventRate  BRANCH_STANDARD_EVENT.RATE  RATE    Share  Content Event  BranchStandardEventShare  BRANCH_STANDARD_EVENT.SHARE  SHARE    Complete Registration  Lifecycle Event  BranchStandardEventCompleteRegistration  BRANCH_STANDARD_EVENT.COMPLETE_REGISTRATION  COMPLETE_REGISTRATION    Complete Tutorial  Lifecycle Event  BranchStandardEventCompleteTutorial  BRANCH_STANDARD_EVENT.COMPLETE_TUTORIAL  COMPLETE_TUTORIAL    Achieve Level  Lifecycle Event  BranchStandardEventAchieveLevel  BRANCH_STANDARD_EVENT.ACHIEVE_LEVEL  ACHIEVE_LEVEL    Unlock Achievement  Lifecycle Event  BranchStandardEventUnlockAchievement  BRANCH_STANDARD_EVENT.UNLOCK_ACHIEVEMENT  UNLOCK_ACHIEVEMENT", 
            "title": "Available Events"
        }, 
        {
            "location": "/pages/apps/v2event/#track-commerce-events", 
            "text": "Commerce events describe events that relate to a customer interacting with your products and converting by purchasing. These are events like adding payment information, purchasing, viewing products, etc. If you have enabled Branch Universal Ads, these events will automatically map to certain Ad Partners. Start by creating a Branch Universal Object for each product that is associated with the event you're tracking.  From there, add the Branch universal object to the tracked event, and use the right predefined constant. For example, the code snippet below is to track when a user adds to cart, but simply replace that constant with another constant to track a different event.  A note on currency and exchange rates: \nIf you track commerce events without a currency, we assume they are USD. If you track commerce events with a currency other than USD, we will convert the  revenue  specified to USD, using a recent exchange rate. This allows you to easily visualize revenue on the Dashboard, across many countries and currencies, because all units are USD. The exchange rate is pulled from  openexchangerates.org  regularly, and is generally within an hour of the realtime exchange rate. If you view raw Branch events via either Webhooks or Exports, you can see the exchange rate used.", 
            "title": "Track Commerce Events"
        }, 
        {
            "location": "/pages/apps/v2event/#ios", 
            "text": "Swift  // Create a BranchUniversalObject with your content data:  let   branchUniversalObject   =   BranchUniversalObject . init ()  // ...add data to the branchUniversalObject as needed...  branchUniversalObject . canonicalIdentifier   =   item/12345  branchUniversalObject . canonicalUrl          =   https://branch.io/item/12345  branchUniversalObject . title                 =   My Item Title  // Create a BranchEvent:  let   event   =   BranchEvent . standardEvent (. purchase )  // Add the BranchUniversalObjects with the content:  event . contentItems       =   [   branchUniversalObject   ]  // Add relevant event data:  event . transactionID      =   12344555  event . currency           =   . USD ;  event . revenue            =   1.5  event . shipping           =   10.2  event . tax                =   12.3  event . coupon             =   test_coupon ;  event . affiliation        =   test_affiliation ;  event . eventDescription   =   Event_description ;  event . searchQuery        =   item 123  event . customData         =   [ \n     Custom_Event_Property_Key1 :   Custom_Event_Property_val1 , \n     Custom_Event_Property_Key2 :   Custom_Event_Property_val2  ]  event . logEvent ()   // Log the event.     Objective-C  // Create a BranchUniversalObject with your content data:  BranchUniversalObject   * branchUniversalObject   =   [ BranchUniversalObject   new ];  // ...add data to the branchUniversalObject as needed...  branchUniversalObject . canonicalIdentifier   =   @ item/12345 ;  branchUniversalObject . canonicalUrl          =   @ https://branch.io/item/12345 ;  branchUniversalObject . title                 =   @ My Item Title ;  // Create an event and add the BranchUniversalObject to it.  BranchEvent   * event       =   [ BranchEvent   standardEvent : BranchStandardEventAddToCart ];  // Add the BranchUniversalObjects with the content:  event . contentItems       =   ( id )   @[   branchUniversalObject   ] ;  // Add relevant event data:  event . transactionID      =   @ 12344555 ;  event . currency           =   BNCCurrencyUSD ;  event . revenue            =   [ NSDecimalNumber   decimalNumberWithString : @ 1.5 ];  event . shipping           =   [ NSDecimalNumber   decimalNumberWithString : @ 10.2 ];  event . tax                =   [ NSDecimalNumber   decimalNumberWithString : @ 12.3 ];  event . coupon             =   @ test_coupon ;  event . affiliation        =   @ test_affiliation ;  event . eventDescription   =   @ Event_description ;  event . searchQuery        =   @ item 123 ;  event . customData         =   ( NSMutableDictionary * )   @{ \n     @ Custom_Event_Property_Key1 :   @ Custom_Event_Property_val1 , \n     @ Custom_Event_Property_Key2 :   @ Custom_Event_Property_val2  } ;  [ event   logEvent ];", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/apps/v2event/#android", 
            "text": "BranchUniversalObject   buo   =   new   BranchUniversalObject () \n     . setCanonicalIdentifier ( myprod/1234 ) \n     . setCanonicalUrl ( https://test_canonical_url ) \n     . setTitle ( test_title ) \n     . setContentMetadata ( \n         new   ContentMetadata () \n         . addCustomMetadata ( custom_metadata_key1 ,   custom_metadata_val1 ) \n         . addCustomMetadata ( custom_metadata_key1 ,   custom_metadata_val1 ) \n         . addImageCaptions ( image_caption_1 ,   image_caption2 ,   image_caption3 ) \n         . setAddress ( Street_Name ,   test city ,   test_state ,   test_country ,   test_postal_code ) \n         . setRating ( 5.2 ,   6.0 ,   5 ) \n         . setLocation (- 151.67 ,   - 124.0 ) \n         . setPrice ( 10.0 ,   CurrencyType . USD ) \n         . setProductBrand ( test_prod_brand ) \n         . setProductCategory ( ProductCategory . APPAREL_AND_ACCESSORIES ) \n         . setProductName ( test_prod_name ) \n         . setProductCondition ( ContentMetadata . CONDITION . EXCELLENT ) \n         . setProductVariant ( test_prod_variant ) \n         . setQuantity ( 1.5 ) \n         . setSku ( test_sku ) \n         . setContentSchema ( BranchContentSchema . COMMERCE_PRODUCT )) \n         . addKeyWord ( keyword1 ) \n         . addKeyWord ( keyword2 );  new   BranchEvent ( BRANCH_STANDARD_EVENT . ADD_TO_CART ) \n         . setAffiliation ( test_affiliation ) \n         . setCoupon ( Coupon Code ) \n         . setCurrency ( CurrencyType . USD ) \n         . setDescription ( Customer added item to cart ) \n         . setShipping ( 0.0 ) \n         . setTax ( 9.75 ) \n         . setRevenue ( 1.5 ) \n         . setSearchQuery ( Test Search query ) \n         . addCustomDataProperty ( Custom_Event_Property_Key1 ,   Custom_Event_Property_val1 ) \n         . addCustomDataProperty ( Custom_Event_Property_Key2 ,   Custom_Event_Property_val2 ) \n         . addContentItems ( buo ) \n         . logEvent ( context );", 
            "title": "Android"
        }, 
        {
            "location": "/pages/apps/v2event/#http-api", 
            "text": "curl -vvv -d  {     name :  PURCHASE ,     user_data : {       os :  Android ,       os_version : 25,       environment :  FULL_APP ,       aaid :  abcdabcd-0123-0123-00f0-000000000000 ,       android_id :  a12300000000 ,       limit_ad_tracking : false,       developer_identity :  user123 ,       country :  US ,       language :  en ,       local_ip :  192.168.1.2 ,       brand :  LGE ,       app_version :  1.0.0 ,       model :  Nexus 5X ,       screen_dpi : 420,       screen_height : 1794,       screen_width : 1080    },     custom_data : {       purchase_loc :  Palo Alto ,       store_pickup :  unavailable    },     event_data : {       transaction_id :  trans_Id_1232343434 ,       currency :  USD ,       revenue : 180.2,       shipping : 10.5,       tax : 13.5,       coupon :  promo-1234 ,       affiliation :  high_fi ,       description :  Preferred purchase    },     content_items : [      {         $content_schema :  COMMERCE_PRODUCT ,         $og_title :  Nike Shoe ,         $og_description :  Start loving your steps ,         $og_image_url :  http://example.com/img1.jpg ,         $canonical_identifier :  nike/1234 ,         $publicly_indexable : false,         $price : 101.2,         $locally_indexable : true,         $quantity : 1,         $sku :  1101123445 ,         $product_name :  Runner ,         $product_brand :  Nike ,         $product_category :  Sporting Goods ,         $product_variant :  XL ,         $rating_average : 4.2,         $rating_count : 5,         $rating_max : 2.2,         $creation_timestamp : 1499892854966,         $exp_date : 1499892854966,         $keywords : [           sneakers ,           shoes        ],         $address_street :  230 South LaSalle Street ,         $address_city :  Chicago ,         $address_region :  IL ,         $address_country :  US ,         $address_postal_code :  60604 ,         $latitude : 12.07,         $longitude : -97.5,         $image_captions : [           my_img_caption1 ,           my_img_caption_2        ],         $condition :  NEW ,         $custom_fields :  {\\ foo1\\ :\\ bar1\\ ,\\ foo2\\ :\\ bar2\\ }      },      {         $og_title :  Nike Woolen Sox ,         $canonical_identifier :  nike/5324 ,         $og_description :  Fine combed woolen sox for those who love your foot ,         $publicly_indexable : false,         $price : 80.2,         $locally_indexable : true,         $quantity : 5,         $sku :  110112467 ,         $product_name :  Woolen Sox ,         $product_brand :  Nike ,         $product_category :  Apparel   Accessories ,         $product_variant :  Xl ,         $rating_average : 3.3,         $rating_count : 5,          $rating_max : 2.8,         $creation_timestamp : 1499892854966       }     ],      metadata : {},      branch_key :  key_test_hdcBLUy1xZ1JD0tKg7qrLcgirFmPPVJc   }  https://api.branch.io/v2/event/standard  See  full API docs here .", 
            "title": "HTTP API"
        }, 
        {
            "location": "/pages/apps/v2event/#track-content-events", 
            "text": "Content events are events that occur when a user engages with your in-app content. For example, if you have in-app articles, you would want to track events related to when users search, view content, rate the content, and share. This can apply to a wide variety of in-app content, such as blog posts, music, video, pictures, and e-commerce catalogue items.", 
            "title": "Track Content Events"
        }, 
        {
            "location": "/pages/apps/v2event/#ios_1", 
            "text": "Swift  let   event   =   BranchEvent . standardEvent (. search )  event . eventDescription   =   Product Search  event . searchQuery   =   user search query terms for product xyz  event . customData [ Custom_Event_Property_Key1 ]   =   Custom_Event_Property_val1  event . logEvent ()     Objective-C  BranchEvent   * event   =   [ BranchEvent   standardEvent : BranchStandardEventSearch ];  event . eventDescription   =   @ Product Search ;  event . searchQuery   =   @ user search query terms for product xyz ;  event . customData [ @ Custom_Event_Property_Key1 ]   =   @ Custom_Event_Property_val1 ;  [ event   logEvent ];", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/apps/v2event/#android_1", 
            "text": "new   BranchEvent ( BRANCH_STANDARD_EVENT . SEARCH ) \n     . setDescription ( Product Search ) \n     . setSearchQuery ( product name ) \n     . addCustomDataProperty ( Custom_Event_Property_Key1 ,   Custom_Event_Property_val1 ) \n     . logEvent ( context );", 
            "title": "Android"
        }, 
        {
            "location": "/pages/apps/v2event/#http-api_1", 
            "text": "curl -vvv -d  {\n   name :  VIEW_ITEMS ,\n   user_data : {\n     os :  Android ,\n     os_version : 25,\n     environment :  FULL_APP ,\n     aaid :  abcdabcd-0123-0123-00f0-000000000000 ,\n     android_id :  a12300000000 ,\n     limit_ad_tracking : false,\n     developer_identity :  user123 ,\n     country :  US ,\n     language :  en ,\n     local_ip :  192.168.1.2 ,\n     brand :  LGE ,\n     app_version :  1.0.0 ,\n     model :  Nexus 5X ,\n     screen_dpi : 420,\n     screen_height : 1794,\n     screen_width : 1080\n  },\n   custom_data : {\n     purchase_loc :  Palo Alto ,\n     store_pickup :  unavailable \n  },\n   event_data : {\n     search_query :  red sneakers ,\n     description :  Preferred purchase \n  },\n   content_items : [\n    {\n       $content_schema :  COMMERCE_PRODUCT ,\n       $og_title :  Nike Shoe ,\n       $og_description :  Start loving your steps ,\n       $og_image_url :  http://example.com/img1.jpg ,\n       $canonical_identifier :  nike/1234 ,\n       $publicly_indexable : false,\n       $price : 101.2,\n       $locally_indexable : true,\n       $sku :  1101123445 ,\n       $product_name :  Runner ,\n       $product_brand :  Nike ,\n       $product_category :  Sporting Goods ,\n       $product_variant :  XL ,\n       $rating_average : 4.2,\n       $rating_count : 5,\n       $rating_max : 2.2,\n       $creation_timestamp : 1499892854966,\n       $exp_date : 1499892854966,\n       $keywords : [\n         sneakers ,\n         shoes \n      ],\n       $address_street :  230 South LaSalle Street ,\n       $address_city :  Chicago ,\n       $address_region :  IL ,\n       $address_country :  US ,\n       $address_postal_code :  60604 ,\n       $latitude : 12.07,\n       $longitude : -97.5,\n       $image_captions : [\n         my_img_caption1 ,\n         my_img_caption_2 \n      ],\n       $condition :  NEW ,\n       $custom_fields :  {\\ foo1\\ :\\ bar1\\ ,\\ foo2\\ :\\ bar2\\ } \n    },\n    {\n       $og_title :  Nike Woolen Sox ,\n       $canonical_identifier :  nike/5324 ,\n       $og_description :  Fine combed woolen sox for those who love your foot ,\n       $publicly_indexable : false,\n       $price : 80.2,\n       $locally_indexable : true,\n       $sku :  110112467 ,\n       $product_name :  Woolen Sox ,\n       $product_brand :  Nike ,\n       $product_category :  Apparel   Accessories ,\n       $product_variant :  Xl ,\n       $rating_average : 3.3,\n       $rating_count : 5,\n       $rating_max : 2.8,\n       $creation_timestamp : 1499892854966\n    }\n  ],\n   metadata : {},\n   branch_key :  key_test_hdcBLUy1xZ1JD0tKg7qrLcgirFmPPVJc \n}  https://api.branch.io/v2/event/standard  See  full API docs here .", 
            "title": "HTTP API"
        }, 
        {
            "location": "/pages/apps/v2event/#track-lifecycle-events", 
            "text": "Lifecycle events can be described as events a user takes in your app to continue progressing. These events can apply to game apps, as well as non game apps, for when a user completes a user profile, registration or tutorial.", 
            "title": "Track Lifecycle Events"
        }, 
        {
            "location": "/pages/apps/v2event/#ios_2", 
            "text": "Swift  let   event   =   BranchEvent . standardEvent (. completeRegistration )  event . transactionID   =   tx1234  event . eventDescription   =   User completed registration.  event . customData [ registrationID ]   =   12345  event . logEvent ()     Objective-C  BranchEvent   * event   =   [ BranchEvent   standardEvent : BranchStandardEventCompleteRegistration ];  event . transactionID   =   @ tx1234  event . eventDescription   =   @ User completed registration. ;  event . customData [ @ registrationID ]   =   @ 12345 ;  [ event   logEvent ];", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/apps/v2event/#android_2", 
            "text": "new   BranchEvent ( BRANCH_STANDARD_EVENT . COMPLETE_REGISTRATION ) \n     . setTransactionID ( tx1234 ) \n     . setDescription ( User created an account ) \n     . addCustomDataProperty ( registrationID ,   12345 ) \n     . logEvent ( context );", 
            "title": "Android"
        }, 
        {
            "location": "/pages/apps/v2event/#http", 
            "text": "curl -vvv -d  {\n   name :  COMPLETE_REGISTRATION ,\n   user_data : {\n     os :  Android ,\n     os_version : 25,\n     environment :  FULL_APP ,\n     aaid :  abcdabcd-0123-0123-00f0-000000000000 ,\n     android_id :  a12300000000 ,\n     limit_ad_tracking : false,\n     developer_identity :  user123 ,\n     country :  US ,\n     language :  en ,\n     local_ip :  192.168.1.2 ,\n     brand :  LGE ,\n     app_version :  1.0.0 ,\n     model :  Nexus 5X ,\n     screen_dpi : 420,\n     screen_height : 1794,\n     screen_width : 1080\n  },\n   custom_data : {\n     foo :  bar \n  },\n   event_data : {\n     description :  Preferred purchase \n  },\n   metadata : {},\n   branch_key :  key_test_hdcBLUy1xZ1JD0tKg7qrLcgirFmPPVJc \n}  https://api.branch.io/v2/event/standard  See  full API docs here .", 
            "title": "HTTP"
        }, 
        {
            "location": "/pages/apps/v2event/#track-custom-events", 
            "text": "If you want to track an event that isn't a predefined event, simply do the following:", 
            "title": "Track Custom Events"
        }, 
        {
            "location": "/pages/apps/v2event/#ios_3", 
            "text": "Swift  BranchEvent . customEventWithName ( User_Scanned_Item ). logEvent ()     Objective-C  [ BranchEvent . customEventWithName ( @ User_Scanned_Item )   logEvent ];", 
            "title": "iOS"
        }, 
        {
            "location": "/pages/apps/v2event/#android_3", 
            "text": "new   BranchEvent ( Some Custom Event ) \n     . addCustomDataProperty ( Custom_Event_Property_Key11 ,   Custom_Event_Property_val11 ) \n     . addCustomDataProperty ( Custom_Event_Property_Key22 ,   Custom_Event_Property_val22 ) \n     . logEvent ( MainActivity . this );  }", 
            "title": "Android"
        }, 
        {
            "location": "/pages/apps/v2event/#http-api_2", 
            "text": "curl -vvv -d  {\n   name :  picture swiped ,\n   user_data : {\n     os :  Android ,\n     os_version : 25,\n     environment :  FULL_APP ,\n     aaid :  abcdabcd-0123-0123-00f0-000000000000 ,\n     android_id :  a12300000000 ,\n     limit_ad_tracking : false,\n     developer_identity :  user123 ,\n     country :  US ,\n     language :  en ,\n     local_ip :  192.168.1.2 ,\n     brand :  LGE ,\n     app_version :  1.0.0 ,\n     model :  Nexus 5X ,\n     screen_dpi : 420,\n     screen_height : 1794,\n     screen_width : 1080\n  },\n   custom_data : {\n     foo :  bar \n  },\n   metadata : {},\n   branch_key :  key_test_hdcBLUy1xZ1JD0tKg7qrLcgirFmPPVJc \n}  https://api.branch.io/v2/event/custom  See  full API docs here .", 
            "title": "HTTP API"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/", 
            "text": "People-Based Attribution\n\n\nOverview\n\n\nBranch is introducing a new and improved analytics platform for you to preview.\n\n\nWhile the most visible impact of this change is our new and visually improved Summary Graph, it is important to understand that we have fundamentally changed the underlying model we use for counting events. This is the result of consistent feedback from Branch partners who have requested we provide deeper insights and clarity around campaigns powered by Branch links. As you want to understand the events associated with clicks on Branch links beyond the course of one user session and across all types of Branch links, we developed a new attribution engine to accurately attribute user events across interaction platforms and across channels.\n\n\nThe biggest change is that we decoupled deep linking and attribution. Now you can measure the impact of events that are not directly associated with the user session in which the click occurred and this means you will now see different numbers on your Branch dashboard.\n\n\nIn some cases, a user may click a link and only open the app several hours or days later. With this new analytics platform, we are still able to attribute both the open and any subsequent events, even though we did not deep link the user.\nAlso and from now on, anytime you analyze data in the Branch dashboard, or export it out, you will see consistency in naming across all our reports and products, for all events.\n\n\nThis document highlights each of the section where you can expect to see differences between our old analytics and new People-Based Attribution.\n\n\n\n\nNo changes required\n\n\nWe've changed the entire back-end of analytics without requiring any code or implementation changes on your end.\n\n\n\n\nData Mapping\n\n\nFrom now, Branch provides you a well defined standard to keep track of and categorize events.\n\n\nThis is different than previous behavior from when you integrated the Branch SDK. Once you created and clicked links, we automatically tracked clicks, installs, opens, and web session starts and pageviews (if you installed the web SDK). If you enabled Deepviews or Journeys, we counted clicks when a click didn't actually occur, such as when a Deepview displayed, a Journey automatically opened the app without any physical click. This caused confusion on our dashboard, as users would noticed clicks occurring without anyone ever clicking a link! Fortunately, thanks to a well-defined standard and categorization of events, this will no longer be the case.\n\n\nBelow is the new classification of events. Think of when you track when a user adds payment info, and initiates a purchase, and finally completes a purchase: those are all \ncommerce\n events. Similarly, we now have \ncontent\n events and \nuser lifecycle\n events.\n\n\n\n\nimpression\n\n\nclick\n\n\nBranch CTA view\n\n\nweb to app auto redirect\n\n\nSMS sent\n\n\ninstall\n\n\nopen\n\n\nreinstall\n\n\npageview\n\n\nweb session start\n\n\ncommerce event\n\n\ncontent event\n\n\nuser lifecycle event\n\n\ncustom event\n\n\n\n\nWhat's changed?\n\n\nDeep Linking\n\n\nThe biggest change is the analytics associated with deep linking. Previously, when a user clicked your Branch links, and installed within a two hour window, they were deep linked \nand\n attributed. This means that their first time experience included your deep linked data, and we counted an install. If they installed four hours after clicking instead of two, they would not receive deep link data, and we would \nnot\n attribute this user's install.\n\n\nNow, we've separated this concept. Deep linking windows remain two hours, but attribution windows are adjustable. Going with the previous example, if someone clicks your link, and installs the app after 4 hours, they will \nnot\n receive deep link data, but will be counted as an install.\n\n\nNote: no code changes are needed, and if you want to change the deep linking window, you can do so. Read the \nattribution window\n section for more information.\n\n\nAttribution Windows\n\n\nNow that deep linking and attribution analytics are separate, we have attribution windows for analytics. As a reminder, an attribution window simply defines the window of time for  when an eligible attribution or deep link can occur. In order to make changes, navigate to the \nlink settings\n page, and scroll down to \"Attribution Window\".\n\n\n\n\n\n\n\n\nDeep Linking Duration\n refers to the duration of time someone is eligible to receive deep link data. This includes anyone clicking a Branch link, or being automatically redirected to the app through a Branch Web SDK call. Measured in minutes.\n\n\n\n\n\n\nClick to x\n refers to events that occur after someone clicks a Branch link. If someone clicks and installs from a link, and comes back 10 days later to purchase, we would count that as a conversion, and it would surface in our dashboard. Measured in days.\n\n\n\n\n\n\nImpression to x\n refers to events that occur after someone views a Branch impression link. Measured in days.\n\n\n\n\n\n\nUsing the default value of 2 hours for deep linking and attribution under the old system, and 2 hours for deep linking with 7 days for install attribution, here's what you can expect.\n\n\n\n\n\nUnique behavior\n\n\nWe now default every visualization in the dashboard to be unique. This means that if you are testing Branch links, and click a link 5 times, we will display that as one click. This applies to events as well. This applies to all events, as well.\n\n\nSelect visualizations also allow you to see total (i.e. non-unique) numbers as well. If you'd like to see total numbers on a visualization that does not support it, you can also export raw data.\n\n\nCutoff date\n\n\nAs far as the deployment of People-Based Attribution, we created our cut off date on October 14th 2017 and we kept the old and new analytical systems running in parallel since then and will continue to do this for a short while. This mean you can query data from any time before October 14th up until October 14th with old analytics. You can query data from October 14th onwards with both analytics. But if you wanted to do reports across this line, say, October 13th to October 15th, you would need two separate queries.\n\n\nDifferences From Cutoff Date\n\n\nIf you are tracking Purchase events, and want to see unique values for Purchases before the cut off date of October 14th 2017, those values will display as 0. This is because the Purchase event hasn't stored unique counts before October 14th. However, we are now storing this information since then.\n\n\nChanges to the Branch Dashboard\n\n\nBranch Summary Analytics\n\n\nThis section covers the changes found on the main page of the Branch \ndashboard\n.  \n\n\nInstall Summary Section\n\n\nThis is the first chart found on the main page. This chart surfaces install counts for your app using the new People-Based Analytics.\n\n\n\n\nold\n\n\n\n\nnew\n\n\nChanges\n\n\nWe've removed the pie chart from the old visualizations; this is simply removing a chart, not removing any data. You can see the same breakdowns by campaign, channel, etc on the new install summary chart, making the pie chart redundant. (See also this article on why \npie charts\n are misleading.)\n\n\nThis new install summary chart by default shows Branch only installs, that are powered by the new attribution \nwindows\n. If you want to see all installs, and not just Branch driven installs, simply click \nShow All Installs\n. You will likely notice a higher number of installs driven by Branch--this is because we have a bigger window to count an install.\n\n\nFiltering is improved on this chart, as you can add additional query logic by clicking \nAdd Compare\n and \nAdd Filter\n. Previously, you could only filter by one dimension, and now you can filter with more dimensions, with more comparisons.\n\n\nClick Flow Section\n\n\nThis section is visually the same, but different in terms of \nhow\n clicks are tracked. First, we only track unique person clicks, so if you click the same link on your device 5 times, this chart will only reflect one click. Mobile deepview views or SMS sents do not count as clicks in this chart.\n\n\nQuick Link Analytics\n\n\nJust like click flow analytics, this section is visually the same, but clicks are tracked differently. These clicks are tracked by unique counts, and follow the model where only a click is counted when someone physically taps a link. Mobile deepview views or SMS sents do not count as clicks in this chart. The data can be exported.\n\n\nSource Analytics\n\n\nVisually, you will see the query selector that is present on Install Summary. This is the same component, and it will let you drill down and add filtering logic across all events, not just installs. This data is unique as well, and can be exported.\n\n\nJourneys\n\n\nJourneys data has also changed substantially. Previously, Journeys only included paid Journeys. Now it includes all of our Web SDK's web-to-app offerings. So it also includes analytics from the .banner() and .deepview() functions.\n\n\nUniversal Ads\n\n\nUniversal Ads were introduced using the new People-Based Analytics platform, so there is no expected change. The data is unique as well, and can be exported.\n\n\nChanges to exported data\n\n\nLiveview\n\n\nLiveview hasn't changed much, but we've introduced an improved CSV export that reflects these new data models.\n\n\nData Integrations\n\n\nData Integrations now mirrors the UI of our ads flow. The data we send is also utilizing the new mechanism of attribution, meaning we will send data within a proper attribution window instead of the same session. This means more of your attributed data will make it across automatically.\n\n\nWebhooks\n\n\nWebhooks, like data integratons, is no longer session based. This means we will send more webhooks to you automatically. This update hasn't completed yet.\n\n\nFAQ\n\n\nData Speed\n\n\nThis new People-Based Analytics platform introduces a slight delay compared to the old dashboard analytics, and it may now take a few minutes for events to appear. We're continually improving the speed and plan to significantly decrease the delay in Q1 2018.\n\n\nUnique Counts\n\n\nOne thing to be aware of is that unique counts may be within a 4% window of error across the dashboard. For example, if you have 100 total clicks, and 90 were truly unique, it's possible that the dashboard could report within 4% of that 90 number. If you want true uniques, you can export raw data and de-dupe across events.\n\n\nDiffering Installs\n\n\nAs part of People-Based Attribution, your install numbers will likely not line up one to one. What this means is that if you see 200 Branch driven installs on the old Analytics Platform, it's ok to see 190 Branch driven installs (or even 210) on the same day. This is due to the way we have fundamentally changed the way we count attributions. \n\n\nSome installs on the old analytics platform were actually \"reinstalls\", but were not counted as such, which would be one reason why installs are lower. Some campaigns will count higher installs, because they may be clicked on a variety of browsers and platforms, and Branch is able to connect those touch points to accurately count an install.\n\n\nIf the difference in numbers is still concerning, reach out to your Branch account manager, or send us a message at \n\n\nNew Dashboard Accounts\n\n\nAccounts created on or after December 15th, 2017 (UTC time zone) will run exclusively on the People-Based Attribution platform.\n\n\nSupport\n\n\nDiscrepancies\n\n\nSDK Version\n\n\nWhile different install numbers are to be expected, there may be some discrepancies not related to the new attribution platform counting methodologies. You may notice numbers are off if you are on version 0.12.4 or below on the iOS SDK. If that is the case, please upgrade to the latest version of the SDK, or at least 0.12.5. There is no cut off for Android.", 
            "title": "People-Based Attribution"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#people-based-attribution", 
            "text": "", 
            "title": "People-Based Attribution"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#overview", 
            "text": "Branch is introducing a new and improved analytics platform for you to preview.  While the most visible impact of this change is our new and visually improved Summary Graph, it is important to understand that we have fundamentally changed the underlying model we use for counting events. This is the result of consistent feedback from Branch partners who have requested we provide deeper insights and clarity around campaigns powered by Branch links. As you want to understand the events associated with clicks on Branch links beyond the course of one user session and across all types of Branch links, we developed a new attribution engine to accurately attribute user events across interaction platforms and across channels.  The biggest change is that we decoupled deep linking and attribution. Now you can measure the impact of events that are not directly associated with the user session in which the click occurred and this means you will now see different numbers on your Branch dashboard.  In some cases, a user may click a link and only open the app several hours or days later. With this new analytics platform, we are still able to attribute both the open and any subsequent events, even though we did not deep link the user.\nAlso and from now on, anytime you analyze data in the Branch dashboard, or export it out, you will see consistency in naming across all our reports and products, for all events.  This document highlights each of the section where you can expect to see differences between our old analytics and new People-Based Attribution.   No changes required  We've changed the entire back-end of analytics without requiring any code or implementation changes on your end.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#data-mapping", 
            "text": "From now, Branch provides you a well defined standard to keep track of and categorize events.  This is different than previous behavior from when you integrated the Branch SDK. Once you created and clicked links, we automatically tracked clicks, installs, opens, and web session starts and pageviews (if you installed the web SDK). If you enabled Deepviews or Journeys, we counted clicks when a click didn't actually occur, such as when a Deepview displayed, a Journey automatically opened the app without any physical click. This caused confusion on our dashboard, as users would noticed clicks occurring without anyone ever clicking a link! Fortunately, thanks to a well-defined standard and categorization of events, this will no longer be the case.  Below is the new classification of events. Think of when you track when a user adds payment info, and initiates a purchase, and finally completes a purchase: those are all  commerce  events. Similarly, we now have  content  events and  user lifecycle  events.   impression  click  Branch CTA view  web to app auto redirect  SMS sent  install  open  reinstall  pageview  web session start  commerce event  content event  user lifecycle event  custom event", 
            "title": "Data Mapping"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#whats-changed", 
            "text": "", 
            "title": "What's changed?"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#deep-linking", 
            "text": "The biggest change is the analytics associated with deep linking. Previously, when a user clicked your Branch links, and installed within a two hour window, they were deep linked  and  attributed. This means that their first time experience included your deep linked data, and we counted an install. If they installed four hours after clicking instead of two, they would not receive deep link data, and we would  not  attribute this user's install.  Now, we've separated this concept. Deep linking windows remain two hours, but attribution windows are adjustable. Going with the previous example, if someone clicks your link, and installs the app after 4 hours, they will  not  receive deep link data, but will be counted as an install.  Note: no code changes are needed, and if you want to change the deep linking window, you can do so. Read the  attribution window  section for more information.", 
            "title": "Deep Linking"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#attribution-windows", 
            "text": "Now that deep linking and attribution analytics are separate, we have attribution windows for analytics. As a reminder, an attribution window simply defines the window of time for  when an eligible attribution or deep link can occur. In order to make changes, navigate to the  link settings  page, and scroll down to \"Attribution Window\".     Deep Linking Duration  refers to the duration of time someone is eligible to receive deep link data. This includes anyone clicking a Branch link, or being automatically redirected to the app through a Branch Web SDK call. Measured in minutes.    Click to x  refers to events that occur after someone clicks a Branch link. If someone clicks and installs from a link, and comes back 10 days later to purchase, we would count that as a conversion, and it would surface in our dashboard. Measured in days.    Impression to x  refers to events that occur after someone views a Branch impression link. Measured in days.    Using the default value of 2 hours for deep linking and attribution under the old system, and 2 hours for deep linking with 7 days for install attribution, here's what you can expect.", 
            "title": "Attribution Windows"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#unique-behavior", 
            "text": "We now default every visualization in the dashboard to be unique. This means that if you are testing Branch links, and click a link 5 times, we will display that as one click. This applies to events as well. This applies to all events, as well.  Select visualizations also allow you to see total (i.e. non-unique) numbers as well. If you'd like to see total numbers on a visualization that does not support it, you can also export raw data.", 
            "title": "Unique behavior"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#cutoff-date", 
            "text": "As far as the deployment of People-Based Attribution, we created our cut off date on October 14th 2017 and we kept the old and new analytical systems running in parallel since then and will continue to do this for a short while. This mean you can query data from any time before October 14th up until October 14th with old analytics. You can query data from October 14th onwards with both analytics. But if you wanted to do reports across this line, say, October 13th to October 15th, you would need two separate queries.", 
            "title": "Cutoff date"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#differences-from-cutoff-date", 
            "text": "If you are tracking Purchase events, and want to see unique values for Purchases before the cut off date of October 14th 2017, those values will display as 0. This is because the Purchase event hasn't stored unique counts before October 14th. However, we are now storing this information since then.", 
            "title": "Differences From Cutoff Date"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#changes-to-the-branch-dashboard", 
            "text": "", 
            "title": "Changes to the Branch Dashboard"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#branch-summary-analytics", 
            "text": "This section covers the changes found on the main page of the Branch  dashboard .", 
            "title": "Branch Summary Analytics"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#install-summary-section", 
            "text": "This is the first chart found on the main page. This chart surfaces install counts for your app using the new People-Based Analytics.   old   new  Changes  We've removed the pie chart from the old visualizations; this is simply removing a chart, not removing any data. You can see the same breakdowns by campaign, channel, etc on the new install summary chart, making the pie chart redundant. (See also this article on why  pie charts  are misleading.)  This new install summary chart by default shows Branch only installs, that are powered by the new attribution  windows . If you want to see all installs, and not just Branch driven installs, simply click  Show All Installs . You will likely notice a higher number of installs driven by Branch--this is because we have a bigger window to count an install.  Filtering is improved on this chart, as you can add additional query logic by clicking  Add Compare  and  Add Filter . Previously, you could only filter by one dimension, and now you can filter with more dimensions, with more comparisons.", 
            "title": "Install Summary Section"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#click-flow-section", 
            "text": "This section is visually the same, but different in terms of  how  clicks are tracked. First, we only track unique person clicks, so if you click the same link on your device 5 times, this chart will only reflect one click. Mobile deepview views or SMS sents do not count as clicks in this chart.", 
            "title": "Click Flow Section"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#quick-link-analytics", 
            "text": "Just like click flow analytics, this section is visually the same, but clicks are tracked differently. These clicks are tracked by unique counts, and follow the model where only a click is counted when someone physically taps a link. Mobile deepview views or SMS sents do not count as clicks in this chart. The data can be exported.", 
            "title": "Quick Link Analytics"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#source-analytics", 
            "text": "Visually, you will see the query selector that is present on Install Summary. This is the same component, and it will let you drill down and add filtering logic across all events, not just installs. This data is unique as well, and can be exported.", 
            "title": "Source Analytics"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#journeys", 
            "text": "Journeys data has also changed substantially. Previously, Journeys only included paid Journeys. Now it includes all of our Web SDK's web-to-app offerings. So it also includes analytics from the .banner() and .deepview() functions.", 
            "title": "Journeys"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#universal-ads", 
            "text": "Universal Ads were introduced using the new People-Based Analytics platform, so there is no expected change. The data is unique as well, and can be exported.", 
            "title": "Universal Ads"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#changes-to-exported-data", 
            "text": "", 
            "title": "Changes to exported data"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#liveview", 
            "text": "Liveview hasn't changed much, but we've introduced an improved CSV export that reflects these new data models.", 
            "title": "Liveview"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#data-integrations", 
            "text": "Data Integrations now mirrors the UI of our ads flow. The data we send is also utilizing the new mechanism of attribution, meaning we will send data within a proper attribution window instead of the same session. This means more of your attributed data will make it across automatically.", 
            "title": "Data Integrations"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#webhooks", 
            "text": "Webhooks, like data integratons, is no longer session based. This means we will send more webhooks to you automatically. This update hasn't completed yet.", 
            "title": "Webhooks"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#data-speed", 
            "text": "This new People-Based Analytics platform introduces a slight delay compared to the old dashboard analytics, and it may now take a few minutes for events to appear. We're continually improving the speed and plan to significantly decrease the delay in Q1 2018.", 
            "title": "Data Speed"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#unique-counts", 
            "text": "One thing to be aware of is that unique counts may be within a 4% window of error across the dashboard. For example, if you have 100 total clicks, and 90 were truly unique, it's possible that the dashboard could report within 4% of that 90 number. If you want true uniques, you can export raw data and de-dupe across events.", 
            "title": "Unique Counts"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#differing-installs", 
            "text": "As part of People-Based Attribution, your install numbers will likely not line up one to one. What this means is that if you see 200 Branch driven installs on the old Analytics Platform, it's ok to see 190 Branch driven installs (or even 210) on the same day. This is due to the way we have fundamentally changed the way we count attributions.   Some installs on the old analytics platform were actually \"reinstalls\", but were not counted as such, which would be one reason why installs are lower. Some campaigns will count higher installs, because they may be clicked on a variety of browsers and platforms, and Branch is able to connect those touch points to accurately count an install.  If the difference in numbers is still concerning, reach out to your Branch account manager, or send us a message at", 
            "title": "Differing Installs"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#new-dashboard-accounts", 
            "text": "Accounts created on or after December 15th, 2017 (UTC time zone) will run exclusively on the People-Based Attribution platform.", 
            "title": "New Dashboard Accounts"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#discrepancies", 
            "text": "", 
            "title": "Discrepancies"
        }, 
        {
            "location": "/pages/dashboard/people-based-attribution/#sdk-version", 
            "text": "While different install numbers are to be expected, there may be some discrepancies not related to the new attribution platform counting methodologies. You may notice numbers are off if you are on version 0.12.4 or below on the iOS SDK. If that is the case, please upgrade to the latest version of the SDK, or at least 0.12.5. There is no cut off for Android.", 
            "title": "SDK Version"
        }, 
        {
            "location": "/pages/dashboard/sso/", 
            "text": "Single Sign-on\n\n\nOverview\n\n\nBranch offers Security Assertion Markup Language (SAML) / Single Sign-on (SSO) support for the dashboard. This allows you to use your identity provider (IdP) to centralize access to various services for your team and leverage existing directory systems and security groups.\n\n\nPrerequisites\n\n\n\n\nSingle Sign-on support for the Branch dashboard is a Premium feature. \nLearn more\n.\n\n\n\n\nGuide\n\n\nContact Branch\n\n\nSSO for the Branch dashboard restricts access for designated email domains to a specific dashboard subdomain. Contact your account manager or \nsupport\n when you are ready to get started. Please provide:\n\n\n\n\nThe email domain(s)\n that you and your team use and will be required to sign in via SSO.\n\n\nThe Branch dashboard subdomain\n you would like your team to use to log in. For example, if you chose \ncompany\n, then your dashboard subdomain would be \nhttps://company.dashboard.branch.io\n. \n\n\nThe email addresses of any SSO admins\n that will be allowed to configure SAML for your team. These SSO admins will also be allowed to log in both via SSO and via regular dashboard login after SSO is enabled, so that you have a fallback option to gain access to your account if the configuration goes wrong in some way.\n\n\n\n\nAdd Branch to your identity provider\n\n\nIf you want the dashboard to provide SSO for your team, You will need to add Branch to your IdP. Once this is complete, your IdP will provide you with details that you'll need to add to the Branch dashboard in order to enable SSO.\n\n\nBranch currently works with Okta and OneLogin, and should also be compatible with any identity provider that supports SAML. \n\n\nWhen you add Branch to your identity provider, add the following SAML attribute mappings:\n\n\n\n\n\n\n\n\nSAML attribute\n\n\nField it should map to in your IdP\n\n\n\n\n\n\n\n\n\n\nemail\n\n\nUser's first name\n\n\n\n\n\n\nfirstName\n\n\nUser's first name\n\n\n\n\n\n\nlastName\n\n\nUser's last name\n\n\n\n\n\n\n\n\nHere is some initial information that your IdP might ask for:\n\n\n\n\n\n\n\n\nIdP Field\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nPlatform\n\n\nWeb\n\n\n\n\n\n\nSign-on method\n\n\nSAML 2.0\n\n\n\n\n\n\nApplication name\n\n\nBranch\n\n\n\n\n\n\nLogo\n\n\nDownload here\n\n\n\n\n\n\n\n\nAsk your account manager or \nsupport\n for the additional configuration information that you need.\n\n\nCopy your details back to Branch\n\n\nWhen you have added Branch, your IdP should provide you with an \nIdentity provider Entity ID\n, an \nIdentity provider SSO URL\n, and a \nPublic x509 certificate\n. Go to \nAccount Settings \n SSO\n and paste in the information:\n\n\n\n\nClick \nSave\n to save your information. SSO will not be enabled for your team yet.\n\n\nIf you do not see the above fields, likely Branch has not finished enabling your account yet. Please contact your account manager or \nsupport\n.\n\n\nAdd users to Branch in your IdP\n\n\nGive the appropriate users access to Branch in your identity provider. If users are on your Branch team in the dashboard but are not given access in your IdP, then they will no longer be able to log in to the Branch dashboard when SSO is enabled.\n\n\nWhen you add users to Branch via your IdP in future, you will also have to add them to the team for the appropriate apps in the Branch dashboard. You can do this on the \nAccount Settings \n Team\n page for each app that you want the user to have access to.\n\n\nBranch does not currently support just-in-time or SCIM provisioning. \nLearn More\n.\n\n\nEnable SSO\n\n\nReturn to the \nAccount Settings \n SSO\n page and toggle SAML/SSO to \nOn\n. When you click \nSave\n at the bottom, SSO will be enabled and users will have to login via your branded subdomain:\n\n\n\n\nUsers on your claimed email domain(s) trying to log in, reset password, or sign up the regular way via \nhttps://dashboard.branch.io\n, will be redirected to your branded subdomain and your IdP login page.\n\n\nFAQ\n\n\nIs there a fallback option to sign in to the dashboard when SSO is enabled?\n\n\nYes! You can designate SSO admins that will be able to log in via your branded subdomain or \nhttps://dashboard.branch.io\n when SSO is enabled. These admins will be able to sign in with a password and turn SSO off if necessary. Designate SSO admins when you \ncontact Branch\n.\n\n\nIn addition, users on your team that are not on your claimed email domain(s) will still be able to log in without SSO and access your Branch app. If this is not desired, be sure to remove these users from your team or add them to the list of claimed email domains.\n\n\nDoes Branch support just-in-time or SCIM account provisioning?\n\n\nNot currently. One user can belong to multiple Branch apps, so admins must decide which users on their claimed email domain should have access to which apps in Branch at this time. Please let us know if you're interested in this via your account manager or \nsupport\n.\n\n\nHow much does SSO cost?\n\n\nSingle Sign-on support for the Branch dashboard is a Premium feature. If you are already paying for any Branch product, SSO is free for you and your team. Please \ncontact support\n or your account manager for more information.", 
            "title": "Enable Single Sign On"
        }, 
        {
            "location": "/pages/dashboard/sso/#single-sign-on", 
            "text": "", 
            "title": "Single Sign-on"
        }, 
        {
            "location": "/pages/dashboard/sso/#overview", 
            "text": "Branch offers Security Assertion Markup Language (SAML) / Single Sign-on (SSO) support for the dashboard. This allows you to use your identity provider (IdP) to centralize access to various services for your team and leverage existing directory systems and security groups.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/dashboard/sso/#prerequisites", 
            "text": "Single Sign-on support for the Branch dashboard is a Premium feature.  Learn more .", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/pages/dashboard/sso/#guide", 
            "text": "", 
            "title": "Guide"
        }, 
        {
            "location": "/pages/dashboard/sso/#contact-branch", 
            "text": "SSO for the Branch dashboard restricts access for designated email domains to a specific dashboard subdomain. Contact your account manager or  support  when you are ready to get started. Please provide:   The email domain(s)  that you and your team use and will be required to sign in via SSO.  The Branch dashboard subdomain  you would like your team to use to log in. For example, if you chose  company , then your dashboard subdomain would be  https://company.dashboard.branch.io .   The email addresses of any SSO admins  that will be allowed to configure SAML for your team. These SSO admins will also be allowed to log in both via SSO and via regular dashboard login after SSO is enabled, so that you have a fallback option to gain access to your account if the configuration goes wrong in some way.", 
            "title": "Contact Branch"
        }, 
        {
            "location": "/pages/dashboard/sso/#add-branch-to-your-identity-provider", 
            "text": "If you want the dashboard to provide SSO for your team, You will need to add Branch to your IdP. Once this is complete, your IdP will provide you with details that you'll need to add to the Branch dashboard in order to enable SSO.  Branch currently works with Okta and OneLogin, and should also be compatible with any identity provider that supports SAML.   When you add Branch to your identity provider, add the following SAML attribute mappings:     SAML attribute  Field it should map to in your IdP      email  User's first name    firstName  User's first name    lastName  User's last name     Here is some initial information that your IdP might ask for:     IdP Field  Value      Platform  Web    Sign-on method  SAML 2.0    Application name  Branch    Logo  Download here     Ask your account manager or  support  for the additional configuration information that you need.", 
            "title": "Add Branch to your identity provider"
        }, 
        {
            "location": "/pages/dashboard/sso/#copy-your-details-back-to-branch", 
            "text": "When you have added Branch, your IdP should provide you with an  Identity provider Entity ID , an  Identity provider SSO URL , and a  Public x509 certificate . Go to  Account Settings   SSO  and paste in the information:   Click  Save  to save your information. SSO will not be enabled for your team yet.  If you do not see the above fields, likely Branch has not finished enabling your account yet. Please contact your account manager or  support .", 
            "title": "Copy your details back to Branch"
        }, 
        {
            "location": "/pages/dashboard/sso/#add-users-to-branch-in-your-idp", 
            "text": "Give the appropriate users access to Branch in your identity provider. If users are on your Branch team in the dashboard but are not given access in your IdP, then they will no longer be able to log in to the Branch dashboard when SSO is enabled.  When you add users to Branch via your IdP in future, you will also have to add them to the team for the appropriate apps in the Branch dashboard. You can do this on the  Account Settings   Team  page for each app that you want the user to have access to.  Branch does not currently support just-in-time or SCIM provisioning.  Learn More .", 
            "title": "Add users to Branch in your IdP"
        }, 
        {
            "location": "/pages/dashboard/sso/#enable-sso", 
            "text": "Return to the  Account Settings   SSO  page and toggle SAML/SSO to  On . When you click  Save  at the bottom, SSO will be enabled and users will have to login via your branded subdomain:   Users on your claimed email domain(s) trying to log in, reset password, or sign up the regular way via  https://dashboard.branch.io , will be redirected to your branded subdomain and your IdP login page.", 
            "title": "Enable SSO"
        }, 
        {
            "location": "/pages/dashboard/sso/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/pages/dashboard/sso/#is-there-a-fallback-option-to-sign-in-to-the-dashboard-when-sso-is-enabled", 
            "text": "Yes! You can designate SSO admins that will be able to log in via your branded subdomain or  https://dashboard.branch.io  when SSO is enabled. These admins will be able to sign in with a password and turn SSO off if necessary. Designate SSO admins when you  contact Branch .  In addition, users on your team that are not on your claimed email domain(s) will still be able to log in without SSO and access your Branch app. If this is not desired, be sure to remove these users from your team or add them to the list of claimed email domains.", 
            "title": "Is there a fallback option to sign in to the dashboard when SSO is enabled?"
        }, 
        {
            "location": "/pages/dashboard/sso/#does-branch-support-just-in-time-or-scim-account-provisioning", 
            "text": "Not currently. One user can belong to multiple Branch apps, so admins must decide which users on their claimed email domain should have access to which apps in Branch at this time. Please let us know if you're interested in this via your account manager or  support .", 
            "title": "Does Branch support just-in-time or SCIM account provisioning?"
        }, 
        {
            "location": "/pages/dashboard/sso/#how-much-does-sso-cost", 
            "text": "Single Sign-on support for the Branch dashboard is a Premium feature. If you are already paying for any Branch product, SSO is free for you and your team. Please  contact support  or your account manager for more information.", 
            "title": "How much does SSO cost?"
        }, 
        {
            "location": "/pages/exports/api/", 
            "text": "Overview\n\n\nThe data export API can be used to pull the data visible via the Liveview \n Exports tab directly via an API. A couple important notes worthy of mention of this API:\n\n\n\n\nThe data will only be retrievable for 7 days (but can be extended for very special use cases)\n\n\nThe data will only appear after end of day since it's processed every 24 hours\n\n\nThe data will not be visible prior to your whitelisting date\n\n\nThe data will only be visible for your live key (not your test key)\n\n\n\n\nSetup\n\n\nIn order to use this API you must have an App ID and a Branch Public Key. You must also be whitelisted to use the API.\n\n\nYou can find your keys at: \nhttps://dashboard.branch.io/link-settings\n\n\nBase URL:\n\n\nhttps://api.branch.io/v2/export/\n\n\nEndpoint\n\n\nGET https://api.branch.io/v2/export\nContent-Type: application/json\n\n\n\n\n\nQuery Parameters\n\n\nbranch_key\n \nrequired\n\n: The Branch key of the originating app\n\n\nbranch_secret\n \nrequired\n\n: The Branch secret key of the originating app\n\n\nexport_date\n \nrequired\n\n: The UTC date of the requested data export\n\n\nFormat the URL as follows:\n\nhttps://api.branch.io/v2/export/XXXXX?branch_secret=XXXXX\nexport_date=2015-11-15\n\n\nExample:\n\n\nhttps://api.branch.io/v2/export/key_live_gcASshuadd7l39m36NhdsDPWRjmkdcgh12jsg1?branch_secret=secret_live_ztPsdKIjUtcjkUYF732nsl81HJ75BJqiv24J86\nexport_date=2015-11-15\n\n\nResponse\n\n\nThe response payload will be in JSON format and for each export it will have an array of paths to files on s3 to download. Note that there may be multiple files (depending on the size of the day's export) and that each csv file will be gzipped.\n\n\n    {\n     \nlinks_export_url\n: [\nhttps://branch-exports.s3.amazonaws.com/YOUR_APP_ID-2015-10-23-link[-OPTIONAL_FILE_NUMBER]-v2-HASH.csv.gz\n],\n     \nevents_export_url\n: [\nhttps://branch-exports.s3.amazonaws.com/YOUR_APP_ID-2015-10-23-event[-OPTIONAL_FILE_NUMBER]-v2-HASH.csv.gz\n],\n     \nclicks_export_url\n: [\nhttps://branch-exports.s3.amazonaws.com/YOUR_APP_ID-2015-10-23-click[-OPTIONAL_FILE_NUMBER]-v2-HASH.csv.gz\n]\n    }\n\n\n\n\n\n\nProtip\n\n\nA full day's files will be available on our S3 bucket at that location to download around 8:00am UTC. It will return a blank array from s3 for any empty files until the UTC day is over and the data has been transfered to s3, therefore it is recommended you schedule any ETLs to fetch the data for the previous day around 8:00am UTC.\n\n\n\n\nSupport\n\n\nTime Limits\n\n\nData will be available through the API for 7 days after the date it's posted. It will be also available for 90 days after that upon request. After 90 days, we may delete the data to reduce unnecessary storage. If you need a record of your data for longer than 90 days, please set up a recurring export and store data in your systems.\n\n\nLink Export\n\n\nA mapping of data you can expect for your links export.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\ncreation_timestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\nlink_id\n\n\nint\n\n\n\n\n\n\nbranch_identity_id\n\n\nint\n\n\n\n\n\n\nchannel\n\n\nstring\n\n\n\n\n\n\nfeature\n\n\nstring\n\n\n\n\n\n\ncampaign\n\n\nstring\n\n\n\n\n\n\nstage\n\n\nstring\n\n\n\n\n\n\ntags\n\n\nstring\n\n\n\n\n\n\ndata\n\n\nstringified JSON\n\n\n\n\n\n\ncreation_source\n\n\nstring\n\n\n\n\n\n\nalias\n\n\nstring\n\n\n\n\n\n\ndomain\n\n\nstring\n\n\n\n\n\n\nurl\n\n\nstring\n\n\n\n\n\n\n\n\nLink Click Export\n\n\nA mapping of data you can expect for your link clicks export.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nclick_timestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\nbranch_link_click_id\n\n\nint\n\n\n\n\n\n\nbranch_browser_fingerprint_id\n\n\nint\n\n\n\n\n\n\nos\n\n\nstring\n\n\n\n\n\n\nos_version\n\n\nstring\n\n\n\n\n\n\nmodel\n\n\nstring\n\n\n\n\n\n\nbrowser\n\n\nstring\n\n\n\n\n\n\nuser_agent\n\n\nstring\n\n\n\n\n\n\nip_address\n\n\nstring\n\n\n\n\n\n\nstage\n\n\nstring\n\n\n\n\n\n\nsms_from_desktop\n\n\nboolean\n\n\n\n\n\n\nphone_number\n\n\nstring\n\n\n\n\n\n\nredirect_method\n\n\nstring\n\n\n\n\n\n\nlink_creation_timestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\nlink_channel\n\n\nstring\n\n\n\n\n\n\nlink_feature\n\n\nstring\n\n\n\n\n\n\nlink_campaign\n\n\nstring\n\n\n\n\n\n\nlink_stage\n\n\nstring\n\n\n\n\n\n\nlink_tags\n\n\nstring\n\n\n\n\n\n\nlink_data\n\n\nstringified JSON\n\n\n\n\n\n\nlink_creation_source\n\n\nstring\n\n\n\n\n\n\nlink_url\n\n\nstring\n\n\n\n\n\n\nlink_branch_identity_id\n\n\nint\n\n\n\n\n\n\nlink_id\n\n\nint\n\n\n\n\n\n\nquery_params\n\n\nstringified JSON\n\n\n\n\n\n\n\n\nEvent Export\n\n\nA mapping of data you can expect for your events export.\n\n\n\n\n\n\n\n\nKey\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nid\n\n\nint\n\n\n\n\n\n\nname\n\n\nstring\n\n\n\n\n\n\nmetadata\n\n\nstringified JSON\n\n\n\n\n\n\ntimestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\nbranch_identity_id\n\n\nint\n\n\n\n\n\n\ndeveloper_identity\n\n\nstring\n\n\n\n\n\n\nidentity_creation_timestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\nbranch_session_id\n\n\nint\n\n\n\n\n\n\napp_version\n\n\nstring\n\n\n\n\n\n\nip_address\n\n\nstring\n\n\n\n\n\n\nsession_start_timestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\nbranch_device_fingerprint_id\n\n\nint\n\n\n\n\n\n\ndevice_first_seen_timestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\ndevice_os\n\n\nstring\n\n\n\n\n\n\ndevice_os_version\n\n\nstring\n\n\n\n\n\n\ndevice_metadata\n\n\nstringified JSON\n\n\n\n\n\n\nhardware_id\n\n\nstring\n\n\n\n\n\n\ngoogle_advertising_id\n\n\nstring\n\n\n\n\n\n\nbranch_browser_fingerprint_id\n\n\nstring\n\n\n\n\n\n\nbrowser_first_seen_timestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\nbrowser_os\n\n\nstring\n\n\n\n\n\n\nbrowser_os_version\n\n\nstring\n\n\n\n\n\n\nuser_agent\n\n\nstring\n\n\n\n\n\n\nfirst_referring_click_timestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\nfirst_referring_click_query_params\n\n\nstringified JSON\n\n\n\n\n\n\nfirst_referring_branch_identity_id\n\n\nint\n\n\n\n\n\n\nfirst_referring_developer_identity\n\n\nstring\n\n\n\n\n\n\nfirst_referring_hardware_id\n\n\nstring\n\n\n\n\n\n\nfirst_referring_branch_link_id\n\n\nint\n\n\n\n\n\n\nfirst_referring_link_creation_timestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\nfirst_referring_link_channel\n\n\nstring\n\n\n\n\n\n\nfirst_referring_link_feature\n\n\nstring\n\n\n\n\n\n\nfirst_referring_link_campaign\n\n\nstring\n\n\n\n\n\n\nfirst_referring_link_stage\n\n\nstring\n\n\n\n\n\n\nfirst_referring_link_tags\n\n\nstring\n\n\n\n\n\n\nfirst_referring_link_data\n\n\nstringified JSON\n\n\n\n\n\n\nfirst_referring_link_creation_source\n\n\nstring\n\n\n\n\n\n\nfirst_referring_link_url\n\n\nstring\n\n\n\n\n\n\nsession_referring_click_timestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\nsession_referring_click_query_params\n\n\nstringified JSON\n\n\n\n\n\n\nsession_referring_branch_identity_id\n\n\nint\n\n\n\n\n\n\nsession_referring_developer_identity\n\n\nint\n\n\n\n\n\n\nsession_referring_hardware_id\n\n\nstring\n\n\n\n\n\n\nsession_referring_branch_link_id\n\n\nstring\n\n\n\n\n\n\nsession_referring_link_creation_timestamp\n\n\ndatetime %Y-%m-%dT%H:%M:%S\n\n\n\n\n\n\nsession_referring_link_channel\n\n\nstring\n\n\n\n\n\n\nsession_referring_link_feature\n\n\nstring\n\n\n\n\n\n\nsession_referring_link_campaign\n\n\nstring\n\n\n\n\n\n\nsession_referring_link_stage\n\n\nstring\n\n\n\n\n\n\nsession_referring_link_tags\n\n\nstring\n\n\n\n\n\n\nsession_referring_link_data\n\n\nstringified JSON\n\n\n\n\n\n\nsession_referring_link_creation_source\n\n\nstring\n\n\n\n\n\n\nsession_referring_link_url\n\n\nstring\n\n\n\n\n\n\nfirst_referring_click_id\n\n\nint\n\n\n\n\n\n\nsession_referring_click_id\n\n\nint", 
            "title": "Legacy Data Export API"
        }, 
        {
            "location": "/pages/exports/api/#overview", 
            "text": "The data export API can be used to pull the data visible via the Liveview   Exports tab directly via an API. A couple important notes worthy of mention of this API:   The data will only be retrievable for 7 days (but can be extended for very special use cases)  The data will only appear after end of day since it's processed every 24 hours  The data will not be visible prior to your whitelisting date  The data will only be visible for your live key (not your test key)", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/exports/api/#setup", 
            "text": "In order to use this API you must have an App ID and a Branch Public Key. You must also be whitelisted to use the API.  You can find your keys at:  https://dashboard.branch.io/link-settings", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/exports/api/#base-url", 
            "text": "https://api.branch.io/v2/export/", 
            "title": "Base URL:"
        }, 
        {
            "location": "/pages/exports/api/#endpoint", 
            "text": "GET https://api.branch.io/v2/export\nContent-Type: application/json", 
            "title": "Endpoint"
        }, 
        {
            "location": "/pages/exports/api/#query-parameters", 
            "text": "branch_key   required \n: The Branch key of the originating app  branch_secret   required \n: The Branch secret key of the originating app  export_date   required \n: The UTC date of the requested data export  Format the URL as follows: https://api.branch.io/v2/export/XXXXX?branch_secret=XXXXX export_date=2015-11-15  Example:  https://api.branch.io/v2/export/key_live_gcASshuadd7l39m36NhdsDPWRjmkdcgh12jsg1?branch_secret=secret_live_ztPsdKIjUtcjkUYF732nsl81HJ75BJqiv24J86 export_date=2015-11-15", 
            "title": "Query Parameters"
        }, 
        {
            "location": "/pages/exports/api/#response", 
            "text": "The response payload will be in JSON format and for each export it will have an array of paths to files on s3 to download. Note that there may be multiple files (depending on the size of the day's export) and that each csv file will be gzipped.      {\n      links_export_url : [ https://branch-exports.s3.amazonaws.com/YOUR_APP_ID-2015-10-23-link[-OPTIONAL_FILE_NUMBER]-v2-HASH.csv.gz ],\n      events_export_url : [ https://branch-exports.s3.amazonaws.com/YOUR_APP_ID-2015-10-23-event[-OPTIONAL_FILE_NUMBER]-v2-HASH.csv.gz ],\n      clicks_export_url : [ https://branch-exports.s3.amazonaws.com/YOUR_APP_ID-2015-10-23-click[-OPTIONAL_FILE_NUMBER]-v2-HASH.csv.gz ]\n    }   Protip  A full day's files will be available on our S3 bucket at that location to download around 8:00am UTC. It will return a blank array from s3 for any empty files until the UTC day is over and the data has been transfered to s3, therefore it is recommended you schedule any ETLs to fetch the data for the previous day around 8:00am UTC.", 
            "title": "Response"
        }, 
        {
            "location": "/pages/exports/api/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/exports/api/#time-limits", 
            "text": "Data will be available through the API for 7 days after the date it's posted. It will be also available for 90 days after that upon request. After 90 days, we may delete the data to reduce unnecessary storage. If you need a record of your data for longer than 90 days, please set up a recurring export and store data in your systems.", 
            "title": "Time Limits"
        }, 
        {
            "location": "/pages/exports/api/#link-export", 
            "text": "A mapping of data you can expect for your links export.     Key  Value      creation_timestamp  datetime %Y-%m-%dT%H:%M:%S    link_id  int    branch_identity_id  int    channel  string    feature  string    campaign  string    stage  string    tags  string    data  stringified JSON    creation_source  string    alias  string    domain  string    url  string", 
            "title": "Link Export"
        }, 
        {
            "location": "/pages/exports/api/#link-click-export", 
            "text": "A mapping of data you can expect for your link clicks export.     Key  Value      click_timestamp  datetime %Y-%m-%dT%H:%M:%S    branch_link_click_id  int    branch_browser_fingerprint_id  int    os  string    os_version  string    model  string    browser  string    user_agent  string    ip_address  string    stage  string    sms_from_desktop  boolean    phone_number  string    redirect_method  string    link_creation_timestamp  datetime %Y-%m-%dT%H:%M:%S    link_channel  string    link_feature  string    link_campaign  string    link_stage  string    link_tags  string    link_data  stringified JSON    link_creation_source  string    link_url  string    link_branch_identity_id  int    link_id  int    query_params  stringified JSON", 
            "title": "Link Click Export"
        }, 
        {
            "location": "/pages/exports/api/#event-export", 
            "text": "A mapping of data you can expect for your events export.     Key  Value      id  int    name  string    metadata  stringified JSON    timestamp  datetime %Y-%m-%dT%H:%M:%S    branch_identity_id  int    developer_identity  string    identity_creation_timestamp  datetime %Y-%m-%dT%H:%M:%S    branch_session_id  int    app_version  string    ip_address  string    session_start_timestamp  datetime %Y-%m-%dT%H:%M:%S    branch_device_fingerprint_id  int    device_first_seen_timestamp  datetime %Y-%m-%dT%H:%M:%S    device_os  string    device_os_version  string    device_metadata  stringified JSON    hardware_id  string    google_advertising_id  string    branch_browser_fingerprint_id  string    browser_first_seen_timestamp  datetime %Y-%m-%dT%H:%M:%S    browser_os  string    browser_os_version  string    user_agent  string    first_referring_click_timestamp  datetime %Y-%m-%dT%H:%M:%S    first_referring_click_query_params  stringified JSON    first_referring_branch_identity_id  int    first_referring_developer_identity  string    first_referring_hardware_id  string    first_referring_branch_link_id  int    first_referring_link_creation_timestamp  datetime %Y-%m-%dT%H:%M:%S    first_referring_link_channel  string    first_referring_link_feature  string    first_referring_link_campaign  string    first_referring_link_stage  string    first_referring_link_tags  string    first_referring_link_data  stringified JSON    first_referring_link_creation_source  string    first_referring_link_url  string    session_referring_click_timestamp  datetime %Y-%m-%dT%H:%M:%S    session_referring_click_query_params  stringified JSON    session_referring_branch_identity_id  int    session_referring_developer_identity  int    session_referring_hardware_id  string    session_referring_branch_link_id  string    session_referring_link_creation_timestamp  datetime %Y-%m-%dT%H:%M:%S    session_referring_link_channel  string    session_referring_link_feature  string    session_referring_link_campaign  string    session_referring_link_stage  string    session_referring_link_tags  string    session_referring_link_data  stringified JSON    session_referring_link_creation_source  string    session_referring_link_url  string    first_referring_click_id  int    session_referring_click_id  int", 
            "title": "Event Export"
        }, 
        {
            "location": "/pages/exports/webhooks/", 
            "text": "Overview\n\n\n\n\nNote\n\n\nYou are viewing docs for our legacy Webhooks system. We recommend viewing docs on the newer \nWebhooks\n offering, which is powered by \nPeople-Based Attribution\n.\n\n\n\n\nBranch\u2019s webhook system allows you to receive install and down funnel event data from us as it occurs, for install attribution or conversion funnels in your own database. You simply need to specify a URL for us to send all this data to.\n\n\nThe webhook system is very powerful and customizable. You can register to only receive notifications for specific events, as well as specific subsections of events, filtered by link data, user data or event properties. You can specify to only receive an event for the first time a user completes it, or every time. You can also specify to only receive events in the case of referrals.\n\n\nSetup\n\n\nRegister webhook\n\n\n\n\nOpen the \nWebhooks\n page on the Branch dashboard.\n\n\nClick \n+ Add A New Webhook\n:\n\n\n\n\n\n\nConfigure webhook criteria\n\n\n\n\nHere are explanations of what each field on this screen controls:\n\n\n\n\nWebhook URL:\n Enter the URL where you would like the events to be sent.\n\n\nPostback Method:\n Events can be sent either via POST or GET.\n\n\nEvent Frequency:\n You can choose to receive a webhook for ever single event occurrence, or only for the first time that even is triggered for each unique user.\n\n\nEvent Trigger:\n You may select between the following default events:\n\n\n\n\n\n\n\n\n\n\nEvent\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninstall\n\n\nTriggered the first time a user launches your app\n\n\n\n\n\n\nopen\n\n\nTriggered whenever the app becomes active\n\n\n\n\n\n\nreferred session\n\n\nTriggered in \naddition\n to install, open or web session start if a user comes from a Branch link\n\n\n\n\n\n\nweb session start\n\n\nTriggered when the user views a webpage using the Branch Web SDK\n\n\n\n\n\n\nclick\n\n\nTriggered whenever a Branch link is clicked on any platform\n\n\n\n\n\n\n-- other --\n\n\nEnter an event you created through the Branch SDK.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nThe \nreferred session\n and \nweb session start\n options will only appear after at least one event of that type has been recorded.\n\n\n\n\n\n\nFilter (Advanced):\n See the \nAdvanced\n page to read about customizing when events are sent.\n\n\n\n\nTesting\n\n\nTo test whether your webhook is configured correctly, you can use \nrequestb.in\n. RequestBin gives you a URL that accepts events and allows you to see exactly what Branch is sending.\n\n\n\n\n\n\nGo to \nrequestb.in\n and click \n+ Create a RequestBin\n:\n\n\n\n\n\n\n\n\nCopy the \nBin URL\n:\n\n\n\n\n\n\n\n\nPaste this into the URL field of your Branch webhook's configuration screen:\n\n\n\n\n\n\n\n\nNow whenever your webhook is triggered, you will see a full report on RequestBin:\n\n\n\n\n\n\n\n\nAdvanced\n\n\nSample webhook POST body syntax\n\n\nThere are two types of events that you can listen for, and each has a different format of webhook POST. The two are:\n\n\n\n\nClick\n webhooks: Clicks are the way users interact with your Branch links. Please note that a click does not always have to take place in a browser. For example, clicking a Universal Link will open up the app directly, and therefore no browser metadata information will be present.\n\n\nEvent\n webhooks: Events are user events that either Branch generates or you generate via a call to our event tracking API. Examples are shown on the previous page of this guide.\n\n\n\n\nSample POST body for \nClick\n webhooks\n\n\nPOST\n\n\nUser\n-\nagent\n:\n \nBranch\n \nMetrics\n \nAPI\n\n\nContent\n-\nType\n:\n \napplication\n/\njson\n\n\n{\n\n    \nclick_id\n:\n \na\n \nunique\n \nidentififer\n,\n\n    \nevent\n:\n \nclick\n,\n\n    \nevent_timestamp\n:\n \nlink click timestamp\n,\n\n    \nos\n:\n \niOS\n \n|\n \nAndroid\n,\n\n    \nos_version\n:\n \nthe OS version\n,\n\n    \nmetadata\n:\n \n{\n\n        \nip\n:\n \nclick IP\n,\n\n        \nuserAgent\n:\n \nclick UA\n,\n\n        \nbrowser\n:\n \nbrowser\n,\n\n        \nbrowser_version\n:\n \nbrowser version\n,\n\n        \nbrand\n:\n \nphone brand\n,\n\n        \nmodel\n:\n \nphone model\n,\n\n        \nos\n:\n \nbrowser OS\n,\n\n        \nos_version\n:\n \nOS version\n\n    \n},\n\n    \nquery\n:\n \n{\n \nany\n \nquery\n \nparameters\n \nappeneded\n \nto\n \nthe\n \nlink\n \n},\n\n    \nlink_data\n:\n \n{\n \nlink\n \ndata\n \ndictionary\n \n-\n \nsee\n \nbelow\n \n}\n\n\n}\n\n\n\n// link data dictionary example\n\n\n{\n\n    \nbranch_id\n:\n \nunique identifier for unique link\n,\n\n    \ndate_ms\n:\n \nlink creation date with millisecond\n,\n\n    \ndate_sec\n:\n \nlink creation date with second\n,\n\n    \ndate\n:\n \nlink creation date\n,\n\n    \ndomain\n:\n \ndomain label\n,\n\n    \ndata\n:\n \n{\n\n        \n+\nurl\n:\n \nthe\n \nBranch\n \nlink\n,\n\n        \n...\n \nother\n \ndeep\n \nlink\n \ndata\n\n    \n},\n\n    \ncampaign\n:\n \ncampaign label\n,\n\n    \nfeature\n:\n \nfeature label\n,\n\n    \nchannel\n:\n \nchannel label\n\n    \ntags\n:\n \n[\ntags\n \narray\n],\n\n    \nstage\n:\n \nstage label\n,\n\n\n}\n\n\n\n\n\nSample POST body for \nEvent\n webhooks\n\n\nPOST\n\n\nUser\n-\nagent\n:\n \nBranch\n \nMetrics\n \nAPI\n\n\nContent\n-\nType\n:\n \napplication\n/\njson\n\n\n{\n\n    \nevent\n:\n \nevent name\n\n    \nevent_timestamp\n:\n \ntime stamp for the event\n\n    \nos\n:\n \niOS\n \n|\n \nAndroid\n,\n\n    \nos_version\n:\n \nthe OS version\n,\n\n    \nmetadata\n:\n \n{\n\n        \n ... event metadata  - specified in userCompletedAction withState \n\n        \nip\n:\n \nIP of the user\n,\n\n        \nreferred\n:\n \ntrue\n \n|\n \nfalse\n,\n \n// if event is install / open / web session start\n\n        \nreinstall\n:\n \ntrue\n \n|\n \nfalse\n,\n \nif\n \nevent\n \nis\n \ninstall\n \n/\n \nopen\n\n    \n},\n\n    \nhardware_id\n:\n \nIDFA\n \n(\niOS\n)\n \n|\n \nAndroid ID\n \n(\nAndroid\n),\n\n    \ngoogle_advertising_id\n:\n \nGAID\n \n(\nAndroid\n \nif\n \npresent\n),\n\n\n\n    \n// optionally included:\n\n    \nidentity\n:\n \nuser ID\n,\n \n// specified in setIdentity\n\n\n    \n// the referrer who created the new user\n\n    \nfirst_referring_click_timestamp\n:\n \nthe first click timestamp\n,\n\n    \nfirst_referring_click_query\n:\n \n{\n \nany\n \nquery\n \nparameters\n \nappeneded\n \nto\n \nthe\n \nlink\n \n},\n\n    \nfirst_referring_identity\n:\n \nuser ID who created the referring link\n \n-\n \nspecified\n \nin\n \nsetIdentity\n\n    \nfirst_referring_hardware_id\n:\n \nhardware identifier who created the referring link\n\n    \nfirst_referring_link_data\n:\n \n{\n \nlink\n \ndata\n \ndictionary\n \n-\n \nsee\n \nbelow\n \n}\n\n\n    \n// the referrer who referred this session\n\n    \nsession_referring_click_timestamp\n:\n \nthe session click timestamp\n,\n\n    \nsession_referring_click_query\n:\n \n{\n \nany\n \nquery\n \nparameters\n \nappeneded\n \nto\n \nthe\n \nlink\n \n},\n\n    \nsession_referring_identity\n:\n \nuser ID who created the referring link\n\n    \nsession_referring_hardware_id\n:\n \nhardware identifier who created the referring link\n\n    \nsession_referring_link_data\n:\n \n{\n \nlink\n \ndata\n \ndictionary\n \n-\n \nsee\n \nbelow\n \n}\n\n\n}\n\n\n\n// link data dictionary example\n\n\n{\n\n    \nbranch_id\n:\n \nunique identifier for unique link\n,\n\n    \ndate_ms\n:\n \nlink creation date with millisecond\n,\n\n    \ndate_sec\n:\n \nlink creation date with second\n,\n\n    \ndate\n:\n \nlink creation date\n,\n\n    \ndomain\n:\n \ndomain label\n,\n\n    \ndata\n:\n \n{\n\n        \n+\nurl\n:\n \nthe\n \nBranch\n \nlink\n,\n\n        \n...\n \nother\n \ndeep\n \nlink\n \ndata\n\n    \n},\n\n    \ncampaign\n:\n \ncampaign label\n,\n\n    \nfeature\n:\n \nfeature label\n,\n\n    \nchannel\n:\n \nchannel label\n\n    \ntags\n:\n \n[\ntags\n \narray\n],\n\n    \nstage\n:\n \nstage label\n,\n\n\n}\n\n\n\n\n\nFilter Webhooks\n\n\nFilters allow you to specify when a webhook gets sent to your URL based off criteria matches. You can configure your filters to use any webhook keyword value by using liquid tags following this convention: \n{{ param.name }}\n.\n\n\n\n\nWildcard Filtering\n\n\nIf you want to filter on just a key being present, you can put a \n*\n in the value box.\n\n\n\n\n\n\nExample: Filtering installs by referring link campaign\n\n\nLet\u2019s say you\u2019re interested in receiving a webhook for every \ninstall\n event that is referred from a Branch link where you set the \nCampaign\n field to \nApp Install Campaign\n. You would configure a filter to fire a webhook only when \n~campaign\n is equal to \nApp Install Campaign\n. The key would equal \nsession.link_data.~campaign\n and the value would equal \nApp Install Campaign\n.\n\n\n\n\n\n\n\n\nExample: Filtering clicks by link channel\n\n\nLet\u2019s say you\u2019re interested in receiving a webhook for every \nclick\n event that is referred from a Branch link where you set the \nChannel\n field to \nAppLovin\n. You would configure a filter to fire a webhook only when \n~channel\n is equal to \nAppLovin\n. The key would equal \nclick.link_data.~channel\n and the value would equal \nAppLovin\n.\n\n\n\n\n\n\n\n\nExample: Filtering custom signup event by location\n\n\nLet\u2019s say you\u2019re interested in receiving a webhook for every \nsign_up\n event that is triggered via the \nuserCompletedAction\n method in the SDKs, but only in a specific market, like Chicago. Your event metadata will look something like the following:\n\n\nevent\n:\n \n{\n\n    \nname\n:\n \nsign_up\n,\n\n    \nmetadata\n:\n \n{\n\n        \ncity\n \n:\n \nChicago\n,\n\n        \nusername\n \n:\n \njohn_smith_1\n,\n\n    \n}\n\n\n}\n\n\n\n\n\nYou would configure a filter to fire a webhook only when \ncity\n is equal to \nChicago\n. The key would equal \nevent.metadata.city\n and the value would equal \nChicago\n.\n\n\n\n\n\n\nTemplating your Postback URL\n\n\nIf you plan on sending click or install data to a third party, you\u2019ll likely need to create one of our templated Postback URLs along side the aforementioned filters. These work very similarly to filters and use the same liquid tags structure: \n{{ param.name }}\n. Once the webhook is eligible, the correct value will be filled in to the slot.\n\n\n\n\nExample: Creating a dynamic conversion postback for an ad agency\n\n\nLet\u2019s say you have created a Branch link in the Ads tab specifically for SEM campaigns and you\u2019re going to give the link to an advertising agency. This ad agency wants to receive install conversion events from Branch by tracking your Branch link with specific query parameters. Your Branch link might potentially look something like this: \nhttp://branch.app.link/my-sf-campaign?clickId=12345\n.\n\n\nNow, you want to report conversions back to the agency or your backend, and you know the structure of the desired Postback URL. For example, lets say you want to send a Postback to \nhttp://myagency.com/tracking?event=install\nclickId=12345\nidfa=\n.\n\n\nWith that information, it\u2019s very easy to setup the correct, dynamic Postback URL using our templates. In this case, you need 3 fields to be dynamically populated:\n\n\n\n\nevent name\n\n\nclickId\n\n\nIDFA value\n\n\n\n\nBranch can easily populate those fields dynamically (and potentially add a lot more as described in the next section) using the following template keys:\n\n\n\n\n{{ event.name }}\n\n\n{{ session.link_click.query.clickId }}\n\n\n{{ device.hardware_id }}\n\n\n\n\nYou can create your dynamic Postback URL by using those above tags in place of where the value should go. So, in keeping with the example, the dynamic Postback URL to give to Branch would be and should be pasted into the webhook creation URL field:\n\n\n\n\nhttp://myagency.com/tracking?event={{ event.name }}\nclickId={{ session.link_click.query.clickId }}\nidfa={{ device.hardware_id }}\n\n\n\n\n\n\nAdditionally, since you don\u2019t want to send them \nevery\n install event, let\u2019s add a \nfilter\n to only send the installs that are referred by links which have a \nclickId\n in the query parameter. In this case, we use a wildcard parameter (\n*\n) for the key \nsession.link_click.query.clickId\n, which tells Branch to only trigger this webhook when an \ninstall\n event was referred by a link with a \nclickId\n.\n\n\n\n\nAnd with that, we\u2019re finished creating our postback!\n\n\n\n\n\n\nKeys available for templating/filtering \nClick\n webhooks\n\n\nWhen a Branch link is opened, triggering a \nclick\n event, you may access:\n\n\n\n\nProperties of the visitor who opened the link.\n\n\nProperties of the link that was opened.\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclick.query.key\n\n\nAny key that was appended to the link when opened. To retrieve \nvalue1\n from \nhttps://[branchsubdomain]/test?param1=value1\n, you would use \nclick.query.param1\n\n\n\n\n\n\nclick.browser.branch_id\n\n\nThe Branch ID we have for a user's unique broswer\n\n\n\n\n\n\nclick.browser.metadata.userAgent\n\n\nThe user agent of the browser\n\n\n\n\n\n\nclick.device.hardware_id\n\n\nFor iOS, this is the Advertising ID. For Android, this is the Android ID\n\n\n\n\n\n\nclick.device.metadata.google_advertising_id\n\n\nAndroid only. The Google Advertising ID, if known\n\n\n\n\n\n\nclick.device.metadata.os\n\n\nThe OS of the device\n\n\n\n\n\n\nclick.device.metadata.os_version\n\n\nThe OS version\n\n\n\n\n\n\nclick.date\n\n\nTime of link click\n\n\n\n\n\n\n\n\n\n\nclick.device\n will only be available for Universal/App Links without a browser redirect. Similarly, \nclick.browser\n will only be available for non-Universal/App Links. Handle this appropriately in your code.\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclick.link_data.~id\n\n\nID of the link (0 for dynamic and 3P links)\n\n\n\n\n\n\nclick.link_data.~creation_source\n\n\nHow the link was created, e.g. iOS SDK, API, etc.\n\n\n\n\n\n\nclick.link_data.~tags\n\n\nTags of the link\n\n\n\n\n\n\nclick.link_data.~campaign\n\n\nCampaign of the link\n\n\n\n\n\n\nclick.link_data.~channel\n\n\nChannel of the link\n\n\n\n\n\n\nclick.link_data.~feature\n\n\nFeature of the link\n\n\n\n\n\n\nclick.link_data.~stage\n\n\nStage of the link\n\n\n\n\n\n\nclick.link_data.$one_time_use\n\n\nWhether this was a one time use link of not\n\n\n\n\n\n\nclick.link_data.$one_time_use_used\n\n\nWhether this one time use link was used or not\n\n\n\n\n\n\nclick.link_data.$identity_id\n\n\nBranch internal identity of user who generated the link\n\n\n\n\n\n\nclick.link_data.$match_duration\n\n\nLength of time (in milliseconds) that a match could have occured\n\n\n\n\n\n\nclick.link_data.+url\n\n\nThe full URL of the link, e.g. [branchsubdomain]/m/abcde12345\n\n\n\n\n\n\nclick.link_data.key\n\n\nAny key value you specified in the link\u2019s data dictionary\n\n\n\n\n\n\nclick.referring_identity.id\n\n\nID you set for the user who created this link\n\n\n\n\n\n\n\n\nKeys available for templating/filtering \nEvent\n webhooks\n\n\nWhen a user triggers an event inside your app, either one \ncreated by you\n or one tracked by Branch automatically (\ninstall\n, \nopen\n, \nreferred session\n, and \nweb session start\n), you may access:\n\n\n\n\nProperties of the event.\n\n\nIdentity properties of the user who triggered the event.\n\n\nSession properties of the user who triggered the event.\n\n\n\n\n\n\nIdentity vs. Session\n\n\nIdentity properties\n are \nset once\n, the very first time Branch sees a user. Once set for each user, these are never changed. \nSession properties\n are the data of the \nmost recent\n record Branch has for a user.\n\n\nFor an initial \ninstall\n event, identity and session properties will be the same. For \nopen\n events, session properties will be different if the user has subsequently opened another Branch link.\n\n\n\n\nEvent Data\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nevent.name\n\n\nThe name of the event (e.g., \ninstall\n or \nmy_custom_event\n)\n\n\n\n\n\n\nevent.metadata.referred\n\n\nEquals \ntrue\n if user installed app after opening a Branch link\n\n\n\n\n\n\nevent.metadata.ip\n\n\nThe IP address of the user\n\n\n\n\n\n\nevent.metadata.key\n\n\nData defined as \nkey\n when creating a custom event\n\n\n\n\n\n\nevent.date\n\n\nTimestamp of when the event occurred\n\n\n\n\n\n\n\n\nDevice Data\n\n\n\n\nDevice data provides access to the device snapshot. Branch collects this snapshot both when a user is in the browser (via a click on a Branch link) and then after the user opens the app.\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndevice.metadata.os\n\n\nThe OS of the device\n\n\n\n\n\n\ndevice.metadata.os_version\n\n\nThe OS version of the device\n\n\n\n\n\n\ndevice.metadata.ip\n\n\nThe IP address of the device\n\n\n\n\n\n\ndevice.metadata.model\n\n\nThe model of the device\n\n\n\n\n\n\n\n\nIdentity Data\n\n\n\n\nIdentity data is unique for each user Branch tracks. These values are permanently tied to that user, meaning if a link with a campaign of 'google' drives an install, then that user will have a permanent \nidentity.link_data.~campaign\n value equal to 'google'.\n\n\n\n\n\n\nExcept for identity.id, these will not be populated if the user installed your app without opening a Branch link first.\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nidentity.link_data.~id\n\n\nID of the link (0 for dynamic and 3P links)\n\n\n\n\n\n\nidentity.link_data.~creation_source\n\n\nHow the link was created, e.g. iOS SDK, API, etc.\n\n\n\n\n\n\nidentity.link_data.~tags\n\n\nTags of the link\n\n\n\n\n\n\nidentity.link_data.~campaign\n\n\nCampaign of the link\n\n\n\n\n\n\nidentity.link_data.~channel\n\n\nChannel of the link\n\n\n\n\n\n\nidentity.link_data.~feature\n\n\nFeature of the link\n\n\n\n\n\n\nidentity.link_data.~stage\n\n\nStage of the link\n\n\n\n\n\n\nidentity.link_data.$one_time_use\n\n\nWhether this was a one time use link of not\n\n\n\n\n\n\nidentity.link_data.$one_time_use_used\n\n\nWhether this one time use link was used or not\n\n\n\n\n\n\nidentity.link_data.$identity_id\n\n\nBranch internal identity of user who generated the link\n\n\n\n\n\n\nidentity.link_data.$match_duration\n\n\nLength of time (in milliseconds) that a match could have occured\n\n\n\n\n\n\nidentity.link_data.+url\n\n\nThe full URL of the link, e.g. [branchsubdomain]/m/abcde12345\n\n\n\n\n\n\nidentity.link_data.key\n\n\nAny key value you specified in the link\u2019s data dictionary\n\n\n\n\n\n\n\n\nSession Data\n\n\n\n\nSession data refers to the \nmost recent\n record Branch has for each user, regardless of whether it reflects an \ninstall\n or an \nopen\n event. These will not be populated if the session was not initiated by opening a Branch link.\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsession.link_click.query.key\n\n\nAny key that was appended to the link when opened. To retrieve \nvalue1\n from \nhttps://[branchsubdomain]/test?param1=value1\n, you would use \nsession.click.query.param1\n.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsession.link_data.~id\n\n\nID of the link (0 for dynamic and 3P links)\n\n\n\n\n\n\nsession.link_data.~creation_source\n\n\nHow the link was created, e.g. iOS SDK, API, etc.\n\n\n\n\n\n\nsession.link_data.~tags\n\n\nTags of the link\n\n\n\n\n\n\nsession.link_data.~campaign\n\n\nCampaign of the link\n\n\n\n\n\n\nsession.link_data.~channel\n\n\nChannel of the link\n\n\n\n\n\n\nsession.link_data.~feature\n\n\nFeature of the link\n\n\n\n\n\n\nsession.link_data.~stage\n\n\nStage of the link\n\n\n\n\n\n\nsession.link_data.$one_time_use\n\n\nWhether this was a one time use link of not\n\n\n\n\n\n\nsession.link_data.$one_time_use_used\n\n\nWhether this one time use link was used or not\n\n\n\n\n\n\nsession.link_data.$identity_id\n\n\nBranch internal identity of user who generated the link\n\n\n\n\n\n\nsession.link_data.$match_duration\n\n\nLength of time (in milliseconds) that a match could have occured\n\n\n\n\n\n\nsession.link_data.+url\n\n\nThe full URL of the link, e.g. [branchsubdomain]/m/abcde12345\n\n\n\n\n\n\nsession.link_data.key\n\n\nAny key value you specified in the link\u2019s data dictionary\n\n\n\n\n\n\n\n\nAuthenticating webhook events\n\n\nIf you need to whitelist the webhook server IP addresses for security purposes, they are listed below.\n\n\n\n\n52.9.159.121/32\n\n\n52.9.176.205/32\n\n\n\n\nReserved for future use:\n\n\n\n\n52.9.188.221/32\n\n\n52.9.188.236/32\n\n\n\n\nYou can also create events through the Branch SDK, and specify a secret key inside the event metadata to pass into the URL of the webhook itself.\n\n\nSupport\n\n\nFAQs\n\n\nWhy is my app not sending a device ID?\n\n\nCheck to see if you are in \nTest Mode\n with your SDK. If we are sending a fake ID to simulate installs, we will not send it inside a webhook.\n\n\nWhat is the difference between first referring data and session referring data?\n\n\nBecause webhooks are event based, and tie back to a unique user, we send you data from the link that first drove this unique user into your app. Then, if they click another Branch link later, we also send you session referring data from this second link. For an initial install event, these should be the same. For any subsequent events, session referring data may be different.", 
            "title": "Legacy Webhooks"
        }, 
        {
            "location": "/pages/exports/webhooks/#overview", 
            "text": "Note  You are viewing docs for our legacy Webhooks system. We recommend viewing docs on the newer  Webhooks  offering, which is powered by  People-Based Attribution .   Branch\u2019s webhook system allows you to receive install and down funnel event data from us as it occurs, for install attribution or conversion funnels in your own database. You simply need to specify a URL for us to send all this data to.  The webhook system is very powerful and customizable. You can register to only receive notifications for specific events, as well as specific subsections of events, filtered by link data, user data or event properties. You can specify to only receive an event for the first time a user completes it, or every time. You can also specify to only receive events in the case of referrals.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/exports/webhooks/#setup", 
            "text": "", 
            "title": "Setup"
        }, 
        {
            "location": "/pages/exports/webhooks/#register-webhook", 
            "text": "Open the  Webhooks  page on the Branch dashboard.  Click  + Add A New Webhook :", 
            "title": "Register webhook"
        }, 
        {
            "location": "/pages/exports/webhooks/#configure-webhook-criteria", 
            "text": "Here are explanations of what each field on this screen controls:   Webhook URL:  Enter the URL where you would like the events to be sent.  Postback Method:  Events can be sent either via POST or GET.  Event Frequency:  You can choose to receive a webhook for ever single event occurrence, or only for the first time that even is triggered for each unique user.  Event Trigger:  You may select between the following default events:      Event  Description      install  Triggered the first time a user launches your app    open  Triggered whenever the app becomes active    referred session  Triggered in  addition  to install, open or web session start if a user comes from a Branch link    web session start  Triggered when the user views a webpage using the Branch Web SDK    click  Triggered whenever a Branch link is clicked on any platform    -- other --  Enter an event you created through the Branch SDK.      Tip  The  referred session  and  web session start  options will only appear after at least one event of that type has been recorded.    Filter (Advanced):  See the  Advanced  page to read about customizing when events are sent.", 
            "title": "Configure webhook criteria"
        }, 
        {
            "location": "/pages/exports/webhooks/#testing", 
            "text": "To test whether your webhook is configured correctly, you can use  requestb.in . RequestBin gives you a URL that accepts events and allows you to see exactly what Branch is sending.    Go to  requestb.in  and click  + Create a RequestBin :     Copy the  Bin URL :     Paste this into the URL field of your Branch webhook's configuration screen:     Now whenever your webhook is triggered, you will see a full report on RequestBin:", 
            "title": "Testing"
        }, 
        {
            "location": "/pages/exports/webhooks/#advanced", 
            "text": "", 
            "title": "Advanced"
        }, 
        {
            "location": "/pages/exports/webhooks/#sample-webhook-post-body-syntax", 
            "text": "There are two types of events that you can listen for, and each has a different format of webhook POST. The two are:   Click  webhooks: Clicks are the way users interact with your Branch links. Please note that a click does not always have to take place in a browser. For example, clicking a Universal Link will open up the app directly, and therefore no browser metadata information will be present.  Event  webhooks: Events are user events that either Branch generates or you generate via a call to our event tracking API. Examples are shown on the previous page of this guide.", 
            "title": "Sample webhook POST body syntax"
        }, 
        {
            "location": "/pages/exports/webhooks/#sample-post-body-for-click-webhooks", 
            "text": "POST  User - agent :   Branch   Metrics   API  Content - Type :   application / json  { \n     click_id :   a   unique   identififer , \n     event :   click , \n     event_timestamp :   link click timestamp , \n     os :   iOS   |   Android , \n     os_version :   the OS version , \n     metadata :   { \n         ip :   click IP , \n         userAgent :   click UA , \n         browser :   browser , \n         browser_version :   browser version , \n         brand :   phone brand , \n         model :   phone model , \n         os :   browser OS , \n         os_version :   OS version \n     }, \n     query :   {   any   query   parameters   appeneded   to   the   link   }, \n     link_data :   {   link   data   dictionary   -   see   below   }  }  // link data dictionary example  { \n     branch_id :   unique identifier for unique link , \n     date_ms :   link creation date with millisecond , \n     date_sec :   link creation date with second , \n     date :   link creation date , \n     domain :   domain label , \n     data :   { \n         + url :   the   Branch   link , \n         ...   other   deep   link   data \n     }, \n     campaign :   campaign label , \n     feature :   feature label , \n     channel :   channel label \n     tags :   [ tags   array ], \n     stage :   stage label ,  }", 
            "title": "Sample POST body for Click webhooks"
        }, 
        {
            "location": "/pages/exports/webhooks/#sample-post-body-for-event-webhooks", 
            "text": "POST  User - agent :   Branch   Metrics   API  Content - Type :   application / json  { \n     event :   event name \n     event_timestamp :   time stamp for the event \n     os :   iOS   |   Android , \n     os_version :   the OS version , \n     metadata :   { \n          ... event metadata  - specified in userCompletedAction withState  \n         ip :   IP of the user , \n         referred :   true   |   false ,   // if event is install / open / web session start \n         reinstall :   true   |   false ,   if   event   is   install   /   open \n     }, \n     hardware_id :   IDFA   ( iOS )   |   Android ID   ( Android ), \n     google_advertising_id :   GAID   ( Android   if   present ), \n\n\n     // optionally included: \n     identity :   user ID ,   // specified in setIdentity \n\n     // the referrer who created the new user \n     first_referring_click_timestamp :   the first click timestamp , \n     first_referring_click_query :   {   any   query   parameters   appeneded   to   the   link   }, \n     first_referring_identity :   user ID who created the referring link   -   specified   in   setIdentity \n     first_referring_hardware_id :   hardware identifier who created the referring link \n     first_referring_link_data :   {   link   data   dictionary   -   see   below   } \n\n     // the referrer who referred this session \n     session_referring_click_timestamp :   the session click timestamp , \n     session_referring_click_query :   {   any   query   parameters   appeneded   to   the   link   }, \n     session_referring_identity :   user ID who created the referring link \n     session_referring_hardware_id :   hardware identifier who created the referring link \n     session_referring_link_data :   {   link   data   dictionary   -   see   below   }  }  // link data dictionary example  { \n     branch_id :   unique identifier for unique link , \n     date_ms :   link creation date with millisecond , \n     date_sec :   link creation date with second , \n     date :   link creation date , \n     domain :   domain label , \n     data :   { \n         + url :   the   Branch   link , \n         ...   other   deep   link   data \n     }, \n     campaign :   campaign label , \n     feature :   feature label , \n     channel :   channel label \n     tags :   [ tags   array ], \n     stage :   stage label ,  }", 
            "title": "Sample POST body for Event webhooks"
        }, 
        {
            "location": "/pages/exports/webhooks/#filter-webhooks", 
            "text": "Filters allow you to specify when a webhook gets sent to your URL based off criteria matches. You can configure your filters to use any webhook keyword value by using liquid tags following this convention:  {{ param.name }} .   Wildcard Filtering  If you want to filter on just a key being present, you can put a  *  in the value box.    Example: Filtering installs by referring link campaign  Let\u2019s say you\u2019re interested in receiving a webhook for every  install  event that is referred from a Branch link where you set the  Campaign  field to  App Install Campaign . You would configure a filter to fire a webhook only when  ~campaign  is equal to  App Install Campaign . The key would equal  session.link_data.~campaign  and the value would equal  App Install Campaign .     Example: Filtering clicks by link channel  Let\u2019s say you\u2019re interested in receiving a webhook for every  click  event that is referred from a Branch link where you set the  Channel  field to  AppLovin . You would configure a filter to fire a webhook only when  ~channel  is equal to  AppLovin . The key would equal  click.link_data.~channel  and the value would equal  AppLovin .     Example: Filtering custom signup event by location  Let\u2019s say you\u2019re interested in receiving a webhook for every  sign_up  event that is triggered via the  userCompletedAction  method in the SDKs, but only in a specific market, like Chicago. Your event metadata will look something like the following:  event :   { \n     name :   sign_up , \n     metadata :   { \n         city   :   Chicago , \n         username   :   john_smith_1 , \n     }  }   You would configure a filter to fire a webhook only when  city  is equal to  Chicago . The key would equal  event.metadata.city  and the value would equal  Chicago .", 
            "title": "Filter Webhooks"
        }, 
        {
            "location": "/pages/exports/webhooks/#templating-your-postback-url", 
            "text": "If you plan on sending click or install data to a third party, you\u2019ll likely need to create one of our templated Postback URLs along side the aforementioned filters. These work very similarly to filters and use the same liquid tags structure:  {{ param.name }} . Once the webhook is eligible, the correct value will be filled in to the slot.   Example: Creating a dynamic conversion postback for an ad agency  Let\u2019s say you have created a Branch link in the Ads tab specifically for SEM campaigns and you\u2019re going to give the link to an advertising agency. This ad agency wants to receive install conversion events from Branch by tracking your Branch link with specific query parameters. Your Branch link might potentially look something like this:  http://branch.app.link/my-sf-campaign?clickId=12345 .  Now, you want to report conversions back to the agency or your backend, and you know the structure of the desired Postback URL. For example, lets say you want to send a Postback to  http://myagency.com/tracking?event=install clickId=12345 idfa= .  With that information, it\u2019s very easy to setup the correct, dynamic Postback URL using our templates. In this case, you need 3 fields to be dynamically populated:   event name  clickId  IDFA value   Branch can easily populate those fields dynamically (and potentially add a lot more as described in the next section) using the following template keys:   {{ event.name }}  {{ session.link_click.query.clickId }}  {{ device.hardware_id }}   You can create your dynamic Postback URL by using those above tags in place of where the value should go. So, in keeping with the example, the dynamic Postback URL to give to Branch would be and should be pasted into the webhook creation URL field:   http://myagency.com/tracking?event={{ event.name }} clickId={{ session.link_click.query.clickId }} idfa={{ device.hardware_id }}    Additionally, since you don\u2019t want to send them  every  install event, let\u2019s add a  filter  to only send the installs that are referred by links which have a  clickId  in the query parameter. In this case, we use a wildcard parameter ( * ) for the key  session.link_click.query.clickId , which tells Branch to only trigger this webhook when an  install  event was referred by a link with a  clickId .   And with that, we\u2019re finished creating our postback!", 
            "title": "Templating your Postback URL"
        }, 
        {
            "location": "/pages/exports/webhooks/#keys-available-for-templatingfiltering-click-webhooks", 
            "text": "When a Branch link is opened, triggering a  click  event, you may access:   Properties of the visitor who opened the link.  Properties of the link that was opened.      Key  Description      click.query.key  Any key that was appended to the link when opened. To retrieve  value1  from  https://[branchsubdomain]/test?param1=value1 , you would use  click.query.param1    click.browser.branch_id  The Branch ID we have for a user's unique broswer    click.browser.metadata.userAgent  The user agent of the browser    click.device.hardware_id  For iOS, this is the Advertising ID. For Android, this is the Android ID    click.device.metadata.google_advertising_id  Android only. The Google Advertising ID, if known    click.device.metadata.os  The OS of the device    click.device.metadata.os_version  The OS version    click.date  Time of link click      click.device  will only be available for Universal/App Links without a browser redirect. Similarly,  click.browser  will only be available for non-Universal/App Links. Handle this appropriately in your code.      Key  Description      click.link_data.~id  ID of the link (0 for dynamic and 3P links)    click.link_data.~creation_source  How the link was created, e.g. iOS SDK, API, etc.    click.link_data.~tags  Tags of the link    click.link_data.~campaign  Campaign of the link    click.link_data.~channel  Channel of the link    click.link_data.~feature  Feature of the link    click.link_data.~stage  Stage of the link    click.link_data.$one_time_use  Whether this was a one time use link of not    click.link_data.$one_time_use_used  Whether this one time use link was used or not    click.link_data.$identity_id  Branch internal identity of user who generated the link    click.link_data.$match_duration  Length of time (in milliseconds) that a match could have occured    click.link_data.+url  The full URL of the link, e.g. [branchsubdomain]/m/abcde12345    click.link_data.key  Any key value you specified in the link\u2019s data dictionary    click.referring_identity.id  ID you set for the user who created this link", 
            "title": "Keys available for templating/filtering Click webhooks"
        }, 
        {
            "location": "/pages/exports/webhooks/#keys-available-for-templatingfiltering-event-webhooks", 
            "text": "When a user triggers an event inside your app, either one  created by you  or one tracked by Branch automatically ( install ,  open ,  referred session , and  web session start ), you may access:   Properties of the event.  Identity properties of the user who triggered the event.  Session properties of the user who triggered the event.    Identity vs. Session  Identity properties  are  set once , the very first time Branch sees a user. Once set for each user, these are never changed.  Session properties  are the data of the  most recent  record Branch has for a user.  For an initial  install  event, identity and session properties will be the same. For  open  events, session properties will be different if the user has subsequently opened another Branch link.   Event Data     Key  Description      event.name  The name of the event (e.g.,  install  or  my_custom_event )    event.metadata.referred  Equals  true  if user installed app after opening a Branch link    event.metadata.ip  The IP address of the user    event.metadata.key  Data defined as  key  when creating a custom event    event.date  Timestamp of when the event occurred     Device Data   Device data provides access to the device snapshot. Branch collects this snapshot both when a user is in the browser (via a click on a Branch link) and then after the user opens the app.      Key  Description      device.metadata.os  The OS of the device    device.metadata.os_version  The OS version of the device    device.metadata.ip  The IP address of the device    device.metadata.model  The model of the device     Identity Data   Identity data is unique for each user Branch tracks. These values are permanently tied to that user, meaning if a link with a campaign of 'google' drives an install, then that user will have a permanent  identity.link_data.~campaign  value equal to 'google'.    Except for identity.id, these will not be populated if the user installed your app without opening a Branch link first.      Key  Description      identity.link_data.~id  ID of the link (0 for dynamic and 3P links)    identity.link_data.~creation_source  How the link was created, e.g. iOS SDK, API, etc.    identity.link_data.~tags  Tags of the link    identity.link_data.~campaign  Campaign of the link    identity.link_data.~channel  Channel of the link    identity.link_data.~feature  Feature of the link    identity.link_data.~stage  Stage of the link    identity.link_data.$one_time_use  Whether this was a one time use link of not    identity.link_data.$one_time_use_used  Whether this one time use link was used or not    identity.link_data.$identity_id  Branch internal identity of user who generated the link    identity.link_data.$match_duration  Length of time (in milliseconds) that a match could have occured    identity.link_data.+url  The full URL of the link, e.g. [branchsubdomain]/m/abcde12345    identity.link_data.key  Any key value you specified in the link\u2019s data dictionary     Session Data   Session data refers to the  most recent  record Branch has for each user, regardless of whether it reflects an  install  or an  open  event. These will not be populated if the session was not initiated by opening a Branch link.      Key  Description      session.link_click.query.key  Any key that was appended to the link when opened. To retrieve  value1  from  https://[branchsubdomain]/test?param1=value1 , you would use  session.click.query.param1 .        Key  Description      session.link_data.~id  ID of the link (0 for dynamic and 3P links)    session.link_data.~creation_source  How the link was created, e.g. iOS SDK, API, etc.    session.link_data.~tags  Tags of the link    session.link_data.~campaign  Campaign of the link    session.link_data.~channel  Channel of the link    session.link_data.~feature  Feature of the link    session.link_data.~stage  Stage of the link    session.link_data.$one_time_use  Whether this was a one time use link of not    session.link_data.$one_time_use_used  Whether this one time use link was used or not    session.link_data.$identity_id  Branch internal identity of user who generated the link    session.link_data.$match_duration  Length of time (in milliseconds) that a match could have occured    session.link_data.+url  The full URL of the link, e.g. [branchsubdomain]/m/abcde12345    session.link_data.key  Any key value you specified in the link\u2019s data dictionary", 
            "title": "Keys available for templating/filtering Event webhooks"
        }, 
        {
            "location": "/pages/exports/webhooks/#authenticating-webhook-events", 
            "text": "If you need to whitelist the webhook server IP addresses for security purposes, they are listed below.   52.9.159.121/32  52.9.176.205/32   Reserved for future use:   52.9.188.221/32  52.9.188.236/32   You can also create events through the Branch SDK, and specify a secret key inside the event metadata to pass into the URL of the webhook itself.", 
            "title": "Authenticating webhook events"
        }, 
        {
            "location": "/pages/exports/webhooks/#support", 
            "text": "", 
            "title": "Support"
        }, 
        {
            "location": "/pages/exports/webhooks/#faqs", 
            "text": "", 
            "title": "FAQs"
        }, 
        {
            "location": "/pages/exports/webhooks/#why-is-my-app-not-sending-a-device-id", 
            "text": "Check to see if you are in  Test Mode  with your SDK. If we are sending a fake ID to simulate installs, we will not send it inside a webhook.", 
            "title": "Why is my app not sending a device ID?"
        }, 
        {
            "location": "/pages/exports/webhooks/#what-is-the-difference-between-first-referring-data-and-session-referring-data", 
            "text": "Because webhooks are event based, and tie back to a unique user, we send you data from the link that first drove this unique user into your app. Then, if they click another Branch link later, we also send you session referring data from this second link. For an initial install event, these should be the same. For any subsequent events, session referring data may be different.", 
            "title": "What is the difference between first referring data and session referring data?"
        }, 
        {
            "location": "/pages/exports/event_ontology_data_schema/", 
            "text": "Event Ontology Data Schema\n\n\nOverview\n\n\nPeople-Based Attribution\n relies on a new, unified data format. We refer to this as Branch's Event Ontology.  This unified format is shared across all Branch products:\n\n\n\n\nDashboard\n\n\nData Feeds\n:\n\n\nWebhooks\n\n\nData Integrations\n\n\nData Export API\n\n\n\n\n\n\n\n\nPreviously, we had different formats for Webhooks vs Data Integrations vs Exports. With the release of People-Based Attribution, we have reconciled these differences.\n\n\nEvents Included\n\n\nWe split out events into logical groupings. We now have the following distinct event groupings:\n\n\n\n\nimpressions\n\n\nclick\n\n\nweb-to-app auto redirect\n\n\nsms sent\n\n\ninstall\n\n\nreinstall\n\n\nopen\n\n\nweb session start\n\n\npageview \n\n\ncustom event\n\n\ncommerce event\n\n\ncontent event\n\n\nuser lifecycle event\n\n\n\n\nThe last four are groupings of multiple events.\n\n\n\n\nCustom events\n are any events you choose to track with Branch that fall outside our list of standard events. \n\n\nCommerce events\n include a short list of events such as PURCHASE that involve e-commerce. \n\n\nContent events\n include a short list of events such as VIEW_ITEM that involve content and are not directly related to e-commerce. \n\n\nUser lifecycle events\n are events marking a distinct action completed by a user as they progress through your app, such as COMPLETE_REGISTRATION.\n\n\n\n\nBranch Standard Events\n\n\nHere is a full breakdown of standard events trackable by Branch.\n\n\n\n\n\n\n\n\nevent grouping\n\n\nevents\n\n\n\n\n\n\n\n\n\n\ncommerce event\n\n\nADD_TO_CART, ADD_TO_WISHLIST, VIEW_CART, INITIATE_PURCHASE, ADD_PAYMENT_INFO, PURCHASE, SPEND_CREDITS\n\n\n\n\n\n\ncontent event\n\n\nSEARCH, VIEW_ITEM, VIEW_ITEMS, RATE, SHARE\n\n\n\n\n\n\nuser lifecycle event\n\n\nCOMPLETE_REGISTRATION, COMPLETE_TUTORIAL, ACHIEVE_LEVEL, UNLOCK_ACHIEVEMENT\n\n\n\n\n\n\n\n\nFields included\n\n\nOn each event, we provide a considerable amount of information. The following table has an overview. Several of the fields below are objects which themselves have many fields.\n\n\n\n\n\n\n\n\nfield\n\n\nformat\n\n\ndefinition\n\n\n\n\n\n\n\n\n\n\nid\n\n\nstring\n\n\na unique id for the event\n\n\n\n\n\n\nname\n\n\nstring\n\n\nthe name of the event, such as \"CLICK\", \"INSTALL\", \"PURCHASE\", or custom event names like \"signup\"\n\n\n\n\n\n\ntimestamp\n\n\nlong\n\n\nunix timestamp in milliseconds for the event\n\n\n\n\n\n\ndays_from_last_attributed_touch_to_event\n\n\nint\n\n\nnumber of days between when the last touch occurred and when this event subsequently occurred\n\n\n\n\n\n\nlast_attributed_touch_type\n\n\nenum \n\n\nwhether the last attributed touch was an impression, a click, or a web to app auto redirect\n\n\n\n\n\n\nlast_attributed_touch_timestamp\n\n\nlong\n\n\nunix timestamp in milliseconds for the last attributed touch\n\n\n\n\n\n\nlast_attributed_touch_data\n\n\nobject\n\n\nIf an impression, click, web to app auto redirect, branch cta view, or sms sent, this field contains the link data directly associated with the event. For all other events, this is the data associated with the last qualifying touch (click, impression, etc) to occur before this event. Subject to attribution windows, within which the last click or web to app auto redirect trumps a more recent impression.\n\n\n\n\n\n\ndays_from_last_cta_view_to_event\n\n\nint\n\n\nnumber of days between when the last Branch CTA view occurred and when this event subsequently occurred (see datasource definition of cta view)\n\n\n\n\n\n\nlast_cta_view_timestamp\n\n\nlong\n\n\nunix timestamp in milliseconds for the last Branch CTA view\n\n\n\n\n\n\nlast_cta_view_data\n\n\nobject\n\n\nThis is the data associated with the last qualifying Branch CTA View to occur before this event. Subject to attribution windows, within which the last click or web to app auto redirect trumps a more recent impression.\n\n\n\n\n\n\nfirst_event_for_user\n\n\nboolean\n\n\nif this is the first time for this persona that this event has been triggered (not yet supported)\n\n\n\n\n\n\ndeep_linked\n\n\nboolean\n\n\ntrue if the current app or web session resulted in the user being deep linked\n\n\n\n\n\n\nuser_data\n\n\nobject\n\n\ndata associated with the user who triggered the event\n\n\n\n\n\n\nevent_data\n\n\nobject\n\n\ndata associated with commerce or content events, but not specific to any one item\n\n\n\n\n\n\ncontent_items\n\n\narray of object\n\n\nArray of content items. A content item is any distinct item, whether a product, piece of content, restaurant, service, flight, hotel, or any kind of media (text, visual, audio)\n\n\n\n\n\n\ncustom_data\n\n\nobject\n\n\npartner-specified custom key-value pairs associated with an event, excluding Touches, Branch CTA view and SMS sent\n\n\n\n\n\n\n\n\nFull list of fields\n\n\nIf you are building an integration with Branch or simply wish to learn more about the fields we offer, please download one of the CSV files below. They provide a comprehensive list of events and fields, along with definitions and data types. \n\n\nFull Event Ontology for Webhooks, Data Integrations and Exports", 
            "title": "Event Ontology"
        }, 
        {
            "location": "/pages/exports/event_ontology_data_schema/#event-ontology-data-schema", 
            "text": "", 
            "title": "Event Ontology Data Schema"
        }, 
        {
            "location": "/pages/exports/event_ontology_data_schema/#overview", 
            "text": "People-Based Attribution  relies on a new, unified data format. We refer to this as Branch's Event Ontology.  This unified format is shared across all Branch products:   Dashboard  Data Feeds :  Webhooks  Data Integrations  Data Export API     Previously, we had different formats for Webhooks vs Data Integrations vs Exports. With the release of People-Based Attribution, we have reconciled these differences.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/exports/event_ontology_data_schema/#events-included", 
            "text": "We split out events into logical groupings. We now have the following distinct event groupings:   impressions  click  web-to-app auto redirect  sms sent  install  reinstall  open  web session start  pageview   custom event  commerce event  content event  user lifecycle event   The last four are groupings of multiple events.   Custom events  are any events you choose to track with Branch that fall outside our list of standard events.   Commerce events  include a short list of events such as PURCHASE that involve e-commerce.   Content events  include a short list of events such as VIEW_ITEM that involve content and are not directly related to e-commerce.   User lifecycle events  are events marking a distinct action completed by a user as they progress through your app, such as COMPLETE_REGISTRATION.", 
            "title": "Events Included"
        }, 
        {
            "location": "/pages/exports/event_ontology_data_schema/#branch-standard-events", 
            "text": "Here is a full breakdown of standard events trackable by Branch.     event grouping  events      commerce event  ADD_TO_CART, ADD_TO_WISHLIST, VIEW_CART, INITIATE_PURCHASE, ADD_PAYMENT_INFO, PURCHASE, SPEND_CREDITS    content event  SEARCH, VIEW_ITEM, VIEW_ITEMS, RATE, SHARE    user lifecycle event  COMPLETE_REGISTRATION, COMPLETE_TUTORIAL, ACHIEVE_LEVEL, UNLOCK_ACHIEVEMENT", 
            "title": "Branch Standard Events"
        }, 
        {
            "location": "/pages/exports/event_ontology_data_schema/#fields-included", 
            "text": "On each event, we provide a considerable amount of information. The following table has an overview. Several of the fields below are objects which themselves have many fields.     field  format  definition      id  string  a unique id for the event    name  string  the name of the event, such as \"CLICK\", \"INSTALL\", \"PURCHASE\", or custom event names like \"signup\"    timestamp  long  unix timestamp in milliseconds for the event    days_from_last_attributed_touch_to_event  int  number of days between when the last touch occurred and when this event subsequently occurred    last_attributed_touch_type  enum   whether the last attributed touch was an impression, a click, or a web to app auto redirect    last_attributed_touch_timestamp  long  unix timestamp in milliseconds for the last attributed touch    last_attributed_touch_data  object  If an impression, click, web to app auto redirect, branch cta view, or sms sent, this field contains the link data directly associated with the event. For all other events, this is the data associated with the last qualifying touch (click, impression, etc) to occur before this event. Subject to attribution windows, within which the last click or web to app auto redirect trumps a more recent impression.    days_from_last_cta_view_to_event  int  number of days between when the last Branch CTA view occurred and when this event subsequently occurred (see datasource definition of cta view)    last_cta_view_timestamp  long  unix timestamp in milliseconds for the last Branch CTA view    last_cta_view_data  object  This is the data associated with the last qualifying Branch CTA View to occur before this event. Subject to attribution windows, within which the last click or web to app auto redirect trumps a more recent impression.    first_event_for_user  boolean  if this is the first time for this persona that this event has been triggered (not yet supported)    deep_linked  boolean  true if the current app or web session resulted in the user being deep linked    user_data  object  data associated with the user who triggered the event    event_data  object  data associated with commerce or content events, but not specific to any one item    content_items  array of object  Array of content items. A content item is any distinct item, whether a product, piece of content, restaurant, service, flight, hotel, or any kind of media (text, visual, audio)    custom_data  object  partner-specified custom key-value pairs associated with an event, excluding Touches, Branch CTA view and SMS sent", 
            "title": "Fields included"
        }, 
        {
            "location": "/pages/exports/event_ontology_data_schema/#full-list-of-fields", 
            "text": "If you are building an integration with Branch or simply wish to learn more about the fields we offer, please download one of the CSV files below. They provide a comprehensive list of events and fields, along with definitions and data types.   Full Event Ontology for Webhooks, Data Integrations and Exports", 
            "title": "Full list of fields"
        }, 
        {
            "location": "/pages/integrations/faq/", 
            "text": "Overview\n\n\nFrequently asked questions about Branch's new Data Integrations.\n\n\nHow do I enable new Data Integrations?\n\n\nFirst, toggle to Branch\u2019s new analytics system (\nPeople-Based Attribution\n) using the banner at the top of the dashboard if you haven\u2019t already. Next, navigate to the Data Import \n Export section, where you\u2019ll be able to enable new Data Integrations.\n\n\nHow do I access my old Data Integrations?\n\n\nFirst, toggle to Branch\u2019s old analytics system using the banner at the top of the dashboard. Next, navigate to the Data Import \n Export section, where you\u2019ll be able to access and modify old Data Integrations.\n\n\nCan I enable both the old and new versions of a Data Integration at the same time?\n\n\nYou can, but this may result in double-counting or other reporting discrepancies. We recommend that you do not enable both the old and new versions of a Data Integration at once.\n\n\nWhat will happen at the end of my free trial?\n\n\nAt the end of your free trial, the trial will automatically turn into a subscription, and the Data Integration will remain enabled.\n\n\nHow will I be charged for new Data Integrations?\n\n\nWe\u2019ll be charging for the new Data Integrations based on Monthly Active Users (MAUs). Branch uses its mobile and web SDKs to detect MAUs, and our pricing schedule is below. If you\u2019d like an estimate of your monthly costs, please reach out to \n, or to your account manager.\n* Up to 10k MAUs: free\n* Up to 50k MAUs: $59/month\n* Up to 200k MAUs: $199/month\n* 200k+ MAUs: enterprise\n\n\nHow long will old Data Integrations continue to be available?\n\n\nOld Data Integrations will be available through the first quarter of 2018, after which we will no longer support them. At this point, if you want Branch to automatically send your data to other services, you\u2019ll need to enable our new Data Integrations.\n\n\nWhat exactly has changed in the new Data Integrations? Will there be any changes in the data Branch sends to other services in the new Data Integrations?\n\n\nEvent metadata and field mappings will not change in the new Data Integrations, but the events themselves will; in other words, Branch will be sending information to other services in the same format, but at slightly different times because of Branch\u2019s new event definitions. New Data Integrations will send events based on Branch\u2019s \nPeople-Based Attribution platform\n, meaning that we\u2019ll use new criteria (like custom attribution windows) to count and send events.", 
            "title": "New Data Integrations"
        }, 
        {
            "location": "/pages/integrations/faq/#overview", 
            "text": "Frequently asked questions about Branch's new Data Integrations.", 
            "title": "Overview"
        }, 
        {
            "location": "/pages/integrations/faq/#how-do-i-enable-new-data-integrations", 
            "text": "First, toggle to Branch\u2019s new analytics system ( People-Based Attribution ) using the banner at the top of the dashboard if you haven\u2019t already. Next, navigate to the Data Import   Export section, where you\u2019ll be able to enable new Data Integrations.", 
            "title": "How do I enable new Data Integrations?"
        }, 
        {
            "location": "/pages/integrations/faq/#how-do-i-access-my-old-data-integrations", 
            "text": "First, toggle to Branch\u2019s old analytics system using the banner at the top of the dashboard. Next, navigate to the Data Import   Export section, where you\u2019ll be able to access and modify old Data Integrations.", 
            "title": "How do I access my old Data Integrations?"
        }, 
        {
            "location": "/pages/integrations/faq/#can-i-enable-both-the-old-and-new-versions-of-a-data-integration-at-the-same-time", 
            "text": "You can, but this may result in double-counting or other reporting discrepancies. We recommend that you do not enable both the old and new versions of a Data Integration at once.", 
            "title": "Can I enable both the old and new versions of a Data Integration at the same time?"
        }, 
        {
            "location": "/pages/integrations/faq/#what-will-happen-at-the-end-of-my-free-trial", 
            "text": "At the end of your free trial, the trial will automatically turn into a subscription, and the Data Integration will remain enabled.", 
            "title": "What will happen at the end of my free trial?"
        }, 
        {
            "location": "/pages/integrations/faq/#how-will-i-be-charged-for-new-data-integrations", 
            "text": "We\u2019ll be charging for the new Data Integrations based on Monthly Active Users (MAUs). Branch uses its mobile and web SDKs to detect MAUs, and our pricing schedule is below. If you\u2019d like an estimate of your monthly costs, please reach out to  , or to your account manager.\n* Up to 10k MAUs: free\n* Up to 50k MAUs: $59/month\n* Up to 200k MAUs: $199/month\n* 200k+ MAUs: enterprise", 
            "title": "How will I be charged for new Data Integrations?"
        }, 
        {
            "location": "/pages/integrations/faq/#how-long-will-old-data-integrations-continue-to-be-available", 
            "text": "Old Data Integrations will be available through the first quarter of 2018, after which we will no longer support them. At this point, if you want Branch to automatically send your data to other services, you\u2019ll need to enable our new Data Integrations.", 
            "title": "How long will old Data Integrations continue to be available?"
        }, 
        {
            "location": "/pages/integrations/faq/#what-exactly-has-changed-in-the-new-data-integrations-will-there-be-any-changes-in-the-data-branch-sends-to-other-services-in-the-new-data-integrations", 
            "text": "Event metadata and field mappings will not change in the new Data Integrations, but the events themselves will; in other words, Branch will be sending information to other services in the same format, but at slightly different times because of Branch\u2019s new event definitions. New Data Integrations will send events based on Branch\u2019s  People-Based Attribution platform , meaning that we\u2019ll use new criteria (like custom attribution windows) to count and send events.", 
            "title": "What exactly has changed in the new Data Integrations? Will there be any changes in the data Branch sends to other services in the new Data Integrations?"
        }, 
        {
            "location": "/pages/ad-networks/ad-networks-list/", 
            "text": "Ads Networks List\n\n\n\n\n\n\n\n\nLogo\n\n\nPartner\n\n\n\n\n\n\n\n\n\n\n\n\nA4G\n\n\n\n\n\n\n\n\nActionpay\n\n\n\n\n\n\n\n\nAd4Screen\n\n\n\n\n\n\n\n\nAdAction Interactive\n\n\n\n\n\n\n\n\nAdacts Digital\n\n\n\n\n\n\n\n\nAdbloom\n\n\n\n\n\n\n\n\nAdcash\n\n\n\n\n\n\n\n\nAdColony\n\n\n\n\n\n\n\n\nAdikteev\n\n\n\n\n\n\n\n\nAdmitad\n\n\n\n\n\n\n\n\nAdsterra Network\n\n\n\n\n\n\n\n\nAffise\n\n\n\n\n\n\n\n\nAppier\n\n\n\n\n\n\n\n\nApple\n\n\n\n\n\n\n\n\nApplift\n\n\n\n\n\n\n\n\nApplovin\n\n\n\n\n\n\n\n\nAppnext\n\n\n\n\n\n\n\n\nBilly Mobile\n\n\n\n\n\n\n\n\nClickadu\n\n\n\n\n\n\n\n\nClickky\n\n\n\n\n\n\n\n\nConnected Interactive\n\n\n\n\n\n\n\n\ncrobo\n\n\n\n\n\n\n\n\nCrossInstall\n\n\n\n\n\n\n\n\nDataXu\n\n\n\n\n\n\n\n\nDigital Turbine\n\n\n\n\n\n\n\n\nDisplay.io\n\n\n\n\n\n\n\n\nDoubleClick\n\n\n\n\n\n\n\n\nDrawbridge\n\n\n\n\n\n\n\n\nEspire\n\n\n\n\n\n\n\n\nFacebook\n\n\n\n\n\n\n\n\nFeedMob\n\n\n\n\n\n\n\n\nFyber\n\n\n\n\n\n\n\n\nGeistM\n\n\n\n\n\n\n\n\nGlispa\n\n\n\n\n\n\n\n\nGlobalWide Media\n\n\n\n\n\n\n\n\nGoogle AdWords\n\n\n\n\n\n\n\n\nImpact Radius\n\n\n\n\n\n\n\n\nInflecto Media\n\n\n\n\n\n\n\n\nInMobi\n\n\n\n\n\n\n\n\nIronSource\n\n\n\n\n\n\n\n\nJampp\n\n\n\n\n\n\n\n\nLiftoff\n\n\n\n\n\n\n\n\nMagnet\n\n\n\n\n\n\n\n\nManage\n\n\n\n\n\n\n\n\nMobio\n\n\n\n\n\n\n\n\nMoBrain\n\n\n\n\n\n\n\n\nMobusi\n\n\n\n\n\n\n\n\nMobvista\n\n\n\n\n\n\n\n\nMobX\n\n\n\n\n\n\n\n\nMoloco\n\n\n\n\n\n\n\n\nMotive\n\n\n\n\n\n\n\n\nMozoo\n\n\n\n\n\n\n\n\nMpire Network\n\n\n\n\n\n\n\n\nMundoMedia\n\n\n\n\n\n\n\n\nmyTarget\n\n\n\n\n\n\n\n\nNativeX\n\n\n\n\n\n\n\n\nOplytic\n\n\n\n\n\n\n\n\nPepperjam\n\n\n\n\n\n\n\n\nPerformance Horizon\n\n\n\n\n\n\n\n\nPhunware\n\n\n\n\n\n\n\n\nPicnic Media\n\n\n\n\n\n\n\n\nPinsight\n\n\n\n\n\n\n\n\nPrappers\n\n\n\n\n\n\n\n\nProfiliAd\n\n\n\n\n\n\n\n\nPropeller Ads\n\n\n\n\n\n\n\n\nRaykaad\n\n\n\n\n\n\n\n\nRemerge\n\n\n\n\n\n\n\n\nRevX\n\n\n\n\n\n\n\n\nSabio Mobile\n\n\n\n\n\n\n\n\nSpyke Media\n\n\n\n\n\n\n\n\nStackAdapt\n\n\n\n\n\n\n\n\nTAB\n\n\n\n\n\n\n\n\nTaboola\n\n\n\n\n\n\n\n\nTapjoy\n\n\n\n\n\n\n\n\nTapsell\n\n\n\n\n\n\n\n\nTaptica\n\n\n\n\n\n\n\n\nThe Trade Desk\n\n\n\n\n\n\n\n\nUnilead Network\n\n\n\n\n\n\n\n\nUnity\n\n\n\n\n\n\n\n\nVentes Avenues\n\n\n\n\n\n\n\n\nVungle\n\n\n\n\n\n\n\n\nWakeapp\n\n\n\n\n\n\n\n\nYeahMobi", 
            "title": "Ad Networks List"
        }, 
        {
            "location": "/pages/ad-networks/ad-networks-list/#ads-networks-list", 
            "text": "Logo  Partner       A4G     Actionpay     Ad4Screen     AdAction Interactive     Adacts Digital     Adbloom     Adcash     AdColony     Adikteev     Admitad     Adsterra Network     Affise     Appier     Apple     Applift     Applovin     Appnext     Billy Mobile     Clickadu     Clickky     Connected Interactive     crobo     CrossInstall     DataXu     Digital Turbine     Display.io     DoubleClick     Drawbridge     Espire     Facebook     FeedMob     Fyber     GeistM     Glispa     GlobalWide Media     Google AdWords     Impact Radius     Inflecto Media     InMobi     IronSource     Jampp     Liftoff     Magnet     Manage     Mobio     MoBrain     Mobusi     Mobvista     MobX     Moloco     Motive     Mozoo     Mpire Network     MundoMedia     myTarget     NativeX     Oplytic     Pepperjam     Performance Horizon     Phunware     Picnic Media     Pinsight     Prappers     ProfiliAd     Propeller Ads     Raykaad     Remerge     RevX     Sabio Mobile     Spyke Media     StackAdapt     TAB     Taboola     Tapjoy     Tapsell     Taptica     The Trade Desk     Unilead Network     Unity     Ventes Avenues     Vungle     Wakeapp     YeahMobi", 
            "title": "Ads Networks List"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/", 
            "text": "Facebook Ads FAQ and Advanced Options\n\n\nFAQ\n\n\nWhat is Facebook MMP?\n\n\n\"Work with a Facebook Marketing Partner to get deeper insights or measure across several ad networks\" (\nFacebook - \"Measuring for App Ads\"\n).\n\n\nThe acronym MMP is used to mean either the broad category of Facebook Mobile Marketing Partners, or more narrowly to mean Mobile Measurement Partners. The latter is a special subset of Facebook partners that have access to device-level attribution data. Branch has been vetted by Facebook and joined this group of partners in order to provide both granular analytics and true cross-channel reporting. We help you measure which installs, opens and conversion events should be attributed to Facebook ad campaigns versus other marketing efforts.\n\n\nHow does Branch attribute events to Facebook ads?\n\n\nFacebook is a self-attributing network. This means that Facebook claims credit for installs and other events. This differs from some ad networks, which send a stream of impressions and clicks that Branch then matches to events. Branch then compares these claims against other ad networks, as well as traffic coming from email, your website, and other sources, choosing the most recent click to get credit. \n\n\nThe Branch SDK already helps you track installs and other events. When you enable the Facebook MMP integration, Branch sends events and advertising IDs to Facebook. Facebook then reports whether devices previously viewed or clicked a Facebook ad, including helpful information such as campaign, ad set, and ad. As stated above, Branch then dedupes these claims against other claims for attribution.\n\n\nHow can I use deep links in Facebook ads?\n\n\nCreating a deep link is easy! First, make sure you have \nset up the integration with Facebook MMP\n on the Branch Dashboard. Then navigate to the \nFacebook page under Partner Management\n and click \"Create Facebook Link\".\n\n\nLonger instructions can be found in the guides linked to from the \nFacebook overview\n page. For example, see \nthis section of the App Installs guide\n.\n\n\nHow can I attribute conversion events to Facebook ads?\n\n\nFirst, make sure you have \nset up the integration with Facebook MMP\n on the Branch Dashboard. Second, \nset up tracking for Standard Events\n. It's that simple! We will automatically attribute events to Facebook ads. \n\n\nThere are advanced options for tracking events, which you can read more about \nbelow\n.\n\n\nWhat are the permissions you ask for as part of the onboarding process, and why?\n\n\n\n\n\n\n\n\nPermissions (OAuth scopes)\n\n\nWhy\n\n\n\n\n\n\n\n\n\n\nads_read\n\n\nPulling marketing insights data (e.g. impressions, clicks) to present on the Branch Dashboard. Also used for pulling creative name and id, etc., to provide richer analytics for installs, opens and other events.\n\n\n\n\n\n\nbusiness_management\n\n\n(1) We pull in ad accounts for you to choose from. (2) At the end of the login process, we add our System User to your business and ad account with REPORTS_ONLY permissions. Then we deauthorize the access token that has all 3 of these permissions. In the future, we can easily quarantine/decommission the System User if we detect unusual or unauthorized activity.\n\n\n\n\n\n\n\n\nWhat is each piece of information needed during the onboarding process, and why?\n\n\n\n\n\n\n\n\nIdentifier\n\n\nWhy\n\n\n\n\n\n\n\n\n\n\nAd account\n\n\nPulling marketing insights data (e.g. impressions, clicks) to present on the Branch Dashboard.\n\n\n\n\n\n\nFacebook App ID\n\n\nSending installs, opens and other events to Facebook in order to see whether they were driven by a Facebook ad campaign.\n\n\n\n\n\n\n\n\nI'm having problems finding or choosing the correct ad account(s)\n\n\nThe ad account I want to select is greyed out\n\n\n\n\nIf you are not an admin of the \nbusiness\n linked to an ad account, you will not be able to add it. This is because we will not be able to add our System User for attribution and analytics purposes. To check whether you are a business admin, please visit the \nbusiness's settings page\n. If you can see yourself listed, and you can see that your role is shown as admin (see image below), you should be able to complete setup. Otherwise, please request that an admin at your business complete the setup on the Branch Dashboard.\n\n\n\n\nIf you still have questions, please \ncontact us\n and include \"Facebook MMP + Business Admin\" in the subject.\n\n\nI see a warning underneath my ad account saying that I need to be an admin\n\n\n\n\nIf an ad account is not linked to a business, then we cannot guarantee that this account setup will succeed. Please visit \nthe ad account settings page\n, navigate to the appropriate ad account, and ensure you are an admin (see image below). \n\n\n\n\nIf you still have questions, please \ncontact us\n and include \"Facebook MMP + Standalone Ad Account(s)\" in the subject.\n\n\nI can't see the ad account I want to use at all\n\n\nPlease try logging out and logging back in on Facebook. Note the email address that you use. If you still do not see ad accounts, please visit \nbusiness.facebook.com\n and ensure that you use the same email address / Facebook account. If you still cannot figure this out, please \ncontact us\n and include \"Facebook MMP + Missing Ad Account(s)\" in the subject.\n\n\nWhat is the difference between your previous Facebook Ads product, and the new Facebook Ads product?\n\n\nBranch is now a Facebook Mobile Measurement Partner (MMP). This means we are partnering with Facebook to more accurately attribute your installs, opens and custom events back to Facebook ad campaigns! \n\n\nThe major differences: we can use this product without a Branch deep link. No need to manually create Branch links and add them to Facebook ads! \n\n\nIf you use a Branch deep link, we will still return the Branch deep link information in app so that you can deep link your users to content. Attributed events will \nnot\n have the Branch deep link information, but rather the Facebook ad campaign information. This info cannot be passed along to third parties via our Data Integrations.\n\n\nHow do I upgrade from the old Facebook integration to the new Facebook integration?\n\n\nEasy. Navigate to \nFacebook within the Ads Management portal\n. Choose \"Connect with Facebook\" and follow the guide to \nset up the integration with Facebook MMP\n.\n\n\nThe moment you complete this signup flow, we will upgrade you to getting the full MMP functionality! Now installs and other analytics will include info on campaign, ad set, ad, and creative from Facebook.\n\n\nI think I previously had Facebook enabled...\n\n\n...but now when I navigate to \nFacebook within the Ads Management portal\n, I just see \"Connect with Facebook\". What gives?\n\n\nWe've hidden the old Facebook setup flow. Please choose \"Connect with Facebook\" and follow the guide to \nset up the integration with Facebook MMP\n.\n\n\nThe previous signup flow is no longer supported. If for some reason you need to access the previous signup flow, please \ncontact us\n and include \"Facebook MMP + legacy signup flow\" in the subject.\n\n\nWhat happens to campaigns in which I'm using deep links?\n\n\nWe still highly recommend you use links in ads. \nStudies have shown\n that when you deep link your users, they have a better experience and retention is higher!\n\n\nWhen you put a Branch link in a Facebook ad, we still return this link to your app, so that users can be deep linked. Deep linking functions exactly as it did before.\n\n\nDo I need to remove deep links from my Facebook ads.\n\n\nNo. In fact we recommend you use deep links. See the previous question.\n\n\nDoes this new Facebook MMP functionality cover web campaigns?\n\n\nGenerally, no. Facebook MMP allows us to measure Facebook app install and app engagement ads. However, in some cases, we are able to attribute web events that occur \nafter\n an app install/engagement ad \nback\n to that ad. This is because we can link together web and app user identifiers as part of our People-Based Attribution product.\n\n\nCan I get the data out?\n\n\n\n\nWarning\n\n\nData Integrations will never include events attributed to Facebook. This is because we cannot share device-level Facebook attribution data with third parties.\n\n\n\n\nThere are many ways to access data pertaining to Facebook. \n\n\nYou can see analytics on impressions, clicks, installs, opens and conversion events on various pages of the \nBranch Dashboard\n, as well as the \nQuery API\n.\n\n\nIf you have signed Facebook's \n\"Advanced Mobile Measurement\" agreement (\"Data Use Terms for Advanced Mobile App Measurement\")\n, then you can get device level data out via \nWebhooks\n, the \nData Export API\n, and \nCSV Exports\n. If you have not signed this agreement, any event attributed to a Facebook ad will look like an organic event when accessed via Webhooks, the Data Export API, and CSV Exports.\n\n\nWe cannot send device-level Facebook attribution data to third parties. Thus we cannot send events attributed to Facebook via Data Integrations. Please instead consider analyzing this data in-house (using Webhooks, the Data Export API, or CSV Exports), or using the Branch Dashboard for all of your analytics and attribution needs. If you have analytics needs that are not met by the Branch Dashboard, please \ncontact us\n and include \"Facebook MMP + Feature Request\" in the subject.\n\n\n\n\n\n\n\n\nBranch feature\n\n\nFacebook data included\n\n\n\n\n\n\n\n\n\n\nDashboard visualizations\n\n\nPre-aggregated analytics\n\n\n\n\n\n\nQuery API\n\n\nPre-aggregated analytics\n\n\n\n\n\n\nLiveview\n\n\nDevice-level analytics *\n\n\n\n\n\n\nData Export API\n\n\nDevice-level analytics *\n\n\n\n\n\n\nCSV Exports\n\n\nDevice-level analytics *\n\n\n\n\n\n\nWebhooks\n\n\nDevice-level analytics *\n\n\n\n\n\n\nData Integrations\n\n\nNot supported\n\n\n\n\n\n\n\n\n(*) You must have signed you have signed Facebook's \n\"Advanced Mobile Measurement\" agreement (\"Data Use Terms for Advanced Mobile App Measurement\")\n to view this data\n\n\nThe data on Facebook and the data on Branch does not line up!\n\n\nPlease see the section below, \nSources of Discrepancies between Facebook and Branch\n.\n\n\nFacebook Ads Advanced Options\n\n\nFacebook MMP event options\n\n\n\n\nTip\n\n\nTo see the options below on the Branch Dashboard, \nclick here\n.\n\n\n\n\nBranch + Facebook MMP allows you to attribute events back to your Facebook ad campaigns. Branch sends events to Facebook, along with metadata including advertising ID. Facebook then returns info on the ad that the user last viewed or clicked, if any. Branch then surfaces this on our Dashboard, and conditionally* makes this data available in our \nData Feeds\n product.\n\n\nPartners have several options when it comes to sending events to Facebook. These are discussed below.\n\n\n(*) You must have signed the \nData Use Terms for Advanced Mobile App Measurement\n\n\nTracking installs\n\n\nBranch sends all installs to Facebook. Facebook de-duplicates installs on their end. If you have the Facebook SDK and/or another MMP, these also send installs to Facebook's backend. This will not result in duplicate installs, since Facebook de-dupes them.\n\n\nTracking reinstalls and opens\n\n\n\n\nWarning\n\n\nFacebook does not de-duplicate custom app events on their backend. So if you have the Facebook SDK integrated or another MMP tracking app opens, choose option 1 below.\n\n\n\n\nWhen tracking reinstalls and opens, you have 3 options:\n\n\n\n\nuse Branch name (branch_open)\n: This allows us to get attribution data from Facebook, but without it counting as an app open. Use this option if you have the Facebook SDK integrated or are testing with another MMP. Since the Facebook SDK or other MMP is already sending fb_mobile_activate_app, you do not want Branch to send this a second time. (Default)\n\n\nuse Facebook name (fb_mobile_activate_app)\n: Branch will send the exact event used by Facebook for tracking app opens. Use this option if you do not have the Facebook SDK and you are not tracking opens with another MMP, and you would like Branch to help Facebook record opens.\n\n\ndisable\n: Use this option if you do not want Branch attributing opens at all. In some cases, we may still be able to attribute opens based on previously retrieved attribution data from Facebook. But we will not send any opens to Facebook in order to get attribution data back.\n\n\n\n\nTracking other conversion events\n\n\n\n\nWarning\n\n\nFacebook does not de-duplicate custom app events on their backend. If you are tracking conversion events with the Facebook SDK or another MMP, choose option 1 below.\n\n\n\n\nIt's possible to track app events using only Branch! You can \ntrack the events\n with Branch once, and then we send them to Facebook as well as other analytics systems. Use the \nv2/event logging methods\n outlined here.\n\n\nWhen tracking add to cart, purchase, and other Facebook app events, you have 3 options:\n\n\n\n\nuse Branch name\n: This allows us to get attribution data from Facebook, but without it counting as a purchase, add to cart, etc. Use this option if you have the Facebook SDK integrated or are testing with another MMP, and you already track app events via one of those two methods. Since the Facebook SDK or other MMP is already sending events to Facebook, you do not want Branch to send these a second time. (Default)\n\n\nuse Facebook name\n: Branch will send the exact event used by Facebook for tracking app events. Use this option if you are not already tracking app events with the Facebook SDK or another MMP, and you would like Branch to help Facebook record these events.\n\n\ndisable\n: Use this option if you do not want Branch attributing these conversion events. In some cases, we may still be able to attribute these conversion events based on previously retrieved attribution data from Facebook. But we will not send any conversion events to Facebook in order to get attribution data back.\n\n\n\n\nMapping of Branch event names to Facebook events\n\n\n\n\n\n\n\n\nBranch event name\n\n\nFacebook MMP _eventName\n\n\n\n\n\n\n\n\n\n\nACHIEVE_LEVEL\n\n\nfb_mobile_level_achieved\n\n\n\n\n\n\nADD_PAYMENT_INFO\n\n\nfb_mobile_add_payment_info\n\n\n\n\n\n\nADD_TO_CART\n\n\nfb_mobile_add_to_cart\n\n\n\n\n\n\nADD_TO_WISHLIST\n\n\nfb_mobile_add_to_wishlist\n\n\n\n\n\n\nCOMPLETE_REGISTRATION\n\n\nfb_mobile_complete_registration\n\n\n\n\n\n\nCOMPLETE_TUTORIAL\n\n\nfb_mobile_tutorial_completion\n\n\n\n\n\n\nINITIATE_PURCHASE\n\n\nfb_mobile_initiated_checkout\n\n\n\n\n\n\nPURCHASE\n\n\nfb_mobile_purchase\n\n\n\n\n\n\nRATE\n\n\nfb_mobile_rate\n\n\n\n\n\n\nSEARCH\n\n\nfb_mobile_search\n\n\n\n\n\n\nSPEND_CREDITS\n\n\nfb_mobile_spent_credits\n\n\n\n\n\n\nUNLOCK_ACHIEVEMENT\n\n\nfb_mobile_achievement_unlocked\n\n\n\n\n\n\nVIEW_ITEM\n\n\nfb_mobile_content_view\n\n\n\n\n\n\n\n\nMapping of Branch metadata to Facebook metadata\n\n\n\n\n\n\n\n\nBranch Key-Value Pair\n\n\nFacebook MMP Key-Value Pair\n\n\nFacebook event(s) supported\n\n\n\n\n\n\n\n\n\n\ncommerce_data.revenue\n\n\n_valueToSum\n\n\nfb_mobile_add_to_cart, fb_mobile_add_to_wishlist, fb_mobile_initiated_checkout, fb_mobile_purchase, fb_mobile_spent_credits, fb_mobile_content_view\n\n\n\n\n\n\ncommerce_data.currency\n\n\nfb_currency\n\n\nfb_mobile_add_to_cart, fb_mobile_add_to_wishlist, fb_mobile_initiated_checkout, fb_mobile_purchase, fb_mobile_content_view\n\n\n\n\n\n\ncontent_items[0].$sku\n\n\nfb_content_id\n\n\nfb_mobile_add_to_cart, fb_mobile_add_to_wishlist, fb_mobile_tutorial_completion, fb_mobile_initiated_checkout, fb_mobile_purchase, fb_mobile_rate, fb_mobile_spent_credits, fb_mobile_content_view\n\n\n\n\n\n\ncontent_items[0].$product_category\n\n\nfb_content_type\n\n\nfb_mobile_add_to_cart, fb_mobile_add_to_wishlist, fb_mobile_initiated_checkout, fb_mobile_purchase, fb_mobile_rate, fb_mobile_search, fb_mobile_spent_credits, fb_mobile_content_view\n\n\n\n\n\n\ncontent_items[0].$quantity\n\n\nfb_num_items\n\n\nfb_mobile_initiated_checkout, fb_mobile_purchase\n\n\n\n\n\n\ncontent_items[0].$rating\n\n\n_valueToSum\n\n\nfb_mobile_rate\n\n\n\n\n\n\ncontent_items[0].$rating_max\n\n\nfb_max_rating_value\n\n\nfb_mobile_rate\n\n\n\n\n\n\nevent_data.search_query\n\n\nfb_search_string\n\n\nfb_mobile_search\n\n\n\n\n\n\ncontent_items[0].$og_description\n\n\nfb_description\n\n\nfb_mobile_achievement_unlocked\n\n\n\n\n\n\ncustom_data.fb_payment_info_available\n\n\nfb_payment_info_available\n\n\nfb_mobile_initiated_checkout\n\n\n\n\n\n\ncustom_data.level\n\n\nfb_level\n\n\nfb_mobile_level_achieved\n\n\n\n\n\n\ncustom_data.fb_success\n\n\nfb_success\n\n\nfb_mobile_add_payment_info, fb_mobile_tutorial_completion, fb_mobile_search\n\n\n\n\n\n\ncustom_data.fb_registration_method\n\n\nfb_registration_method\n\n\nfb_mobile_complete_registration\n\n\n\n\n\n\n\n\nCurrently Facebook appears to only support sending one fb_content_id (etc) per event, whereas Branch allows you to send many. To provide as much functionality as possible, we choose the first content_item and search it for key-value pairs that can be sent to Facebook.\n\n\nTracking custom events\n\n\nIn addition to tracking installs and Facebook app events (see \nTracking other conversion events\n above), you can also have Branch attribute custom events. To do so, we must send those events to Facebook.\n\n\nWhen tracking custom events that have no equivalent \nFacebook App Event\n, you have 2 options:\n\n\n\n\nenable\n: Branch will send custom events to Facebook. this allows us to get attribution data from Facebook. (default)\n\n\ndisable\n: Use this option if you do not want Branch attributing custom events. In some cases, we may still be able to attribute these custom events based on previously retrieved attribution data from Facebook. But we will not send any custom events to Facebook in order to get attribution data back. \n\n\n\n\nMigrating from the existing Facebook integration to MMP\n\n\n\n\nNote\n\n\nYou can no longer see the previous Facebook onboarding flow that required you to copy-paste your Facebook app secret. Please use the \"Authenticate with Facebook\" option instead.\n\n\n\n\nIf you have been using our integration with Facebook prior to February 14, 2018, then we highly recommend that you upgrade to our new integration that includes MMP. \n\n\nWe are now certified by Facebook as a Mobile Measurement Partner! Branch can now help you attribute installs, opens, and conversion events to Facebook like never before.\n\n\nThis integration includes full support for Facebook, Instagram, and the Audience Network. We also automatically pull in impressions and clicks from Facebook and surface those alongside your clicks on Branch links. The deep linking experience your users love is still supported. \n\n\nInstructions on how to get set up with Facebook MMP are \nhere\n. Note that this will replace your existing credentials on our backend. Instead of copy-pasting your Facebook app secret into the Branch Dashboard, you can now simply click through the normal Facebook login flow.\n\n\nBranch will now automatically surface Facebook campaign, ad set, and ad information on the Branch Dashboard's visualizations! This isn't limited to \nAds Analytics\n -- it also includes cross-channel analytics such as \nSource Analytics\n.\n\n\nSources of Discrepancies between Facebook and Branch\n\n\nWhen using Branch as your Facebook MMP, you may notice some data discrepancies between the Branch dashboard and the Facebook dashboard if not configured correctly. We have highlighted several sources of discrepancies if they are present after you have onboarded with Facebook on the Branch dashboard. \n\n\nThere are many reasons why you may see different numbers on Facebook and Branch. Please note that we have one system for tracking impressions and clicks (via the Facebook Insights API) and a different system for tracking installs, reinstalls, opens and conversion events (via a private Facebook API). When trying to figure out differences, it's best to pick one event at a time (e.g. clicks or installs) and focus on causes of discrepancies there.\n\n\nThe first two sections below covers common causes of discrepancies: attribution windows and timezones. The following sections then provide more steps on diagnosing and troubleshooting specific problems.\n\n\nAttribution Windows\n\n\nAn attribution window is the maxiumum amount of time between an initial action (click or impression) and a conversion event (install or open) for which you attribute that conversion event as occuring \nbecause of\n that initial action.\n\n\nExample with 3 day view attribution window: If a user views your ad and 2 days later installs your app, that install would be attributed to that ad view. However if the user views your ad and 4 days later installs the app, that install would be considered an organic install and would NOT be attributed to that ad view.  You can read more in our documentation here: \nhttps://docs.branch.io/pages/dashboard/unified-analytics/#attribution-windows\n\n\nIf one of your attribution windows on the Branch dashboard is different than the corresponding window on the Facebook dashboard, the data between the two will not align. You can mitigate this by changing one of more of your attribution windows on the Branch dashboard, or changing your Facebook dashboard for the given ad account.\n\n\nThere are four Branch attribution windows, and two Facebook attribution windows. This chart shows which Facebook window name each Branch window name corresponds to:\n\n\n\n\n\n\n\n\nBranch window name\n\n\nFacebook window name\n\n\n\n\n\n\n\n\n\n\nClick to install\n\n\nClick Window\n\n\n\n\n\n\nClick to session start\n\n\nClick Window\n\n\n\n\n\n\nClick to conversion event\n\n\nClick Window\n\n\n\n\n\n\nImpression to install\n\n\nView Window\n\n\n\n\n\n\nImpression to session start\n\n\nView Window\n\n\n\n\n\n\nImpression to conversion event\n\n\nView Window\n\n\n\n\n\n\n\n\nChange your Facebook attribution windows\n\n\nIn order to update your Facebook Attribution window for a particular ad account, you can go to \nhttps://business.facebook.com/ads/manager/account_settings/information\n. Choose the account in the dropdown in the upper-left corner. As long as you're an admin on that account, you should see a section 'Attribution' at the top-right, and an ability to edit the Click or View window or both.\n\n\nChange your Branch attribution windows\n\n\nAlternatively or in addition, you could update any of your four Branch attribution windows. To do so go to the \nLink Settings\n section of the Branch dashboard, and scroll down to the 'Attribution Windows' section and expand it. Alter any of the four windows listed in the chart above to match the corresponding Facebook window, and then save at the bottom of the page.\n\n\nReporting based on time of impression or time of conversion\n\n\nFacebook and Branch may report the same install as occurring on different days, if the impression is on one day but the install is on another day.\n\n\nBackground:\n\n\nFacebook by defaults reports installs based on the day that the impression occurred. They also allow you to see reports based on the day that the install occurred.\n\n\nBranch always reports installs based on the date of install, never the date of impression.\n\n\nLet's illustrate this with a scenario:\n\n\nUser views an ad on Apil 1, clicks it, then installs the app on April 2.\n\n\nBy default, Facebook reports the install as occurring on April 1. However, when pulling data from the insights API, you can specify option action_report_time=conversion. This causes Facebook to report that the install occurred on April 2.\n\n\nBranch will always report the install as having occurred on April 2.\n\n\nTimezones\n\n\nPlease make sure the timezone is the same for your Facebook ad account and your Branch account. \n\n\nYou can see the timezone used by your Branch account \nhere\n.\n\n\nYou can see the timezone used by your Facebook ad account \nhere\n. If you are using multiple ad accounts with Branch, be sure to align the timezones of each of them.\n\n\nIf you are unable to align all timezones, you may notice some data on the Branch Dashboard does not line up exactly with data on the Facebook Dashboard. However, data will not be lost, but merely shifted between days. Summing figures over longer periods of time should greatly diminish the effect of having inconsistent time zones.\n\n\nOther common issues\n\n\nIssue with iOS 10 and Limit Ad Tracking\n\n\nIn iOS 10, Apple broke the ability for app developers to collect the \nIDFA\n if the user had enabled \nLimit Ad Tracking\n. In this case, Branch and Facebook cannot compare notes to see who drove the install. This will account for about 15% discrepancy in counts across both platforms, where Branch's tracked installs will be lower.\n\n\nNot Collecting Advertising ID\n\n\nIf you see absolutely 0 data coming through from your integration, it's possible that you're not collecting Google Advertising ID (GAID) on Android or IDFA on iOS.\n\n\n\n\niOS: Add the AdSupport.framework and read this extra info about \nsubmitting\n to the store.\n\n\nAndroid: Add Google Play Services so that we can collect GAID. See \nhere\n.\n\n\n\n\nInstalls Counted as Reinstalls, Opens on Branch\n\n\nOne discrepancy root cause we've seen before is the scenario where Branch will classify an install as a reinstall or open. We remember the history of a particular user via their IDFA or Google Advertising ID (in addition to using a few other methods) and will detect whether the user is actually a new user or a returning user who had previously uninstalled your app. Facebook has a different mechanism that is limited to 180 days. Branch in some cases has detected reinstalls that occurred more than a year later.\n\n\nDon't Use setDebug\n\n\nFacebook ads are incompatible with \ndebug mode\n, as this prevents us from sending the correct hardware ID to Facebook.\n\n\nDiscrepancies with Impressions and Clicks\n\n\n1. I don't see any clicks or installs on the Branch Dashboard\n\n\nFirst, be sure you've set up the Facebook integration! Work through \nthese steps\n and ensure you reach the bottom. You should have at least one ad account enabled, and a Facebook app id listed.\n\n\nSecond, make sure you're running ads that are resulting in installs, reinstalls, or opens. Once you see installs, you should shortly start seeing clicks. For more, see the next FAQ item.\n\n\nIf you're unable to see installs, reinstalls, or opens on the Branch Dashboard, skip down to the section below: \nI don't see any installs, reinstalls or opens on the Branch Dashboard\n.\n\n\n2. I see installs on the Facebook Dashboard, but no clicks\n\n\n\n\nNote\n\n\nBranch will only show impressions and clicks for campaigns that have installs, reinstalls, or opens. If you have campaigns that have not resulted in these app-based outcomes, we will hide them. This is to prevent massively inflating analytics on the Branch Dashboard with data that is not relevant. If you have feedback on this, please \ncontact us\n and include \"Facebook MMP + clicks\" in the subject.\n\n\n\n\nIf you turned on the integration within the last hour, then you may need to refresh the Branch Dashboard to see clicks. We automatically start a background job to pull in impressions and clicks from Facebook the first time you visit the \nAds Analytics\n page after enabling Facebook.\n\n\nIf it has been longer than an hour since you (1) enabled the MMP integration then (2) visited the Ads Analytics page then (3) pressed refresh and (4) see installs but still no clicks, then please \ncontact us\n and put \"Facebook MMP + 0 clicks\" in the subject. Please include: \n\n\n\n\nBranch app id\n\n\nFacebook ad account id\n\n\nOne Facebook campaign name for which you have clicks and installs\n\n\nDate range\n\n\nFor every day in date range, the number of clicks Facebook is reporting for this campaign - include both a table and a screenshot\n\n\nFor every day in date range, the number of installs Facebook is reporting for this campaign - include both a table and a screenshot\n\n\n\n\n3. I see clicks on the Branch Dashboard, but the numbers look different from what I see on the Facebook Dashboard.\n\n\nIf you are looking at impressions/clicks for the current day:\n\n\nIf the numbers line up pretty closely between Branch and Facebook, then it's possible the Facebook numbers are slightly more recent. The Facebook Insights API refreshes every 15 minutes. Branch tries to pull updated numbers as often as possible.\n\n\nIf the numbers do not line up closely, but you recently started a new campaign, it may be that Branch has not yet pulled in data for that campaign. The numbers should line up much more closely within an hour. If they do not, then please \ncontact us\n and put \"Facebook MMP + Click Dicrepancies\" in the subject. Please include: \n\n\n\n\nBranch app id\n\n\nFacebook ad account id\n\n\nOne Facebook campaign name for which you have clicks and installs\n\n\nDate range\n\n\nFor every day in date range, the number of clicks Facebook is reporting for this campaign - include both a table and a screenshot\n\n\nFor every day in date range, the number of installs Facebook is reporting for this campaign - include both a table and a screenshot \n\n\n\n\nIf you are looking at impressions/clicks for a past day:\n\n\nWhen you initially enable the Facebook integration, then visit the \nAds Analytics\n page, Branch will start fetching impressions and clicks for the most recent several days. If you go back beyond 7 days, we may not have impressions and click data. If you need this data, please \ncontact us\n and include \"Facebook MMP + Loading Old Clicks\" in the subject. Please include:\n\n\n\n\nBranch app id\n\n\nFacebook ad account id\n\n\nOne Facebook campaign name for which you have clicks and installs\n\n\nDate range\n\n\n\n\nDiscrepancies with Installs, Opens and Conversion Events\n\n\n1. I don't see any installs, reinstalls or opens on the Branch Dashboard\n\n\nFirst, be sure you've set up the Facebook integration! Work through \nthese steps\n and ensure you reach the bottom. You should have at least one ad account enabled, and a Facebook app id listed.\n\n\nSecond, make sure you're running ads that are resulting in installs, reinstalls, or opens.\n\n\nThird, on the Facebook Dashboard, locate a campaign with installs, reinstalls, or opens. Determine the ad account id for which you are running an app campaign. Then navigate to the \nFacebook page under Partner Management\n and make sure that ad account id is listed as part of the completed signup process. It should appear here (two ad accounts are shown as enabled in the screenshot, though the ad account ids are blurred out):\n\n\n\n\nFourth, make sure you have installs, reinstalls, or opens that have occurred after you enabled the Branch + Facebook integration. We cannot pull historical device-level data, as that's not how the Facebook APIs are architected. You should enable Branch + Facebook, wait for new installs to occur, then check the \nAds Analytics\n page.\n\n\nIf after all this you're still not seeing installs, please \ncontact us\n and include \"Facebook MMP + 0 installs\" in the subject. Please include:\n\n\n\n\nBranch app id\n\n\nFacebook ad account id\n\n\nOne Facebook campaign name for which you have installs\n\n\nDate range\n\n\nFor every day in date range, the number of installs Facebook is reporting - include both a table and a screenshot\n\n\n\n\n2. I see installs, reinstalls or opens on the Branch Dashboard, but the numbers look different from what I see on the Facebook Dashboard\n\n\nIf you've made it this far, the integration between Branch + Facebook is at least somewhat functional! Time to identify why numbers are not lining up.\n\n\nTry comparing (1) just installs, and (2) just for one campaign. On the Branch \nAds Analytics\n page, you can view data for just one campaign by choosing \"Add Filter\", selecting \"campaign\" from the first dropdown, and the individual campaign name from the second dropdown. Again, try to get numbers to line up between Facebook and Branch just for installs on one campaign.\n\n\nFirst, make sure the attribution windows line up between Facebook and Branch. You can read more on this \nabove\n.\n\n\nSecond, make sure the timezones line up between Facebook and Branch. You can read more on this \nabove\n.\n\n\nNote that attribution windows are not applied to events that occurred in the past. So if you have a 30-day attribution window for click-to-install on Branch, and a 7-day window for clicks on Facebook, once you change the Branch click-to-install attribution window to 7 days, it will not automatically update historical numbers. Instead, you'll need to wait for new installs to occur under the stricter 7-day Branch click-to-install attribution window. The next day you should be able to come back and look at just the current day's install numbers, and they should line up more closely.\n\n\nIf after all this you're still seeing discrepancies, please \ncontact us\n and include \"Facebook MMP + Install Discrepancies\" in the subject. Please include:\n\n\n\n\nBranch app id\n\n\nFacebook ad account id\n\n\nOne Facebook campaign name for which you have clicks and installs\n\n\nDate range\n\n\nYour Facebook attribution window - include both a table and a screenshot\n\n\nFor every day in date range, the number of installs Facebook is reporting - include both a table and a screenshot\n\n\nFor every day in date range, the number of installs Branch is reporting - include both a table and a screenshot\n\n\n\n\n\n\nNote\n\n\nIn some rare cases, we've seen partners running multiple Facebook campaigns with the same name. In this case, the Branch Dashboard will combine stats for all of these campaigns under the same name. We still retain this data separately on our backend, as there are different Facebook campaign ids. While we do not expose this on the Branch Dashboard, you can pull statistics by campaign id via the \nQuery API\n.\n\n\n\n\n3. I don't see any conversion events on the Branch Dashboard\n\n\nBe sure you are tracking v2/events - \nlearn more from our v2/event docs\n.\n\n\nBe sure you are opting to send conversion events to Facebook - learn more from the section \nFacebook MMP event options\n above.\n\n\nBe reasonably confident that users coming from Facebook ads are completing conversion events. If you have, for example, only a small percentage of users completing purchases, and only a small percentage of users downloading your app from Facebook, it's possible that there is no overlap between users making purchases and users coming from Facebook.\n\n\nIf after all this you're still seeing discrepancies, please \ncontact us\n and include \"Facebook MMP + Install Discrepancies\" in the subject. Please include:\n\n\n\n\nBranch app id\n\n\nFacebook ad account id\n\n\nOne Facebook campaign name for which you have clicks and installs\n\n\nDate range\n\n\nYour Facebook attribution window - include both a table and a screenshot\n\n\nFor every day in date range, the number of installs Facebook is reporting - include both a table and a screenshot\n\n\nFor every day in date range, the number of installs Branch is reporting - include both a table and a screenshot\n\n\nFor every day in date range, the number of conversion events Facebook is reporting - include both a table and a screenshot\n\n\nFor every day in date range, the number of conversion events Branch is reporting - include both a table and a screenshot\n\n\n\n\n4. I see conversion events on the Branch Dashboard, but the numbers look different from what I see on the Facebook Dashboard\n\n\nWe have not encountered any issues here so far. Please see \nI see installs, reinstalls or opens on the Branch Dashboard, but the numbers look different from what I see on the Facebook Dashboard\n for steps to follow, and for information to send to us if we need to debug together.\n\n\nTroubleshooting deep linking\n\n\nIntercepting Deep Links Before Branch\n\n\nIf you use Branch deep links in Facebook app ads, please check the following.\n\n\nWe recently discovered an issue where an app was calling Facebook's SDK to fetch the deferred app link within their iOS and Android app. Branch calls uses this same mechanism via a direct API integration, but if Facebook's SDK retrieves it before we do, Branch will not see any deep link data. Please ensure to comment out any calls to the following API within your app:\n\n\n\n\nAndroid: fetchDeferredAppLink\n\n\niOS: fetchDeferredAppLink\n\n\n\n\nTesting Deep Linking from Ads\n\n\nUnfortunately, the demo/preview ads used during the ads creation flow on Facebook use a different mechanism than live Facebook ads. \nThis prevents you from testing deep linking from your Facebook ads\n. Do not waste time trying to get this to work. We've confirmed with Facebook representatives that this is broken.\n\n\nThe only way to test the deep linking functionality is outside of the actual ads system is a helper tool from Facebook. Follow these instructions to test the deep linking functionality:\n\n\n\n\nHead to the \nAds tester tool\n\n\nChoose the app that you're advertising with\n\n\nScroll down to the button that says 'Test Deep Link'\n\n\nPaste in the Branch link\n\n\nCheck 'Send Deferred'\n\n\nClick 'Send to iOS/Android'\n\n\nInstall the app and it should deep link!\n\n\n\n\n\n\nNote the following common mistakes for testing\n\n\n\n\nIf you reset the GAID or IDFA on a device, you must uninstall Facebook and re-install prior to testing. Facebook does not update the IDFA/GAID every time it's opened.\n\n\nSend deferred does not require a notification to be sent or to be clicked. Checking \"Send Deferred\" will automatically queue up a match for the test device with the deep link data. The notifiation is completely separate from deferred deep linking.\n\n\nThe Facebook account on the desktop where you click \"Send Deferred\" must match the account logged into the test device for deferred deep link data to be queued up. Note that we've observed issues where you log in and out of multiple accounts on test devices that cause Facebook to not correctly queue up a match.\n\n\nIf you see that someone liked your ad, do not bother trying to click and test it. Clicking your own, live advertisement that shows up in notifications will not deep link.\n\n\n\n\n\n\nIssues Reading Facebook App Links\n\n\nIf Facebook is having trouble reading the App Links from the Branch link, you might see messages like these while trying to test out the flow. This means that there is something corrupted in the OG tags causing Facebook to not parse your link.\n\n\n\n\n\n\nRescrape the OG Tags\n\n\nYou can test the OG tags using the \nOG tag tester tool\n provided by Facebook:\n\n\n\n\nPaste the Branch Link into the Input URL box.\n\n\nClick on the Show existing scrape information button.\n\n\nExamine errors regarding App Links from the output window.\n\n\nClick on the Fetch New Scrape Information button. This last step typically resolves this problem if you are certain that your Branch Link Settings are correct.\n\n\n\n\n\n\nYou can further automate the rescraping process by using this command after you create a new link and before you use it for any ads:\n\n\ncurl --insecure \nhttps://graph.facebook.com/?id=[YOUR-URL-TO-SCRAPE]\nscrape=true\n\n\n\n\n\n\n\nIf the OG tag tester continues to report problems\n\n\n\n\nExamine your \nLink Settings\n and ensure that for all platforms (for which an app is available), that a URI scheme and a link to the app in the Play/App Store is configured. If you are using a Custom URL for your iOS Redirect, then you need to append \n?id[10-digit App Store ID]\n to the URL. This is necessary in order to fully generate the App Links and OG tags that the Facebook scraper expects to find.\n\n\nFor example, if your App Store URL is \nhttps://itunes.apple.com/us/app/my-app-name/id1234567890\n, then your Custom URL value should be \nhttps://example.com?id1234567890\n\n\n\n\n\n\nIf errors from the output window pertain to OG tags i.e. missing title, description etc. then examine link OG tags by appending \n?debug=true\n as described on the \nIntegration Testing page\n.\n\n\nIf you haven't set OG tags on a per link level, then please check your Dashboard's global Social Media Display Customization settings from the \nLink Settings\n page.\n\n\n\n\nUse a direct deep link\n\n\nAs a last resort, you can manually input a direct deep link. To retrieve this:\n\n\n\n\nGo to Facebook's \nOpen Graph Object Debugger\n\n\nInput the Branch link you want to use for your ad\n\n\nClick \nFetch new scrape information\n\n\nFind the \nal:ios:url\n line (it should look like \nmeta property=\"al:ios:url\" content=\"myapp://open?link_click_id=link-242052337263342024\" /\n)\n\n\nCopy the value of this (\nmyapp://open?link_click_id=link-242052337263342024\n) and input it as the Deep Link value of your ad\n\n\n\n\nIf none of these approaches work, please reach out to \n immediately.\n\n\nKnown Issue with App Restrictions\n\n\nWe recently discovered a bug within the Facebook system that prevents App Links from being read by the robot if you change any of these values from the defaults in your Advanced Facebook App Settings tab. Please make sure\n\n\n\n\nContains Alcohol is set to \nNo\n\n\nAge Restriction is set to \nAnyone (13+)\n\n\nSocial Discovery is set to \nYes\n\n\nCountry Restricted is set to \nNo\n\n\n\n\nIt has to look like this \nexactly\n:\n\n\n\n\nNo IP Whitelists\n\n\nBecause Branch has a large distribution of API servers that will be making requests to Facebook on behalf of your app, you cannot have an IP whitelist in your \nFacebook advanced settings\n and still have this integration work. Please remove any IPs from this setting if they are present.", 
            "title": "Facebook FAQ and Advanced Options"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#facebook-ads-faq-and-advanced-options", 
            "text": "", 
            "title": "Facebook Ads FAQ and Advanced Options"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#what-is-facebook-mmp", 
            "text": "\"Work with a Facebook Marketing Partner to get deeper insights or measure across several ad networks\" ( Facebook - \"Measuring for App Ads\" ).  The acronym MMP is used to mean either the broad category of Facebook Mobile Marketing Partners, or more narrowly to mean Mobile Measurement Partners. The latter is a special subset of Facebook partners that have access to device-level attribution data. Branch has been vetted by Facebook and joined this group of partners in order to provide both granular analytics and true cross-channel reporting. We help you measure which installs, opens and conversion events should be attributed to Facebook ad campaigns versus other marketing efforts.", 
            "title": "What is Facebook MMP?"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#how-does-branch-attribute-events-to-facebook-ads", 
            "text": "Facebook is a self-attributing network. This means that Facebook claims credit for installs and other events. This differs from some ad networks, which send a stream of impressions and clicks that Branch then matches to events. Branch then compares these claims against other ad networks, as well as traffic coming from email, your website, and other sources, choosing the most recent click to get credit.   The Branch SDK already helps you track installs and other events. When you enable the Facebook MMP integration, Branch sends events and advertising IDs to Facebook. Facebook then reports whether devices previously viewed or clicked a Facebook ad, including helpful information such as campaign, ad set, and ad. As stated above, Branch then dedupes these claims against other claims for attribution.", 
            "title": "How does Branch attribute events to Facebook ads?"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#how-can-i-use-deep-links-in-facebook-ads", 
            "text": "Creating a deep link is easy! First, make sure you have  set up the integration with Facebook MMP  on the Branch Dashboard. Then navigate to the  Facebook page under Partner Management  and click \"Create Facebook Link\".  Longer instructions can be found in the guides linked to from the  Facebook overview  page. For example, see  this section of the App Installs guide .", 
            "title": "How can I use deep links in Facebook ads?"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#how-can-i-attribute-conversion-events-to-facebook-ads", 
            "text": "First, make sure you have  set up the integration with Facebook MMP  on the Branch Dashboard. Second,  set up tracking for Standard Events . It's that simple! We will automatically attribute events to Facebook ads.   There are advanced options for tracking events, which you can read more about  below .", 
            "title": "How can I attribute conversion events to Facebook ads?"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#what-are-the-permissions-you-ask-for-as-part-of-the-onboarding-process-and-why", 
            "text": "Permissions (OAuth scopes)  Why      ads_read  Pulling marketing insights data (e.g. impressions, clicks) to present on the Branch Dashboard. Also used for pulling creative name and id, etc., to provide richer analytics for installs, opens and other events.    business_management  (1) We pull in ad accounts for you to choose from. (2) At the end of the login process, we add our System User to your business and ad account with REPORTS_ONLY permissions. Then we deauthorize the access token that has all 3 of these permissions. In the future, we can easily quarantine/decommission the System User if we detect unusual or unauthorized activity.", 
            "title": "What are the permissions you ask for as part of the onboarding process, and why?"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#what-is-each-piece-of-information-needed-during-the-onboarding-process-and-why", 
            "text": "Identifier  Why      Ad account  Pulling marketing insights data (e.g. impressions, clicks) to present on the Branch Dashboard.    Facebook App ID  Sending installs, opens and other events to Facebook in order to see whether they were driven by a Facebook ad campaign.", 
            "title": "What is each piece of information needed during the onboarding process, and why?"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#im-having-problems-finding-or-choosing-the-correct-ad-accounts", 
            "text": "", 
            "title": "I'm having problems finding or choosing the correct ad account(s)"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#the-ad-account-i-want-to-select-is-greyed-out", 
            "text": "If you are not an admin of the  business  linked to an ad account, you will not be able to add it. This is because we will not be able to add our System User for attribution and analytics purposes. To check whether you are a business admin, please visit the  business's settings page . If you can see yourself listed, and you can see that your role is shown as admin (see image below), you should be able to complete setup. Otherwise, please request that an admin at your business complete the setup on the Branch Dashboard.   If you still have questions, please  contact us  and include \"Facebook MMP + Business Admin\" in the subject.", 
            "title": "The ad account I want to select is greyed out"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#i-see-a-warning-underneath-my-ad-account-saying-that-i-need-to-be-an-admin", 
            "text": "If an ad account is not linked to a business, then we cannot guarantee that this account setup will succeed. Please visit  the ad account settings page , navigate to the appropriate ad account, and ensure you are an admin (see image below).    If you still have questions, please  contact us  and include \"Facebook MMP + Standalone Ad Account(s)\" in the subject.", 
            "title": "I see a warning underneath my ad account saying that I need to be an admin"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#i-cant-see-the-ad-account-i-want-to-use-at-all", 
            "text": "Please try logging out and logging back in on Facebook. Note the email address that you use. If you still do not see ad accounts, please visit  business.facebook.com  and ensure that you use the same email address / Facebook account. If you still cannot figure this out, please  contact us  and include \"Facebook MMP + Missing Ad Account(s)\" in the subject.", 
            "title": "I can't see the ad account I want to use at all"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#what-is-the-difference-between-your-previous-facebook-ads-product-and-the-new-facebook-ads-product", 
            "text": "Branch is now a Facebook Mobile Measurement Partner (MMP). This means we are partnering with Facebook to more accurately attribute your installs, opens and custom events back to Facebook ad campaigns!   The major differences: we can use this product without a Branch deep link. No need to manually create Branch links and add them to Facebook ads!   If you use a Branch deep link, we will still return the Branch deep link information in app so that you can deep link your users to content. Attributed events will  not  have the Branch deep link information, but rather the Facebook ad campaign information. This info cannot be passed along to third parties via our Data Integrations.", 
            "title": "What is the difference between your previous Facebook Ads product, and the new Facebook Ads product?"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#how-do-i-upgrade-from-the-old-facebook-integration-to-the-new-facebook-integration", 
            "text": "Easy. Navigate to  Facebook within the Ads Management portal . Choose \"Connect with Facebook\" and follow the guide to  set up the integration with Facebook MMP .  The moment you complete this signup flow, we will upgrade you to getting the full MMP functionality! Now installs and other analytics will include info on campaign, ad set, ad, and creative from Facebook.", 
            "title": "How do I upgrade from the old Facebook integration to the new Facebook integration?"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#i-think-i-previously-had-facebook-enabled", 
            "text": "...but now when I navigate to  Facebook within the Ads Management portal , I just see \"Connect with Facebook\". What gives?  We've hidden the old Facebook setup flow. Please choose \"Connect with Facebook\" and follow the guide to  set up the integration with Facebook MMP .  The previous signup flow is no longer supported. If for some reason you need to access the previous signup flow, please  contact us  and include \"Facebook MMP + legacy signup flow\" in the subject.", 
            "title": "I think I previously had Facebook enabled..."
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#what-happens-to-campaigns-in-which-im-using-deep-links", 
            "text": "We still highly recommend you use links in ads.  Studies have shown  that when you deep link your users, they have a better experience and retention is higher!  When you put a Branch link in a Facebook ad, we still return this link to your app, so that users can be deep linked. Deep linking functions exactly as it did before.", 
            "title": "What happens to campaigns in which I'm using deep links?"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#do-i-need-to-remove-deep-links-from-my-facebook-ads", 
            "text": "No. In fact we recommend you use deep links. See the previous question.", 
            "title": "Do I need to remove deep links from my Facebook ads."
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#does-this-new-facebook-mmp-functionality-cover-web-campaigns", 
            "text": "Generally, no. Facebook MMP allows us to measure Facebook app install and app engagement ads. However, in some cases, we are able to attribute web events that occur  after  an app install/engagement ad  back  to that ad. This is because we can link together web and app user identifiers as part of our People-Based Attribution product.", 
            "title": "Does this new Facebook MMP functionality cover web campaigns?"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#can-i-get-the-data-out", 
            "text": "Warning  Data Integrations will never include events attributed to Facebook. This is because we cannot share device-level Facebook attribution data with third parties.   There are many ways to access data pertaining to Facebook.   You can see analytics on impressions, clicks, installs, opens and conversion events on various pages of the  Branch Dashboard , as well as the  Query API .  If you have signed Facebook's  \"Advanced Mobile Measurement\" agreement (\"Data Use Terms for Advanced Mobile App Measurement\") , then you can get device level data out via  Webhooks , the  Data Export API , and  CSV Exports . If you have not signed this agreement, any event attributed to a Facebook ad will look like an organic event when accessed via Webhooks, the Data Export API, and CSV Exports.  We cannot send device-level Facebook attribution data to third parties. Thus we cannot send events attributed to Facebook via Data Integrations. Please instead consider analyzing this data in-house (using Webhooks, the Data Export API, or CSV Exports), or using the Branch Dashboard for all of your analytics and attribution needs. If you have analytics needs that are not met by the Branch Dashboard, please  contact us  and include \"Facebook MMP + Feature Request\" in the subject.     Branch feature  Facebook data included      Dashboard visualizations  Pre-aggregated analytics    Query API  Pre-aggregated analytics    Liveview  Device-level analytics *    Data Export API  Device-level analytics *    CSV Exports  Device-level analytics *    Webhooks  Device-level analytics *    Data Integrations  Not supported     (*) You must have signed you have signed Facebook's  \"Advanced Mobile Measurement\" agreement (\"Data Use Terms for Advanced Mobile App Measurement\")  to view this data", 
            "title": "Can I get the data out?"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#the-data-on-facebook-and-the-data-on-branch-does-not-line-up", 
            "text": "Please see the section below,  Sources of Discrepancies between Facebook and Branch .", 
            "title": "The data on Facebook and the data on Branch does not line up!"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#facebook-ads-advanced-options", 
            "text": "", 
            "title": "Facebook Ads Advanced Options"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#facebook-mmp-event-options", 
            "text": "Tip  To see the options below on the Branch Dashboard,  click here .   Branch + Facebook MMP allows you to attribute events back to your Facebook ad campaigns. Branch sends events to Facebook, along with metadata including advertising ID. Facebook then returns info on the ad that the user last viewed or clicked, if any. Branch then surfaces this on our Dashboard, and conditionally* makes this data available in our  Data Feeds  product.  Partners have several options when it comes to sending events to Facebook. These are discussed below.  (*) You must have signed the  Data Use Terms for Advanced Mobile App Measurement", 
            "title": "Facebook MMP event options"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#tracking-installs", 
            "text": "Branch sends all installs to Facebook. Facebook de-duplicates installs on their end. If you have the Facebook SDK and/or another MMP, these also send installs to Facebook's backend. This will not result in duplicate installs, since Facebook de-dupes them.", 
            "title": "Tracking installs"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#tracking-reinstalls-and-opens", 
            "text": "Warning  Facebook does not de-duplicate custom app events on their backend. So if you have the Facebook SDK integrated or another MMP tracking app opens, choose option 1 below.   When tracking reinstalls and opens, you have 3 options:   use Branch name (branch_open) : This allows us to get attribution data from Facebook, but without it counting as an app open. Use this option if you have the Facebook SDK integrated or are testing with another MMP. Since the Facebook SDK or other MMP is already sending fb_mobile_activate_app, you do not want Branch to send this a second time. (Default)  use Facebook name (fb_mobile_activate_app) : Branch will send the exact event used by Facebook for tracking app opens. Use this option if you do not have the Facebook SDK and you are not tracking opens with another MMP, and you would like Branch to help Facebook record opens.  disable : Use this option if you do not want Branch attributing opens at all. In some cases, we may still be able to attribute opens based on previously retrieved attribution data from Facebook. But we will not send any opens to Facebook in order to get attribution data back.", 
            "title": "Tracking reinstalls and opens"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#tracking-other-conversion-events", 
            "text": "Warning  Facebook does not de-duplicate custom app events on their backend. If you are tracking conversion events with the Facebook SDK or another MMP, choose option 1 below.   It's possible to track app events using only Branch! You can  track the events  with Branch once, and then we send them to Facebook as well as other analytics systems. Use the  v2/event logging methods  outlined here.  When tracking add to cart, purchase, and other Facebook app events, you have 3 options:   use Branch name : This allows us to get attribution data from Facebook, but without it counting as a purchase, add to cart, etc. Use this option if you have the Facebook SDK integrated or are testing with another MMP, and you already track app events via one of those two methods. Since the Facebook SDK or other MMP is already sending events to Facebook, you do not want Branch to send these a second time. (Default)  use Facebook name : Branch will send the exact event used by Facebook for tracking app events. Use this option if you are not already tracking app events with the Facebook SDK or another MMP, and you would like Branch to help Facebook record these events.  disable : Use this option if you do not want Branch attributing these conversion events. In some cases, we may still be able to attribute these conversion events based on previously retrieved attribution data from Facebook. But we will not send any conversion events to Facebook in order to get attribution data back.", 
            "title": "Tracking other conversion events"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#mapping-of-branch-event-names-to-facebook-events", 
            "text": "Branch event name  Facebook MMP _eventName      ACHIEVE_LEVEL  fb_mobile_level_achieved    ADD_PAYMENT_INFO  fb_mobile_add_payment_info    ADD_TO_CART  fb_mobile_add_to_cart    ADD_TO_WISHLIST  fb_mobile_add_to_wishlist    COMPLETE_REGISTRATION  fb_mobile_complete_registration    COMPLETE_TUTORIAL  fb_mobile_tutorial_completion    INITIATE_PURCHASE  fb_mobile_initiated_checkout    PURCHASE  fb_mobile_purchase    RATE  fb_mobile_rate    SEARCH  fb_mobile_search    SPEND_CREDITS  fb_mobile_spent_credits    UNLOCK_ACHIEVEMENT  fb_mobile_achievement_unlocked    VIEW_ITEM  fb_mobile_content_view", 
            "title": "Mapping of Branch event names to Facebook events"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#mapping-of-branch-metadata-to-facebook-metadata", 
            "text": "Branch Key-Value Pair  Facebook MMP Key-Value Pair  Facebook event(s) supported      commerce_data.revenue  _valueToSum  fb_mobile_add_to_cart, fb_mobile_add_to_wishlist, fb_mobile_initiated_checkout, fb_mobile_purchase, fb_mobile_spent_credits, fb_mobile_content_view    commerce_data.currency  fb_currency  fb_mobile_add_to_cart, fb_mobile_add_to_wishlist, fb_mobile_initiated_checkout, fb_mobile_purchase, fb_mobile_content_view    content_items[0].$sku  fb_content_id  fb_mobile_add_to_cart, fb_mobile_add_to_wishlist, fb_mobile_tutorial_completion, fb_mobile_initiated_checkout, fb_mobile_purchase, fb_mobile_rate, fb_mobile_spent_credits, fb_mobile_content_view    content_items[0].$product_category  fb_content_type  fb_mobile_add_to_cart, fb_mobile_add_to_wishlist, fb_mobile_initiated_checkout, fb_mobile_purchase, fb_mobile_rate, fb_mobile_search, fb_mobile_spent_credits, fb_mobile_content_view    content_items[0].$quantity  fb_num_items  fb_mobile_initiated_checkout, fb_mobile_purchase    content_items[0].$rating  _valueToSum  fb_mobile_rate    content_items[0].$rating_max  fb_max_rating_value  fb_mobile_rate    event_data.search_query  fb_search_string  fb_mobile_search    content_items[0].$og_description  fb_description  fb_mobile_achievement_unlocked    custom_data.fb_payment_info_available  fb_payment_info_available  fb_mobile_initiated_checkout    custom_data.level  fb_level  fb_mobile_level_achieved    custom_data.fb_success  fb_success  fb_mobile_add_payment_info, fb_mobile_tutorial_completion, fb_mobile_search    custom_data.fb_registration_method  fb_registration_method  fb_mobile_complete_registration     Currently Facebook appears to only support sending one fb_content_id (etc) per event, whereas Branch allows you to send many. To provide as much functionality as possible, we choose the first content_item and search it for key-value pairs that can be sent to Facebook.", 
            "title": "Mapping of Branch metadata to Facebook metadata"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#tracking-custom-events", 
            "text": "In addition to tracking installs and Facebook app events (see  Tracking other conversion events  above), you can also have Branch attribute custom events. To do so, we must send those events to Facebook.  When tracking custom events that have no equivalent  Facebook App Event , you have 2 options:   enable : Branch will send custom events to Facebook. this allows us to get attribution data from Facebook. (default)  disable : Use this option if you do not want Branch attributing custom events. In some cases, we may still be able to attribute these custom events based on previously retrieved attribution data from Facebook. But we will not send any custom events to Facebook in order to get attribution data back.", 
            "title": "Tracking custom events"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#migrating-from-the-existing-facebook-integration-to-mmp", 
            "text": "Note  You can no longer see the previous Facebook onboarding flow that required you to copy-paste your Facebook app secret. Please use the \"Authenticate with Facebook\" option instead.   If you have been using our integration with Facebook prior to February 14, 2018, then we highly recommend that you upgrade to our new integration that includes MMP.   We are now certified by Facebook as a Mobile Measurement Partner! Branch can now help you attribute installs, opens, and conversion events to Facebook like never before.  This integration includes full support for Facebook, Instagram, and the Audience Network. We also automatically pull in impressions and clicks from Facebook and surface those alongside your clicks on Branch links. The deep linking experience your users love is still supported.   Instructions on how to get set up with Facebook MMP are  here . Note that this will replace your existing credentials on our backend. Instead of copy-pasting your Facebook app secret into the Branch Dashboard, you can now simply click through the normal Facebook login flow.  Branch will now automatically surface Facebook campaign, ad set, and ad information on the Branch Dashboard's visualizations! This isn't limited to  Ads Analytics  -- it also includes cross-channel analytics such as  Source Analytics .", 
            "title": "Migrating from the existing Facebook integration to MMP"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#sources-of-discrepancies-between-facebook-and-branch", 
            "text": "When using Branch as your Facebook MMP, you may notice some data discrepancies between the Branch dashboard and the Facebook dashboard if not configured correctly. We have highlighted several sources of discrepancies if they are present after you have onboarded with Facebook on the Branch dashboard.   There are many reasons why you may see different numbers on Facebook and Branch. Please note that we have one system for tracking impressions and clicks (via the Facebook Insights API) and a different system for tracking installs, reinstalls, opens and conversion events (via a private Facebook API). When trying to figure out differences, it's best to pick one event at a time (e.g. clicks or installs) and focus on causes of discrepancies there.  The first two sections below covers common causes of discrepancies: attribution windows and timezones. The following sections then provide more steps on diagnosing and troubleshooting specific problems.", 
            "title": "Sources of Discrepancies between Facebook and Branch"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#attribution-windows", 
            "text": "An attribution window is the maxiumum amount of time between an initial action (click or impression) and a conversion event (install or open) for which you attribute that conversion event as occuring  because of  that initial action.  Example with 3 day view attribution window: If a user views your ad and 2 days later installs your app, that install would be attributed to that ad view. However if the user views your ad and 4 days later installs the app, that install would be considered an organic install and would NOT be attributed to that ad view.  You can read more in our documentation here:  https://docs.branch.io/pages/dashboard/unified-analytics/#attribution-windows  If one of your attribution windows on the Branch dashboard is different than the corresponding window on the Facebook dashboard, the data between the two will not align. You can mitigate this by changing one of more of your attribution windows on the Branch dashboard, or changing your Facebook dashboard for the given ad account.  There are four Branch attribution windows, and two Facebook attribution windows. This chart shows which Facebook window name each Branch window name corresponds to:     Branch window name  Facebook window name      Click to install  Click Window    Click to session start  Click Window    Click to conversion event  Click Window    Impression to install  View Window    Impression to session start  View Window    Impression to conversion event  View Window     Change your Facebook attribution windows  In order to update your Facebook Attribution window for a particular ad account, you can go to  https://business.facebook.com/ads/manager/account_settings/information . Choose the account in the dropdown in the upper-left corner. As long as you're an admin on that account, you should see a section 'Attribution' at the top-right, and an ability to edit the Click or View window or both.  Change your Branch attribution windows  Alternatively or in addition, you could update any of your four Branch attribution windows. To do so go to the  Link Settings  section of the Branch dashboard, and scroll down to the 'Attribution Windows' section and expand it. Alter any of the four windows listed in the chart above to match the corresponding Facebook window, and then save at the bottom of the page.  Reporting based on time of impression or time of conversion  Facebook and Branch may report the same install as occurring on different days, if the impression is on one day but the install is on another day.  Background:  Facebook by defaults reports installs based on the day that the impression occurred. They also allow you to see reports based on the day that the install occurred.  Branch always reports installs based on the date of install, never the date of impression.  Let's illustrate this with a scenario:  User views an ad on Apil 1, clicks it, then installs the app on April 2.  By default, Facebook reports the install as occurring on April 1. However, when pulling data from the insights API, you can specify option action_report_time=conversion. This causes Facebook to report that the install occurred on April 2.  Branch will always report the install as having occurred on April 2.", 
            "title": "Attribution Windows"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#timezones", 
            "text": "Please make sure the timezone is the same for your Facebook ad account and your Branch account.   You can see the timezone used by your Branch account  here .  You can see the timezone used by your Facebook ad account  here . If you are using multiple ad accounts with Branch, be sure to align the timezones of each of them.  If you are unable to align all timezones, you may notice some data on the Branch Dashboard does not line up exactly with data on the Facebook Dashboard. However, data will not be lost, but merely shifted between days. Summing figures over longer periods of time should greatly diminish the effect of having inconsistent time zones.", 
            "title": "Timezones"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#other-common-issues", 
            "text": "", 
            "title": "Other common issues"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#issue-with-ios-10-and-limit-ad-tracking", 
            "text": "In iOS 10, Apple broke the ability for app developers to collect the  IDFA  if the user had enabled  Limit Ad Tracking . In this case, Branch and Facebook cannot compare notes to see who drove the install. This will account for about 15% discrepancy in counts across both platforms, where Branch's tracked installs will be lower.", 
            "title": "Issue with iOS 10 and Limit Ad Tracking"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#not-collecting-advertising-id", 
            "text": "If you see absolutely 0 data coming through from your integration, it's possible that you're not collecting Google Advertising ID (GAID) on Android or IDFA on iOS.   iOS: Add the AdSupport.framework and read this extra info about  submitting  to the store.  Android: Add Google Play Services so that we can collect GAID. See  here .", 
            "title": "Not Collecting Advertising ID"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#installs-counted-as-reinstalls-opens-on-branch", 
            "text": "One discrepancy root cause we've seen before is the scenario where Branch will classify an install as a reinstall or open. We remember the history of a particular user via their IDFA or Google Advertising ID (in addition to using a few other methods) and will detect whether the user is actually a new user or a returning user who had previously uninstalled your app. Facebook has a different mechanism that is limited to 180 days. Branch in some cases has detected reinstalls that occurred more than a year later.", 
            "title": "Installs Counted as Reinstalls, Opens on Branch"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#dont-use-setdebug", 
            "text": "Facebook ads are incompatible with  debug mode , as this prevents us from sending the correct hardware ID to Facebook.", 
            "title": "Don't Use setDebug"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#discrepancies-with-impressions-and-clicks", 
            "text": "", 
            "title": "Discrepancies with Impressions and Clicks"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#1-i-dont-see-any-clicks-or-installs-on-the-branch-dashboard", 
            "text": "First, be sure you've set up the Facebook integration! Work through  these steps  and ensure you reach the bottom. You should have at least one ad account enabled, and a Facebook app id listed.  Second, make sure you're running ads that are resulting in installs, reinstalls, or opens. Once you see installs, you should shortly start seeing clicks. For more, see the next FAQ item.  If you're unable to see installs, reinstalls, or opens on the Branch Dashboard, skip down to the section below:  I don't see any installs, reinstalls or opens on the Branch Dashboard .", 
            "title": "1. I don't see any clicks or installs on the Branch Dashboard"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#2-i-see-installs-on-the-facebook-dashboard-but-no-clicks", 
            "text": "Note  Branch will only show impressions and clicks for campaigns that have installs, reinstalls, or opens. If you have campaigns that have not resulted in these app-based outcomes, we will hide them. This is to prevent massively inflating analytics on the Branch Dashboard with data that is not relevant. If you have feedback on this, please  contact us  and include \"Facebook MMP + clicks\" in the subject.   If you turned on the integration within the last hour, then you may need to refresh the Branch Dashboard to see clicks. We automatically start a background job to pull in impressions and clicks from Facebook the first time you visit the  Ads Analytics  page after enabling Facebook.  If it has been longer than an hour since you (1) enabled the MMP integration then (2) visited the Ads Analytics page then (3) pressed refresh and (4) see installs but still no clicks, then please  contact us  and put \"Facebook MMP + 0 clicks\" in the subject. Please include:    Branch app id  Facebook ad account id  One Facebook campaign name for which you have clicks and installs  Date range  For every day in date range, the number of clicks Facebook is reporting for this campaign - include both a table and a screenshot  For every day in date range, the number of installs Facebook is reporting for this campaign - include both a table and a screenshot", 
            "title": "2. I see installs on the Facebook Dashboard, but no clicks"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#3-i-see-clicks-on-the-branch-dashboard-but-the-numbers-look-different-from-what-i-see-on-the-facebook-dashboard", 
            "text": "If you are looking at impressions/clicks for the current day:  If the numbers line up pretty closely between Branch and Facebook, then it's possible the Facebook numbers are slightly more recent. The Facebook Insights API refreshes every 15 minutes. Branch tries to pull updated numbers as often as possible.  If the numbers do not line up closely, but you recently started a new campaign, it may be that Branch has not yet pulled in data for that campaign. The numbers should line up much more closely within an hour. If they do not, then please  contact us  and put \"Facebook MMP + Click Dicrepancies\" in the subject. Please include:    Branch app id  Facebook ad account id  One Facebook campaign name for which you have clicks and installs  Date range  For every day in date range, the number of clicks Facebook is reporting for this campaign - include both a table and a screenshot  For every day in date range, the number of installs Facebook is reporting for this campaign - include both a table and a screenshot    If you are looking at impressions/clicks for a past day:  When you initially enable the Facebook integration, then visit the  Ads Analytics  page, Branch will start fetching impressions and clicks for the most recent several days. If you go back beyond 7 days, we may not have impressions and click data. If you need this data, please  contact us  and include \"Facebook MMP + Loading Old Clicks\" in the subject. Please include:   Branch app id  Facebook ad account id  One Facebook campaign name for which you have clicks and installs  Date range", 
            "title": "3. I see clicks on the Branch Dashboard, but the numbers look different from what I see on the Facebook Dashboard."
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#discrepancies-with-installs-opens-and-conversion-events", 
            "text": "", 
            "title": "Discrepancies with Installs, Opens and Conversion Events"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#1-i-dont-see-any-installs-reinstalls-or-opens-on-the-branch-dashboard", 
            "text": "First, be sure you've set up the Facebook integration! Work through  these steps  and ensure you reach the bottom. You should have at least one ad account enabled, and a Facebook app id listed.  Second, make sure you're running ads that are resulting in installs, reinstalls, or opens.  Third, on the Facebook Dashboard, locate a campaign with installs, reinstalls, or opens. Determine the ad account id for which you are running an app campaign. Then navigate to the  Facebook page under Partner Management  and make sure that ad account id is listed as part of the completed signup process. It should appear here (two ad accounts are shown as enabled in the screenshot, though the ad account ids are blurred out):   Fourth, make sure you have installs, reinstalls, or opens that have occurred after you enabled the Branch + Facebook integration. We cannot pull historical device-level data, as that's not how the Facebook APIs are architected. You should enable Branch + Facebook, wait for new installs to occur, then check the  Ads Analytics  page.  If after all this you're still not seeing installs, please  contact us  and include \"Facebook MMP + 0 installs\" in the subject. Please include:   Branch app id  Facebook ad account id  One Facebook campaign name for which you have installs  Date range  For every day in date range, the number of installs Facebook is reporting - include both a table and a screenshot", 
            "title": "1. I don't see any installs, reinstalls or opens on the Branch Dashboard"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#2-i-see-installs-reinstalls-or-opens-on-the-branch-dashboard-but-the-numbers-look-different-from-what-i-see-on-the-facebook-dashboard", 
            "text": "If you've made it this far, the integration between Branch + Facebook is at least somewhat functional! Time to identify why numbers are not lining up.  Try comparing (1) just installs, and (2) just for one campaign. On the Branch  Ads Analytics  page, you can view data for just one campaign by choosing \"Add Filter\", selecting \"campaign\" from the first dropdown, and the individual campaign name from the second dropdown. Again, try to get numbers to line up between Facebook and Branch just for installs on one campaign.  First, make sure the attribution windows line up between Facebook and Branch. You can read more on this  above .  Second, make sure the timezones line up between Facebook and Branch. You can read more on this  above .  Note that attribution windows are not applied to events that occurred in the past. So if you have a 30-day attribution window for click-to-install on Branch, and a 7-day window for clicks on Facebook, once you change the Branch click-to-install attribution window to 7 days, it will not automatically update historical numbers. Instead, you'll need to wait for new installs to occur under the stricter 7-day Branch click-to-install attribution window. The next day you should be able to come back and look at just the current day's install numbers, and they should line up more closely.  If after all this you're still seeing discrepancies, please  contact us  and include \"Facebook MMP + Install Discrepancies\" in the subject. Please include:   Branch app id  Facebook ad account id  One Facebook campaign name for which you have clicks and installs  Date range  Your Facebook attribution window - include both a table and a screenshot  For every day in date range, the number of installs Facebook is reporting - include both a table and a screenshot  For every day in date range, the number of installs Branch is reporting - include both a table and a screenshot    Note  In some rare cases, we've seen partners running multiple Facebook campaigns with the same name. In this case, the Branch Dashboard will combine stats for all of these campaigns under the same name. We still retain this data separately on our backend, as there are different Facebook campaign ids. While we do not expose this on the Branch Dashboard, you can pull statistics by campaign id via the  Query API .", 
            "title": "2. I see installs, reinstalls or opens on the Branch Dashboard, but the numbers look different from what I see on the Facebook Dashboard"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#3-i-dont-see-any-conversion-events-on-the-branch-dashboard", 
            "text": "Be sure you are tracking v2/events -  learn more from our v2/event docs .  Be sure you are opting to send conversion events to Facebook - learn more from the section  Facebook MMP event options  above.  Be reasonably confident that users coming from Facebook ads are completing conversion events. If you have, for example, only a small percentage of users completing purchases, and only a small percentage of users downloading your app from Facebook, it's possible that there is no overlap between users making purchases and users coming from Facebook.  If after all this you're still seeing discrepancies, please  contact us  and include \"Facebook MMP + Install Discrepancies\" in the subject. Please include:   Branch app id  Facebook ad account id  One Facebook campaign name for which you have clicks and installs  Date range  Your Facebook attribution window - include both a table and a screenshot  For every day in date range, the number of installs Facebook is reporting - include both a table and a screenshot  For every day in date range, the number of installs Branch is reporting - include both a table and a screenshot  For every day in date range, the number of conversion events Facebook is reporting - include both a table and a screenshot  For every day in date range, the number of conversion events Branch is reporting - include both a table and a screenshot", 
            "title": "3. I don't see any conversion events on the Branch Dashboard"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#4-i-see-conversion-events-on-the-branch-dashboard-but-the-numbers-look-different-from-what-i-see-on-the-facebook-dashboard", 
            "text": "We have not encountered any issues here so far. Please see  I see installs, reinstalls or opens on the Branch Dashboard, but the numbers look different from what I see on the Facebook Dashboard  for steps to follow, and for information to send to us if we need to debug together.", 
            "title": "4. I see conversion events on the Branch Dashboard, but the numbers look different from what I see on the Facebook Dashboard"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#troubleshooting-deep-linking", 
            "text": "", 
            "title": "Troubleshooting deep linking"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#intercepting-deep-links-before-branch", 
            "text": "If you use Branch deep links in Facebook app ads, please check the following.  We recently discovered an issue where an app was calling Facebook's SDK to fetch the deferred app link within their iOS and Android app. Branch calls uses this same mechanism via a direct API integration, but if Facebook's SDK retrieves it before we do, Branch will not see any deep link data. Please ensure to comment out any calls to the following API within your app:   Android: fetchDeferredAppLink  iOS: fetchDeferredAppLink", 
            "title": "Intercepting Deep Links Before Branch"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#testing-deep-linking-from-ads", 
            "text": "Unfortunately, the demo/preview ads used during the ads creation flow on Facebook use a different mechanism than live Facebook ads.  This prevents you from testing deep linking from your Facebook ads . Do not waste time trying to get this to work. We've confirmed with Facebook representatives that this is broken.  The only way to test the deep linking functionality is outside of the actual ads system is a helper tool from Facebook. Follow these instructions to test the deep linking functionality:   Head to the  Ads tester tool  Choose the app that you're advertising with  Scroll down to the button that says 'Test Deep Link'  Paste in the Branch link  Check 'Send Deferred'  Click 'Send to iOS/Android'  Install the app and it should deep link!    Note the following common mistakes for testing   If you reset the GAID or IDFA on a device, you must uninstall Facebook and re-install prior to testing. Facebook does not update the IDFA/GAID every time it's opened.  Send deferred does not require a notification to be sent or to be clicked. Checking \"Send Deferred\" will automatically queue up a match for the test device with the deep link data. The notifiation is completely separate from deferred deep linking.  The Facebook account on the desktop where you click \"Send Deferred\" must match the account logged into the test device for deferred deep link data to be queued up. Note that we've observed issues where you log in and out of multiple accounts on test devices that cause Facebook to not correctly queue up a match.  If you see that someone liked your ad, do not bother trying to click and test it. Clicking your own, live advertisement that shows up in notifications will not deep link.", 
            "title": "Testing Deep Linking from Ads"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#issues-reading-facebook-app-links", 
            "text": "If Facebook is having trouble reading the App Links from the Branch link, you might see messages like these while trying to test out the flow. This means that there is something corrupted in the OG tags causing Facebook to not parse your link.    Rescrape the OG Tags  You can test the OG tags using the  OG tag tester tool  provided by Facebook:   Paste the Branch Link into the Input URL box.  Click on the Show existing scrape information button.  Examine errors regarding App Links from the output window.  Click on the Fetch New Scrape Information button. This last step typically resolves this problem if you are certain that your Branch Link Settings are correct.    You can further automate the rescraping process by using this command after you create a new link and before you use it for any ads:  curl --insecure  https://graph.facebook.com/?id=[YOUR-URL-TO-SCRAPE] scrape=true    If the OG tag tester continues to report problems   Examine your  Link Settings  and ensure that for all platforms (for which an app is available), that a URI scheme and a link to the app in the Play/App Store is configured. If you are using a Custom URL for your iOS Redirect, then you need to append  ?id[10-digit App Store ID]  to the URL. This is necessary in order to fully generate the App Links and OG tags that the Facebook scraper expects to find.  For example, if your App Store URL is  https://itunes.apple.com/us/app/my-app-name/id1234567890 , then your Custom URL value should be  https://example.com?id1234567890    If errors from the output window pertain to OG tags i.e. missing title, description etc. then examine link OG tags by appending  ?debug=true  as described on the  Integration Testing page .  If you haven't set OG tags on a per link level, then please check your Dashboard's global Social Media Display Customization settings from the  Link Settings  page.   Use a direct deep link  As a last resort, you can manually input a direct deep link. To retrieve this:   Go to Facebook's  Open Graph Object Debugger  Input the Branch link you want to use for your ad  Click  Fetch new scrape information  Find the  al:ios:url  line (it should look like  meta property=\"al:ios:url\" content=\"myapp://open?link_click_id=link-242052337263342024\" / )  Copy the value of this ( myapp://open?link_click_id=link-242052337263342024 ) and input it as the Deep Link value of your ad   If none of these approaches work, please reach out to   immediately.", 
            "title": "Issues Reading Facebook App Links"
        }, 
        {
            "location": "/pages/deep-linked-ads/facebook-ads-faq/#known-issue-with-app-restrictions", 
            "text": "We recently discovered a bug within the Facebook system that prevents App Links from being read by the robot if you change any of these values from the defaults in your Advanced Facebook App Settings tab. Please make sure   Contains Alcohol is set to  No  Age Restriction is set to  Anyone (13+)  Social Discovery is set to  Yes  Country Restricted is set to  No   It has to look like this  exactly :   No IP Whitelists  Because Branch has a large distribution of API servers that will be making requests to Facebook on behalf of your app, you cannot have an IP whitelist in your  Facebook advanced settings  and still have this integration work. Please remove any IPs from this setting if they are present.", 
            "title": "Known Issue with App Restrictions"
        }
    ]
}